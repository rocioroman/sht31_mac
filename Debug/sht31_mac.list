
sht31_mac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008420  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  080085d0  080085d0  000095d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089e0  080089e0  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080089e0  080089e0  000099e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089e8  080089e8  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089e8  080089e8  000099e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089ec  080089ec  000099ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080089f0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007cc  200001d4  08008bc4  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009a0  08008bc4  0000a9a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138c8  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b11  00000000  00000000  0001dacc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  000205e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d0a  00000000  00000000  000216d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a81e  00000000  00000000  000223da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152ef  00000000  00000000  0004cbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd86a  00000000  00000000  00061ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015f751  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005820  00000000  00000000  0015f794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00164fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080085b8 	.word	0x080085b8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	080085b8 	.word	0x080085b8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96a 	b.w	8000f54 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14e      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	458c      	cmp	ip, r1
 8000ca8:	4686      	mov	lr, r0
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	d962      	bls.n	8000d76 <__udivmoddi4+0xde>
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0320 	rsb	r3, r2, #32
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f f68c 	uxth.w	r6, ip
 8000cce:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb04 f106 	mul.w	r1, r4, r6
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cee:	f080 8112 	bcs.w	8000f16 <__udivmoddi4+0x27e>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 810f 	bls.w	8000f16 <__udivmoddi4+0x27e>
 8000cf8:	3c02      	subs	r4, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	fa1f f38e 	uxth.w	r3, lr
 8000d02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d06:	fb07 1110 	mls	r1, r7, r0, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f606 	mul.w	r6, r0, r6
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x94>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1e:	f080 80fc 	bcs.w	8000f1a <__udivmoddi4+0x282>
 8000d22:	429e      	cmp	r6, r3
 8000d24:	f240 80f9 	bls.w	8000f1a <__udivmoddi4+0x282>
 8000d28:	4463      	add	r3, ip
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	2100      	movs	r1, #0
 8000d34:	b11d      	cbz	r5, 8000d3e <__udivmoddi4+0xa6>
 8000d36:	40d3      	lsrs	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d905      	bls.n	8000d52 <__udivmoddi4+0xba>
 8000d46:	b10d      	cbz	r5, 8000d4c <__udivmoddi4+0xb4>
 8000d48:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e7f5      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d52:	fab3 f183 	clz	r1, r3
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d146      	bne.n	8000de8 <__udivmoddi4+0x150>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xcc>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f0c0 80f0 	bcc.w	8000f44 <__udivmoddi4+0x2ac>
 8000d64:	1a86      	subs	r6, r0, r2
 8000d66:	eb64 0303 	sbc.w	r3, r4, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d0e6      	beq.n	8000d3e <__udivmoddi4+0xa6>
 8000d70:	e9c5 6300 	strd	r6, r3, [r5]
 8000d74:	e7e3      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x204>
 8000d7c:	eba1 040c 	sub.w	r4, r1, ip
 8000d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d84:	fa1f f78c 	uxth.w	r7, ip
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb08 4416 	mls	r4, r8, r6, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb07 f006 	mul.w	r0, r7, r6
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x11c>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x11a>
 8000dac:	4298      	cmp	r0, r3
 8000dae:	f200 80cd 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000db2:	4626      	mov	r6, r4
 8000db4:	1a1c      	subs	r4, r3, r0
 8000db6:	fa1f f38e 	uxth.w	r3, lr
 8000dba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb00 f707 	mul.w	r7, r0, r7
 8000dca:	429f      	cmp	r7, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x148>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x146>
 8000dd8:	429f      	cmp	r7, r3
 8000dda:	f200 80b0 	bhi.w	8000f3e <__udivmoddi4+0x2a6>
 8000dde:	4620      	mov	r0, r4
 8000de0:	1bdb      	subs	r3, r3, r7
 8000de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0x9c>
 8000de8:	f1c1 0620 	rsb	r6, r1, #32
 8000dec:	408b      	lsls	r3, r1
 8000dee:	fa22 f706 	lsr.w	r7, r2, r6
 8000df2:	431f      	orrs	r7, r3
 8000df4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000df8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dfc:	ea43 030c 	orr.w	r3, r3, ip
 8000e00:	40f4      	lsrs	r4, r6
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	0c38      	lsrs	r0, r7, #16
 8000e08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e10:	fa1f fc87 	uxth.w	ip, r7
 8000e14:	fb00 441e 	mls	r4, r0, lr, r4
 8000e18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e20:	45a1      	cmp	r9, r4
 8000e22:	fa02 f201 	lsl.w	r2, r2, r1
 8000e26:	d90a      	bls.n	8000e3e <__udivmoddi4+0x1a6>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e2e:	f080 8084 	bcs.w	8000f3a <__udivmoddi4+0x2a2>
 8000e32:	45a1      	cmp	r9, r4
 8000e34:	f240 8081 	bls.w	8000f3a <__udivmoddi4+0x2a2>
 8000e38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	eba4 0409 	sub.w	r4, r4, r9
 8000e42:	fa1f f983 	uxth.w	r9, r3
 8000e46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1d2>
 8000e5a:	193c      	adds	r4, r7, r4
 8000e5c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e60:	d267      	bcs.n	8000f32 <__udivmoddi4+0x29a>
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d965      	bls.n	8000f32 <__udivmoddi4+0x29a>
 8000e66:	3b02      	subs	r3, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e72:	eba4 040c 	sub.w	r4, r4, ip
 8000e76:	429c      	cmp	r4, r3
 8000e78:	46ce      	mov	lr, r9
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	d351      	bcc.n	8000f22 <__udivmoddi4+0x28a>
 8000e7e:	d04e      	beq.n	8000f1e <__udivmoddi4+0x286>
 8000e80:	b155      	cbz	r5, 8000e98 <__udivmoddi4+0x200>
 8000e82:	ebb8 030e 	subs.w	r3, r8, lr
 8000e86:	eb64 040c 	sbc.w	r4, r4, ip
 8000e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8e:	40cb      	lsrs	r3, r1
 8000e90:	431e      	orrs	r6, r3
 8000e92:	40cc      	lsrs	r4, r1
 8000e94:	e9c5 6400 	strd	r6, r4, [r5]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	e750      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eac:	4094      	lsls	r4, r2
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb8:	fa1f f78c 	uxth.w	r7, ip
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec4:	0c23      	lsrs	r3, r4, #16
 8000ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eca:	fb00 f107 	mul.w	r1, r0, r7
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x24c>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eda:	d22c      	bcs.n	8000f36 <__udivmoddi4+0x29e>
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d92a      	bls.n	8000f36 <__udivmoddi4+0x29e>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eec:	fb08 3311 	mls	r3, r8, r1, r3
 8000ef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef4:	fb01 f307 	mul.w	r3, r1, r7
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x276>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f04:	d213      	bcs.n	8000f2e <__udivmoddi4+0x296>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d911      	bls.n	8000f2e <__udivmoddi4+0x296>
 8000f0a:	3902      	subs	r1, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	1ae4      	subs	r4, r4, r3
 8000f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f14:	e739      	b.n	8000d8a <__udivmoddi4+0xf2>
 8000f16:	4604      	mov	r4, r0
 8000f18:	e6f0      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e706      	b.n	8000d2c <__udivmoddi4+0x94>
 8000f1e:	45c8      	cmp	r8, r9
 8000f20:	d2ae      	bcs.n	8000e80 <__udivmoddi4+0x1e8>
 8000f22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7a8      	b.n	8000e80 <__udivmoddi4+0x1e8>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	e7ed      	b.n	8000f0e <__udivmoddi4+0x276>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e799      	b.n	8000e6a <__udivmoddi4+0x1d2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	e7d4      	b.n	8000ee4 <__udivmoddi4+0x24c>
 8000f3a:	46d6      	mov	lr, sl
 8000f3c:	e77f      	b.n	8000e3e <__udivmoddi4+0x1a6>
 8000f3e:	4463      	add	r3, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e74d      	b.n	8000de0 <__udivmoddi4+0x148>
 8000f44:	4606      	mov	r6, r0
 8000f46:	4623      	mov	r3, r4
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e70f      	b.n	8000d6c <__udivmoddi4+0xd4>
 8000f4c:	3e02      	subs	r6, #2
 8000f4e:	4463      	add	r3, ip
 8000f50:	e730      	b.n	8000db4 <__udivmoddi4+0x11c>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b5b0      	push	{r4, r5, r7, lr}
 8000f5a:	b0aa      	sub	sp, #168	@ 0xa8
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5e:	f000 fea0 	bl	8001ca2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f62:	f000 f899 	bl	8001098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f66:	f000 f9c7 	bl	80012f8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000f6a:	f000 f939 	bl	80011e0 <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f6e:	f000 f995 	bl	800129c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000f72:	f000 f8f5 	bl	8001160 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000f76:	f000 f961 	bl	800123c <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SHT31_Status status_init = SHT31_Init(&hi2c1, SHT31_ADDRESS_A, SHT31_MEASUREMENT_NOSTRETCH_MEDIUM);
 8000f7a:	f242 420b 	movw	r2, #9227	@ 0x240b
 8000f7e:	2144      	movs	r1, #68	@ 0x44
 8000f80:	483f      	ldr	r0, [pc, #252]	@ (8001080 <main+0x128>)
 8000f82:	f000 fb5b 	bl	800163c <SHT31_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  if (status_init != SHT31_OK) {
 8000f8c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d019      	beq.n	8000fc8 <main+0x70>
      char fail_msg[] = "Error inicializacion lector\n";
 8000f94:	4b3b      	ldr	r3, [pc, #236]	@ (8001084 <main+0x12c>)
 8000f96:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8000f9a:	461d      	mov	r5, r3
 8000f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fa4:	c407      	stmia	r4!, {r0, r1, r2}
 8000fa6:	7023      	strb	r3, [r4, #0]
      HAL_UART_Transmit(&huart3, (uint8_t*)fail_msg, strlen(fail_msg), HAL_MAX_DELAY);
 8000fa8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff f96f 	bl	8000290 <strlen>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbe:	4832      	ldr	r0, [pc, #200]	@ (8001088 <main+0x130>)
 8000fc0:	f003 fcac 	bl	800491c <HAL_UART_Transmit>
      while (1);
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <main+0x6c>

    /* USER CODE BEGIN 3 */
      float temperature, humidity;

      // Read temperature and humidity
      if (SHT31_ReadTempHum(&temperature, &humidity) == SHT31_OK) {
 8000fc8:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8000fcc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 fb4c 	bl	8001670 <SHT31_ReadTempHum>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d131      	bne.n	8001042 <main+0xea>
          char temp_msg[50];
          sprintf(temp_msg, "Temp: %.2f C\n", temperature);
 8000fde:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fac0 	bl	8000568 <__aeabi_f2d>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4638      	mov	r0, r7
 8000fee:	4927      	ldr	r1, [pc, #156]	@ (800108c <main+0x134>)
 8000ff0:	f005 f9b6 	bl	8006360 <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff f94a 	bl	8000290 <strlen>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	4639      	mov	r1, r7
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	4820      	ldr	r0, [pc, #128]	@ (8001088 <main+0x130>)
 8001008:	f003 fc88 	bl	800491c <HAL_UART_Transmit>

          char hum_msg[50];
          sprintf(hum_msg, "Hum: %.2f %%\n", humidity);
 800100c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff faa9 	bl	8000568 <__aeabi_f2d>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800101e:	491c      	ldr	r1, [pc, #112]	@ (8001090 <main+0x138>)
 8001020:	f005 f99e 	bl	8006360 <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)hum_msg, strlen(hum_msg), HAL_MAX_DELAY);
 8001024:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff f931 	bl	8000290 <strlen>
 800102e:	4603      	mov	r3, r0
 8001030:	b29a      	uxth	r2, r3
 8001032:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
 800103a:	4813      	ldr	r0, [pc, #76]	@ (8001088 <main+0x130>)
 800103c:	f003 fc6e 	bl	800491c <HAL_UART_Transmit>
 8001040:	e018      	b.n	8001074 <main+0x11c>
      } else {
          char error_msg[] = "Error en la lectura\n";
 8001042:	4b14      	ldr	r3, [pc, #80]	@ (8001094 <main+0x13c>)
 8001044:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 8001048:	461d      	mov	r5, r3
 800104a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001052:	6020      	str	r0, [r4, #0]
 8001054:	3404      	adds	r4, #4
 8001056:	7021      	strb	r1, [r4, #0]
          HAL_UART_Transmit(&huart3, (uint8_t*)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 8001058:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff f917 	bl	8000290 <strlen>
 8001062:	4603      	mov	r3, r0
 8001064:	b29a      	uxth	r2, r3
 8001066:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	4806      	ldr	r0, [pc, #24]	@ (8001088 <main+0x130>)
 8001070:	f003 fc54 	bl	800491c <HAL_UART_Transmit>
      }

      // Delay between readings (e.g., 2 seconds)
      HAL_Delay(2000);
 8001074:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001078:	f000 fe88 	bl	8001d8c <HAL_Delay>
  {
 800107c:	e7a4      	b.n	8000fc8 <main+0x70>
 800107e:	bf00      	nop
 8001080:	200001f0 	.word	0x200001f0
 8001084:	080085f0 	.word	0x080085f0
 8001088:	200002cc 	.word	0x200002cc
 800108c:	080085d0 	.word	0x080085d0
 8001090:	080085e0 	.word	0x080085e0
 8001094:	08008610 	.word	0x08008610

08001098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b096      	sub	sp, #88	@ 0x58
 800109c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	2244      	movs	r2, #68	@ 0x44
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f005 f9bd 	bl	8006426 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	463b      	mov	r3, r7
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010be:	f002 f851 	bl	8003164 <HAL_PWREx_ControlVoltageScaling>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010c8:	f000 f9ae 	bl	8001428 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010cc:	f002 f82c 	bl	8003128 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010d0:	4b22      	ldr	r3, [pc, #136]	@ (800115c <SystemClock_Config+0xc4>)
 80010d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010d6:	4a21      	ldr	r2, [pc, #132]	@ (800115c <SystemClock_Config+0xc4>)
 80010d8:	f023 0318 	bic.w	r3, r3, #24
 80010dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010e0:	2314      	movs	r3, #20
 80010e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010e4:	2301      	movs	r3, #1
 80010e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010e8:	2301      	movs	r3, #1
 80010ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010f0:	2360      	movs	r3, #96	@ 0x60
 80010f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f4:	2302      	movs	r3, #2
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010f8:	2301      	movs	r3, #1
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 8001100:	2347      	movs	r3, #71	@ 0x47
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001104:	2302      	movs	r3, #2
 8001106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001108:	2302      	movs	r3, #2
 800110a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 800110c:	2306      	movs	r3, #6
 800110e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4618      	mov	r0, r3
 8001116:	f002 f89b 	bl	8003250 <HAL_RCC_OscConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001120:	f000 f982 	bl	8001428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001124:	230f      	movs	r3, #15
 8001126:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001128:	2303      	movs	r3, #3
 800112a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001130:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001134:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800113a:	463b      	mov	r3, r7
 800113c:	2102      	movs	r1, #2
 800113e:	4618      	mov	r0, r3
 8001140:	f002 fca0 	bl	8003a84 <HAL_RCC_ClockConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800114a:	f000 f96d 	bl	8001428 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800114e:	f003 f9b9 	bl	80044c4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001152:	bf00      	nop
 8001154:	3758      	adds	r7, #88	@ 0x58
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40021000 	.word	0x40021000

08001160 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001164:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <MX_I2C1_Init+0x74>)
 8001166:	4a1c      	ldr	r2, [pc, #112]	@ (80011d8 <MX_I2C1_Init+0x78>)
 8001168:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00505B89;
 800116a:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <MX_I2C1_Init+0x74>)
 800116c:	4a1b      	ldr	r2, [pc, #108]	@ (80011dc <MX_I2C1_Init+0x7c>)
 800116e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001170:	4b18      	ldr	r3, [pc, #96]	@ (80011d4 <MX_I2C1_Init+0x74>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001176:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <MX_I2C1_Init+0x74>)
 8001178:	2201      	movs	r2, #1
 800117a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800117c:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <MX_I2C1_Init+0x74>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001182:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <MX_I2C1_Init+0x74>)
 8001184:	2200      	movs	r2, #0
 8001186:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001188:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <MX_I2C1_Init+0x74>)
 800118a:	2200      	movs	r2, #0
 800118c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800118e:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <MX_I2C1_Init+0x74>)
 8001190:	2200      	movs	r2, #0
 8001192:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001194:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <MX_I2C1_Init+0x74>)
 8001196:	2200      	movs	r2, #0
 8001198:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800119a:	480e      	ldr	r0, [pc, #56]	@ (80011d4 <MX_I2C1_Init+0x74>)
 800119c:	f001 f8aa 	bl	80022f4 <HAL_I2C_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011a6:	f000 f93f 	bl	8001428 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011aa:	2100      	movs	r1, #0
 80011ac:	4809      	ldr	r0, [pc, #36]	@ (80011d4 <MX_I2C1_Init+0x74>)
 80011ae:	f001 fdf1 	bl	8002d94 <HAL_I2CEx_ConfigAnalogFilter>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011b8:	f000 f936 	bl	8001428 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011bc:	2100      	movs	r1, #0
 80011be:	4805      	ldr	r0, [pc, #20]	@ (80011d4 <MX_I2C1_Init+0x74>)
 80011c0:	f001 fe33 	bl	8002e2a <HAL_I2CEx_ConfigDigitalFilter>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011ca:	f000 f92d 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200001f0 	.word	0x200001f0
 80011d8:	40005400 	.word	0x40005400
 80011dc:	00505b89 	.word	0x00505b89

080011e0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <MX_LPUART1_UART_Init+0x50>)
 80011e6:	4a13      	ldr	r2, [pc, #76]	@ (8001234 <MX_LPUART1_UART_Init+0x54>)
 80011e8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <MX_LPUART1_UART_Init+0x50>)
 80011ec:	4a12      	ldr	r2, [pc, #72]	@ (8001238 <MX_LPUART1_UART_Init+0x58>)
 80011ee:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <MX_LPUART1_UART_Init+0x50>)
 80011f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011f6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80011f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001230 <MX_LPUART1_UART_Init+0x50>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80011fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <MX_LPUART1_UART_Init+0x50>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001204:	4b0a      	ldr	r3, [pc, #40]	@ (8001230 <MX_LPUART1_UART_Init+0x50>)
 8001206:	220c      	movs	r2, #12
 8001208:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120a:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <MX_LPUART1_UART_Init+0x50>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001210:	4b07      	ldr	r3, [pc, #28]	@ (8001230 <MX_LPUART1_UART_Init+0x50>)
 8001212:	2200      	movs	r2, #0
 8001214:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001216:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <MX_LPUART1_UART_Init+0x50>)
 8001218:	2200      	movs	r2, #0
 800121a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800121c:	4804      	ldr	r0, [pc, #16]	@ (8001230 <MX_LPUART1_UART_Init+0x50>)
 800121e:	f003 fb2f 	bl	8004880 <HAL_UART_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001228:	f000 f8fe 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000244 	.word	0x20000244
 8001234:	40008000 	.word	0x40008000
 8001238:	00033324 	.word	0x00033324

0800123c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001240:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <MX_USART3_UART_Init+0x58>)
 8001242:	4a15      	ldr	r2, [pc, #84]	@ (8001298 <MX_USART3_UART_Init+0x5c>)
 8001244:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001246:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <MX_USART3_UART_Init+0x58>)
 8001248:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800124c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800124e:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <MX_USART3_UART_Init+0x58>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001254:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <MX_USART3_UART_Init+0x58>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <MX_USART3_UART_Init+0x58>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001260:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <MX_USART3_UART_Init+0x58>)
 8001262:	220c      	movs	r2, #12
 8001264:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <MX_USART3_UART_Init+0x58>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800126c:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <MX_USART3_UART_Init+0x58>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001272:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <MX_USART3_UART_Init+0x58>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <MX_USART3_UART_Init+0x58>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800127e:	4805      	ldr	r0, [pc, #20]	@ (8001294 <MX_USART3_UART_Init+0x58>)
 8001280:	f003 fafe 	bl	8004880 <HAL_UART_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800128a:	f000 f8cd 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200002cc 	.word	0x200002cc
 8001298:	40004800 	.word	0x40004800

0800129c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012a0:	4b14      	ldr	r3, [pc, #80]	@ (80012f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012a2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80012a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80012a8:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012aa:	2206      	movs	r2, #6
 80012ac:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012ae:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012b0:	2202      	movs	r2, #2
 80012b2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	@ (80012f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012b6:	2202      	movs	r2, #2
 80012b8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012bc:	2201      	movs	r2, #1
 80012be:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	@ (80012f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80012cc:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012d2:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80012d8:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012da:	2201      	movs	r2, #1
 80012dc:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012de:	4805      	ldr	r0, [pc, #20]	@ (80012f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012e0:	f001 fdef 	bl	8002ec2 <HAL_PCD_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80012ea:	f000 f89d 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000354 	.word	0x20000354

080012f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	@ 0x28
 80012fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	4b42      	ldr	r3, [pc, #264]	@ (8001418 <MX_GPIO_Init+0x120>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001312:	4a41      	ldr	r2, [pc, #260]	@ (8001418 <MX_GPIO_Init+0x120>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131a:	4b3f      	ldr	r3, [pc, #252]	@ (8001418 <MX_GPIO_Init+0x120>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001326:	4b3c      	ldr	r3, [pc, #240]	@ (8001418 <MX_GPIO_Init+0x120>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	4a3b      	ldr	r2, [pc, #236]	@ (8001418 <MX_GPIO_Init+0x120>)
 800132c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001332:	4b39      	ldr	r3, [pc, #228]	@ (8001418 <MX_GPIO_Init+0x120>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	4b36      	ldr	r3, [pc, #216]	@ (8001418 <MX_GPIO_Init+0x120>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	4a35      	ldr	r2, [pc, #212]	@ (8001418 <MX_GPIO_Init+0x120>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134a:	4b33      	ldr	r3, [pc, #204]	@ (8001418 <MX_GPIO_Init+0x120>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001356:	4b30      	ldr	r3, [pc, #192]	@ (8001418 <MX_GPIO_Init+0x120>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135a:	4a2f      	ldr	r2, [pc, #188]	@ (8001418 <MX_GPIO_Init+0x120>)
 800135c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001360:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001362:	4b2d      	ldr	r3, [pc, #180]	@ (8001418 <MX_GPIO_Init+0x120>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800136e:	f001 ff5f 	bl	8003230 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	4b29      	ldr	r3, [pc, #164]	@ (8001418 <MX_GPIO_Init+0x120>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	4a28      	ldr	r2, [pc, #160]	@ (8001418 <MX_GPIO_Init+0x120>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800137e:	4b26      	ldr	r3, [pc, #152]	@ (8001418 <MX_GPIO_Init+0x120>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001390:	4822      	ldr	r0, [pc, #136]	@ (800141c <MX_GPIO_Init+0x124>)
 8001392:	f000 ff97 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	2140      	movs	r1, #64	@ 0x40
 800139a:	4821      	ldr	r0, [pc, #132]	@ (8001420 <MX_GPIO_Init+0x128>)
 800139c:	f000 ff92 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	481b      	ldr	r0, [pc, #108]	@ (8001424 <MX_GPIO_Init+0x12c>)
 80013b8:	f000 fdf2 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80013bc:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80013c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	4811      	ldr	r0, [pc, #68]	@ (800141c <MX_GPIO_Init+0x124>)
 80013d6:	f000 fde3 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013da:	2320      	movs	r3, #32
 80013dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	480c      	ldr	r0, [pc, #48]	@ (8001420 <MX_GPIO_Init+0x128>)
 80013ee:	f000 fdd7 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013f2:	2340      	movs	r3, #64	@ 0x40
 80013f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	@ (8001420 <MX_GPIO_Init+0x128>)
 800140a:	f000 fdc9 	bl	8001fa0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800140e:	bf00      	nop
 8001410:	3728      	adds	r7, #40	@ 0x28
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000
 800141c:	48000400 	.word	0x48000400
 8001420:	48001800 	.word	0x48001800
 8001424:	48000800 	.word	0x48000800

08001428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800142c:	b672      	cpsid	i
}
 800142e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <Error_Handler+0x8>

08001434 <SHT31_SendCommand>:
} SHT31_INFO;

static SHT31_INFO sht31_sensor;

//Envía comando al sensor
static SHT31_Status SHT31_SendCommand(uint16_t command) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af02      	add	r7, sp, #8
 800143a:	4603      	mov	r3, r0
 800143c:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd[2];
    cmd[0] = (command >> 8) & 0xFF;
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	0a1b      	lsrs	r3, r3, #8
 8001442:	b29b      	uxth	r3, r3
 8001444:	b2db      	uxtb	r3, r3
 8001446:	733b      	strb	r3, [r7, #12]
    cmd[1] = command & 0xFF;
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	737b      	strb	r3, [r7, #13]

    if (HAL_I2C_Master_Transmit(sht31_sensor.hi2c, (sht31_sensor.address << 1), cmd, 2, HAL_MAX_DELAY) != HAL_OK) {
 800144e:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <SHT31_SendCommand+0x4c>)
 8001450:	6858      	ldr	r0, [r3, #4]
 8001452:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <SHT31_SendCommand+0x4c>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	b299      	uxth	r1, r3
 800145a:	f107 020c 	add.w	r2, r7, #12
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	2302      	movs	r3, #2
 8001466:	f000 ffe1 	bl	800242c <HAL_I2C_Master_Transmit>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <SHT31_SendCommand+0x40>
        return SHT31_TRANSMIT_ERROR;
 8001470:	2302      	movs	r3, #2
 8001472:	e000      	b.n	8001476 <SHT31_SendCommand+0x42>
    }
    return SHT31_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000838 	.word	0x20000838

08001484 <SHT31_CRC8>:


// CRC-8 calculation polynomial: x^8 + x^5 + x^4 + 1
static uint8_t SHT31_CRC8(uint8_t *data, int len) {
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xFF;
 800148e:	23ff      	movs	r3, #255	@ 0xff
 8001490:	73fb      	strb	r3, [r7, #15]
	const uint8_t poly = 0x31;
 8001492:	2331      	movs	r3, #49	@ 0x31
 8001494:	733b      	strb	r3, [r7, #12]

	for(uint8_t byte = len; byte; byte--) {
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	73bb      	strb	r3, [r7, #14]
 800149a:	e023      	b.n	80014e4 <SHT31_CRC8+0x60>
		crc ^= *(data++);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	781a      	ldrb	r2, [r3, #0]
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	4053      	eors	r3, r2
 80014a8:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 8; i; i--) {
 80014aa:	2308      	movs	r3, #8
 80014ac:	737b      	strb	r3, [r7, #13]
 80014ae:	e013      	b.n	80014d8 <SHT31_CRC8+0x54>
			crc = (crc & 0x80)? (crc<<1)^poly : (crc<<1);
 80014b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	da08      	bge.n	80014ca <SHT31_CRC8+0x46>
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	b25a      	sxtb	r2, r3
 80014be:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80014c2:	4053      	eors	r3, r2
 80014c4:	b25b      	sxtb	r3, r3
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	e002      	b.n	80014d0 <SHT31_CRC8+0x4c>
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 8; i; i--) {
 80014d2:	7b7b      	ldrb	r3, [r7, #13]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	737b      	strb	r3, [r7, #13]
 80014d8:	7b7b      	ldrb	r3, [r7, #13]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1e8      	bne.n	80014b0 <SHT31_CRC8+0x2c>
	for(uint8_t byte = len; byte; byte--) {
 80014de:	7bbb      	ldrb	r3, [r7, #14]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	73bb      	strb	r3, [r7, #14]
 80014e4:	7bbb      	ldrb	r3, [r7, #14]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1d8      	bne.n	800149c <SHT31_CRC8+0x18>
		}
	}
	return crc;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <SHT31_ReadData>:

// Internal function to get both temperature and humidity in a single I2C transaction
static SHT31_Status SHT31_ReadData(void) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af02      	add	r7, sp, #8
    uint8_t data[6];
    SHT31_Status status = SHT31_SendCommand(sht31_sensor.command);
 80014fe:	4b4c      	ldr	r3, [pc, #304]	@ (8001630 <SHT31_ReadData+0x138>)
 8001500:	891b      	ldrh	r3, [r3, #8]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff ff96 	bl	8001434 <SHT31_SendCommand>
 8001508:	4603      	mov	r3, r0
 800150a:	73fb      	strb	r3, [r7, #15]
    if (status != SHT31_OK) {
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <SHT31_ReadData+0x1e>
        return status;
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	e07d      	b.n	8001612 <SHT31_ReadData+0x11a>
    }

    HAL_Delay(15);  // Wait for measurement to complete
 8001516:	200f      	movs	r0, #15
 8001518:	f000 fc38 	bl	8001d8c <HAL_Delay>

    if (HAL_I2C_Master_Receive(sht31_sensor.hi2c, (sht31_sensor.address << 1), data, 6, HAL_MAX_DELAY) != HAL_OK) {
 800151c:	4b44      	ldr	r3, [pc, #272]	@ (8001630 <SHT31_ReadData+0x138>)
 800151e:	6858      	ldr	r0, [r3, #4]
 8001520:	4b43      	ldr	r3, [pc, #268]	@ (8001630 <SHT31_ReadData+0x138>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	b299      	uxth	r1, r3
 8001528:	1d3a      	adds	r2, r7, #4
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2306      	movs	r3, #6
 8001532:	f001 f893 	bl	800265c <HAL_I2C_Master_Receive>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <SHT31_ReadData+0x48>
        return SHT31_TRANSMIT_ERROR;
 800153c:	2302      	movs	r3, #2
 800153e:	e068      	b.n	8001612 <SHT31_ReadData+0x11a>
    }
    // Verify CRC for temperature
    if (SHT31_CRC8(data, 2) != data[2]) {
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	2102      	movs	r1, #2
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff9d 	bl	8001484 <SHT31_CRC8>
 800154a:	4603      	mov	r3, r0
 800154c:	461a      	mov	r2, r3
 800154e:	79bb      	ldrb	r3, [r7, #6]
 8001550:	429a      	cmp	r2, r3
 8001552:	d001      	beq.n	8001558 <SHT31_ReadData+0x60>
        return SHT31_CRC_ERROR;
 8001554:	2304      	movs	r3, #4
 8001556:	e05c      	b.n	8001612 <SHT31_ReadData+0x11a>
    }

    // Verify CRC for humidity
    if (SHT31_CRC8(data + 3, 2) != data[5]) {
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	3303      	adds	r3, #3
 800155c:	2102      	movs	r1, #2
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ff90 	bl	8001484 <SHT31_CRC8>
 8001564:	4603      	mov	r3, r0
 8001566:	461a      	mov	r2, r3
 8001568:	7a7b      	ldrb	r3, [r7, #9]
 800156a:	429a      	cmp	r2, r3
 800156c:	d001      	beq.n	8001572 <SHT31_ReadData+0x7a>
        return SHT31_CRC_ERROR;
 800156e:	2304      	movs	r3, #4
 8001570:	e04f      	b.n	8001612 <SHT31_ReadData+0x11a>
    }

    uint16_t temperature_raw = (data[0] << 8) | data[1];
 8001572:	793b      	ldrb	r3, [r7, #4]
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	b21a      	sxth	r2, r3
 8001578:	797b      	ldrb	r3, [r7, #5]
 800157a:	b21b      	sxth	r3, r3
 800157c:	4313      	orrs	r3, r2
 800157e:	b21b      	sxth	r3, r3
 8001580:	81bb      	strh	r3, [r7, #12]
    uint16_t humidity_raw = (data[3] << 8) | data[4];
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	b21a      	sxth	r2, r3
 8001588:	7a3b      	ldrb	r3, [r7, #8]
 800158a:	b21b      	sxth	r3, r3
 800158c:	4313      	orrs	r3, r2
 800158e:	b21b      	sxth	r3, r3
 8001590:	817b      	strh	r3, [r7, #10]

    sht31_sensor.temperature = -45 + 175 * (temperature_raw / 65535.0);
 8001592:	89bb      	ldrh	r3, [r7, #12]
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ffd5 	bl	8000544 <__aeabi_i2d>
 800159a:	a321      	add	r3, pc, #132	@ (adr r3, 8001620 <SHT31_ReadData+0x128>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	f7ff f964 	bl	800086c <__aeabi_ddiv>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	a31e      	add	r3, pc, #120	@ (adr r3, 8001628 <SHT31_ReadData+0x130>)
 80015ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b2:	f7ff f831 	bl	8000618 <__aeabi_dmul>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001634 <SHT31_ReadData+0x13c>)
 80015c4:	f7fe fe70 	bl	80002a8 <__aeabi_dsub>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff fafa 	bl	8000bc8 <__aeabi_d2f>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4a16      	ldr	r2, [pc, #88]	@ (8001630 <SHT31_ReadData+0x138>)
 80015d8:	60d3      	str	r3, [r2, #12]
    sht31_sensor.humidity = 100 * (humidity_raw / 65535.0);
 80015da:	897b      	ldrh	r3, [r7, #10]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ffb1 	bl	8000544 <__aeabi_i2d>
 80015e2:	a30f      	add	r3, pc, #60	@ (adr r3, 8001620 <SHT31_ReadData+0x128>)
 80015e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e8:	f7ff f940 	bl	800086c <__aeabi_ddiv>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4610      	mov	r0, r2
 80015f2:	4619      	mov	r1, r3
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <SHT31_ReadData+0x140>)
 80015fa:	f7ff f80d 	bl	8000618 <__aeabi_dmul>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	f7ff fadf 	bl	8000bc8 <__aeabi_d2f>
 800160a:	4603      	mov	r3, r0
 800160c:	4a08      	ldr	r2, [pc, #32]	@ (8001630 <SHT31_ReadData+0x138>)
 800160e:	6113      	str	r3, [r2, #16]

    return SHT31_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	f3af 8000 	nop.w
 8001620:	00000000 	.word	0x00000000
 8001624:	40efffe0 	.word	0x40efffe0
 8001628:	00000000 	.word	0x00000000
 800162c:	4065e000 	.word	0x4065e000
 8001630:	20000838 	.word	0x20000838
 8001634:	40468000 	.word	0x40468000
 8001638:	40590000 	.word	0x40590000

0800163c <SHT31_Init>:
     return SHT31_OK;

}

// Function to initialize the sensor
SHT31_Status SHT31_Init(I2C_HandleTypeDef* hi2c, uint8_t address, uint16_t command) {
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	70fb      	strb	r3, [r7, #3]
 8001648:	4613      	mov	r3, r2
 800164a:	803b      	strh	r3, [r7, #0]
    sht31_sensor.hi2c = hi2c;
 800164c:	4a07      	ldr	r2, [pc, #28]	@ (800166c <SHT31_Init+0x30>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6053      	str	r3, [r2, #4]
    sht31_sensor.address = address;
 8001652:	4a06      	ldr	r2, [pc, #24]	@ (800166c <SHT31_Init+0x30>)
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	7013      	strb	r3, [r2, #0]
    sht31_sensor.command = command;
 8001658:	4a04      	ldr	r2, [pc, #16]	@ (800166c <SHT31_Init+0x30>)
 800165a:	883b      	ldrh	r3, [r7, #0]
 800165c:	8113      	strh	r3, [r2, #8]
    SHT31_Status status = SHT31_GetID(serial_id);
    if (status != SHT31_OK) {
        return status;
    }*/

    return SHT31_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	20000838 	.word	0x20000838

08001670 <SHT31_ReadTempHum>:
        return -1.0f;  // Cuando hay error retorna una lectura invalida
    }
}

// Se obtiene temperatura y humedad de una lectura
SHT31_Status SHT31_ReadTempHum(float *temperature_out, float *humidity_out) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
    if (SHT31_ReadData() == SHT31_OK) {
 800167a:	f7ff ff3d 	bl	80014f8 <SHT31_ReadData>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d109      	bne.n	8001698 <SHT31_ReadTempHum+0x28>
        *temperature_out = sht31_sensor.temperature;
 8001684:	4b0a      	ldr	r3, [pc, #40]	@ (80016b0 <SHT31_ReadTempHum+0x40>)
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	601a      	str	r2, [r3, #0]
        *humidity_out = sht31_sensor.humidity;
 800168c:	4b08      	ldr	r3, [pc, #32]	@ (80016b0 <SHT31_ReadTempHum+0x40>)
 800168e:	691a      	ldr	r2, [r3, #16]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	601a      	str	r2, [r3, #0]
        return SHT31_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	e007      	b.n	80016a8 <SHT31_ReadTempHum+0x38>
    } else {
        *temperature_out = *humidity_out = NAN;  // Si falla la operación
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	4a06      	ldr	r2, [pc, #24]	@ (80016b4 <SHT31_ReadTempHum+0x44>)
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	601a      	str	r2, [r3, #0]
        return SHT31_ERROR;
 80016a6:	2301      	movs	r3, #1
    }
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000838 	.word	0x20000838
 80016b4:	7fc00000 	.word	0x7fc00000

080016b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	4b0f      	ldr	r3, [pc, #60]	@ (80016fc <HAL_MspInit+0x44>)
 80016c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016c2:	4a0e      	ldr	r2, [pc, #56]	@ (80016fc <HAL_MspInit+0x44>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80016ca:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <HAL_MspInit+0x44>)
 80016cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4b09      	ldr	r3, [pc, #36]	@ (80016fc <HAL_MspInit+0x44>)
 80016d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016da:	4a08      	ldr	r2, [pc, #32]	@ (80016fc <HAL_MspInit+0x44>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80016e2:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <HAL_MspInit+0x44>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000

08001700 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b0ac      	sub	sp, #176	@ 0xb0
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	228c      	movs	r2, #140	@ 0x8c
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f004 fe80 	bl	8006426 <memset>
  if(hi2c->Instance==I2C1)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a21      	ldr	r2, [pc, #132]	@ (80017b0 <HAL_I2C_MspInit+0xb0>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d13b      	bne.n	80017a8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001730:	2340      	movs	r3, #64	@ 0x40
 8001732:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001734:	2300      	movs	r3, #0
 8001736:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	4618      	mov	r0, r3
 800173e:	f002 fbc5 	bl	8003ecc <HAL_RCCEx_PeriphCLKConfig>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001748:	f7ff fe6e 	bl	8001428 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174c:	4b19      	ldr	r3, [pc, #100]	@ (80017b4 <HAL_I2C_MspInit+0xb4>)
 800174e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001750:	4a18      	ldr	r2, [pc, #96]	@ (80017b4 <HAL_I2C_MspInit+0xb4>)
 8001752:	f043 0302 	orr.w	r3, r3, #2
 8001756:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001758:	4b16      	ldr	r3, [pc, #88]	@ (80017b4 <HAL_I2C_MspInit+0xb4>)
 800175a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001764:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001768:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800176c:	2312      	movs	r3, #18
 800176e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800177e:	2304      	movs	r3, #4
 8001780:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001784:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001788:	4619      	mov	r1, r3
 800178a:	480b      	ldr	r0, [pc, #44]	@ (80017b8 <HAL_I2C_MspInit+0xb8>)
 800178c:	f000 fc08 	bl	8001fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001790:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <HAL_I2C_MspInit+0xb4>)
 8001792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001794:	4a07      	ldr	r2, [pc, #28]	@ (80017b4 <HAL_I2C_MspInit+0xb4>)
 8001796:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800179a:	6593      	str	r3, [r2, #88]	@ 0x58
 800179c:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <HAL_I2C_MspInit+0xb4>)
 800179e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017a8:	bf00      	nop
 80017aa:	37b0      	adds	r7, #176	@ 0xb0
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40005400 	.word	0x40005400
 80017b4:	40021000 	.word	0x40021000
 80017b8:	48000400 	.word	0x48000400

080017bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b0ae      	sub	sp, #184	@ 0xb8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d4:	f107 0318 	add.w	r3, r7, #24
 80017d8:	228c      	movs	r2, #140	@ 0x8c
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f004 fe22 	bl	8006426 <memset>
  if(huart->Instance==LPUART1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a43      	ldr	r2, [pc, #268]	@ (80018f4 <HAL_UART_MspInit+0x138>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d13e      	bne.n	800186a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80017ec:	2320      	movs	r3, #32
 80017ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80017f0:	2300      	movs	r3, #0
 80017f2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f4:	f107 0318 	add.w	r3, r7, #24
 80017f8:	4618      	mov	r0, r3
 80017fa:	f002 fb67 	bl	8003ecc <HAL_RCCEx_PeriphCLKConfig>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001804:	f7ff fe10 	bl	8001428 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001808:	4b3b      	ldr	r3, [pc, #236]	@ (80018f8 <HAL_UART_MspInit+0x13c>)
 800180a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800180c:	4a3a      	ldr	r2, [pc, #232]	@ (80018f8 <HAL_UART_MspInit+0x13c>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001814:	4b38      	ldr	r3, [pc, #224]	@ (80018f8 <HAL_UART_MspInit+0x13c>)
 8001816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001820:	4b35      	ldr	r3, [pc, #212]	@ (80018f8 <HAL_UART_MspInit+0x13c>)
 8001822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001824:	4a34      	ldr	r2, [pc, #208]	@ (80018f8 <HAL_UART_MspInit+0x13c>)
 8001826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800182a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800182c:	4b32      	ldr	r3, [pc, #200]	@ (80018f8 <HAL_UART_MspInit+0x13c>)
 800182e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001838:	f001 fcfa 	bl	8003230 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800183c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001840:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001850:	2303      	movs	r3, #3
 8001852:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001856:	2308      	movs	r3, #8
 8001858:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800185c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001860:	4619      	mov	r1, r3
 8001862:	4826      	ldr	r0, [pc, #152]	@ (80018fc <HAL_UART_MspInit+0x140>)
 8001864:	f000 fb9c 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001868:	e03f      	b.n	80018ea <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART3)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a24      	ldr	r2, [pc, #144]	@ (8001900 <HAL_UART_MspInit+0x144>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d13a      	bne.n	80018ea <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001874:	2304      	movs	r3, #4
 8001876:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001878:	2300      	movs	r3, #0
 800187a:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800187c:	f107 0318 	add.w	r3, r7, #24
 8001880:	4618      	mov	r0, r3
 8001882:	f002 fb23 	bl	8003ecc <HAL_RCCEx_PeriphCLKConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800188c:	f7ff fdcc 	bl	8001428 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001890:	4b19      	ldr	r3, [pc, #100]	@ (80018f8 <HAL_UART_MspInit+0x13c>)
 8001892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001894:	4a18      	ldr	r2, [pc, #96]	@ (80018f8 <HAL_UART_MspInit+0x13c>)
 8001896:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800189a:	6593      	str	r3, [r2, #88]	@ 0x58
 800189c:	4b16      	ldr	r3, [pc, #88]	@ (80018f8 <HAL_UART_MspInit+0x13c>)
 800189e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a8:	4b13      	ldr	r3, [pc, #76]	@ (80018f8 <HAL_UART_MspInit+0x13c>)
 80018aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ac:	4a12      	ldr	r2, [pc, #72]	@ (80018f8 <HAL_UART_MspInit+0x13c>)
 80018ae:	f043 0304 	orr.w	r3, r3, #4
 80018b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b4:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <HAL_UART_MspInit+0x13c>)
 80018b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80018c0:	2330      	movs	r3, #48	@ 0x30
 80018c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018d8:	2307      	movs	r3, #7
 80018da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018de:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80018e2:	4619      	mov	r1, r3
 80018e4:	4807      	ldr	r0, [pc, #28]	@ (8001904 <HAL_UART_MspInit+0x148>)
 80018e6:	f000 fb5b 	bl	8001fa0 <HAL_GPIO_Init>
}
 80018ea:	bf00      	nop
 80018ec:	37b8      	adds	r7, #184	@ 0xb8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40008000 	.word	0x40008000
 80018f8:	40021000 	.word	0x40021000
 80018fc:	48001800 	.word	0x48001800
 8001900:	40004800 	.word	0x40004800
 8001904:	48000800 	.word	0x48000800

08001908 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b0ae      	sub	sp, #184	@ 0xb8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001920:	f107 0318 	add.w	r3, r7, #24
 8001924:	228c      	movs	r2, #140	@ 0x8c
 8001926:	2100      	movs	r1, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f004 fd7c 	bl	8006426 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001936:	d17c      	bne.n	8001a32 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001938:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800193c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800193e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001942:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001946:	2301      	movs	r3, #1
 8001948:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800194a:	2301      	movs	r3, #1
 800194c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800194e:	2318      	movs	r3, #24
 8001950:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001952:	2302      	movs	r3, #2
 8001954:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001956:	2302      	movs	r3, #2
 8001958:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800195a:	2302      	movs	r3, #2
 800195c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800195e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001962:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001964:	f107 0318 	add.w	r3, r7, #24
 8001968:	4618      	mov	r0, r3
 800196a:	f002 faaf 	bl	8003ecc <HAL_RCCEx_PeriphCLKConfig>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001974:	f7ff fd58 	bl	8001428 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	4b30      	ldr	r3, [pc, #192]	@ (8001a3c <HAL_PCD_MspInit+0x134>)
 800197a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800197c:	4a2f      	ldr	r2, [pc, #188]	@ (8001a3c <HAL_PCD_MspInit+0x134>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001984:	4b2d      	ldr	r3, [pc, #180]	@ (8001a3c <HAL_PCD_MspInit+0x134>)
 8001986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001990:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001994:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a4:	2303      	movs	r3, #3
 80019a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019aa:	230a      	movs	r3, #10
 80019ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019b4:	4619      	mov	r1, r3
 80019b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ba:	f000 faf1 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019d2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019d6:	4619      	mov	r1, r3
 80019d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019dc:	f000 fae0 	bl	8001fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80019e0:	4b16      	ldr	r3, [pc, #88]	@ (8001a3c <HAL_PCD_MspInit+0x134>)
 80019e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e4:	4a15      	ldr	r2, [pc, #84]	@ (8001a3c <HAL_PCD_MspInit+0x134>)
 80019e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ec:	4b13      	ldr	r3, [pc, #76]	@ (8001a3c <HAL_PCD_MspInit+0x134>)
 80019ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f8:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <HAL_PCD_MspInit+0x134>)
 80019fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d114      	bne.n	8001a2e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a04:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <HAL_PCD_MspInit+0x134>)
 8001a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a08:	4a0c      	ldr	r2, [pc, #48]	@ (8001a3c <HAL_PCD_MspInit+0x134>)
 8001a0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a10:	4b0a      	ldr	r3, [pc, #40]	@ (8001a3c <HAL_PCD_MspInit+0x134>)
 8001a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001a1c:	f001 fbf8 	bl	8003210 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a20:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <HAL_PCD_MspInit+0x134>)
 8001a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a24:	4a05      	ldr	r2, [pc, #20]	@ (8001a3c <HAL_PCD_MspInit+0x134>)
 8001a26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a2a:	6593      	str	r3, [r2, #88]	@ 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001a2c:	e001      	b.n	8001a32 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001a2e:	f001 fbef 	bl	8003210 <HAL_PWREx_EnableVddUSB>
}
 8001a32:	bf00      	nop
 8001a34:	37b8      	adds	r7, #184	@ 0xb8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000

08001a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <NMI_Handler+0x4>

08001a48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <HardFault_Handler+0x4>

08001a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <MemManage_Handler+0x4>

08001a58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <BusFault_Handler+0x4>

08001a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <UsageFault_Handler+0x4>

08001a68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a96:	f000 f959 	bl	8001d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0
  return 1;
 8001aa2:	2301      	movs	r3, #1
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <_kill>:

int _kill(int pid, int sig)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ab8:	f004 fd08 	bl	80064cc <__errno>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2216      	movs	r2, #22
 8001ac0:	601a      	str	r2, [r3, #0]
  return -1;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <_exit>:

void _exit (int status)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ad6:	f04f 31ff 	mov.w	r1, #4294967295
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ffe7 	bl	8001aae <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ae0:	bf00      	nop
 8001ae2:	e7fd      	b.n	8001ae0 <_exit+0x12>

08001ae4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	e00a      	b.n	8001b0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001af6:	f3af 8000 	nop.w
 8001afa:	4601      	mov	r1, r0
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	60ba      	str	r2, [r7, #8]
 8001b02:	b2ca      	uxtb	r2, r1
 8001b04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	dbf0      	blt.n	8001af6 <_read+0x12>
  }

  return len;
 8001b14:	687b      	ldr	r3, [r7, #4]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	60f8      	str	r0, [r7, #12]
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	e009      	b.n	8001b44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	60ba      	str	r2, [r7, #8]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	3301      	adds	r3, #1
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	dbf1      	blt.n	8001b30 <_write+0x12>
  }
  return len;
 8001b4c:	687b      	ldr	r3, [r7, #4]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <_close>:

int _close(int file)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b7e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <_isatty>:

int _isatty(int file)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b96:	2301      	movs	r3, #1
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc8:	4a14      	ldr	r2, [pc, #80]	@ (8001c1c <_sbrk+0x5c>)
 8001bca:	4b15      	ldr	r3, [pc, #84]	@ (8001c20 <_sbrk+0x60>)
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd4:	4b13      	ldr	r3, [pc, #76]	@ (8001c24 <_sbrk+0x64>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d102      	bne.n	8001be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	@ (8001c24 <_sbrk+0x64>)
 8001bde:	4a12      	ldr	r2, [pc, #72]	@ (8001c28 <_sbrk+0x68>)
 8001be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001be2:	4b10      	ldr	r3, [pc, #64]	@ (8001c24 <_sbrk+0x64>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d207      	bcs.n	8001c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf0:	f004 fc6c 	bl	80064cc <__errno>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfe:	e009      	b.n	8001c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c00:	4b08      	ldr	r3, [pc, #32]	@ (8001c24 <_sbrk+0x64>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c06:	4b07      	ldr	r3, [pc, #28]	@ (8001c24 <_sbrk+0x64>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4a05      	ldr	r2, [pc, #20]	@ (8001c24 <_sbrk+0x64>)
 8001c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c12:	68fb      	ldr	r3, [r7, #12]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20050000 	.word	0x20050000
 8001c20:	00000400 	.word	0x00000400
 8001c24:	2000084c 	.word	0x2000084c
 8001c28:	200009a0 	.word	0x200009a0

08001c2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c30:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <SystemInit+0x20>)
 8001c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c36:	4a05      	ldr	r2, [pc, #20]	@ (8001c4c <SystemInit+0x20>)
 8001c38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c54:	f7ff ffea 	bl	8001c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c58:	480c      	ldr	r0, [pc, #48]	@ (8001c8c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c5a:	490d      	ldr	r1, [pc, #52]	@ (8001c90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c94 <LoopForever+0xe>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c60:	e002      	b.n	8001c68 <LoopCopyDataInit>

08001c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c66:	3304      	adds	r3, #4

08001c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c6c:	d3f9      	bcc.n	8001c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c70:	4c0a      	ldr	r4, [pc, #40]	@ (8001c9c <LoopForever+0x16>)
  movs r3, #0
 8001c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c74:	e001      	b.n	8001c7a <LoopFillZerobss>

08001c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c78:	3204      	adds	r2, #4

08001c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c7c:	d3fb      	bcc.n	8001c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c7e:	f004 fc2b 	bl	80064d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c82:	f7ff f969 	bl	8000f58 <main>

08001c86 <LoopForever>:

LoopForever:
    b LoopForever
 8001c86:	e7fe      	b.n	8001c86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c88:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c90:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c94:	080089f0 	.word	0x080089f0
  ldr r2, =_sbss
 8001c98:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c9c:	200009a0 	.word	0x200009a0

08001ca0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ca0:	e7fe      	b.n	8001ca0 <ADC1_2_IRQHandler>

08001ca2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cac:	2003      	movs	r0, #3
 8001cae:	f000 f943 	bl	8001f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	f000 f80e 	bl	8001cd4 <HAL_InitTick>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	71fb      	strb	r3, [r7, #7]
 8001cc2:	e001      	b.n	8001cc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cc4:	f7ff fcf8 	bl	80016b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ce0:	4b17      	ldr	r3, [pc, #92]	@ (8001d40 <HAL_InitTick+0x6c>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d023      	beq.n	8001d30 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ce8:	4b16      	ldr	r3, [pc, #88]	@ (8001d44 <HAL_InitTick+0x70>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b14      	ldr	r3, [pc, #80]	@ (8001d40 <HAL_InitTick+0x6c>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 f941 	bl	8001f86 <HAL_SYSTICK_Config>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10f      	bne.n	8001d2a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b0f      	cmp	r3, #15
 8001d0e:	d809      	bhi.n	8001d24 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d10:	2200      	movs	r2, #0
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f000 f919 	bl	8001f4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d48 <HAL_InitTick+0x74>)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e007      	b.n	8001d34 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	73fb      	strb	r3, [r7, #15]
 8001d28:	e004      	b.n	8001d34 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	73fb      	strb	r3, [r7, #15]
 8001d2e:	e001      	b.n	8001d34 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000008 	.word	0x20000008
 8001d44:	20000000 	.word	0x20000000
 8001d48:	20000004 	.word	0x20000004

08001d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d50:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <HAL_IncTick+0x20>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <HAL_IncTick+0x24>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4a04      	ldr	r2, [pc, #16]	@ (8001d70 <HAL_IncTick+0x24>)
 8001d5e:	6013      	str	r3, [r2, #0]
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000008 	.word	0x20000008
 8001d70:	20000850 	.word	0x20000850

08001d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return uwTick;
 8001d78:	4b03      	ldr	r3, [pc, #12]	@ (8001d88 <HAL_GetTick+0x14>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	20000850 	.word	0x20000850

08001d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff ffee 	bl	8001d74 <HAL_GetTick>
 8001d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da4:	d005      	beq.n	8001db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001da6:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd0 <HAL_Delay+0x44>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001db2:	bf00      	nop
 8001db4:	f7ff ffde 	bl	8001d74 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d8f7      	bhi.n	8001db4 <HAL_Delay+0x28>
  {
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000008 	.word	0x20000008

08001dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001df0:	4013      	ands	r3, r2
 8001df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e06:	4a04      	ldr	r2, [pc, #16]	@ (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	60d3      	str	r3, [r2, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e20:	4b04      	ldr	r3, [pc, #16]	@ (8001e34 <__NVIC_GetPriorityGrouping+0x18>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	f003 0307 	and.w	r3, r3, #7
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	6039      	str	r1, [r7, #0]
 8001e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	db0a      	blt.n	8001e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	490c      	ldr	r1, [pc, #48]	@ (8001e84 <__NVIC_SetPriority+0x4c>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	0112      	lsls	r2, r2, #4
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e60:	e00a      	b.n	8001e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4908      	ldr	r1, [pc, #32]	@ (8001e88 <__NVIC_SetPriority+0x50>)
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	3b04      	subs	r3, #4
 8001e70:	0112      	lsls	r2, r2, #4
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	440b      	add	r3, r1
 8001e76:	761a      	strb	r2, [r3, #24]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000e100 	.word	0xe000e100
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b089      	sub	sp, #36	@ 0x24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f1c3 0307 	rsb	r3, r3, #7
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	bf28      	it	cs
 8001eaa:	2304      	movcs	r3, #4
 8001eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	2b06      	cmp	r3, #6
 8001eb4:	d902      	bls.n	8001ebc <NVIC_EncodePriority+0x30>
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3b03      	subs	r3, #3
 8001eba:	e000      	b.n	8001ebe <NVIC_EncodePriority+0x32>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43da      	mvns	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	401a      	ands	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	fa01 f303 	lsl.w	r3, r1, r3
 8001ede:	43d9      	mvns	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee4:	4313      	orrs	r3, r2
         );
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3724      	adds	r7, #36	@ 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f04:	d301      	bcc.n	8001f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f06:	2301      	movs	r3, #1
 8001f08:	e00f      	b.n	8001f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f34 <SysTick_Config+0x40>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f12:	210f      	movs	r1, #15
 8001f14:	f04f 30ff 	mov.w	r0, #4294967295
 8001f18:	f7ff ff8e 	bl	8001e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f1c:	4b05      	ldr	r3, [pc, #20]	@ (8001f34 <SysTick_Config+0x40>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f22:	4b04      	ldr	r3, [pc, #16]	@ (8001f34 <SysTick_Config+0x40>)
 8001f24:	2207      	movs	r2, #7
 8001f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	e000e010 	.word	0xe000e010

08001f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ff47 	bl	8001dd4 <__NVIC_SetPriorityGrouping>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b086      	sub	sp, #24
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	4603      	mov	r3, r0
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
 8001f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f60:	f7ff ff5c 	bl	8001e1c <__NVIC_GetPriorityGrouping>
 8001f64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	6978      	ldr	r0, [r7, #20]
 8001f6c:	f7ff ff8e 	bl	8001e8c <NVIC_EncodePriority>
 8001f70:	4602      	mov	r2, r0
 8001f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff5d 	bl	8001e38 <__NVIC_SetPriority>
}
 8001f7e:	bf00      	nop
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff ffb0 	bl	8001ef4 <SysTick_Config>
 8001f94:	4603      	mov	r3, r0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fae:	e166      	b.n	800227e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 8158 	beq.w	8002278 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d005      	beq.n	8001fe0 <HAL_GPIO_Init+0x40>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d130      	bne.n	8002042 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	2203      	movs	r2, #3
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002016:	2201      	movs	r2, #1
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4013      	ands	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	091b      	lsrs	r3, r3, #4
 800202c:	f003 0201 	and.w	r2, r3, #1
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	2b03      	cmp	r3, #3
 800204c:	d017      	beq.n	800207e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	2203      	movs	r2, #3
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4013      	ands	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d123      	bne.n	80020d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	08da      	lsrs	r2, r3, #3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3208      	adds	r2, #8
 8002092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002096:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	220f      	movs	r2, #15
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	08da      	lsrs	r2, r3, #3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3208      	adds	r2, #8
 80020cc:	6939      	ldr	r1, [r7, #16]
 80020ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	2203      	movs	r2, #3
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4013      	ands	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0203 	and.w	r2, r3, #3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 80b2 	beq.w	8002278 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002114:	4b61      	ldr	r3, [pc, #388]	@ (800229c <HAL_GPIO_Init+0x2fc>)
 8002116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002118:	4a60      	ldr	r2, [pc, #384]	@ (800229c <HAL_GPIO_Init+0x2fc>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002120:	4b5e      	ldr	r3, [pc, #376]	@ (800229c <HAL_GPIO_Init+0x2fc>)
 8002122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800212c:	4a5c      	ldr	r2, [pc, #368]	@ (80022a0 <HAL_GPIO_Init+0x300>)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	089b      	lsrs	r3, r3, #2
 8002132:	3302      	adds	r3, #2
 8002134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002138:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	220f      	movs	r2, #15
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002156:	d02b      	beq.n	80021b0 <HAL_GPIO_Init+0x210>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a52      	ldr	r2, [pc, #328]	@ (80022a4 <HAL_GPIO_Init+0x304>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d025      	beq.n	80021ac <HAL_GPIO_Init+0x20c>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a51      	ldr	r2, [pc, #324]	@ (80022a8 <HAL_GPIO_Init+0x308>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d01f      	beq.n	80021a8 <HAL_GPIO_Init+0x208>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a50      	ldr	r2, [pc, #320]	@ (80022ac <HAL_GPIO_Init+0x30c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d019      	beq.n	80021a4 <HAL_GPIO_Init+0x204>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a4f      	ldr	r2, [pc, #316]	@ (80022b0 <HAL_GPIO_Init+0x310>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d013      	beq.n	80021a0 <HAL_GPIO_Init+0x200>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a4e      	ldr	r2, [pc, #312]	@ (80022b4 <HAL_GPIO_Init+0x314>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00d      	beq.n	800219c <HAL_GPIO_Init+0x1fc>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a4d      	ldr	r2, [pc, #308]	@ (80022b8 <HAL_GPIO_Init+0x318>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d007      	beq.n	8002198 <HAL_GPIO_Init+0x1f8>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a4c      	ldr	r2, [pc, #304]	@ (80022bc <HAL_GPIO_Init+0x31c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d101      	bne.n	8002194 <HAL_GPIO_Init+0x1f4>
 8002190:	2307      	movs	r3, #7
 8002192:	e00e      	b.n	80021b2 <HAL_GPIO_Init+0x212>
 8002194:	2308      	movs	r3, #8
 8002196:	e00c      	b.n	80021b2 <HAL_GPIO_Init+0x212>
 8002198:	2306      	movs	r3, #6
 800219a:	e00a      	b.n	80021b2 <HAL_GPIO_Init+0x212>
 800219c:	2305      	movs	r3, #5
 800219e:	e008      	b.n	80021b2 <HAL_GPIO_Init+0x212>
 80021a0:	2304      	movs	r3, #4
 80021a2:	e006      	b.n	80021b2 <HAL_GPIO_Init+0x212>
 80021a4:	2303      	movs	r3, #3
 80021a6:	e004      	b.n	80021b2 <HAL_GPIO_Init+0x212>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e002      	b.n	80021b2 <HAL_GPIO_Init+0x212>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <HAL_GPIO_Init+0x212>
 80021b0:	2300      	movs	r3, #0
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	f002 0203 	and.w	r2, r2, #3
 80021b8:	0092      	lsls	r2, r2, #2
 80021ba:	4093      	lsls	r3, r2
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021c2:	4937      	ldr	r1, [pc, #220]	@ (80022a0 <HAL_GPIO_Init+0x300>)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	089b      	lsrs	r3, r3, #2
 80021c8:	3302      	adds	r3, #2
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021d0:	4b3b      	ldr	r3, [pc, #236]	@ (80022c0 <HAL_GPIO_Init+0x320>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	43db      	mvns	r3, r3
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4013      	ands	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021f4:	4a32      	ldr	r2, [pc, #200]	@ (80022c0 <HAL_GPIO_Init+0x320>)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021fa:	4b31      	ldr	r3, [pc, #196]	@ (80022c0 <HAL_GPIO_Init+0x320>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	43db      	mvns	r3, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800221e:	4a28      	ldr	r2, [pc, #160]	@ (80022c0 <HAL_GPIO_Init+0x320>)
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002224:	4b26      	ldr	r3, [pc, #152]	@ (80022c0 <HAL_GPIO_Init+0x320>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	43db      	mvns	r3, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002248:	4a1d      	ldr	r2, [pc, #116]	@ (80022c0 <HAL_GPIO_Init+0x320>)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800224e:	4b1c      	ldr	r3, [pc, #112]	@ (80022c0 <HAL_GPIO_Init+0x320>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	43db      	mvns	r3, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4013      	ands	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002272:	4a13      	ldr	r2, [pc, #76]	@ (80022c0 <HAL_GPIO_Init+0x320>)
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	3301      	adds	r3, #1
 800227c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	fa22 f303 	lsr.w	r3, r2, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	f47f ae91 	bne.w	8001fb0 <HAL_GPIO_Init+0x10>
  }
}
 800228e:	bf00      	nop
 8002290:	bf00      	nop
 8002292:	371c      	adds	r7, #28
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	40021000 	.word	0x40021000
 80022a0:	40010000 	.word	0x40010000
 80022a4:	48000400 	.word	0x48000400
 80022a8:	48000800 	.word	0x48000800
 80022ac:	48000c00 	.word	0x48000c00
 80022b0:	48001000 	.word	0x48001000
 80022b4:	48001400 	.word	0x48001400
 80022b8:	48001800 	.word	0x48001800
 80022bc:	48001c00 	.word	0x48001c00
 80022c0:	40010400 	.word	0x40010400

080022c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
 80022d0:	4613      	mov	r3, r2
 80022d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022d4:	787b      	ldrb	r3, [r7, #1]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022e0:	e002      	b.n	80022e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022e2:	887a      	ldrh	r2, [r7, #2]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e08d      	b.n	8002422 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d106      	bne.n	8002320 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff f9f0 	bl	8001700 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2224      	movs	r2, #36	@ 0x24
 8002324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0201 	bic.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002344:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002354:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d107      	bne.n	800236e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	e006      	b.n	800237c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800237a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2b02      	cmp	r3, #2
 8002382:	d108      	bne.n	8002396 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002392:	605a      	str	r2, [r3, #4]
 8002394:	e007      	b.n	80023a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691a      	ldr	r2, [r3, #16]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69d9      	ldr	r1, [r3, #28]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1a      	ldr	r2, [r3, #32]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2220      	movs	r2, #32
 800240e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af02      	add	r7, sp, #8
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	461a      	mov	r2, r3
 8002438:	460b      	mov	r3, r1
 800243a:	817b      	strh	r3, [r7, #10]
 800243c:	4613      	mov	r3, r2
 800243e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b20      	cmp	r3, #32
 800244a:	f040 80fd 	bne.w	8002648 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_I2C_Master_Transmit+0x30>
 8002458:	2302      	movs	r3, #2
 800245a:	e0f6      	b.n	800264a <HAL_I2C_Master_Transmit+0x21e>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002464:	f7ff fc86 	bl	8001d74 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	2319      	movs	r3, #25
 8002470:	2201      	movs	r2, #1
 8002472:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 fa0a 	bl	8002890 <I2C_WaitOnFlagUntilTimeout>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e0e1      	b.n	800264a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2221      	movs	r2, #33	@ 0x21
 800248a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2210      	movs	r2, #16
 8002492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	893a      	ldrh	r2, [r7, #8]
 80024a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	2bff      	cmp	r3, #255	@ 0xff
 80024b6:	d906      	bls.n	80024c6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	22ff      	movs	r2, #255	@ 0xff
 80024bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80024be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	e007      	b.n	80024d6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80024d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024d4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d024      	beq.n	8002528 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e2:	781a      	ldrb	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002506:	3b01      	subs	r3, #1
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002512:	b2db      	uxtb	r3, r3
 8002514:	3301      	adds	r3, #1
 8002516:	b2da      	uxtb	r2, r3
 8002518:	8979      	ldrh	r1, [r7, #10]
 800251a:	4b4e      	ldr	r3, [pc, #312]	@ (8002654 <HAL_I2C_Master_Transmit+0x228>)
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 fc05 	bl	8002d30 <I2C_TransferConfig>
 8002526:	e066      	b.n	80025f6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800252c:	b2da      	uxtb	r2, r3
 800252e:	8979      	ldrh	r1, [r7, #10]
 8002530:	4b48      	ldr	r3, [pc, #288]	@ (8002654 <HAL_I2C_Master_Transmit+0x228>)
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 fbfa 	bl	8002d30 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800253c:	e05b      	b.n	80025f6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	6a39      	ldr	r1, [r7, #32]
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f9fd 	bl	8002942 <I2C_WaitOnTXISFlagUntilTimeout>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e07b      	b.n	800264a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002556:	781a      	ldrb	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800256c:	b29b      	uxth	r3, r3
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800257a:	3b01      	subs	r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d034      	beq.n	80025f6 <HAL_I2C_Master_Transmit+0x1ca>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002590:	2b00      	cmp	r3, #0
 8002592:	d130      	bne.n	80025f6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	2200      	movs	r2, #0
 800259c:	2180      	movs	r1, #128	@ 0x80
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 f976 	bl	8002890 <I2C_WaitOnFlagUntilTimeout>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e04d      	b.n	800264a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	2bff      	cmp	r3, #255	@ 0xff
 80025b6:	d90e      	bls.n	80025d6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	22ff      	movs	r2, #255	@ 0xff
 80025bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	8979      	ldrh	r1, [r7, #10]
 80025c6:	2300      	movs	r3, #0
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 fbae 	bl	8002d30 <I2C_TransferConfig>
 80025d4:	e00f      	b.n	80025f6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	8979      	ldrh	r1, [r7, #10]
 80025e8:	2300      	movs	r3, #0
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 fb9d 	bl	8002d30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d19e      	bne.n	800253e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	6a39      	ldr	r1, [r7, #32]
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 f9e3 	bl	80029d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e01a      	b.n	800264a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2220      	movs	r2, #32
 800261a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6859      	ldr	r1, [r3, #4]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	4b0c      	ldr	r3, [pc, #48]	@ (8002658 <HAL_I2C_Master_Transmit+0x22c>)
 8002628:	400b      	ands	r3, r1
 800262a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	e000      	b.n	800264a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002648:	2302      	movs	r3, #2
  }
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	80002000 	.word	0x80002000
 8002658:	fe00e800 	.word	0xfe00e800

0800265c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b088      	sub	sp, #32
 8002660:	af02      	add	r7, sp, #8
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	607a      	str	r2, [r7, #4]
 8002666:	461a      	mov	r2, r3
 8002668:	460b      	mov	r3, r1
 800266a:	817b      	strh	r3, [r7, #10]
 800266c:	4613      	mov	r3, r2
 800266e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b20      	cmp	r3, #32
 800267a:	f040 80db 	bne.w	8002834 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_I2C_Master_Receive+0x30>
 8002688:	2302      	movs	r3, #2
 800268a:	e0d4      	b.n	8002836 <HAL_I2C_Master_Receive+0x1da>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002694:	f7ff fb6e 	bl	8001d74 <HAL_GetTick>
 8002698:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	2319      	movs	r3, #25
 80026a0:	2201      	movs	r2, #1
 80026a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f8f2 	bl	8002890 <I2C_WaitOnFlagUntilTimeout>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e0bf      	b.n	8002836 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2222      	movs	r2, #34	@ 0x22
 80026ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2210      	movs	r2, #16
 80026c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	893a      	ldrh	r2, [r7, #8]
 80026d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	2bff      	cmp	r3, #255	@ 0xff
 80026e6:	d90e      	bls.n	8002706 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2201      	movs	r2, #1
 80026ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	8979      	ldrh	r1, [r7, #10]
 80026f6:	4b52      	ldr	r3, [pc, #328]	@ (8002840 <HAL_I2C_Master_Receive+0x1e4>)
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 fb16 	bl	8002d30 <I2C_TransferConfig>
 8002704:	e06d      	b.n	80027e2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002714:	b2da      	uxtb	r2, r3
 8002716:	8979      	ldrh	r1, [r7, #10]
 8002718:	4b49      	ldr	r3, [pc, #292]	@ (8002840 <HAL_I2C_Master_Receive+0x1e4>)
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 fb05 	bl	8002d30 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002726:	e05c      	b.n	80027e2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	6a39      	ldr	r1, [r7, #32]
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 f993 	bl	8002a58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e07c      	b.n	8002836 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002772:	b29b      	uxth	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d034      	beq.n	80027e2 <HAL_I2C_Master_Receive+0x186>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800277c:	2b00      	cmp	r3, #0
 800277e:	d130      	bne.n	80027e2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	2200      	movs	r2, #0
 8002788:	2180      	movs	r1, #128	@ 0x80
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 f880 	bl	8002890 <I2C_WaitOnFlagUntilTimeout>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e04d      	b.n	8002836 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2bff      	cmp	r3, #255	@ 0xff
 80027a2:	d90e      	bls.n	80027c2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	22ff      	movs	r2, #255	@ 0xff
 80027a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	8979      	ldrh	r1, [r7, #10]
 80027b2:	2300      	movs	r3, #0
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 fab8 	bl	8002d30 <I2C_TransferConfig>
 80027c0:	e00f      	b.n	80027e2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	8979      	ldrh	r1, [r7, #10]
 80027d4:	2300      	movs	r3, #0
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 faa7 	bl	8002d30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d19d      	bne.n	8002728 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	6a39      	ldr	r1, [r7, #32]
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 f8ed 	bl	80029d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e01a      	b.n	8002836 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2220      	movs	r2, #32
 8002806:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6859      	ldr	r1, [r3, #4]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	4b0c      	ldr	r3, [pc, #48]	@ (8002844 <HAL_I2C_Master_Receive+0x1e8>)
 8002814:	400b      	ands	r3, r1
 8002816:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	e000      	b.n	8002836 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002834:	2302      	movs	r3, #2
  }
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	80002400 	.word	0x80002400
 8002844:	fe00e800 	.word	0xfe00e800

08002848 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b02      	cmp	r3, #2
 800285c:	d103      	bne.n	8002866 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2200      	movs	r2, #0
 8002864:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b01      	cmp	r3, #1
 8002872:	d007      	beq.n	8002884 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	619a      	str	r2, [r3, #24]
  }
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	4613      	mov	r3, r2
 800289e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028a0:	e03b      	b.n	800291a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	6839      	ldr	r1, [r7, #0]
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 f962 	bl	8002b70 <I2C_IsErrorOccurred>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e041      	b.n	800293a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028bc:	d02d      	beq.n	800291a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028be:	f7ff fa59 	bl	8001d74 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d302      	bcc.n	80028d4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d122      	bne.n	800291a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699a      	ldr	r2, [r3, #24]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	4013      	ands	r3, r2
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	bf0c      	ite	eq
 80028e4:	2301      	moveq	r3, #1
 80028e6:	2300      	movne	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	461a      	mov	r2, r3
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d113      	bne.n	800291a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	f043 0220 	orr.w	r2, r3, #32
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2220      	movs	r2, #32
 8002902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e00f      	b.n	800293a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	699a      	ldr	r2, [r3, #24]
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	4013      	ands	r3, r2
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	429a      	cmp	r2, r3
 8002928:	bf0c      	ite	eq
 800292a:	2301      	moveq	r3, #1
 800292c:	2300      	movne	r3, #0
 800292e:	b2db      	uxtb	r3, r3
 8002930:	461a      	mov	r2, r3
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	429a      	cmp	r2, r3
 8002936:	d0b4      	beq.n	80028a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800294e:	e033      	b.n	80029b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	68b9      	ldr	r1, [r7, #8]
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 f90b 	bl	8002b70 <I2C_IsErrorOccurred>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e031      	b.n	80029c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296a:	d025      	beq.n	80029b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800296c:	f7ff fa02 	bl	8001d74 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	429a      	cmp	r2, r3
 800297a:	d302      	bcc.n	8002982 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d11a      	bne.n	80029b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b02      	cmp	r3, #2
 800298e:	d013      	beq.n	80029b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002994:	f043 0220 	orr.w	r2, r3, #32
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2220      	movs	r2, #32
 80029a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e007      	b.n	80029c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d1c4      	bne.n	8002950 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029dc:	e02f      	b.n	8002a3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68b9      	ldr	r1, [r7, #8]
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f8c4 	bl	8002b70 <I2C_IsErrorOccurred>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e02d      	b.n	8002a4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f2:	f7ff f9bf 	bl	8001d74 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d302      	bcc.n	8002a08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d11a      	bne.n	8002a3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	f003 0320 	and.w	r3, r3, #32
 8002a12:	2b20      	cmp	r3, #32
 8002a14:	d013      	beq.n	8002a3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1a:	f043 0220 	orr.w	r2, r3, #32
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e007      	b.n	8002a4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	f003 0320 	and.w	r3, r3, #32
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	d1c8      	bne.n	80029de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
	...

08002a58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002a68:	e071      	b.n	8002b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f87e 	bl	8002b70 <I2C_IsErrorOccurred>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	f003 0320 	and.w	r3, r3, #32
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	d13b      	bne.n	8002b04 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d138      	bne.n	8002b04 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d105      	bne.n	8002aac <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2b10      	cmp	r3, #16
 8002ab8:	d121      	bne.n	8002afe <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2210      	movs	r2, #16
 8002ac0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2220      	movs	r2, #32
 8002ace:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6859      	ldr	r1, [r3, #4]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	4b24      	ldr	r3, [pc, #144]	@ (8002b6c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002adc:	400b      	ands	r3, r1
 8002ade:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	75fb      	strb	r3, [r7, #23]
 8002afc:	e002      	b.n	8002b04 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002b04:	f7ff f936 	bl	8001d74 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d302      	bcc.n	8002b1a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d119      	bne.n	8002b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002b1a:	7dfb      	ldrb	r3, [r7, #23]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d116      	bne.n	8002b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d00f      	beq.n	8002b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b32:	f043 0220 	orr.w	r2, r3, #32
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d002      	beq.n	8002b62 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002b5c:	7dfb      	ldrb	r3, [r7, #23]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d083      	beq.n	8002a6a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	fe00e800 	.word	0xfe00e800

08002b70 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08a      	sub	sp, #40	@ 0x28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d068      	beq.n	8002c6e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2210      	movs	r2, #16
 8002ba2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ba4:	e049      	b.n	8002c3a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bac:	d045      	beq.n	8002c3a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bae:	f7ff f8e1 	bl	8001d74 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d302      	bcc.n	8002bc4 <I2C_IsErrorOccurred+0x54>
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d13a      	bne.n	8002c3a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bd6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002be2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002be6:	d121      	bne.n	8002c2c <I2C_IsErrorOccurred+0xbc>
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bee:	d01d      	beq.n	8002c2c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002bf0:	7cfb      	ldrb	r3, [r7, #19]
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	d01a      	beq.n	8002c2c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c04:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c06:	f7ff f8b5 	bl	8001d74 <HAL_GetTick>
 8002c0a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c0c:	e00e      	b.n	8002c2c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c0e:	f7ff f8b1 	bl	8001d74 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b19      	cmp	r3, #25
 8002c1a:	d907      	bls.n	8002c2c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	f043 0320 	orr.w	r3, r3, #32
 8002c22:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002c2a:	e006      	b.n	8002c3a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	2b20      	cmp	r3, #32
 8002c38:	d1e9      	bne.n	8002c0e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	f003 0320 	and.w	r3, r3, #32
 8002c44:	2b20      	cmp	r3, #32
 8002c46:	d003      	beq.n	8002c50 <I2C_IsErrorOccurred+0xe0>
 8002c48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0aa      	beq.n	8002ba6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d103      	bne.n	8002c60 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	f043 0304 	orr.w	r3, r3, #4
 8002c66:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00b      	beq.n	8002c98 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00b      	beq.n	8002cba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	f043 0308 	orr.w	r3, r3, #8
 8002ca8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cb2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00b      	beq.n	8002cdc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	f043 0302 	orr.w	r3, r3, #2
 8002cca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d01c      	beq.n	8002d1e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f7ff fdaf 	bl	8002848 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6859      	ldr	r1, [r3, #4]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	4b0d      	ldr	r3, [pc, #52]	@ (8002d2c <I2C_IsErrorOccurred+0x1bc>)
 8002cf6:	400b      	ands	r3, r1
 8002cf8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	431a      	orrs	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3728      	adds	r7, #40	@ 0x28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	fe00e800 	.word	0xfe00e800

08002d30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	607b      	str	r3, [r7, #4]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	817b      	strh	r3, [r7, #10]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d42:	897b      	ldrh	r3, [r7, #10]
 8002d44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d48:	7a7b      	ldrb	r3, [r7, #9]
 8002d4a:	041b      	lsls	r3, r3, #16
 8002d4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d50:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d5e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	0d5b      	lsrs	r3, r3, #21
 8002d6a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002d6e:	4b08      	ldr	r3, [pc, #32]	@ (8002d90 <I2C_TransferConfig+0x60>)
 8002d70:	430b      	orrs	r3, r1
 8002d72:	43db      	mvns	r3, r3
 8002d74:	ea02 0103 	and.w	r1, r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d82:	bf00      	nop
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	03ff63ff 	.word	0x03ff63ff

08002d94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	d138      	bne.n	8002e1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e032      	b.n	8002e1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2224      	movs	r2, #36	@ 0x24
 8002dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0201 	bic.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002de6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6819      	ldr	r1, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	e000      	b.n	8002e1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e1c:	2302      	movs	r3, #2
  }
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b085      	sub	sp, #20
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d139      	bne.n	8002eb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d101      	bne.n	8002e4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e033      	b.n	8002eb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2224      	movs	r2, #36	@ 0x24
 8002e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0201 	bic.w	r2, r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	021b      	lsls	r3, r3, #8
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	e000      	b.n	8002eb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002eb4:	2302      	movs	r3, #2
  }
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b086      	sub	sp, #24
 8002ec6:	af02      	add	r7, sp, #8
 8002ec8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e101      	b.n	80030d8 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d106      	bne.n	8002eee <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7fe fd0d 	bl	8001908 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f002 fa95 	bl	8005430 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	7c1a      	ldrb	r2, [r3, #16]
 8002f0e:	f88d 2000 	strb.w	r2, [sp]
 8002f12:	3304      	adds	r3, #4
 8002f14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f16:	f002 fa5e 	bl	80053d6 <USB_CoreInit>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0d5      	b.n	80030d8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2100      	movs	r1, #0
 8002f32:	4618      	mov	r0, r3
 8002f34:	f002 fa8d 	bl	8005452 <USB_SetCurrentMode>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d005      	beq.n	8002f4a <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2202      	movs	r2, #2
 8002f42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e0c6      	b.n	80030d8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	73fb      	strb	r3, [r7, #15]
 8002f4e:	e04a      	b.n	8002fe6 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f50:	7bfa      	ldrb	r2, [r7, #15]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	3315      	adds	r3, #21
 8002f60:	2201      	movs	r2, #1
 8002f62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f64:	7bfa      	ldrb	r2, [r7, #15]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	3314      	adds	r3, #20
 8002f74:	7bfa      	ldrb	r2, [r7, #15]
 8002f76:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f78:	7bfa      	ldrb	r2, [r7, #15]
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	b298      	uxth	r0, r3
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	332e      	adds	r3, #46	@ 0x2e
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f90:	7bfa      	ldrb	r2, [r7, #15]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	4413      	add	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	3318      	adds	r3, #24
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fa4:	7bfa      	ldrb	r2, [r7, #15]
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	331c      	adds	r3, #28
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fb8:	7bfa      	ldrb	r2, [r7, #15]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	3320      	adds	r3, #32
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fcc:	7bfa      	ldrb	r2, [r7, #15]
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	3324      	adds	r3, #36	@ 0x24
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	73fb      	strb	r3, [r7, #15]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	791b      	ldrb	r3, [r3, #4]
 8002fea:	7bfa      	ldrb	r2, [r7, #15]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d3af      	bcc.n	8002f50 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	73fb      	strb	r3, [r7, #15]
 8002ff4:	e044      	b.n	8003080 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ff6:	7bfa      	ldrb	r2, [r7, #15]
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4413      	add	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003008:	2200      	movs	r2, #0
 800300a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800300c:	7bfa      	ldrb	r2, [r7, #15]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800301e:	7bfa      	ldrb	r2, [r7, #15]
 8003020:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003022:	7bfa      	ldrb	r2, [r7, #15]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003034:	2200      	movs	r2, #0
 8003036:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003038:	7bfa      	ldrb	r2, [r7, #15]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800304e:	7bfa      	ldrb	r2, [r7, #15]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003064:	7bfa      	ldrb	r2, [r7, #15]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800307a:	7bfb      	ldrb	r3, [r7, #15]
 800307c:	3301      	adds	r3, #1
 800307e:	73fb      	strb	r3, [r7, #15]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	791b      	ldrb	r3, [r3, #4]
 8003084:	7bfa      	ldrb	r2, [r7, #15]
 8003086:	429a      	cmp	r2, r3
 8003088:	d3b5      	bcc.n	8002ff6 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	7c1a      	ldrb	r2, [r3, #16]
 8003092:	f88d 2000 	strb.w	r2, [sp]
 8003096:	3304      	adds	r3, #4
 8003098:	cb0e      	ldmia	r3, {r1, r2, r3}
 800309a:	f002 fa27 	bl	80054ec <USB_DevInit>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d005      	beq.n	80030b0 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e013      	b.n	80030d8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	7b1b      	ldrb	r3, [r3, #12]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d102      	bne.n	80030cc <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f80a 	bl	80030e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f002 fbcc 	bl	800586e <USB_DevDisconnect>

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800310e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003112:	f043 0303 	orr.w	r3, r3, #3
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800312c:	4b05      	ldr	r3, [pc, #20]	@ (8003144 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a04      	ldr	r2, [pc, #16]	@ (8003144 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003136:	6013      	str	r3, [r2, #0]
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40007000 	.word	0x40007000

08003148 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800314c:	4b04      	ldr	r3, [pc, #16]	@ (8003160 <HAL_PWREx_GetVoltageRange+0x18>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003154:	4618      	mov	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40007000 	.word	0x40007000

08003164 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003172:	d130      	bne.n	80031d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003174:	4b23      	ldr	r3, [pc, #140]	@ (8003204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800317c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003180:	d038      	beq.n	80031f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003182:	4b20      	ldr	r3, [pc, #128]	@ (8003204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800318a:	4a1e      	ldr	r2, [pc, #120]	@ (8003204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800318c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003190:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003192:	4b1d      	ldr	r3, [pc, #116]	@ (8003208 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2232      	movs	r2, #50	@ 0x32
 8003198:	fb02 f303 	mul.w	r3, r2, r3
 800319c:	4a1b      	ldr	r2, [pc, #108]	@ (800320c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	0c9b      	lsrs	r3, r3, #18
 80031a4:	3301      	adds	r3, #1
 80031a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031a8:	e002      	b.n	80031b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	3b01      	subs	r3, #1
 80031ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031b0:	4b14      	ldr	r3, [pc, #80]	@ (8003204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031bc:	d102      	bne.n	80031c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1f2      	bne.n	80031aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031d0:	d110      	bne.n	80031f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e00f      	b.n	80031f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80031d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031e2:	d007      	beq.n	80031f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80031e4:	4b07      	ldr	r3, [pc, #28]	@ (8003204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031ec:	4a05      	ldr	r2, [pc, #20]	@ (8003204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40007000 	.word	0x40007000
 8003208:	20000000 	.word	0x20000000
 800320c:	431bde83 	.word	0x431bde83

08003210 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003214:	4b05      	ldr	r3, [pc, #20]	@ (800322c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	4a04      	ldr	r2, [pc, #16]	@ (800322c <HAL_PWREx_EnableVddUSB+0x1c>)
 800321a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800321e:	6053      	str	r3, [r2, #4]
}
 8003220:	bf00      	nop
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40007000 	.word	0x40007000

08003230 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003234:	4b05      	ldr	r3, [pc, #20]	@ (800324c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	4a04      	ldr	r2, [pc, #16]	@ (800324c <HAL_PWREx_EnableVddIO2+0x1c>)
 800323a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800323e:	6053      	str	r3, [r2, #4]
}
 8003240:	bf00      	nop
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40007000 	.word	0x40007000

08003250 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d102      	bne.n	8003264 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	f000 bc08 	b.w	8003a74 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003264:	4b96      	ldr	r3, [pc, #600]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 030c 	and.w	r3, r3, #12
 800326c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800326e:	4b94      	ldr	r3, [pc, #592]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0310 	and.w	r3, r3, #16
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 80e4 	beq.w	800344e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d007      	beq.n	800329c <HAL_RCC_OscConfig+0x4c>
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	2b0c      	cmp	r3, #12
 8003290:	f040 808b 	bne.w	80033aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2b01      	cmp	r3, #1
 8003298:	f040 8087 	bne.w	80033aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800329c:	4b88      	ldr	r3, [pc, #544]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_OscConfig+0x64>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e3df      	b.n	8003a74 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1a      	ldr	r2, [r3, #32]
 80032b8:	4b81      	ldr	r3, [pc, #516]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d004      	beq.n	80032ce <HAL_RCC_OscConfig+0x7e>
 80032c4:	4b7e      	ldr	r3, [pc, #504]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032cc:	e005      	b.n	80032da <HAL_RCC_OscConfig+0x8a>
 80032ce:	4b7c      	ldr	r3, [pc, #496]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 80032d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032d4:	091b      	lsrs	r3, r3, #4
 80032d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032da:	4293      	cmp	r3, r2
 80032dc:	d223      	bcs.n	8003326 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fd92 	bl	8003e0c <RCC_SetFlashLatencyFromMSIRange>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e3c0      	b.n	8003a74 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032f2:	4b73      	ldr	r3, [pc, #460]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a72      	ldr	r2, [pc, #456]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 80032f8:	f043 0308 	orr.w	r3, r3, #8
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	4b70      	ldr	r3, [pc, #448]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	496d      	ldr	r1, [pc, #436]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 800330c:	4313      	orrs	r3, r2
 800330e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003310:	4b6b      	ldr	r3, [pc, #428]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	4968      	ldr	r1, [pc, #416]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003320:	4313      	orrs	r3, r2
 8003322:	604b      	str	r3, [r1, #4]
 8003324:	e025      	b.n	8003372 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003326:	4b66      	ldr	r3, [pc, #408]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a65      	ldr	r2, [pc, #404]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 800332c:	f043 0308 	orr.w	r3, r3, #8
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	4b63      	ldr	r3, [pc, #396]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	4960      	ldr	r1, [pc, #384]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003340:	4313      	orrs	r3, r2
 8003342:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003344:	4b5e      	ldr	r3, [pc, #376]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	021b      	lsls	r3, r3, #8
 8003352:	495b      	ldr	r1, [pc, #364]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d109      	bne.n	8003372 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	4618      	mov	r0, r3
 8003364:	f000 fd52 	bl	8003e0c <RCC_SetFlashLatencyFromMSIRange>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e380      	b.n	8003a74 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003372:	f000 fc87 	bl	8003c84 <HAL_RCC_GetSysClockFreq>
 8003376:	4602      	mov	r2, r0
 8003378:	4b51      	ldr	r3, [pc, #324]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	091b      	lsrs	r3, r3, #4
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	4950      	ldr	r1, [pc, #320]	@ (80034c4 <HAL_RCC_OscConfig+0x274>)
 8003384:	5ccb      	ldrb	r3, [r1, r3]
 8003386:	f003 031f 	and.w	r3, r3, #31
 800338a:	fa22 f303 	lsr.w	r3, r2, r3
 800338e:	4a4e      	ldr	r2, [pc, #312]	@ (80034c8 <HAL_RCC_OscConfig+0x278>)
 8003390:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003392:	4b4e      	ldr	r3, [pc, #312]	@ (80034cc <HAL_RCC_OscConfig+0x27c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7fe fc9c 	bl	8001cd4 <HAL_InitTick>
 800339c:	4603      	mov	r3, r0
 800339e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d052      	beq.n	800344c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	e364      	b.n	8003a74 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d032      	beq.n	8003418 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033b2:	4b43      	ldr	r3, [pc, #268]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a42      	ldr	r2, [pc, #264]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 80033b8:	f043 0301 	orr.w	r3, r3, #1
 80033bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033be:	f7fe fcd9 	bl	8001d74 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033c6:	f7fe fcd5 	bl	8001d74 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e34d      	b.n	8003a74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033d8:	4b39      	ldr	r3, [pc, #228]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033e4:	4b36      	ldr	r3, [pc, #216]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a35      	ldr	r2, [pc, #212]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 80033ea:	f043 0308 	orr.w	r3, r3, #8
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	4b33      	ldr	r3, [pc, #204]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	4930      	ldr	r1, [pc, #192]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003402:	4b2f      	ldr	r3, [pc, #188]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	021b      	lsls	r3, r3, #8
 8003410:	492b      	ldr	r1, [pc, #172]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003412:	4313      	orrs	r3, r2
 8003414:	604b      	str	r3, [r1, #4]
 8003416:	e01a      	b.n	800344e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003418:	4b29      	ldr	r3, [pc, #164]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a28      	ldr	r2, [pc, #160]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 800341e:	f023 0301 	bic.w	r3, r3, #1
 8003422:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003424:	f7fe fca6 	bl	8001d74 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800342c:	f7fe fca2 	bl	8001d74 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e31a      	b.n	8003a74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800343e:	4b20      	ldr	r3, [pc, #128]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCC_OscConfig+0x1dc>
 800344a:	e000      	b.n	800344e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800344c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d073      	beq.n	8003542 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	2b08      	cmp	r3, #8
 800345e:	d005      	beq.n	800346c <HAL_RCC_OscConfig+0x21c>
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	2b0c      	cmp	r3, #12
 8003464:	d10e      	bne.n	8003484 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2b03      	cmp	r3, #3
 800346a:	d10b      	bne.n	8003484 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346c:	4b14      	ldr	r3, [pc, #80]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d063      	beq.n	8003540 <HAL_RCC_OscConfig+0x2f0>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d15f      	bne.n	8003540 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e2f7      	b.n	8003a74 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800348c:	d106      	bne.n	800349c <HAL_RCC_OscConfig+0x24c>
 800348e:	4b0c      	ldr	r3, [pc, #48]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a0b      	ldr	r2, [pc, #44]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003494:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	e025      	b.n	80034e8 <HAL_RCC_OscConfig+0x298>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034a4:	d114      	bne.n	80034d0 <HAL_RCC_OscConfig+0x280>
 80034a6:	4b06      	ldr	r3, [pc, #24]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a05      	ldr	r2, [pc, #20]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 80034ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	4b03      	ldr	r3, [pc, #12]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a02      	ldr	r2, [pc, #8]	@ (80034c0 <HAL_RCC_OscConfig+0x270>)
 80034b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	e013      	b.n	80034e8 <HAL_RCC_OscConfig+0x298>
 80034c0:	40021000 	.word	0x40021000
 80034c4:	08008628 	.word	0x08008628
 80034c8:	20000000 	.word	0x20000000
 80034cc:	20000004 	.word	0x20000004
 80034d0:	4ba0      	ldr	r3, [pc, #640]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a9f      	ldr	r2, [pc, #636]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 80034d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	4b9d      	ldr	r3, [pc, #628]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a9c      	ldr	r2, [pc, #624]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 80034e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d013      	beq.n	8003518 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f0:	f7fe fc40 	bl	8001d74 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f8:	f7fe fc3c 	bl	8001d74 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b64      	cmp	r3, #100	@ 0x64
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e2b4      	b.n	8003a74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800350a:	4b92      	ldr	r3, [pc, #584]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCC_OscConfig+0x2a8>
 8003516:	e014      	b.n	8003542 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fe fc2c 	bl	8001d74 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003520:	f7fe fc28 	bl	8001d74 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b64      	cmp	r3, #100	@ 0x64
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e2a0      	b.n	8003a74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003532:	4b88      	ldr	r3, [pc, #544]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x2d0>
 800353e:	e000      	b.n	8003542 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d060      	beq.n	8003610 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	2b04      	cmp	r3, #4
 8003552:	d005      	beq.n	8003560 <HAL_RCC_OscConfig+0x310>
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	2b0c      	cmp	r3, #12
 8003558:	d119      	bne.n	800358e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2b02      	cmp	r3, #2
 800355e:	d116      	bne.n	800358e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003560:	4b7c      	ldr	r3, [pc, #496]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_RCC_OscConfig+0x328>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e27d      	b.n	8003a74 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003578:	4b76      	ldr	r3, [pc, #472]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	061b      	lsls	r3, r3, #24
 8003586:	4973      	ldr	r1, [pc, #460]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 8003588:	4313      	orrs	r3, r2
 800358a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800358c:	e040      	b.n	8003610 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d023      	beq.n	80035de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003596:	4b6f      	ldr	r3, [pc, #444]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a6e      	ldr	r2, [pc, #440]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 800359c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a2:	f7fe fbe7 	bl	8001d74 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035aa:	f7fe fbe3 	bl	8001d74 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e25b      	b.n	8003a74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035bc:	4b65      	ldr	r3, [pc, #404]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f0      	beq.n	80035aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c8:	4b62      	ldr	r3, [pc, #392]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	061b      	lsls	r3, r3, #24
 80035d6:	495f      	ldr	r1, [pc, #380]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	604b      	str	r3, [r1, #4]
 80035dc:	e018      	b.n	8003610 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035de:	4b5d      	ldr	r3, [pc, #372]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a5c      	ldr	r2, [pc, #368]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 80035e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ea:	f7fe fbc3 	bl	8001d74 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f2:	f7fe fbbf 	bl	8001d74 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e237      	b.n	8003a74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003604:	4b53      	ldr	r3, [pc, #332]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f0      	bne.n	80035f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0308 	and.w	r3, r3, #8
 8003618:	2b00      	cmp	r3, #0
 800361a:	d03c      	beq.n	8003696 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d01c      	beq.n	800365e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003624:	4b4b      	ldr	r3, [pc, #300]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 8003626:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800362a:	4a4a      	ldr	r2, [pc, #296]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003634:	f7fe fb9e 	bl	8001d74 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800363c:	f7fe fb9a 	bl	8001d74 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e212      	b.n	8003a74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800364e:	4b41      	ldr	r3, [pc, #260]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 8003650:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0ef      	beq.n	800363c <HAL_RCC_OscConfig+0x3ec>
 800365c:	e01b      	b.n	8003696 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800365e:	4b3d      	ldr	r3, [pc, #244]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 8003660:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003664:	4a3b      	ldr	r2, [pc, #236]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 8003666:	f023 0301 	bic.w	r3, r3, #1
 800366a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366e:	f7fe fb81 	bl	8001d74 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003676:	f7fe fb7d 	bl	8001d74 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e1f5      	b.n	8003a74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003688:	4b32      	ldr	r3, [pc, #200]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 800368a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1ef      	bne.n	8003676 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 80a6 	beq.w	80037f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036a4:	2300      	movs	r3, #0
 80036a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80036a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 80036aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10d      	bne.n	80036d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036b4:	4b27      	ldr	r3, [pc, #156]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 80036b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b8:	4a26      	ldr	r2, [pc, #152]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 80036ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036be:	6593      	str	r3, [r2, #88]	@ 0x58
 80036c0:	4b24      	ldr	r3, [pc, #144]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 80036c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036c8:	60bb      	str	r3, [r7, #8]
 80036ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036cc:	2301      	movs	r3, #1
 80036ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036d0:	4b21      	ldr	r3, [pc, #132]	@ (8003758 <HAL_RCC_OscConfig+0x508>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d118      	bne.n	800370e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036dc:	4b1e      	ldr	r3, [pc, #120]	@ (8003758 <HAL_RCC_OscConfig+0x508>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003758 <HAL_RCC_OscConfig+0x508>)
 80036e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036e8:	f7fe fb44 	bl	8001d74 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036f0:	f7fe fb40 	bl	8001d74 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e1b8      	b.n	8003a74 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003702:	4b15      	ldr	r3, [pc, #84]	@ (8003758 <HAL_RCC_OscConfig+0x508>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d108      	bne.n	8003728 <HAL_RCC_OscConfig+0x4d8>
 8003716:	4b0f      	ldr	r3, [pc, #60]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 8003718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371c:	4a0d      	ldr	r2, [pc, #52]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 800371e:	f043 0301 	orr.w	r3, r3, #1
 8003722:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003726:	e029      	b.n	800377c <HAL_RCC_OscConfig+0x52c>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	2b05      	cmp	r3, #5
 800372e:	d115      	bne.n	800375c <HAL_RCC_OscConfig+0x50c>
 8003730:	4b08      	ldr	r3, [pc, #32]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 8003732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003736:	4a07      	ldr	r2, [pc, #28]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 8003738:	f043 0304 	orr.w	r3, r3, #4
 800373c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003740:	4b04      	ldr	r3, [pc, #16]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003746:	4a03      	ldr	r2, [pc, #12]	@ (8003754 <HAL_RCC_OscConfig+0x504>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003750:	e014      	b.n	800377c <HAL_RCC_OscConfig+0x52c>
 8003752:	bf00      	nop
 8003754:	40021000 	.word	0x40021000
 8003758:	40007000 	.word	0x40007000
 800375c:	4b9d      	ldr	r3, [pc, #628]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 800375e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003762:	4a9c      	ldr	r2, [pc, #624]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 8003764:	f023 0301 	bic.w	r3, r3, #1
 8003768:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800376c:	4b99      	ldr	r3, [pc, #612]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 800376e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003772:	4a98      	ldr	r2, [pc, #608]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 8003774:	f023 0304 	bic.w	r3, r3, #4
 8003778:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d016      	beq.n	80037b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003784:	f7fe faf6 	bl	8001d74 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800378a:	e00a      	b.n	80037a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378c:	f7fe faf2 	bl	8001d74 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800379a:	4293      	cmp	r3, r2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e168      	b.n	8003a74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037a2:	4b8c      	ldr	r3, [pc, #560]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 80037a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0ed      	beq.n	800378c <HAL_RCC_OscConfig+0x53c>
 80037b0:	e015      	b.n	80037de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b2:	f7fe fadf 	bl	8001d74 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037b8:	e00a      	b.n	80037d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ba:	f7fe fadb 	bl	8001d74 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e151      	b.n	8003a74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037d0:	4b80      	ldr	r3, [pc, #512]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 80037d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1ed      	bne.n	80037ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037de:	7ffb      	ldrb	r3, [r7, #31]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d105      	bne.n	80037f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037e4:	4b7b      	ldr	r3, [pc, #492]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 80037e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e8:	4a7a      	ldr	r2, [pc, #488]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 80037ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037ee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d03c      	beq.n	8003876 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	2b00      	cmp	r3, #0
 8003802:	d01c      	beq.n	800383e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003804:	4b73      	ldr	r3, [pc, #460]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 8003806:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800380a:	4a72      	ldr	r2, [pc, #456]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003814:	f7fe faae 	bl	8001d74 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800381c:	f7fe faaa 	bl	8001d74 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e122      	b.n	8003a74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800382e:	4b69      	ldr	r3, [pc, #420]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 8003830:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0ef      	beq.n	800381c <HAL_RCC_OscConfig+0x5cc>
 800383c:	e01b      	b.n	8003876 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800383e:	4b65      	ldr	r3, [pc, #404]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 8003840:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003844:	4a63      	ldr	r2, [pc, #396]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 8003846:	f023 0301 	bic.w	r3, r3, #1
 800384a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384e:	f7fe fa91 	bl	8001d74 <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003856:	f7fe fa8d 	bl	8001d74 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e105      	b.n	8003a74 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003868:	4b5a      	ldr	r3, [pc, #360]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 800386a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1ef      	bne.n	8003856 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 80f9 	beq.w	8003a72 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003884:	2b02      	cmp	r3, #2
 8003886:	f040 80cf 	bne.w	8003a28 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800388a:	4b52      	ldr	r3, [pc, #328]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f003 0203 	and.w	r2, r3, #3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389a:	429a      	cmp	r2, r3
 800389c:	d12c      	bne.n	80038f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a8:	3b01      	subs	r3, #1
 80038aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d123      	bne.n	80038f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038bc:	429a      	cmp	r2, r3
 80038be:	d11b      	bne.n	80038f8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d113      	bne.n	80038f8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038da:	085b      	lsrs	r3, r3, #1
 80038dc:	3b01      	subs	r3, #1
 80038de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d109      	bne.n	80038f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ee:	085b      	lsrs	r3, r3, #1
 80038f0:	3b01      	subs	r3, #1
 80038f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d071      	beq.n	80039dc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	2b0c      	cmp	r3, #12
 80038fc:	d068      	beq.n	80039d0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038fe:	4b35      	ldr	r3, [pc, #212]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d105      	bne.n	8003916 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800390a:	4b32      	ldr	r3, [pc, #200]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e0ac      	b.n	8003a74 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800391a:	4b2e      	ldr	r3, [pc, #184]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a2d      	ldr	r2, [pc, #180]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 8003920:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003924:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003926:	f7fe fa25 	bl	8001d74 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392e:	f7fe fa21 	bl	8001d74 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e099      	b.n	8003a74 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003940:	4b24      	ldr	r3, [pc, #144]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f0      	bne.n	800392e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800394c:	4b21      	ldr	r3, [pc, #132]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	4b21      	ldr	r3, [pc, #132]	@ (80039d8 <HAL_RCC_OscConfig+0x788>)
 8003952:	4013      	ands	r3, r2
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800395c:	3a01      	subs	r2, #1
 800395e:	0112      	lsls	r2, r2, #4
 8003960:	4311      	orrs	r1, r2
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003966:	0212      	lsls	r2, r2, #8
 8003968:	4311      	orrs	r1, r2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800396e:	0852      	lsrs	r2, r2, #1
 8003970:	3a01      	subs	r2, #1
 8003972:	0552      	lsls	r2, r2, #21
 8003974:	4311      	orrs	r1, r2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800397a:	0852      	lsrs	r2, r2, #1
 800397c:	3a01      	subs	r2, #1
 800397e:	0652      	lsls	r2, r2, #25
 8003980:	4311      	orrs	r1, r2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003986:	06d2      	lsls	r2, r2, #27
 8003988:	430a      	orrs	r2, r1
 800398a:	4912      	ldr	r1, [pc, #72]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 800398c:	4313      	orrs	r3, r2
 800398e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003990:	4b10      	ldr	r3, [pc, #64]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a0f      	ldr	r2, [pc, #60]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 8003996:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800399a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800399c:	4b0d      	ldr	r3, [pc, #52]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4a0c      	ldr	r2, [pc, #48]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 80039a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039a8:	f7fe f9e4 	bl	8001d74 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b0:	f7fe f9e0 	bl	8001d74 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e058      	b.n	8003a74 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039c2:	4b04      	ldr	r3, [pc, #16]	@ (80039d4 <HAL_RCC_OscConfig+0x784>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039ce:	e050      	b.n	8003a72 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e04f      	b.n	8003a74 <HAL_RCC_OscConfig+0x824>
 80039d4:	40021000 	.word	0x40021000
 80039d8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039dc:	4b27      	ldr	r3, [pc, #156]	@ (8003a7c <HAL_RCC_OscConfig+0x82c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d144      	bne.n	8003a72 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039e8:	4b24      	ldr	r3, [pc, #144]	@ (8003a7c <HAL_RCC_OscConfig+0x82c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a23      	ldr	r2, [pc, #140]	@ (8003a7c <HAL_RCC_OscConfig+0x82c>)
 80039ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039f4:	4b21      	ldr	r3, [pc, #132]	@ (8003a7c <HAL_RCC_OscConfig+0x82c>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	4a20      	ldr	r2, [pc, #128]	@ (8003a7c <HAL_RCC_OscConfig+0x82c>)
 80039fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a00:	f7fe f9b8 	bl	8001d74 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a08:	f7fe f9b4 	bl	8001d74 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e02c      	b.n	8003a74 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a1a:	4b18      	ldr	r3, [pc, #96]	@ (8003a7c <HAL_RCC_OscConfig+0x82c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f0      	beq.n	8003a08 <HAL_RCC_OscConfig+0x7b8>
 8003a26:	e024      	b.n	8003a72 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	2b0c      	cmp	r3, #12
 8003a2c:	d01f      	beq.n	8003a6e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2e:	4b13      	ldr	r3, [pc, #76]	@ (8003a7c <HAL_RCC_OscConfig+0x82c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a12      	ldr	r2, [pc, #72]	@ (8003a7c <HAL_RCC_OscConfig+0x82c>)
 8003a34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3a:	f7fe f99b 	bl	8001d74 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a42:	f7fe f997 	bl	8001d74 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e00f      	b.n	8003a74 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a54:	4b09      	ldr	r3, [pc, #36]	@ (8003a7c <HAL_RCC_OscConfig+0x82c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f0      	bne.n	8003a42 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a60:	4b06      	ldr	r3, [pc, #24]	@ (8003a7c <HAL_RCC_OscConfig+0x82c>)
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	4905      	ldr	r1, [pc, #20]	@ (8003a7c <HAL_RCC_OscConfig+0x82c>)
 8003a66:	4b06      	ldr	r3, [pc, #24]	@ (8003a80 <HAL_RCC_OscConfig+0x830>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	60cb      	str	r3, [r1, #12]
 8003a6c:	e001      	b.n	8003a72 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3720      	adds	r7, #32
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	feeefffc 	.word	0xfeeefffc

08003a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0e7      	b.n	8003c68 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a98:	4b75      	ldr	r3, [pc, #468]	@ (8003c70 <HAL_RCC_ClockConfig+0x1ec>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d910      	bls.n	8003ac8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa6:	4b72      	ldr	r3, [pc, #456]	@ (8003c70 <HAL_RCC_ClockConfig+0x1ec>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 0207 	bic.w	r2, r3, #7
 8003aae:	4970      	ldr	r1, [pc, #448]	@ (8003c70 <HAL_RCC_ClockConfig+0x1ec>)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab6:	4b6e      	ldr	r3, [pc, #440]	@ (8003c70 <HAL_RCC_ClockConfig+0x1ec>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d001      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0cf      	b.n	8003c68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d010      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	4b66      	ldr	r3, [pc, #408]	@ (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d908      	bls.n	8003af6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae4:	4b63      	ldr	r3, [pc, #396]	@ (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	4960      	ldr	r1, [pc, #384]	@ (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d04c      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d107      	bne.n	8003b1a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b0a:	4b5a      	ldr	r3, [pc, #360]	@ (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d121      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e0a6      	b.n	8003c68 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d107      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b22:	4b54      	ldr	r3, [pc, #336]	@ (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d115      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e09a      	b.n	8003c68 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d107      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b3a:	4b4e      	ldr	r3, [pc, #312]	@ (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d109      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e08e      	b.n	8003c68 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b4a:	4b4a      	ldr	r3, [pc, #296]	@ (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e086      	b.n	8003c68 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b5a:	4b46      	ldr	r3, [pc, #280]	@ (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f023 0203 	bic.w	r2, r3, #3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	4943      	ldr	r1, [pc, #268]	@ (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b6c:	f7fe f902 	bl	8001d74 <HAL_GetTick>
 8003b70:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b72:	e00a      	b.n	8003b8a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b74:	f7fe f8fe 	bl	8001d74 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e06e      	b.n	8003c68 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8a:	4b3a      	ldr	r3, [pc, #232]	@ (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 020c 	and.w	r2, r3, #12
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d1eb      	bne.n	8003b74 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d010      	beq.n	8003bca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	4b31      	ldr	r3, [pc, #196]	@ (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d208      	bcs.n	8003bca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	492b      	ldr	r1, [pc, #172]	@ (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bca:	4b29      	ldr	r3, [pc, #164]	@ (8003c70 <HAL_RCC_ClockConfig+0x1ec>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d210      	bcs.n	8003bfa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd8:	4b25      	ldr	r3, [pc, #148]	@ (8003c70 <HAL_RCC_ClockConfig+0x1ec>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f023 0207 	bic.w	r2, r3, #7
 8003be0:	4923      	ldr	r1, [pc, #140]	@ (8003c70 <HAL_RCC_ClockConfig+0x1ec>)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be8:	4b21      	ldr	r3, [pc, #132]	@ (8003c70 <HAL_RCC_ClockConfig+0x1ec>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d001      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e036      	b.n	8003c68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d008      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c06:	4b1b      	ldr	r3, [pc, #108]	@ (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	4918      	ldr	r1, [pc, #96]	@ (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0308 	and.w	r3, r3, #8
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d009      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c24:	4b13      	ldr	r3, [pc, #76]	@ (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	4910      	ldr	r1, [pc, #64]	@ (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c38:	f000 f824 	bl	8003c84 <HAL_RCC_GetSysClockFreq>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c74 <HAL_RCC_ClockConfig+0x1f0>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	091b      	lsrs	r3, r3, #4
 8003c44:	f003 030f 	and.w	r3, r3, #15
 8003c48:	490b      	ldr	r1, [pc, #44]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f4>)
 8003c4a:	5ccb      	ldrb	r3, [r1, r3]
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	fa22 f303 	lsr.w	r3, r2, r3
 8003c54:	4a09      	ldr	r2, [pc, #36]	@ (8003c7c <HAL_RCC_ClockConfig+0x1f8>)
 8003c56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c58:	4b09      	ldr	r3, [pc, #36]	@ (8003c80 <HAL_RCC_ClockConfig+0x1fc>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fe f839 	bl	8001cd4 <HAL_InitTick>
 8003c62:	4603      	mov	r3, r0
 8003c64:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c66:	7afb      	ldrb	r3, [r7, #11]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40022000 	.word	0x40022000
 8003c74:	40021000 	.word	0x40021000
 8003c78:	08008628 	.word	0x08008628
 8003c7c:	20000000 	.word	0x20000000
 8003c80:	20000004 	.word	0x20000004

08003c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b089      	sub	sp, #36	@ 0x24
 8003c88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c92:	4b3e      	ldr	r3, [pc, #248]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c9c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x34>
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	2b0c      	cmp	r3, #12
 8003cb0:	d121      	bne.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d11e      	bne.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cb8:	4b34      	ldr	r3, [pc, #208]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d107      	bne.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cc4:	4b31      	ldr	r3, [pc, #196]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cca:	0a1b      	lsrs	r3, r3, #8
 8003ccc:	f003 030f 	and.w	r3, r3, #15
 8003cd0:	61fb      	str	r3, [r7, #28]
 8003cd2:	e005      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cd4:	4b2d      	ldr	r3, [pc, #180]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	091b      	lsrs	r3, r3, #4
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ce0:	4a2b      	ldr	r2, [pc, #172]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10d      	bne.n	8003d0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cf4:	e00a      	b.n	8003d0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d102      	bne.n	8003d02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cfc:	4b25      	ldr	r3, [pc, #148]	@ (8003d94 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cfe:	61bb      	str	r3, [r7, #24]
 8003d00:	e004      	b.n	8003d0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d101      	bne.n	8003d0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d08:	4b23      	ldr	r3, [pc, #140]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	2b0c      	cmp	r3, #12
 8003d10:	d134      	bne.n	8003d7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d12:	4b1e      	ldr	r3, [pc, #120]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d003      	beq.n	8003d2a <HAL_RCC_GetSysClockFreq+0xa6>
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b03      	cmp	r3, #3
 8003d26:	d003      	beq.n	8003d30 <HAL_RCC_GetSysClockFreq+0xac>
 8003d28:	e005      	b.n	8003d36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8003d94 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d2c:	617b      	str	r3, [r7, #20]
      break;
 8003d2e:	e005      	b.n	8003d3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d30:	4b19      	ldr	r3, [pc, #100]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d32:	617b      	str	r3, [r7, #20]
      break;
 8003d34:	e002      	b.n	8003d3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	617b      	str	r3, [r7, #20]
      break;
 8003d3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d3c:	4b13      	ldr	r3, [pc, #76]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	091b      	lsrs	r3, r3, #4
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	3301      	adds	r3, #1
 8003d48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d4a:	4b10      	ldr	r3, [pc, #64]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	0a1b      	lsrs	r3, r3, #8
 8003d50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	fb03 f202 	mul.w	r2, r3, r2
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d62:	4b0a      	ldr	r3, [pc, #40]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	0e5b      	lsrs	r3, r3, #25
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d7c:	69bb      	ldr	r3, [r7, #24]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3724      	adds	r7, #36	@ 0x24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	08008640 	.word	0x08008640
 8003d94:	00f42400 	.word	0x00f42400
 8003d98:	007a1200 	.word	0x007a1200

08003d9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003da0:	4b03      	ldr	r3, [pc, #12]	@ (8003db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003da2:	681b      	ldr	r3, [r3, #0]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	20000000 	.word	0x20000000

08003db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003db8:	f7ff fff0 	bl	8003d9c <HAL_RCC_GetHCLKFreq>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	4b06      	ldr	r3, [pc, #24]	@ (8003dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	0a1b      	lsrs	r3, r3, #8
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	4904      	ldr	r1, [pc, #16]	@ (8003ddc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dca:	5ccb      	ldrb	r3, [r1, r3]
 8003dcc:	f003 031f 	and.w	r3, r3, #31
 8003dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	08008638 	.word	0x08008638

08003de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003de4:	f7ff ffda 	bl	8003d9c <HAL_RCC_GetHCLKFreq>
 8003de8:	4602      	mov	r2, r0
 8003dea:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	0adb      	lsrs	r3, r3, #11
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	4904      	ldr	r1, [pc, #16]	@ (8003e08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003df6:	5ccb      	ldrb	r3, [r1, r3]
 8003df8:	f003 031f 	and.w	r3, r3, #31
 8003dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40021000 	.word	0x40021000
 8003e08:	08008638 	.word	0x08008638

08003e0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e14:	2300      	movs	r3, #0
 8003e16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e18:	4b2a      	ldr	r3, [pc, #168]	@ (8003ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e24:	f7ff f990 	bl	8003148 <HAL_PWREx_GetVoltageRange>
 8003e28:	6178      	str	r0, [r7, #20]
 8003e2a:	e014      	b.n	8003e56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e2c:	4b25      	ldr	r3, [pc, #148]	@ (8003ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e30:	4a24      	ldr	r2, [pc, #144]	@ (8003ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e36:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e38:	4b22      	ldr	r3, [pc, #136]	@ (8003ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e44:	f7ff f980 	bl	8003148 <HAL_PWREx_GetVoltageRange>
 8003e48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e54:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e5c:	d10b      	bne.n	8003e76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b80      	cmp	r3, #128	@ 0x80
 8003e62:	d919      	bls.n	8003e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2ba0      	cmp	r3, #160	@ 0xa0
 8003e68:	d902      	bls.n	8003e70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	613b      	str	r3, [r7, #16]
 8003e6e:	e013      	b.n	8003e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e70:	2301      	movs	r3, #1
 8003e72:	613b      	str	r3, [r7, #16]
 8003e74:	e010      	b.n	8003e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b80      	cmp	r3, #128	@ 0x80
 8003e7a:	d902      	bls.n	8003e82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	e00a      	b.n	8003e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b80      	cmp	r3, #128	@ 0x80
 8003e86:	d102      	bne.n	8003e8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e88:	2302      	movs	r3, #2
 8003e8a:	613b      	str	r3, [r7, #16]
 8003e8c:	e004      	b.n	8003e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b70      	cmp	r3, #112	@ 0x70
 8003e92:	d101      	bne.n	8003e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e94:	2301      	movs	r3, #1
 8003e96:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e98:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f023 0207 	bic.w	r2, r3, #7
 8003ea0:	4909      	ldr	r1, [pc, #36]	@ (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ea8:	4b07      	ldr	r3, [pc, #28]	@ (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d001      	beq.n	8003eba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	40022000 	.word	0x40022000

08003ecc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ed8:	2300      	movs	r3, #0
 8003eda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d041      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003eec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ef0:	d02a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ef2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ef6:	d824      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ef8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003efc:	d008      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003efe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f02:	d81e      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00a      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f0c:	d010      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f0e:	e018      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f10:	4b86      	ldr	r3, [pc, #536]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	4a85      	ldr	r2, [pc, #532]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f1a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f1c:	e015      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3304      	adds	r3, #4
 8003f22:	2100      	movs	r1, #0
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 fadd 	bl	80044e4 <RCCEx_PLLSAI1_Config>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f2e:	e00c      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3320      	adds	r3, #32
 8003f34:	2100      	movs	r1, #0
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fbc6 	bl	80046c8 <RCCEx_PLLSAI2_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f40:	e003      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	74fb      	strb	r3, [r7, #19]
      break;
 8003f46:	e000      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f4a:	7cfb      	ldrb	r3, [r7, #19]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10b      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f50:	4b76      	ldr	r3, [pc, #472]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f56:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f5e:	4973      	ldr	r1, [pc, #460]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003f66:	e001      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f68:	7cfb      	ldrb	r3, [r7, #19]
 8003f6a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d041      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f80:	d02a      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f86:	d824      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f8c:	d008      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f92:	d81e      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f9c:	d010      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f9e:	e018      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fa0:	4b62      	ldr	r3, [pc, #392]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4a61      	ldr	r2, [pc, #388]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003faa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fac:	e015      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fa95 	bl	80044e4 <RCCEx_PLLSAI1_Config>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fbe:	e00c      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3320      	adds	r3, #32
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fb7e 	bl	80046c8 <RCCEx_PLLSAI2_Config>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fd0:	e003      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	74fb      	strb	r3, [r7, #19]
      break;
 8003fd6:	e000      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003fd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fda:	7cfb      	ldrb	r3, [r7, #19]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10b      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fe0:	4b52      	ldr	r3, [pc, #328]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fee:	494f      	ldr	r1, [pc, #316]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003ff6:	e001      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff8:	7cfb      	ldrb	r3, [r7, #19]
 8003ffa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80a0 	beq.w	800414a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800400a:	2300      	movs	r3, #0
 800400c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800400e:	4b47      	ldr	r3, [pc, #284]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800401e:	2300      	movs	r3, #0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00d      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004024:	4b41      	ldr	r3, [pc, #260]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004028:	4a40      	ldr	r2, [pc, #256]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800402a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800402e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004030:	4b3e      	ldr	r3, [pc, #248]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004034:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800403c:	2301      	movs	r3, #1
 800403e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004040:	4b3b      	ldr	r3, [pc, #236]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a3a      	ldr	r2, [pc, #232]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800404a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800404c:	f7fd fe92 	bl	8001d74 <HAL_GetTick>
 8004050:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004052:	e009      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004054:	f7fd fe8e 	bl	8001d74 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d902      	bls.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	74fb      	strb	r3, [r7, #19]
        break;
 8004066:	e005      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004068:	4b31      	ldr	r3, [pc, #196]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0ef      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004074:	7cfb      	ldrb	r3, [r7, #19]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d15c      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800407a:	4b2c      	ldr	r3, [pc, #176]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800407c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004080:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004084:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d01f      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	429a      	cmp	r2, r3
 8004096:	d019      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004098:	4b24      	ldr	r3, [pc, #144]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040a4:	4b21      	ldr	r3, [pc, #132]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040aa:	4a20      	ldr	r2, [pc, #128]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040b4:	4b1d      	ldr	r3, [pc, #116]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ba:	4a1c      	ldr	r2, [pc, #112]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040c4:	4a19      	ldr	r2, [pc, #100]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d016      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d6:	f7fd fe4d 	bl	8001d74 <HAL_GetTick>
 80040da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040dc:	e00b      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040de:	f7fd fe49 	bl	8001d74 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d902      	bls.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	74fb      	strb	r3, [r7, #19]
            break;
 80040f4:	e006      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040f6:	4b0d      	ldr	r3, [pc, #52]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0ec      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004104:	7cfb      	ldrb	r3, [r7, #19]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10c      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800410a:	4b08      	ldr	r3, [pc, #32]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800410c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004110:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800411a:	4904      	ldr	r1, [pc, #16]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004122:	e009      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004124:	7cfb      	ldrb	r3, [r7, #19]
 8004126:	74bb      	strb	r3, [r7, #18]
 8004128:	e006      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800412a:	bf00      	nop
 800412c:	40021000 	.word	0x40021000
 8004130:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004134:	7cfb      	ldrb	r3, [r7, #19]
 8004136:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004138:	7c7b      	ldrb	r3, [r7, #17]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d105      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800413e:	4ba6      	ldr	r3, [pc, #664]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004142:	4aa5      	ldr	r2, [pc, #660]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004144:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004148:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004156:	4ba0      	ldr	r3, [pc, #640]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415c:	f023 0203 	bic.w	r2, r3, #3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004164:	499c      	ldr	r1, [pc, #624]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004178:	4b97      	ldr	r3, [pc, #604]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800417e:	f023 020c 	bic.w	r2, r3, #12
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004186:	4994      	ldr	r1, [pc, #592]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800419a:	4b8f      	ldr	r3, [pc, #572]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a8:	498b      	ldr	r1, [pc, #556]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041bc:	4b86      	ldr	r3, [pc, #536]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ca:	4983      	ldr	r1, [pc, #524]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0310 	and.w	r3, r3, #16
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041de:	4b7e      	ldr	r3, [pc, #504]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ec:	497a      	ldr	r1, [pc, #488]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004200:	4b75      	ldr	r3, [pc, #468]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004206:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800420e:	4972      	ldr	r1, [pc, #456]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004222:	4b6d      	ldr	r3, [pc, #436]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004228:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004230:	4969      	ldr	r1, [pc, #420]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004244:	4b64      	ldr	r3, [pc, #400]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800424a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004252:	4961      	ldr	r1, [pc, #388]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004266:	4b5c      	ldr	r3, [pc, #368]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800426c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004274:	4958      	ldr	r1, [pc, #352]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004288:	4b53      	ldr	r3, [pc, #332]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800428e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004296:	4950      	ldr	r1, [pc, #320]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042aa:	4b4b      	ldr	r3, [pc, #300]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b8:	4947      	ldr	r1, [pc, #284]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042cc:	4b42      	ldr	r3, [pc, #264]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042d2:	f023 0203 	bic.w	r2, r3, #3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042da:	493f      	ldr	r1, [pc, #252]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d028      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042ee:	4b3a      	ldr	r3, [pc, #232]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042fc:	4936      	ldr	r1, [pc, #216]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004308:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800430c:	d106      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800430e:	4b32      	ldr	r3, [pc, #200]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	4a31      	ldr	r2, [pc, #196]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004314:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004318:	60d3      	str	r3, [r2, #12]
 800431a:	e011      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004320:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004324:	d10c      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3304      	adds	r3, #4
 800432a:	2101      	movs	r1, #1
 800432c:	4618      	mov	r0, r3
 800432e:	f000 f8d9 	bl	80044e4 <RCCEx_PLLSAI1_Config>
 8004332:	4603      	mov	r3, r0
 8004334:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004336:	7cfb      	ldrb	r3, [r7, #19]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800433c:	7cfb      	ldrb	r3, [r7, #19]
 800433e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d028      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800434c:	4b22      	ldr	r3, [pc, #136]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004352:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800435a:	491f      	ldr	r1, [pc, #124]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004366:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800436a:	d106      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800436c:	4b1a      	ldr	r3, [pc, #104]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	4a19      	ldr	r2, [pc, #100]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004372:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004376:	60d3      	str	r3, [r2, #12]
 8004378:	e011      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800437e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004382:	d10c      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3304      	adds	r3, #4
 8004388:	2101      	movs	r1, #1
 800438a:	4618      	mov	r0, r3
 800438c:	f000 f8aa 	bl	80044e4 <RCCEx_PLLSAI1_Config>
 8004390:	4603      	mov	r3, r0
 8004392:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004394:	7cfb      	ldrb	r3, [r7, #19]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800439a:	7cfb      	ldrb	r3, [r7, #19]
 800439c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d02a      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043aa:	4b0b      	ldr	r3, [pc, #44]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043b8:	4907      	ldr	r1, [pc, #28]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043c8:	d108      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043ca:	4b03      	ldr	r3, [pc, #12]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	4a02      	ldr	r2, [pc, #8]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043d4:	60d3      	str	r3, [r2, #12]
 80043d6:	e013      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80043d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043e4:	d10c      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	3304      	adds	r3, #4
 80043ea:	2101      	movs	r1, #1
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 f879 	bl	80044e4 <RCCEx_PLLSAI1_Config>
 80043f2:	4603      	mov	r3, r0
 80043f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043f6:	7cfb      	ldrb	r3, [r7, #19]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80043fc:	7cfb      	ldrb	r3, [r7, #19]
 80043fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d02f      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800440c:	4b2c      	ldr	r3, [pc, #176]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004412:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800441a:	4929      	ldr	r1, [pc, #164]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004426:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800442a:	d10d      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3304      	adds	r3, #4
 8004430:	2102      	movs	r1, #2
 8004432:	4618      	mov	r0, r3
 8004434:	f000 f856 	bl	80044e4 <RCCEx_PLLSAI1_Config>
 8004438:	4603      	mov	r3, r0
 800443a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800443c:	7cfb      	ldrb	r3, [r7, #19]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d014      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004442:	7cfb      	ldrb	r3, [r7, #19]
 8004444:	74bb      	strb	r3, [r7, #18]
 8004446:	e011      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800444c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004450:	d10c      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	3320      	adds	r3, #32
 8004456:	2102      	movs	r1, #2
 8004458:	4618      	mov	r0, r3
 800445a:	f000 f935 	bl	80046c8 <RCCEx_PLLSAI2_Config>
 800445e:	4603      	mov	r3, r0
 8004460:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004462:	7cfb      	ldrb	r3, [r7, #19]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004468:	7cfb      	ldrb	r3, [r7, #19]
 800446a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00b      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004478:	4b11      	ldr	r3, [pc, #68]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800447a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800447e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004488:	490d      	ldr	r1, [pc, #52]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800448a:	4313      	orrs	r3, r2
 800448c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00b      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800449c:	4b08      	ldr	r3, [pc, #32]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044ac:	4904      	ldr	r1, [pc, #16]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80044b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	40021000 	.word	0x40021000

080044c4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80044c8:	4b05      	ldr	r3, [pc, #20]	@ (80044e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a04      	ldr	r2, [pc, #16]	@ (80044e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80044ce:	f043 0304 	orr.w	r3, r3, #4
 80044d2:	6013      	str	r3, [r2, #0]
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40021000 	.word	0x40021000

080044e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044ee:	2300      	movs	r3, #0
 80044f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044f2:	4b74      	ldr	r3, [pc, #464]	@ (80046c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d018      	beq.n	8004530 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044fe:	4b71      	ldr	r3, [pc, #452]	@ (80046c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f003 0203 	and.w	r2, r3, #3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d10d      	bne.n	800452a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
       ||
 8004512:	2b00      	cmp	r3, #0
 8004514:	d009      	beq.n	800452a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004516:	4b6b      	ldr	r3, [pc, #428]	@ (80046c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	091b      	lsrs	r3, r3, #4
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
       ||
 8004526:	429a      	cmp	r2, r3
 8004528:	d047      	beq.n	80045ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	73fb      	strb	r3, [r7, #15]
 800452e:	e044      	b.n	80045ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b03      	cmp	r3, #3
 8004536:	d018      	beq.n	800456a <RCCEx_PLLSAI1_Config+0x86>
 8004538:	2b03      	cmp	r3, #3
 800453a:	d825      	bhi.n	8004588 <RCCEx_PLLSAI1_Config+0xa4>
 800453c:	2b01      	cmp	r3, #1
 800453e:	d002      	beq.n	8004546 <RCCEx_PLLSAI1_Config+0x62>
 8004540:	2b02      	cmp	r3, #2
 8004542:	d009      	beq.n	8004558 <RCCEx_PLLSAI1_Config+0x74>
 8004544:	e020      	b.n	8004588 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004546:	4b5f      	ldr	r3, [pc, #380]	@ (80046c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d11d      	bne.n	800458e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004556:	e01a      	b.n	800458e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004558:	4b5a      	ldr	r3, [pc, #360]	@ (80046c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004560:	2b00      	cmp	r3, #0
 8004562:	d116      	bne.n	8004592 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004568:	e013      	b.n	8004592 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800456a:	4b56      	ldr	r3, [pc, #344]	@ (80046c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10f      	bne.n	8004596 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004576:	4b53      	ldr	r3, [pc, #332]	@ (80046c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d109      	bne.n	8004596 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004586:	e006      	b.n	8004596 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	73fb      	strb	r3, [r7, #15]
      break;
 800458c:	e004      	b.n	8004598 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800458e:	bf00      	nop
 8004590:	e002      	b.n	8004598 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004592:	bf00      	nop
 8004594:	e000      	b.n	8004598 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004596:	bf00      	nop
    }

    if(status == HAL_OK)
 8004598:	7bfb      	ldrb	r3, [r7, #15]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10d      	bne.n	80045ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800459e:	4b49      	ldr	r3, [pc, #292]	@ (80046c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6819      	ldr	r1, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	430b      	orrs	r3, r1
 80045b4:	4943      	ldr	r1, [pc, #268]	@ (80046c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d17c      	bne.n	80046ba <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045c0:	4b40      	ldr	r3, [pc, #256]	@ (80046c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a3f      	ldr	r2, [pc, #252]	@ (80046c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80045ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045cc:	f7fd fbd2 	bl	8001d74 <HAL_GetTick>
 80045d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045d2:	e009      	b.n	80045e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045d4:	f7fd fbce 	bl	8001d74 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d902      	bls.n	80045e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	73fb      	strb	r3, [r7, #15]
        break;
 80045e6:	e005      	b.n	80045f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045e8:	4b36      	ldr	r3, [pc, #216]	@ (80046c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1ef      	bne.n	80045d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d15f      	bne.n	80046ba <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d110      	bne.n	8004622 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004600:	4b30      	ldr	r3, [pc, #192]	@ (80046c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004608:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6892      	ldr	r2, [r2, #8]
 8004610:	0211      	lsls	r1, r2, #8
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	68d2      	ldr	r2, [r2, #12]
 8004616:	06d2      	lsls	r2, r2, #27
 8004618:	430a      	orrs	r2, r1
 800461a:	492a      	ldr	r1, [pc, #168]	@ (80046c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800461c:	4313      	orrs	r3, r2
 800461e:	610b      	str	r3, [r1, #16]
 8004620:	e027      	b.n	8004672 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d112      	bne.n	800464e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004628:	4b26      	ldr	r3, [pc, #152]	@ (80046c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004630:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6892      	ldr	r2, [r2, #8]
 8004638:	0211      	lsls	r1, r2, #8
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6912      	ldr	r2, [r2, #16]
 800463e:	0852      	lsrs	r2, r2, #1
 8004640:	3a01      	subs	r2, #1
 8004642:	0552      	lsls	r2, r2, #21
 8004644:	430a      	orrs	r2, r1
 8004646:	491f      	ldr	r1, [pc, #124]	@ (80046c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004648:	4313      	orrs	r3, r2
 800464a:	610b      	str	r3, [r1, #16]
 800464c:	e011      	b.n	8004672 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800464e:	4b1d      	ldr	r3, [pc, #116]	@ (80046c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004656:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6892      	ldr	r2, [r2, #8]
 800465e:	0211      	lsls	r1, r2, #8
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6952      	ldr	r2, [r2, #20]
 8004664:	0852      	lsrs	r2, r2, #1
 8004666:	3a01      	subs	r2, #1
 8004668:	0652      	lsls	r2, r2, #25
 800466a:	430a      	orrs	r2, r1
 800466c:	4915      	ldr	r1, [pc, #84]	@ (80046c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800466e:	4313      	orrs	r3, r2
 8004670:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004672:	4b14      	ldr	r3, [pc, #80]	@ (80046c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a13      	ldr	r2, [pc, #76]	@ (80046c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004678:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800467c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467e:	f7fd fb79 	bl	8001d74 <HAL_GetTick>
 8004682:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004684:	e009      	b.n	800469a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004686:	f7fd fb75 	bl	8001d74 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d902      	bls.n	800469a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	73fb      	strb	r3, [r7, #15]
          break;
 8004698:	e005      	b.n	80046a6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800469a:	4b0a      	ldr	r3, [pc, #40]	@ (80046c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0ef      	beq.n	8004686 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80046a6:	7bfb      	ldrb	r3, [r7, #15]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d106      	bne.n	80046ba <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046ac:	4b05      	ldr	r3, [pc, #20]	@ (80046c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	4903      	ldr	r1, [pc, #12]	@ (80046c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40021000 	.word	0x40021000

080046c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046d6:	4b69      	ldr	r3, [pc, #420]	@ (800487c <RCCEx_PLLSAI2_Config+0x1b4>)
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d018      	beq.n	8004714 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80046e2:	4b66      	ldr	r3, [pc, #408]	@ (800487c <RCCEx_PLLSAI2_Config+0x1b4>)
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f003 0203 	and.w	r2, r3, #3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d10d      	bne.n	800470e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
       ||
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d009      	beq.n	800470e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80046fa:	4b60      	ldr	r3, [pc, #384]	@ (800487c <RCCEx_PLLSAI2_Config+0x1b4>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	091b      	lsrs	r3, r3, #4
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
       ||
 800470a:	429a      	cmp	r2, r3
 800470c:	d047      	beq.n	800479e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	73fb      	strb	r3, [r7, #15]
 8004712:	e044      	b.n	800479e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b03      	cmp	r3, #3
 800471a:	d018      	beq.n	800474e <RCCEx_PLLSAI2_Config+0x86>
 800471c:	2b03      	cmp	r3, #3
 800471e:	d825      	bhi.n	800476c <RCCEx_PLLSAI2_Config+0xa4>
 8004720:	2b01      	cmp	r3, #1
 8004722:	d002      	beq.n	800472a <RCCEx_PLLSAI2_Config+0x62>
 8004724:	2b02      	cmp	r3, #2
 8004726:	d009      	beq.n	800473c <RCCEx_PLLSAI2_Config+0x74>
 8004728:	e020      	b.n	800476c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800472a:	4b54      	ldr	r3, [pc, #336]	@ (800487c <RCCEx_PLLSAI2_Config+0x1b4>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d11d      	bne.n	8004772 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800473a:	e01a      	b.n	8004772 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800473c:	4b4f      	ldr	r3, [pc, #316]	@ (800487c <RCCEx_PLLSAI2_Config+0x1b4>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004744:	2b00      	cmp	r3, #0
 8004746:	d116      	bne.n	8004776 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800474c:	e013      	b.n	8004776 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800474e:	4b4b      	ldr	r3, [pc, #300]	@ (800487c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10f      	bne.n	800477a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800475a:	4b48      	ldr	r3, [pc, #288]	@ (800487c <RCCEx_PLLSAI2_Config+0x1b4>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d109      	bne.n	800477a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800476a:	e006      	b.n	800477a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
      break;
 8004770:	e004      	b.n	800477c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004772:	bf00      	nop
 8004774:	e002      	b.n	800477c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004776:	bf00      	nop
 8004778:	e000      	b.n	800477c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800477a:	bf00      	nop
    }

    if(status == HAL_OK)
 800477c:	7bfb      	ldrb	r3, [r7, #15]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10d      	bne.n	800479e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004782:	4b3e      	ldr	r3, [pc, #248]	@ (800487c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6819      	ldr	r1, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	3b01      	subs	r3, #1
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	430b      	orrs	r3, r1
 8004798:	4938      	ldr	r1, [pc, #224]	@ (800487c <RCCEx_PLLSAI2_Config+0x1b4>)
 800479a:	4313      	orrs	r3, r2
 800479c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800479e:	7bfb      	ldrb	r3, [r7, #15]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d166      	bne.n	8004872 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80047a4:	4b35      	ldr	r3, [pc, #212]	@ (800487c <RCCEx_PLLSAI2_Config+0x1b4>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a34      	ldr	r2, [pc, #208]	@ (800487c <RCCEx_PLLSAI2_Config+0x1b4>)
 80047aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047b0:	f7fd fae0 	bl	8001d74 <HAL_GetTick>
 80047b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047b6:	e009      	b.n	80047cc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047b8:	f7fd fadc 	bl	8001d74 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d902      	bls.n	80047cc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	73fb      	strb	r3, [r7, #15]
        break;
 80047ca:	e005      	b.n	80047d8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047cc:	4b2b      	ldr	r3, [pc, #172]	@ (800487c <RCCEx_PLLSAI2_Config+0x1b4>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1ef      	bne.n	80047b8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d149      	bne.n	8004872 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d110      	bne.n	8004806 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047e4:	4b25      	ldr	r3, [pc, #148]	@ (800487c <RCCEx_PLLSAI2_Config+0x1b4>)
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80047ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6892      	ldr	r2, [r2, #8]
 80047f4:	0211      	lsls	r1, r2, #8
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	68d2      	ldr	r2, [r2, #12]
 80047fa:	06d2      	lsls	r2, r2, #27
 80047fc:	430a      	orrs	r2, r1
 80047fe:	491f      	ldr	r1, [pc, #124]	@ (800487c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004800:	4313      	orrs	r3, r2
 8004802:	614b      	str	r3, [r1, #20]
 8004804:	e011      	b.n	800482a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004806:	4b1d      	ldr	r3, [pc, #116]	@ (800487c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800480e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6892      	ldr	r2, [r2, #8]
 8004816:	0211      	lsls	r1, r2, #8
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6912      	ldr	r2, [r2, #16]
 800481c:	0852      	lsrs	r2, r2, #1
 800481e:	3a01      	subs	r2, #1
 8004820:	0652      	lsls	r2, r2, #25
 8004822:	430a      	orrs	r2, r1
 8004824:	4915      	ldr	r1, [pc, #84]	@ (800487c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004826:	4313      	orrs	r3, r2
 8004828:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800482a:	4b14      	ldr	r3, [pc, #80]	@ (800487c <RCCEx_PLLSAI2_Config+0x1b4>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a13      	ldr	r2, [pc, #76]	@ (800487c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004834:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004836:	f7fd fa9d 	bl	8001d74 <HAL_GetTick>
 800483a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800483c:	e009      	b.n	8004852 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800483e:	f7fd fa99 	bl	8001d74 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d902      	bls.n	8004852 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	73fb      	strb	r3, [r7, #15]
          break;
 8004850:	e005      	b.n	800485e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004852:	4b0a      	ldr	r3, [pc, #40]	@ (800487c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0ef      	beq.n	800483e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800485e:	7bfb      	ldrb	r3, [r7, #15]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d106      	bne.n	8004872 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004864:	4b05      	ldr	r3, [pc, #20]	@ (800487c <RCCEx_PLLSAI2_Config+0x1b4>)
 8004866:	695a      	ldr	r2, [r3, #20]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	4903      	ldr	r1, [pc, #12]	@ (800487c <RCCEx_PLLSAI2_Config+0x1b4>)
 800486e:	4313      	orrs	r3, r2
 8004870:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004872:	7bfb      	ldrb	r3, [r7, #15]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40021000 	.word	0x40021000

08004880 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e040      	b.n	8004914 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fc ff8a 	bl	80017bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2224      	movs	r2, #36	@ 0x24
 80048ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0201 	bic.w	r2, r2, #1
 80048bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d002      	beq.n	80048cc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 fb6a 	bl	8004fa0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f8af 	bl	8004a30 <UART_SetConfig>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e01b      	b.n	8004914 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 fbe9 	bl	80050e4 <UART_CheckIdleState>
 8004912:	4603      	mov	r3, r0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08a      	sub	sp, #40	@ 0x28
 8004920:	af02      	add	r7, sp, #8
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	603b      	str	r3, [r7, #0]
 8004928:	4613      	mov	r3, r2
 800492a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004930:	2b20      	cmp	r3, #32
 8004932:	d177      	bne.n	8004a24 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <HAL_UART_Transmit+0x24>
 800493a:	88fb      	ldrh	r3, [r7, #6]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e070      	b.n	8004a26 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2221      	movs	r2, #33	@ 0x21
 8004950:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004952:	f7fd fa0f 	bl	8001d74 <HAL_GetTick>
 8004956:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	88fa      	ldrh	r2, [r7, #6]
 800495c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	88fa      	ldrh	r2, [r7, #6]
 8004964:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004970:	d108      	bne.n	8004984 <HAL_UART_Transmit+0x68>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d104      	bne.n	8004984 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800497a:	2300      	movs	r3, #0
 800497c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	61bb      	str	r3, [r7, #24]
 8004982:	e003      	b.n	800498c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004988:	2300      	movs	r3, #0
 800498a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800498c:	e02f      	b.n	80049ee <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2200      	movs	r2, #0
 8004996:	2180      	movs	r1, #128	@ 0x80
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 fc4b 	bl	8005234 <UART_WaitOnFlagUntilTimeout>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d004      	beq.n	80049ae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2220      	movs	r2, #32
 80049a8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e03b      	b.n	8004a26 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10b      	bne.n	80049cc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	881a      	ldrh	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049c0:	b292      	uxth	r2, r2
 80049c2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	3302      	adds	r3, #2
 80049c8:	61bb      	str	r3, [r7, #24]
 80049ca:	e007      	b.n	80049dc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	781a      	ldrb	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	3301      	adds	r3, #1
 80049da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1c9      	bne.n	800498e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2200      	movs	r2, #0
 8004a02:	2140      	movs	r1, #64	@ 0x40
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 fc15 	bl	8005234 <UART_WaitOnFlagUntilTimeout>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d004      	beq.n	8004a1a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2220      	movs	r2, #32
 8004a14:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e005      	b.n	8004a26 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004a20:	2300      	movs	r3, #0
 8004a22:	e000      	b.n	8004a26 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004a24:	2302      	movs	r3, #2
  }
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3720      	adds	r7, #32
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a34:	b08a      	sub	sp, #40	@ 0x28
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	4ba4      	ldr	r3, [pc, #656]	@ (8004cf0 <UART_SetConfig+0x2c0>)
 8004a60:	4013      	ands	r3, r2
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	6812      	ldr	r2, [r2, #0]
 8004a66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a68:	430b      	orrs	r3, r1
 8004a6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a99      	ldr	r2, [pc, #612]	@ (8004cf4 <UART_SetConfig+0x2c4>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d004      	beq.n	8004a9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aac:	430a      	orrs	r2, r1
 8004aae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a90      	ldr	r2, [pc, #576]	@ (8004cf8 <UART_SetConfig+0x2c8>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d126      	bne.n	8004b08 <UART_SetConfig+0xd8>
 8004aba:	4b90      	ldr	r3, [pc, #576]	@ (8004cfc <UART_SetConfig+0x2cc>)
 8004abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac0:	f003 0303 	and.w	r3, r3, #3
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d81b      	bhi.n	8004b00 <UART_SetConfig+0xd0>
 8004ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad0 <UART_SetConfig+0xa0>)
 8004aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ace:	bf00      	nop
 8004ad0:	08004ae1 	.word	0x08004ae1
 8004ad4:	08004af1 	.word	0x08004af1
 8004ad8:	08004ae9 	.word	0x08004ae9
 8004adc:	08004af9 	.word	0x08004af9
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ae6:	e116      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aee:	e112      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004af0:	2304      	movs	r3, #4
 8004af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004af6:	e10e      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004af8:	2308      	movs	r3, #8
 8004afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004afe:	e10a      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004b00:	2310      	movs	r3, #16
 8004b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b06:	e106      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a7c      	ldr	r2, [pc, #496]	@ (8004d00 <UART_SetConfig+0x2d0>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d138      	bne.n	8004b84 <UART_SetConfig+0x154>
 8004b12:	4b7a      	ldr	r3, [pc, #488]	@ (8004cfc <UART_SetConfig+0x2cc>)
 8004b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b18:	f003 030c 	and.w	r3, r3, #12
 8004b1c:	2b0c      	cmp	r3, #12
 8004b1e:	d82d      	bhi.n	8004b7c <UART_SetConfig+0x14c>
 8004b20:	a201      	add	r2, pc, #4	@ (adr r2, 8004b28 <UART_SetConfig+0xf8>)
 8004b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b26:	bf00      	nop
 8004b28:	08004b5d 	.word	0x08004b5d
 8004b2c:	08004b7d 	.word	0x08004b7d
 8004b30:	08004b7d 	.word	0x08004b7d
 8004b34:	08004b7d 	.word	0x08004b7d
 8004b38:	08004b6d 	.word	0x08004b6d
 8004b3c:	08004b7d 	.word	0x08004b7d
 8004b40:	08004b7d 	.word	0x08004b7d
 8004b44:	08004b7d 	.word	0x08004b7d
 8004b48:	08004b65 	.word	0x08004b65
 8004b4c:	08004b7d 	.word	0x08004b7d
 8004b50:	08004b7d 	.word	0x08004b7d
 8004b54:	08004b7d 	.word	0x08004b7d
 8004b58:	08004b75 	.word	0x08004b75
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b62:	e0d8      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004b64:	2302      	movs	r3, #2
 8004b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b6a:	e0d4      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004b6c:	2304      	movs	r3, #4
 8004b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b72:	e0d0      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004b74:	2308      	movs	r3, #8
 8004b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b7a:	e0cc      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004b7c:	2310      	movs	r3, #16
 8004b7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b82:	e0c8      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a5e      	ldr	r2, [pc, #376]	@ (8004d04 <UART_SetConfig+0x2d4>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d125      	bne.n	8004bda <UART_SetConfig+0x1aa>
 8004b8e:	4b5b      	ldr	r3, [pc, #364]	@ (8004cfc <UART_SetConfig+0x2cc>)
 8004b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b94:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004b98:	2b30      	cmp	r3, #48	@ 0x30
 8004b9a:	d016      	beq.n	8004bca <UART_SetConfig+0x19a>
 8004b9c:	2b30      	cmp	r3, #48	@ 0x30
 8004b9e:	d818      	bhi.n	8004bd2 <UART_SetConfig+0x1a2>
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	d00a      	beq.n	8004bba <UART_SetConfig+0x18a>
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d814      	bhi.n	8004bd2 <UART_SetConfig+0x1a2>
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <UART_SetConfig+0x182>
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d008      	beq.n	8004bc2 <UART_SetConfig+0x192>
 8004bb0:	e00f      	b.n	8004bd2 <UART_SetConfig+0x1a2>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bb8:	e0ad      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004bba:	2302      	movs	r3, #2
 8004bbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bc0:	e0a9      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004bc2:	2304      	movs	r3, #4
 8004bc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bc8:	e0a5      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004bca:	2308      	movs	r3, #8
 8004bcc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bd0:	e0a1      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004bd2:	2310      	movs	r3, #16
 8004bd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bd8:	e09d      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a4a      	ldr	r2, [pc, #296]	@ (8004d08 <UART_SetConfig+0x2d8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d125      	bne.n	8004c30 <UART_SetConfig+0x200>
 8004be4:	4b45      	ldr	r3, [pc, #276]	@ (8004cfc <UART_SetConfig+0x2cc>)
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004bee:	2bc0      	cmp	r3, #192	@ 0xc0
 8004bf0:	d016      	beq.n	8004c20 <UART_SetConfig+0x1f0>
 8004bf2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004bf4:	d818      	bhi.n	8004c28 <UART_SetConfig+0x1f8>
 8004bf6:	2b80      	cmp	r3, #128	@ 0x80
 8004bf8:	d00a      	beq.n	8004c10 <UART_SetConfig+0x1e0>
 8004bfa:	2b80      	cmp	r3, #128	@ 0x80
 8004bfc:	d814      	bhi.n	8004c28 <UART_SetConfig+0x1f8>
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <UART_SetConfig+0x1d8>
 8004c02:	2b40      	cmp	r3, #64	@ 0x40
 8004c04:	d008      	beq.n	8004c18 <UART_SetConfig+0x1e8>
 8004c06:	e00f      	b.n	8004c28 <UART_SetConfig+0x1f8>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c0e:	e082      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004c10:	2302      	movs	r3, #2
 8004c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c16:	e07e      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004c18:	2304      	movs	r3, #4
 8004c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c1e:	e07a      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004c20:	2308      	movs	r3, #8
 8004c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c26:	e076      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004c28:	2310      	movs	r3, #16
 8004c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c2e:	e072      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a35      	ldr	r2, [pc, #212]	@ (8004d0c <UART_SetConfig+0x2dc>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d12a      	bne.n	8004c90 <UART_SetConfig+0x260>
 8004c3a:	4b30      	ldr	r3, [pc, #192]	@ (8004cfc <UART_SetConfig+0x2cc>)
 8004c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c48:	d01a      	beq.n	8004c80 <UART_SetConfig+0x250>
 8004c4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c4e:	d81b      	bhi.n	8004c88 <UART_SetConfig+0x258>
 8004c50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c54:	d00c      	beq.n	8004c70 <UART_SetConfig+0x240>
 8004c56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c5a:	d815      	bhi.n	8004c88 <UART_SetConfig+0x258>
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <UART_SetConfig+0x238>
 8004c60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c64:	d008      	beq.n	8004c78 <UART_SetConfig+0x248>
 8004c66:	e00f      	b.n	8004c88 <UART_SetConfig+0x258>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c6e:	e052      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004c70:	2302      	movs	r3, #2
 8004c72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c76:	e04e      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004c78:	2304      	movs	r3, #4
 8004c7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c7e:	e04a      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004c80:	2308      	movs	r3, #8
 8004c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c86:	e046      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004c88:	2310      	movs	r3, #16
 8004c8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c8e:	e042      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a17      	ldr	r2, [pc, #92]	@ (8004cf4 <UART_SetConfig+0x2c4>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d13a      	bne.n	8004d10 <UART_SetConfig+0x2e0>
 8004c9a:	4b18      	ldr	r3, [pc, #96]	@ (8004cfc <UART_SetConfig+0x2cc>)
 8004c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ca0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ca4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ca8:	d01a      	beq.n	8004ce0 <UART_SetConfig+0x2b0>
 8004caa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cae:	d81b      	bhi.n	8004ce8 <UART_SetConfig+0x2b8>
 8004cb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cb4:	d00c      	beq.n	8004cd0 <UART_SetConfig+0x2a0>
 8004cb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cba:	d815      	bhi.n	8004ce8 <UART_SetConfig+0x2b8>
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <UART_SetConfig+0x298>
 8004cc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cc4:	d008      	beq.n	8004cd8 <UART_SetConfig+0x2a8>
 8004cc6:	e00f      	b.n	8004ce8 <UART_SetConfig+0x2b8>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cce:	e022      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cd6:	e01e      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004cd8:	2304      	movs	r3, #4
 8004cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cde:	e01a      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004ce0:	2308      	movs	r3, #8
 8004ce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ce6:	e016      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004ce8:	2310      	movs	r3, #16
 8004cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cee:	e012      	b.n	8004d16 <UART_SetConfig+0x2e6>
 8004cf0:	efff69f3 	.word	0xefff69f3
 8004cf4:	40008000 	.word	0x40008000
 8004cf8:	40013800 	.word	0x40013800
 8004cfc:	40021000 	.word	0x40021000
 8004d00:	40004400 	.word	0x40004400
 8004d04:	40004800 	.word	0x40004800
 8004d08:	40004c00 	.word	0x40004c00
 8004d0c:	40005000 	.word	0x40005000
 8004d10:	2310      	movs	r3, #16
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a9f      	ldr	r2, [pc, #636]	@ (8004f98 <UART_SetConfig+0x568>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d17a      	bne.n	8004e16 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d20:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d824      	bhi.n	8004d72 <UART_SetConfig+0x342>
 8004d28:	a201      	add	r2, pc, #4	@ (adr r2, 8004d30 <UART_SetConfig+0x300>)
 8004d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2e:	bf00      	nop
 8004d30:	08004d55 	.word	0x08004d55
 8004d34:	08004d73 	.word	0x08004d73
 8004d38:	08004d5d 	.word	0x08004d5d
 8004d3c:	08004d73 	.word	0x08004d73
 8004d40:	08004d63 	.word	0x08004d63
 8004d44:	08004d73 	.word	0x08004d73
 8004d48:	08004d73 	.word	0x08004d73
 8004d4c:	08004d73 	.word	0x08004d73
 8004d50:	08004d6b 	.word	0x08004d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d54:	f7ff f82e 	bl	8003db4 <HAL_RCC_GetPCLK1Freq>
 8004d58:	61f8      	str	r0, [r7, #28]
        break;
 8004d5a:	e010      	b.n	8004d7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d5c:	4b8f      	ldr	r3, [pc, #572]	@ (8004f9c <UART_SetConfig+0x56c>)
 8004d5e:	61fb      	str	r3, [r7, #28]
        break;
 8004d60:	e00d      	b.n	8004d7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d62:	f7fe ff8f 	bl	8003c84 <HAL_RCC_GetSysClockFreq>
 8004d66:	61f8      	str	r0, [r7, #28]
        break;
 8004d68:	e009      	b.n	8004d7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d6e:	61fb      	str	r3, [r7, #28]
        break;
 8004d70:	e005      	b.n	8004d7e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 80fb 	beq.w	8004f7c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	4413      	add	r3, r2
 8004d90:	69fa      	ldr	r2, [r7, #28]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d305      	bcc.n	8004da2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d9c:	69fa      	ldr	r2, [r7, #28]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d903      	bls.n	8004daa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004da8:	e0e8      	b.n	8004f7c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	2200      	movs	r2, #0
 8004dae:	461c      	mov	r4, r3
 8004db0:	4615      	mov	r5, r2
 8004db2:	f04f 0200 	mov.w	r2, #0
 8004db6:	f04f 0300 	mov.w	r3, #0
 8004dba:	022b      	lsls	r3, r5, #8
 8004dbc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004dc0:	0222      	lsls	r2, r4, #8
 8004dc2:	68f9      	ldr	r1, [r7, #12]
 8004dc4:	6849      	ldr	r1, [r1, #4]
 8004dc6:	0849      	lsrs	r1, r1, #1
 8004dc8:	2000      	movs	r0, #0
 8004dca:	4688      	mov	r8, r1
 8004dcc:	4681      	mov	r9, r0
 8004dce:	eb12 0a08 	adds.w	sl, r2, r8
 8004dd2:	eb43 0b09 	adc.w	fp, r3, r9
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	603b      	str	r3, [r7, #0]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004de4:	4650      	mov	r0, sl
 8004de6:	4659      	mov	r1, fp
 8004de8:	f7fb ff3e 	bl	8000c68 <__aeabi_uldivmod>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4613      	mov	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dfa:	d308      	bcc.n	8004e0e <UART_SetConfig+0x3de>
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e02:	d204      	bcs.n	8004e0e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	60da      	str	r2, [r3, #12]
 8004e0c:	e0b6      	b.n	8004f7c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e14:	e0b2      	b.n	8004f7c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e1e:	d15e      	bne.n	8004ede <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004e20:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d828      	bhi.n	8004e7a <UART_SetConfig+0x44a>
 8004e28:	a201      	add	r2, pc, #4	@ (adr r2, 8004e30 <UART_SetConfig+0x400>)
 8004e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2e:	bf00      	nop
 8004e30:	08004e55 	.word	0x08004e55
 8004e34:	08004e5d 	.word	0x08004e5d
 8004e38:	08004e65 	.word	0x08004e65
 8004e3c:	08004e7b 	.word	0x08004e7b
 8004e40:	08004e6b 	.word	0x08004e6b
 8004e44:	08004e7b 	.word	0x08004e7b
 8004e48:	08004e7b 	.word	0x08004e7b
 8004e4c:	08004e7b 	.word	0x08004e7b
 8004e50:	08004e73 	.word	0x08004e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e54:	f7fe ffae 	bl	8003db4 <HAL_RCC_GetPCLK1Freq>
 8004e58:	61f8      	str	r0, [r7, #28]
        break;
 8004e5a:	e014      	b.n	8004e86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e5c:	f7fe ffc0 	bl	8003de0 <HAL_RCC_GetPCLK2Freq>
 8004e60:	61f8      	str	r0, [r7, #28]
        break;
 8004e62:	e010      	b.n	8004e86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e64:	4b4d      	ldr	r3, [pc, #308]	@ (8004f9c <UART_SetConfig+0x56c>)
 8004e66:	61fb      	str	r3, [r7, #28]
        break;
 8004e68:	e00d      	b.n	8004e86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e6a:	f7fe ff0b 	bl	8003c84 <HAL_RCC_GetSysClockFreq>
 8004e6e:	61f8      	str	r0, [r7, #28]
        break;
 8004e70:	e009      	b.n	8004e86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e76:	61fb      	str	r3, [r7, #28]
        break;
 8004e78:	e005      	b.n	8004e86 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d077      	beq.n	8004f7c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	005a      	lsls	r2, r3, #1
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	085b      	lsrs	r3, r3, #1
 8004e96:	441a      	add	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	2b0f      	cmp	r3, #15
 8004ea6:	d916      	bls.n	8004ed6 <UART_SetConfig+0x4a6>
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eae:	d212      	bcs.n	8004ed6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f023 030f 	bic.w	r3, r3, #15
 8004eb8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	085b      	lsrs	r3, r3, #1
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	8afb      	ldrh	r3, [r7, #22]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	8afa      	ldrh	r2, [r7, #22]
 8004ed2:	60da      	str	r2, [r3, #12]
 8004ed4:	e052      	b.n	8004f7c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004edc:	e04e      	b.n	8004f7c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ede:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ee2:	2b08      	cmp	r3, #8
 8004ee4:	d827      	bhi.n	8004f36 <UART_SetConfig+0x506>
 8004ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8004eec <UART_SetConfig+0x4bc>)
 8004ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eec:	08004f11 	.word	0x08004f11
 8004ef0:	08004f19 	.word	0x08004f19
 8004ef4:	08004f21 	.word	0x08004f21
 8004ef8:	08004f37 	.word	0x08004f37
 8004efc:	08004f27 	.word	0x08004f27
 8004f00:	08004f37 	.word	0x08004f37
 8004f04:	08004f37 	.word	0x08004f37
 8004f08:	08004f37 	.word	0x08004f37
 8004f0c:	08004f2f 	.word	0x08004f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f10:	f7fe ff50 	bl	8003db4 <HAL_RCC_GetPCLK1Freq>
 8004f14:	61f8      	str	r0, [r7, #28]
        break;
 8004f16:	e014      	b.n	8004f42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f18:	f7fe ff62 	bl	8003de0 <HAL_RCC_GetPCLK2Freq>
 8004f1c:	61f8      	str	r0, [r7, #28]
        break;
 8004f1e:	e010      	b.n	8004f42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f20:	4b1e      	ldr	r3, [pc, #120]	@ (8004f9c <UART_SetConfig+0x56c>)
 8004f22:	61fb      	str	r3, [r7, #28]
        break;
 8004f24:	e00d      	b.n	8004f42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f26:	f7fe fead 	bl	8003c84 <HAL_RCC_GetSysClockFreq>
 8004f2a:	61f8      	str	r0, [r7, #28]
        break;
 8004f2c:	e009      	b.n	8004f42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f32:	61fb      	str	r3, [r7, #28]
        break;
 8004f34:	e005      	b.n	8004f42 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f40:	bf00      	nop
    }

    if (pclk != 0U)
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d019      	beq.n	8004f7c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	085a      	lsrs	r2, r3, #1
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	441a      	add	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	2b0f      	cmp	r3, #15
 8004f60:	d909      	bls.n	8004f76 <UART_SetConfig+0x546>
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f68:	d205      	bcs.n	8004f76 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	60da      	str	r2, [r3, #12]
 8004f74:	e002      	b.n	8004f7c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f88:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3728      	adds	r7, #40	@ 0x28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f96:	bf00      	nop
 8004f98:	40008000 	.word	0x40008000
 8004f9c:	00f42400 	.word	0x00f42400

08004fa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fac:	f003 0308 	and.w	r3, r3, #8
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00a      	beq.n	8004fca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00a      	beq.n	800500e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005012:	f003 0304 	and.w	r3, r3, #4
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005034:	f003 0310 	and.w	r3, r3, #16
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00a      	beq.n	8005052 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	430a      	orrs	r2, r1
 8005050:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00a      	beq.n	8005074 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	430a      	orrs	r2, r1
 8005072:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800507c:	2b00      	cmp	r3, #0
 800507e:	d01a      	beq.n	80050b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800509e:	d10a      	bne.n	80050b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	605a      	str	r2, [r3, #4]
  }
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b098      	sub	sp, #96	@ 0x60
 80050e8:	af02      	add	r7, sp, #8
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050f4:	f7fc fe3e 	bl	8001d74 <HAL_GetTick>
 80050f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0308 	and.w	r3, r3, #8
 8005104:	2b08      	cmp	r3, #8
 8005106:	d12e      	bne.n	8005166 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005108:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005110:	2200      	movs	r2, #0
 8005112:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f88c 	bl	8005234 <UART_WaitOnFlagUntilTimeout>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d021      	beq.n	8005166 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512a:	e853 3f00 	ldrex	r3, [r3]
 800512e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005132:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005136:	653b      	str	r3, [r7, #80]	@ 0x50
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005140:	647b      	str	r3, [r7, #68]	@ 0x44
 8005142:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005144:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005146:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005148:	e841 2300 	strex	r3, r2, [r1]
 800514c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800514e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1e6      	bne.n	8005122 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2220      	movs	r2, #32
 8005158:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e062      	b.n	800522c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b04      	cmp	r3, #4
 8005172:	d149      	bne.n	8005208 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005174:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800517c:	2200      	movs	r2, #0
 800517e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f856 	bl	8005234 <UART_WaitOnFlagUntilTimeout>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d03c      	beq.n	8005208 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005196:	e853 3f00 	ldrex	r3, [r3]
 800519a:	623b      	str	r3, [r7, #32]
   return(result);
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	461a      	mov	r2, r3
 80051aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80051ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051b4:	e841 2300 	strex	r3, r2, [r1]
 80051b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e6      	bne.n	800518e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3308      	adds	r3, #8
 80051c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	e853 3f00 	ldrex	r3, [r3]
 80051ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0301 	bic.w	r3, r3, #1
 80051d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3308      	adds	r3, #8
 80051de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051e0:	61fa      	str	r2, [r7, #28]
 80051e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e4:	69b9      	ldr	r1, [r7, #24]
 80051e6:	69fa      	ldr	r2, [r7, #28]
 80051e8:	e841 2300 	strex	r3, r2, [r1]
 80051ec:	617b      	str	r3, [r7, #20]
   return(result);
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1e5      	bne.n	80051c0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e011      	b.n	800522c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2220      	movs	r2, #32
 800520c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2220      	movs	r2, #32
 8005212:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3758      	adds	r7, #88	@ 0x58
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	603b      	str	r3, [r7, #0]
 8005240:	4613      	mov	r3, r2
 8005242:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005244:	e04f      	b.n	80052e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524c:	d04b      	beq.n	80052e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800524e:	f7fc fd91 	bl	8001d74 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	429a      	cmp	r2, r3
 800525c:	d302      	bcc.n	8005264 <UART_WaitOnFlagUntilTimeout+0x30>
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e04e      	b.n	8005306 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	2b00      	cmp	r3, #0
 8005274:	d037      	beq.n	80052e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2b80      	cmp	r3, #128	@ 0x80
 800527a:	d034      	beq.n	80052e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2b40      	cmp	r3, #64	@ 0x40
 8005280:	d031      	beq.n	80052e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	f003 0308 	and.w	r3, r3, #8
 800528c:	2b08      	cmp	r3, #8
 800528e:	d110      	bne.n	80052b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2208      	movs	r2, #8
 8005296:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 f838 	bl	800530e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2208      	movs	r2, #8
 80052a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e029      	b.n	8005306 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052c0:	d111      	bne.n	80052e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80052ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 f81e 	bl	800530e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e00f      	b.n	8005306 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69da      	ldr	r2, [r3, #28]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	4013      	ands	r3, r2
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	bf0c      	ite	eq
 80052f6:	2301      	moveq	r3, #1
 80052f8:	2300      	movne	r3, #0
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	461a      	mov	r2, r3
 80052fe:	79fb      	ldrb	r3, [r7, #7]
 8005300:	429a      	cmp	r2, r3
 8005302:	d0a0      	beq.n	8005246 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800530e:	b480      	push	{r7}
 8005310:	b095      	sub	sp, #84	@ 0x54
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800531e:	e853 3f00 	ldrex	r3, [r3]
 8005322:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005326:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800532a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	461a      	mov	r2, r3
 8005332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005334:	643b      	str	r3, [r7, #64]	@ 0x40
 8005336:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005338:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800533a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800533c:	e841 2300 	strex	r3, r2, [r1]
 8005340:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1e6      	bne.n	8005316 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	3308      	adds	r3, #8
 800534e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	e853 3f00 	ldrex	r3, [r3]
 8005356:	61fb      	str	r3, [r7, #28]
   return(result);
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	f023 0301 	bic.w	r3, r3, #1
 800535e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3308      	adds	r3, #8
 8005366:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005368:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800536a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800536e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005370:	e841 2300 	strex	r3, r2, [r1]
 8005374:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1e5      	bne.n	8005348 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005380:	2b01      	cmp	r3, #1
 8005382:	d118      	bne.n	80053b6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	e853 3f00 	ldrex	r3, [r3]
 8005390:	60bb      	str	r3, [r7, #8]
   return(result);
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f023 0310 	bic.w	r3, r3, #16
 8005398:	647b      	str	r3, [r7, #68]	@ 0x44
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	461a      	mov	r2, r3
 80053a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053a2:	61bb      	str	r3, [r7, #24]
 80053a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a6:	6979      	ldr	r1, [r7, #20]
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	e841 2300 	strex	r3, r2, [r1]
 80053ae:	613b      	str	r3, [r7, #16]
   return(result);
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1e6      	bne.n	8005384 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80053ca:	bf00      	nop
 80053cc:	3754      	adds	r7, #84	@ 0x54
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053d6:	b084      	sub	sp, #16
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	f107 001c 	add.w	r0, r7, #28
 80053e4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fa69 	bl	80058cc <USB_CoreReset>
 80053fa:	4603      	mov	r3, r0
 80053fc:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80053fe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005402:	2b00      	cmp	r3, #0
 8005404:	d106      	bne.n	8005414 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	639a      	str	r2, [r3, #56]	@ 0x38
 8005412:	e005      	b.n	8005420 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005418:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8005420:	7bfb      	ldrb	r3, [r7, #15]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800542c:	b004      	add	sp, #16
 800542e:	4770      	bx	lr

08005430 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f023 0201 	bic.w	r2, r3, #1
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b084      	sub	sp, #16
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	460b      	mov	r3, r1
 800545c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800546e:	78fb      	ldrb	r3, [r7, #3]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d115      	bne.n	80054a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005480:	200a      	movs	r0, #10
 8005482:	f7fc fc83 	bl	8001d8c <HAL_Delay>
      ms += 10U;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	330a      	adds	r3, #10
 800548a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 fa0f 	bl	80058b0 <USB_GetMode>
 8005492:	4603      	mov	r3, r0
 8005494:	2b01      	cmp	r3, #1
 8005496:	d01e      	beq.n	80054d6 <USB_SetCurrentMode+0x84>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2bc7      	cmp	r3, #199	@ 0xc7
 800549c:	d9f0      	bls.n	8005480 <USB_SetCurrentMode+0x2e>
 800549e:	e01a      	b.n	80054d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d115      	bne.n	80054d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80054b2:	200a      	movs	r0, #10
 80054b4:	f7fc fc6a 	bl	8001d8c <HAL_Delay>
      ms += 10U;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	330a      	adds	r3, #10
 80054bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f9f6 	bl	80058b0 <USB_GetMode>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d005      	beq.n	80054d6 <USB_SetCurrentMode+0x84>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2bc7      	cmp	r3, #199	@ 0xc7
 80054ce:	d9f0      	bls.n	80054b2 <USB_SetCurrentMode+0x60>
 80054d0:	e001      	b.n	80054d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e005      	b.n	80054e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2bc8      	cmp	r3, #200	@ 0xc8
 80054da:	d101      	bne.n	80054e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e000      	b.n	80054e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
	...

080054ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054ec:	b084      	sub	sp, #16
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b086      	sub	sp, #24
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80054fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005506:	2300      	movs	r3, #0
 8005508:	613b      	str	r3, [r7, #16]
 800550a:	e009      	b.n	8005520 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	3340      	adds	r3, #64	@ 0x40
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	2200      	movs	r2, #0
 8005518:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	3301      	adds	r3, #1
 800551e:	613b      	str	r3, [r7, #16]
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	2b0e      	cmp	r3, #14
 8005524:	d9f2      	bls.n	800550c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005526:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800552a:	2b00      	cmp	r3, #0
 800552c:	d11c      	bne.n	8005568 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800553c:	f043 0302 	orr.w	r3, r3, #2
 8005540:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005546:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	e005      	b.n	8005574 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800556c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800557a:	461a      	mov	r2, r3
 800557c:	2300      	movs	r3, #0
 800557e:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005580:	2103      	movs	r1, #3
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f95a 	bl	800583c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005588:	2110      	movs	r1, #16
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f8f6 	bl	800577c <USB_FlushTxFifo>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f920 	bl	80057e0 <USB_FlushRxFifo>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055b0:	461a      	mov	r2, r3
 80055b2:	2300      	movs	r3, #0
 80055b4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055bc:	461a      	mov	r2, r3
 80055be:	2300      	movs	r3, #0
 80055c0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055c8:	461a      	mov	r2, r3
 80055ca:	2300      	movs	r3, #0
 80055cc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055ce:	2300      	movs	r3, #0
 80055d0:	613b      	str	r3, [r7, #16]
 80055d2:	e043      	b.n	800565c <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055ea:	d118      	bne.n	800561e <USB_DevInit+0x132>
    {
      if (i == 0U)
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10a      	bne.n	8005608 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055fe:	461a      	mov	r2, r3
 8005600:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	e013      	b.n	8005630 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005614:	461a      	mov	r2, r3
 8005616:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800561a:	6013      	str	r3, [r2, #0]
 800561c:	e008      	b.n	8005630 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	015a      	lsls	r2, r3, #5
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4413      	add	r3, r2
 8005626:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800562a:	461a      	mov	r2, r3
 800562c:	2300      	movs	r3, #0
 800562e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800563c:	461a      	mov	r2, r3
 800563e:	2300      	movs	r3, #0
 8005640:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800564e:	461a      	mov	r2, r3
 8005650:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005654:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	3301      	adds	r3, #1
 800565a:	613b      	str	r3, [r7, #16]
 800565c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005660:	461a      	mov	r2, r3
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	4293      	cmp	r3, r2
 8005666:	d3b5      	bcc.n	80055d4 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005668:	2300      	movs	r3, #0
 800566a:	613b      	str	r3, [r7, #16]
 800566c:	e043      	b.n	80056f6 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	4413      	add	r3, r2
 8005676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005680:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005684:	d118      	bne.n	80056b8 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10a      	bne.n	80056a2 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4413      	add	r3, r2
 8005694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005698:	461a      	mov	r2, r3
 800569a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	e013      	b.n	80056ca <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ae:	461a      	mov	r2, r3
 80056b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	e008      	b.n	80056ca <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056c4:	461a      	mov	r2, r3
 80056c6:	2300      	movs	r3, #0
 80056c8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d6:	461a      	mov	r2, r3
 80056d8:	2300      	movs	r3, #0
 80056da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056e8:	461a      	mov	r2, r3
 80056ea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80056ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	3301      	adds	r3, #1
 80056f4:	613b      	str	r3, [r7, #16]
 80056f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80056fa:	461a      	mov	r2, r3
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	4293      	cmp	r3, r2
 8005700:	d3b5      	bcc.n	800566e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005710:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005714:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005722:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	f043 0210 	orr.w	r2, r3, #16
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	699a      	ldr	r2, [r3, #24]
 8005734:	4b10      	ldr	r3, [pc, #64]	@ (8005778 <USB_DevInit+0x28c>)
 8005736:	4313      	orrs	r3, r2
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800573c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	f043 0208 	orr.w	r2, r3, #8
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005750:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005754:	2b01      	cmp	r3, #1
 8005756:	d107      	bne.n	8005768 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005760:	f043 0304 	orr.w	r3, r3, #4
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005768:	7dfb      	ldrb	r3, [r7, #23]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3718      	adds	r7, #24
 800576e:	46bd      	mov	sp, r7
 8005770:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005774:	b004      	add	sp, #16
 8005776:	4770      	bx	lr
 8005778:	803c3800 	.word	0x803c3800

0800577c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3301      	adds	r3, #1
 800578e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005796:	d901      	bls.n	800579c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e01b      	b.n	80057d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	daf2      	bge.n	800578a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	019b      	lsls	r3, r3, #6
 80057ac:	f043 0220 	orr.w	r2, r3, #32
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	3301      	adds	r3, #1
 80057b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057c0:	d901      	bls.n	80057c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e006      	b.n	80057d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f003 0320 	and.w	r3, r3, #32
 80057ce:	2b20      	cmp	r3, #32
 80057d0:	d0f0      	beq.n	80057b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	3301      	adds	r3, #1
 80057f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057f8:	d901      	bls.n	80057fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e018      	b.n	8005830 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	2b00      	cmp	r3, #0
 8005804:	daf2      	bge.n	80057ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2210      	movs	r2, #16
 800580e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	3301      	adds	r3, #1
 8005814:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800581c:	d901      	bls.n	8005822 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e006      	b.n	8005830 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	f003 0310 	and.w	r3, r3, #16
 800582a:	2b10      	cmp	r3, #16
 800582c:	d0f0      	beq.n	8005810 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	460b      	mov	r3, r1
 8005846:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	78fb      	ldrb	r3, [r7, #3]
 8005856:	68f9      	ldr	r1, [r7, #12]
 8005858:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800585c:	4313      	orrs	r3, r2
 800585e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3714      	adds	r7, #20
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800586e:	b480      	push	{r7}
 8005870:	b085      	sub	sp, #20
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005888:	f023 0303 	bic.w	r3, r3, #3
 800588c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800589c:	f043 0302 	orr.w	r3, r3, #2
 80058a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	f003 0301 	and.w	r3, r3, #1
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	3301      	adds	r3, #1
 80058dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058e4:	d901      	bls.n	80058ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e01b      	b.n	8005922 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	daf2      	bge.n	80058d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f043 0201 	orr.w	r2, r3, #1
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3301      	adds	r3, #1
 8005906:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800590e:	d901      	bls.n	8005914 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e006      	b.n	8005922 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b01      	cmp	r3, #1
 800591e:	d0f0      	beq.n	8005902 <USB_CoreReset+0x36>

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <__cvt>:
 800592e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005932:	ec57 6b10 	vmov	r6, r7, d0
 8005936:	2f00      	cmp	r7, #0
 8005938:	460c      	mov	r4, r1
 800593a:	4619      	mov	r1, r3
 800593c:	463b      	mov	r3, r7
 800593e:	bfbb      	ittet	lt
 8005940:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005944:	461f      	movlt	r7, r3
 8005946:	2300      	movge	r3, #0
 8005948:	232d      	movlt	r3, #45	@ 0x2d
 800594a:	700b      	strb	r3, [r1, #0]
 800594c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800594e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005952:	4691      	mov	r9, r2
 8005954:	f023 0820 	bic.w	r8, r3, #32
 8005958:	bfbc      	itt	lt
 800595a:	4632      	movlt	r2, r6
 800595c:	4616      	movlt	r6, r2
 800595e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005962:	d005      	beq.n	8005970 <__cvt+0x42>
 8005964:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005968:	d100      	bne.n	800596c <__cvt+0x3e>
 800596a:	3401      	adds	r4, #1
 800596c:	2102      	movs	r1, #2
 800596e:	e000      	b.n	8005972 <__cvt+0x44>
 8005970:	2103      	movs	r1, #3
 8005972:	ab03      	add	r3, sp, #12
 8005974:	9301      	str	r3, [sp, #4]
 8005976:	ab02      	add	r3, sp, #8
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	ec47 6b10 	vmov	d0, r6, r7
 800597e:	4653      	mov	r3, sl
 8005980:	4622      	mov	r2, r4
 8005982:	f000 fe59 	bl	8006638 <_dtoa_r>
 8005986:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800598a:	4605      	mov	r5, r0
 800598c:	d119      	bne.n	80059c2 <__cvt+0x94>
 800598e:	f019 0f01 	tst.w	r9, #1
 8005992:	d00e      	beq.n	80059b2 <__cvt+0x84>
 8005994:	eb00 0904 	add.w	r9, r0, r4
 8005998:	2200      	movs	r2, #0
 800599a:	2300      	movs	r3, #0
 800599c:	4630      	mov	r0, r6
 800599e:	4639      	mov	r1, r7
 80059a0:	f7fb f8a2 	bl	8000ae8 <__aeabi_dcmpeq>
 80059a4:	b108      	cbz	r0, 80059aa <__cvt+0x7c>
 80059a6:	f8cd 900c 	str.w	r9, [sp, #12]
 80059aa:	2230      	movs	r2, #48	@ 0x30
 80059ac:	9b03      	ldr	r3, [sp, #12]
 80059ae:	454b      	cmp	r3, r9
 80059b0:	d31e      	bcc.n	80059f0 <__cvt+0xc2>
 80059b2:	9b03      	ldr	r3, [sp, #12]
 80059b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80059b6:	1b5b      	subs	r3, r3, r5
 80059b8:	4628      	mov	r0, r5
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	b004      	add	sp, #16
 80059be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80059c6:	eb00 0904 	add.w	r9, r0, r4
 80059ca:	d1e5      	bne.n	8005998 <__cvt+0x6a>
 80059cc:	7803      	ldrb	r3, [r0, #0]
 80059ce:	2b30      	cmp	r3, #48	@ 0x30
 80059d0:	d10a      	bne.n	80059e8 <__cvt+0xba>
 80059d2:	2200      	movs	r2, #0
 80059d4:	2300      	movs	r3, #0
 80059d6:	4630      	mov	r0, r6
 80059d8:	4639      	mov	r1, r7
 80059da:	f7fb f885 	bl	8000ae8 <__aeabi_dcmpeq>
 80059de:	b918      	cbnz	r0, 80059e8 <__cvt+0xba>
 80059e0:	f1c4 0401 	rsb	r4, r4, #1
 80059e4:	f8ca 4000 	str.w	r4, [sl]
 80059e8:	f8da 3000 	ldr.w	r3, [sl]
 80059ec:	4499      	add	r9, r3
 80059ee:	e7d3      	b.n	8005998 <__cvt+0x6a>
 80059f0:	1c59      	adds	r1, r3, #1
 80059f2:	9103      	str	r1, [sp, #12]
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	e7d9      	b.n	80059ac <__cvt+0x7e>

080059f8 <__exponent>:
 80059f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059fa:	2900      	cmp	r1, #0
 80059fc:	bfba      	itte	lt
 80059fe:	4249      	neglt	r1, r1
 8005a00:	232d      	movlt	r3, #45	@ 0x2d
 8005a02:	232b      	movge	r3, #43	@ 0x2b
 8005a04:	2909      	cmp	r1, #9
 8005a06:	7002      	strb	r2, [r0, #0]
 8005a08:	7043      	strb	r3, [r0, #1]
 8005a0a:	dd29      	ble.n	8005a60 <__exponent+0x68>
 8005a0c:	f10d 0307 	add.w	r3, sp, #7
 8005a10:	461d      	mov	r5, r3
 8005a12:	270a      	movs	r7, #10
 8005a14:	461a      	mov	r2, r3
 8005a16:	fbb1 f6f7 	udiv	r6, r1, r7
 8005a1a:	fb07 1416 	mls	r4, r7, r6, r1
 8005a1e:	3430      	adds	r4, #48	@ 0x30
 8005a20:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005a24:	460c      	mov	r4, r1
 8005a26:	2c63      	cmp	r4, #99	@ 0x63
 8005a28:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a2c:	4631      	mov	r1, r6
 8005a2e:	dcf1      	bgt.n	8005a14 <__exponent+0x1c>
 8005a30:	3130      	adds	r1, #48	@ 0x30
 8005a32:	1e94      	subs	r4, r2, #2
 8005a34:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005a38:	1c41      	adds	r1, r0, #1
 8005a3a:	4623      	mov	r3, r4
 8005a3c:	42ab      	cmp	r3, r5
 8005a3e:	d30a      	bcc.n	8005a56 <__exponent+0x5e>
 8005a40:	f10d 0309 	add.w	r3, sp, #9
 8005a44:	1a9b      	subs	r3, r3, r2
 8005a46:	42ac      	cmp	r4, r5
 8005a48:	bf88      	it	hi
 8005a4a:	2300      	movhi	r3, #0
 8005a4c:	3302      	adds	r3, #2
 8005a4e:	4403      	add	r3, r0
 8005a50:	1a18      	subs	r0, r3, r0
 8005a52:	b003      	add	sp, #12
 8005a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a56:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005a5a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005a5e:	e7ed      	b.n	8005a3c <__exponent+0x44>
 8005a60:	2330      	movs	r3, #48	@ 0x30
 8005a62:	3130      	adds	r1, #48	@ 0x30
 8005a64:	7083      	strb	r3, [r0, #2]
 8005a66:	70c1      	strb	r1, [r0, #3]
 8005a68:	1d03      	adds	r3, r0, #4
 8005a6a:	e7f1      	b.n	8005a50 <__exponent+0x58>

08005a6c <_printf_float>:
 8005a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a70:	b08d      	sub	sp, #52	@ 0x34
 8005a72:	460c      	mov	r4, r1
 8005a74:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005a78:	4616      	mov	r6, r2
 8005a7a:	461f      	mov	r7, r3
 8005a7c:	4605      	mov	r5, r0
 8005a7e:	f000 fcdb 	bl	8006438 <_localeconv_r>
 8005a82:	6803      	ldr	r3, [r0, #0]
 8005a84:	9304      	str	r3, [sp, #16]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fa fc02 	bl	8000290 <strlen>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a90:	f8d8 3000 	ldr.w	r3, [r8]
 8005a94:	9005      	str	r0, [sp, #20]
 8005a96:	3307      	adds	r3, #7
 8005a98:	f023 0307 	bic.w	r3, r3, #7
 8005a9c:	f103 0208 	add.w	r2, r3, #8
 8005aa0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005aa4:	f8d4 b000 	ldr.w	fp, [r4]
 8005aa8:	f8c8 2000 	str.w	r2, [r8]
 8005aac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ab0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005ab4:	9307      	str	r3, [sp, #28]
 8005ab6:	f8cd 8018 	str.w	r8, [sp, #24]
 8005aba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005abe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ac2:	4b9c      	ldr	r3, [pc, #624]	@ (8005d34 <_printf_float+0x2c8>)
 8005ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac8:	f7fb f840 	bl	8000b4c <__aeabi_dcmpun>
 8005acc:	bb70      	cbnz	r0, 8005b2c <_printf_float+0xc0>
 8005ace:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ad2:	4b98      	ldr	r3, [pc, #608]	@ (8005d34 <_printf_float+0x2c8>)
 8005ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad8:	f7fb f81a 	bl	8000b10 <__aeabi_dcmple>
 8005adc:	bb30      	cbnz	r0, 8005b2c <_printf_float+0xc0>
 8005ade:	2200      	movs	r2, #0
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	4640      	mov	r0, r8
 8005ae4:	4649      	mov	r1, r9
 8005ae6:	f7fb f809 	bl	8000afc <__aeabi_dcmplt>
 8005aea:	b110      	cbz	r0, 8005af2 <_printf_float+0x86>
 8005aec:	232d      	movs	r3, #45	@ 0x2d
 8005aee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005af2:	4a91      	ldr	r2, [pc, #580]	@ (8005d38 <_printf_float+0x2cc>)
 8005af4:	4b91      	ldr	r3, [pc, #580]	@ (8005d3c <_printf_float+0x2d0>)
 8005af6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005afa:	bf94      	ite	ls
 8005afc:	4690      	movls	r8, r2
 8005afe:	4698      	movhi	r8, r3
 8005b00:	2303      	movs	r3, #3
 8005b02:	6123      	str	r3, [r4, #16]
 8005b04:	f02b 0304 	bic.w	r3, fp, #4
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	f04f 0900 	mov.w	r9, #0
 8005b0e:	9700      	str	r7, [sp, #0]
 8005b10:	4633      	mov	r3, r6
 8005b12:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005b14:	4621      	mov	r1, r4
 8005b16:	4628      	mov	r0, r5
 8005b18:	f000 f9d2 	bl	8005ec0 <_printf_common>
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	f040 808d 	bne.w	8005c3c <_printf_float+0x1d0>
 8005b22:	f04f 30ff 	mov.w	r0, #4294967295
 8005b26:	b00d      	add	sp, #52	@ 0x34
 8005b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b2c:	4642      	mov	r2, r8
 8005b2e:	464b      	mov	r3, r9
 8005b30:	4640      	mov	r0, r8
 8005b32:	4649      	mov	r1, r9
 8005b34:	f7fb f80a 	bl	8000b4c <__aeabi_dcmpun>
 8005b38:	b140      	cbz	r0, 8005b4c <_printf_float+0xe0>
 8005b3a:	464b      	mov	r3, r9
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	bfbc      	itt	lt
 8005b40:	232d      	movlt	r3, #45	@ 0x2d
 8005b42:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005b46:	4a7e      	ldr	r2, [pc, #504]	@ (8005d40 <_printf_float+0x2d4>)
 8005b48:	4b7e      	ldr	r3, [pc, #504]	@ (8005d44 <_printf_float+0x2d8>)
 8005b4a:	e7d4      	b.n	8005af6 <_printf_float+0x8a>
 8005b4c:	6863      	ldr	r3, [r4, #4]
 8005b4e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005b52:	9206      	str	r2, [sp, #24]
 8005b54:	1c5a      	adds	r2, r3, #1
 8005b56:	d13b      	bne.n	8005bd0 <_printf_float+0x164>
 8005b58:	2306      	movs	r3, #6
 8005b5a:	6063      	str	r3, [r4, #4]
 8005b5c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005b60:	2300      	movs	r3, #0
 8005b62:	6022      	str	r2, [r4, #0]
 8005b64:	9303      	str	r3, [sp, #12]
 8005b66:	ab0a      	add	r3, sp, #40	@ 0x28
 8005b68:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005b6c:	ab09      	add	r3, sp, #36	@ 0x24
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	6861      	ldr	r1, [r4, #4]
 8005b72:	ec49 8b10 	vmov	d0, r8, r9
 8005b76:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	f7ff fed7 	bl	800592e <__cvt>
 8005b80:	9b06      	ldr	r3, [sp, #24]
 8005b82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005b84:	2b47      	cmp	r3, #71	@ 0x47
 8005b86:	4680      	mov	r8, r0
 8005b88:	d129      	bne.n	8005bde <_printf_float+0x172>
 8005b8a:	1cc8      	adds	r0, r1, #3
 8005b8c:	db02      	blt.n	8005b94 <_printf_float+0x128>
 8005b8e:	6863      	ldr	r3, [r4, #4]
 8005b90:	4299      	cmp	r1, r3
 8005b92:	dd41      	ble.n	8005c18 <_printf_float+0x1ac>
 8005b94:	f1aa 0a02 	sub.w	sl, sl, #2
 8005b98:	fa5f fa8a 	uxtb.w	sl, sl
 8005b9c:	3901      	subs	r1, #1
 8005b9e:	4652      	mov	r2, sl
 8005ba0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005ba4:	9109      	str	r1, [sp, #36]	@ 0x24
 8005ba6:	f7ff ff27 	bl	80059f8 <__exponent>
 8005baa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005bac:	1813      	adds	r3, r2, r0
 8005bae:	2a01      	cmp	r2, #1
 8005bb0:	4681      	mov	r9, r0
 8005bb2:	6123      	str	r3, [r4, #16]
 8005bb4:	dc02      	bgt.n	8005bbc <_printf_float+0x150>
 8005bb6:	6822      	ldr	r2, [r4, #0]
 8005bb8:	07d2      	lsls	r2, r2, #31
 8005bba:	d501      	bpl.n	8005bc0 <_printf_float+0x154>
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	6123      	str	r3, [r4, #16]
 8005bc0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0a2      	beq.n	8005b0e <_printf_float+0xa2>
 8005bc8:	232d      	movs	r3, #45	@ 0x2d
 8005bca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bce:	e79e      	b.n	8005b0e <_printf_float+0xa2>
 8005bd0:	9a06      	ldr	r2, [sp, #24]
 8005bd2:	2a47      	cmp	r2, #71	@ 0x47
 8005bd4:	d1c2      	bne.n	8005b5c <_printf_float+0xf0>
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1c0      	bne.n	8005b5c <_printf_float+0xf0>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e7bd      	b.n	8005b5a <_printf_float+0xee>
 8005bde:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005be2:	d9db      	bls.n	8005b9c <_printf_float+0x130>
 8005be4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005be8:	d118      	bne.n	8005c1c <_printf_float+0x1b0>
 8005bea:	2900      	cmp	r1, #0
 8005bec:	6863      	ldr	r3, [r4, #4]
 8005bee:	dd0b      	ble.n	8005c08 <_printf_float+0x19c>
 8005bf0:	6121      	str	r1, [r4, #16]
 8005bf2:	b913      	cbnz	r3, 8005bfa <_printf_float+0x18e>
 8005bf4:	6822      	ldr	r2, [r4, #0]
 8005bf6:	07d0      	lsls	r0, r2, #31
 8005bf8:	d502      	bpl.n	8005c00 <_printf_float+0x194>
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	440b      	add	r3, r1
 8005bfe:	6123      	str	r3, [r4, #16]
 8005c00:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005c02:	f04f 0900 	mov.w	r9, #0
 8005c06:	e7db      	b.n	8005bc0 <_printf_float+0x154>
 8005c08:	b913      	cbnz	r3, 8005c10 <_printf_float+0x1a4>
 8005c0a:	6822      	ldr	r2, [r4, #0]
 8005c0c:	07d2      	lsls	r2, r2, #31
 8005c0e:	d501      	bpl.n	8005c14 <_printf_float+0x1a8>
 8005c10:	3302      	adds	r3, #2
 8005c12:	e7f4      	b.n	8005bfe <_printf_float+0x192>
 8005c14:	2301      	movs	r3, #1
 8005c16:	e7f2      	b.n	8005bfe <_printf_float+0x192>
 8005c18:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005c1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c1e:	4299      	cmp	r1, r3
 8005c20:	db05      	blt.n	8005c2e <_printf_float+0x1c2>
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	6121      	str	r1, [r4, #16]
 8005c26:	07d8      	lsls	r0, r3, #31
 8005c28:	d5ea      	bpl.n	8005c00 <_printf_float+0x194>
 8005c2a:	1c4b      	adds	r3, r1, #1
 8005c2c:	e7e7      	b.n	8005bfe <_printf_float+0x192>
 8005c2e:	2900      	cmp	r1, #0
 8005c30:	bfd4      	ite	le
 8005c32:	f1c1 0202 	rsble	r2, r1, #2
 8005c36:	2201      	movgt	r2, #1
 8005c38:	4413      	add	r3, r2
 8005c3a:	e7e0      	b.n	8005bfe <_printf_float+0x192>
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	055a      	lsls	r2, r3, #21
 8005c40:	d407      	bmi.n	8005c52 <_printf_float+0x1e6>
 8005c42:	6923      	ldr	r3, [r4, #16]
 8005c44:	4642      	mov	r2, r8
 8005c46:	4631      	mov	r1, r6
 8005c48:	4628      	mov	r0, r5
 8005c4a:	47b8      	blx	r7
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	d12b      	bne.n	8005ca8 <_printf_float+0x23c>
 8005c50:	e767      	b.n	8005b22 <_printf_float+0xb6>
 8005c52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c56:	f240 80dd 	bls.w	8005e14 <_printf_float+0x3a8>
 8005c5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c5e:	2200      	movs	r2, #0
 8005c60:	2300      	movs	r3, #0
 8005c62:	f7fa ff41 	bl	8000ae8 <__aeabi_dcmpeq>
 8005c66:	2800      	cmp	r0, #0
 8005c68:	d033      	beq.n	8005cd2 <_printf_float+0x266>
 8005c6a:	4a37      	ldr	r2, [pc, #220]	@ (8005d48 <_printf_float+0x2dc>)
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	4631      	mov	r1, r6
 8005c70:	4628      	mov	r0, r5
 8005c72:	47b8      	blx	r7
 8005c74:	3001      	adds	r0, #1
 8005c76:	f43f af54 	beq.w	8005b22 <_printf_float+0xb6>
 8005c7a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005c7e:	4543      	cmp	r3, r8
 8005c80:	db02      	blt.n	8005c88 <_printf_float+0x21c>
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	07d8      	lsls	r0, r3, #31
 8005c86:	d50f      	bpl.n	8005ca8 <_printf_float+0x23c>
 8005c88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c8c:	4631      	mov	r1, r6
 8005c8e:	4628      	mov	r0, r5
 8005c90:	47b8      	blx	r7
 8005c92:	3001      	adds	r0, #1
 8005c94:	f43f af45 	beq.w	8005b22 <_printf_float+0xb6>
 8005c98:	f04f 0900 	mov.w	r9, #0
 8005c9c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ca0:	f104 0a1a 	add.w	sl, r4, #26
 8005ca4:	45c8      	cmp	r8, r9
 8005ca6:	dc09      	bgt.n	8005cbc <_printf_float+0x250>
 8005ca8:	6823      	ldr	r3, [r4, #0]
 8005caa:	079b      	lsls	r3, r3, #30
 8005cac:	f100 8103 	bmi.w	8005eb6 <_printf_float+0x44a>
 8005cb0:	68e0      	ldr	r0, [r4, #12]
 8005cb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005cb4:	4298      	cmp	r0, r3
 8005cb6:	bfb8      	it	lt
 8005cb8:	4618      	movlt	r0, r3
 8005cba:	e734      	b.n	8005b26 <_printf_float+0xba>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	4652      	mov	r2, sl
 8005cc0:	4631      	mov	r1, r6
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	47b8      	blx	r7
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	f43f af2b 	beq.w	8005b22 <_printf_float+0xb6>
 8005ccc:	f109 0901 	add.w	r9, r9, #1
 8005cd0:	e7e8      	b.n	8005ca4 <_printf_float+0x238>
 8005cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	dc39      	bgt.n	8005d4c <_printf_float+0x2e0>
 8005cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8005d48 <_printf_float+0x2dc>)
 8005cda:	2301      	movs	r3, #1
 8005cdc:	4631      	mov	r1, r6
 8005cde:	4628      	mov	r0, r5
 8005ce0:	47b8      	blx	r7
 8005ce2:	3001      	adds	r0, #1
 8005ce4:	f43f af1d 	beq.w	8005b22 <_printf_float+0xb6>
 8005ce8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005cec:	ea59 0303 	orrs.w	r3, r9, r3
 8005cf0:	d102      	bne.n	8005cf8 <_printf_float+0x28c>
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	07d9      	lsls	r1, r3, #31
 8005cf6:	d5d7      	bpl.n	8005ca8 <_printf_float+0x23c>
 8005cf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cfc:	4631      	mov	r1, r6
 8005cfe:	4628      	mov	r0, r5
 8005d00:	47b8      	blx	r7
 8005d02:	3001      	adds	r0, #1
 8005d04:	f43f af0d 	beq.w	8005b22 <_printf_float+0xb6>
 8005d08:	f04f 0a00 	mov.w	sl, #0
 8005d0c:	f104 0b1a 	add.w	fp, r4, #26
 8005d10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d12:	425b      	negs	r3, r3
 8005d14:	4553      	cmp	r3, sl
 8005d16:	dc01      	bgt.n	8005d1c <_printf_float+0x2b0>
 8005d18:	464b      	mov	r3, r9
 8005d1a:	e793      	b.n	8005c44 <_printf_float+0x1d8>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	465a      	mov	r2, fp
 8005d20:	4631      	mov	r1, r6
 8005d22:	4628      	mov	r0, r5
 8005d24:	47b8      	blx	r7
 8005d26:	3001      	adds	r0, #1
 8005d28:	f43f aefb 	beq.w	8005b22 <_printf_float+0xb6>
 8005d2c:	f10a 0a01 	add.w	sl, sl, #1
 8005d30:	e7ee      	b.n	8005d10 <_printf_float+0x2a4>
 8005d32:	bf00      	nop
 8005d34:	7fefffff 	.word	0x7fefffff
 8005d38:	08008670 	.word	0x08008670
 8005d3c:	08008674 	.word	0x08008674
 8005d40:	08008678 	.word	0x08008678
 8005d44:	0800867c 	.word	0x0800867c
 8005d48:	08008680 	.word	0x08008680
 8005d4c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d4e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005d52:	4553      	cmp	r3, sl
 8005d54:	bfa8      	it	ge
 8005d56:	4653      	movge	r3, sl
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	4699      	mov	r9, r3
 8005d5c:	dc36      	bgt.n	8005dcc <_printf_float+0x360>
 8005d5e:	f04f 0b00 	mov.w	fp, #0
 8005d62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d66:	f104 021a 	add.w	r2, r4, #26
 8005d6a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d6c:	9306      	str	r3, [sp, #24]
 8005d6e:	eba3 0309 	sub.w	r3, r3, r9
 8005d72:	455b      	cmp	r3, fp
 8005d74:	dc31      	bgt.n	8005dda <_printf_float+0x36e>
 8005d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d78:	459a      	cmp	sl, r3
 8005d7a:	dc3a      	bgt.n	8005df2 <_printf_float+0x386>
 8005d7c:	6823      	ldr	r3, [r4, #0]
 8005d7e:	07da      	lsls	r2, r3, #31
 8005d80:	d437      	bmi.n	8005df2 <_printf_float+0x386>
 8005d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d84:	ebaa 0903 	sub.w	r9, sl, r3
 8005d88:	9b06      	ldr	r3, [sp, #24]
 8005d8a:	ebaa 0303 	sub.w	r3, sl, r3
 8005d8e:	4599      	cmp	r9, r3
 8005d90:	bfa8      	it	ge
 8005d92:	4699      	movge	r9, r3
 8005d94:	f1b9 0f00 	cmp.w	r9, #0
 8005d98:	dc33      	bgt.n	8005e02 <_printf_float+0x396>
 8005d9a:	f04f 0800 	mov.w	r8, #0
 8005d9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005da2:	f104 0b1a 	add.w	fp, r4, #26
 8005da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005da8:	ebaa 0303 	sub.w	r3, sl, r3
 8005dac:	eba3 0309 	sub.w	r3, r3, r9
 8005db0:	4543      	cmp	r3, r8
 8005db2:	f77f af79 	ble.w	8005ca8 <_printf_float+0x23c>
 8005db6:	2301      	movs	r3, #1
 8005db8:	465a      	mov	r2, fp
 8005dba:	4631      	mov	r1, r6
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	47b8      	blx	r7
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	f43f aeae 	beq.w	8005b22 <_printf_float+0xb6>
 8005dc6:	f108 0801 	add.w	r8, r8, #1
 8005dca:	e7ec      	b.n	8005da6 <_printf_float+0x33a>
 8005dcc:	4642      	mov	r2, r8
 8005dce:	4631      	mov	r1, r6
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	47b8      	blx	r7
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	d1c2      	bne.n	8005d5e <_printf_float+0x2f2>
 8005dd8:	e6a3      	b.n	8005b22 <_printf_float+0xb6>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	4631      	mov	r1, r6
 8005dde:	4628      	mov	r0, r5
 8005de0:	9206      	str	r2, [sp, #24]
 8005de2:	47b8      	blx	r7
 8005de4:	3001      	adds	r0, #1
 8005de6:	f43f ae9c 	beq.w	8005b22 <_printf_float+0xb6>
 8005dea:	9a06      	ldr	r2, [sp, #24]
 8005dec:	f10b 0b01 	add.w	fp, fp, #1
 8005df0:	e7bb      	b.n	8005d6a <_printf_float+0x2fe>
 8005df2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005df6:	4631      	mov	r1, r6
 8005df8:	4628      	mov	r0, r5
 8005dfa:	47b8      	blx	r7
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	d1c0      	bne.n	8005d82 <_printf_float+0x316>
 8005e00:	e68f      	b.n	8005b22 <_printf_float+0xb6>
 8005e02:	9a06      	ldr	r2, [sp, #24]
 8005e04:	464b      	mov	r3, r9
 8005e06:	4442      	add	r2, r8
 8005e08:	4631      	mov	r1, r6
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	47b8      	blx	r7
 8005e0e:	3001      	adds	r0, #1
 8005e10:	d1c3      	bne.n	8005d9a <_printf_float+0x32e>
 8005e12:	e686      	b.n	8005b22 <_printf_float+0xb6>
 8005e14:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005e18:	f1ba 0f01 	cmp.w	sl, #1
 8005e1c:	dc01      	bgt.n	8005e22 <_printf_float+0x3b6>
 8005e1e:	07db      	lsls	r3, r3, #31
 8005e20:	d536      	bpl.n	8005e90 <_printf_float+0x424>
 8005e22:	2301      	movs	r3, #1
 8005e24:	4642      	mov	r2, r8
 8005e26:	4631      	mov	r1, r6
 8005e28:	4628      	mov	r0, r5
 8005e2a:	47b8      	blx	r7
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	f43f ae78 	beq.w	8005b22 <_printf_float+0xb6>
 8005e32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e36:	4631      	mov	r1, r6
 8005e38:	4628      	mov	r0, r5
 8005e3a:	47b8      	blx	r7
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	f43f ae70 	beq.w	8005b22 <_printf_float+0xb6>
 8005e42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e46:	2200      	movs	r2, #0
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e4e:	f7fa fe4b 	bl	8000ae8 <__aeabi_dcmpeq>
 8005e52:	b9c0      	cbnz	r0, 8005e86 <_printf_float+0x41a>
 8005e54:	4653      	mov	r3, sl
 8005e56:	f108 0201 	add.w	r2, r8, #1
 8005e5a:	4631      	mov	r1, r6
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	47b8      	blx	r7
 8005e60:	3001      	adds	r0, #1
 8005e62:	d10c      	bne.n	8005e7e <_printf_float+0x412>
 8005e64:	e65d      	b.n	8005b22 <_printf_float+0xb6>
 8005e66:	2301      	movs	r3, #1
 8005e68:	465a      	mov	r2, fp
 8005e6a:	4631      	mov	r1, r6
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	47b8      	blx	r7
 8005e70:	3001      	adds	r0, #1
 8005e72:	f43f ae56 	beq.w	8005b22 <_printf_float+0xb6>
 8005e76:	f108 0801 	add.w	r8, r8, #1
 8005e7a:	45d0      	cmp	r8, sl
 8005e7c:	dbf3      	blt.n	8005e66 <_printf_float+0x3fa>
 8005e7e:	464b      	mov	r3, r9
 8005e80:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005e84:	e6df      	b.n	8005c46 <_printf_float+0x1da>
 8005e86:	f04f 0800 	mov.w	r8, #0
 8005e8a:	f104 0b1a 	add.w	fp, r4, #26
 8005e8e:	e7f4      	b.n	8005e7a <_printf_float+0x40e>
 8005e90:	2301      	movs	r3, #1
 8005e92:	4642      	mov	r2, r8
 8005e94:	e7e1      	b.n	8005e5a <_printf_float+0x3ee>
 8005e96:	2301      	movs	r3, #1
 8005e98:	464a      	mov	r2, r9
 8005e9a:	4631      	mov	r1, r6
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	47b8      	blx	r7
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	f43f ae3e 	beq.w	8005b22 <_printf_float+0xb6>
 8005ea6:	f108 0801 	add.w	r8, r8, #1
 8005eaa:	68e3      	ldr	r3, [r4, #12]
 8005eac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005eae:	1a5b      	subs	r3, r3, r1
 8005eb0:	4543      	cmp	r3, r8
 8005eb2:	dcf0      	bgt.n	8005e96 <_printf_float+0x42a>
 8005eb4:	e6fc      	b.n	8005cb0 <_printf_float+0x244>
 8005eb6:	f04f 0800 	mov.w	r8, #0
 8005eba:	f104 0919 	add.w	r9, r4, #25
 8005ebe:	e7f4      	b.n	8005eaa <_printf_float+0x43e>

08005ec0 <_printf_common>:
 8005ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec4:	4616      	mov	r6, r2
 8005ec6:	4698      	mov	r8, r3
 8005ec8:	688a      	ldr	r2, [r1, #8]
 8005eca:	690b      	ldr	r3, [r1, #16]
 8005ecc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	bfb8      	it	lt
 8005ed4:	4613      	movlt	r3, r2
 8005ed6:	6033      	str	r3, [r6, #0]
 8005ed8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005edc:	4607      	mov	r7, r0
 8005ede:	460c      	mov	r4, r1
 8005ee0:	b10a      	cbz	r2, 8005ee6 <_printf_common+0x26>
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	6033      	str	r3, [r6, #0]
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	0699      	lsls	r1, r3, #26
 8005eea:	bf42      	ittt	mi
 8005eec:	6833      	ldrmi	r3, [r6, #0]
 8005eee:	3302      	addmi	r3, #2
 8005ef0:	6033      	strmi	r3, [r6, #0]
 8005ef2:	6825      	ldr	r5, [r4, #0]
 8005ef4:	f015 0506 	ands.w	r5, r5, #6
 8005ef8:	d106      	bne.n	8005f08 <_printf_common+0x48>
 8005efa:	f104 0a19 	add.w	sl, r4, #25
 8005efe:	68e3      	ldr	r3, [r4, #12]
 8005f00:	6832      	ldr	r2, [r6, #0]
 8005f02:	1a9b      	subs	r3, r3, r2
 8005f04:	42ab      	cmp	r3, r5
 8005f06:	dc26      	bgt.n	8005f56 <_printf_common+0x96>
 8005f08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f0c:	6822      	ldr	r2, [r4, #0]
 8005f0e:	3b00      	subs	r3, #0
 8005f10:	bf18      	it	ne
 8005f12:	2301      	movne	r3, #1
 8005f14:	0692      	lsls	r2, r2, #26
 8005f16:	d42b      	bmi.n	8005f70 <_printf_common+0xb0>
 8005f18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f1c:	4641      	mov	r1, r8
 8005f1e:	4638      	mov	r0, r7
 8005f20:	47c8      	blx	r9
 8005f22:	3001      	adds	r0, #1
 8005f24:	d01e      	beq.n	8005f64 <_printf_common+0xa4>
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	6922      	ldr	r2, [r4, #16]
 8005f2a:	f003 0306 	and.w	r3, r3, #6
 8005f2e:	2b04      	cmp	r3, #4
 8005f30:	bf02      	ittt	eq
 8005f32:	68e5      	ldreq	r5, [r4, #12]
 8005f34:	6833      	ldreq	r3, [r6, #0]
 8005f36:	1aed      	subeq	r5, r5, r3
 8005f38:	68a3      	ldr	r3, [r4, #8]
 8005f3a:	bf0c      	ite	eq
 8005f3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f40:	2500      	movne	r5, #0
 8005f42:	4293      	cmp	r3, r2
 8005f44:	bfc4      	itt	gt
 8005f46:	1a9b      	subgt	r3, r3, r2
 8005f48:	18ed      	addgt	r5, r5, r3
 8005f4a:	2600      	movs	r6, #0
 8005f4c:	341a      	adds	r4, #26
 8005f4e:	42b5      	cmp	r5, r6
 8005f50:	d11a      	bne.n	8005f88 <_printf_common+0xc8>
 8005f52:	2000      	movs	r0, #0
 8005f54:	e008      	b.n	8005f68 <_printf_common+0xa8>
 8005f56:	2301      	movs	r3, #1
 8005f58:	4652      	mov	r2, sl
 8005f5a:	4641      	mov	r1, r8
 8005f5c:	4638      	mov	r0, r7
 8005f5e:	47c8      	blx	r9
 8005f60:	3001      	adds	r0, #1
 8005f62:	d103      	bne.n	8005f6c <_printf_common+0xac>
 8005f64:	f04f 30ff 	mov.w	r0, #4294967295
 8005f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f6c:	3501      	adds	r5, #1
 8005f6e:	e7c6      	b.n	8005efe <_printf_common+0x3e>
 8005f70:	18e1      	adds	r1, r4, r3
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	2030      	movs	r0, #48	@ 0x30
 8005f76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f7a:	4422      	add	r2, r4
 8005f7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f84:	3302      	adds	r3, #2
 8005f86:	e7c7      	b.n	8005f18 <_printf_common+0x58>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	4622      	mov	r2, r4
 8005f8c:	4641      	mov	r1, r8
 8005f8e:	4638      	mov	r0, r7
 8005f90:	47c8      	blx	r9
 8005f92:	3001      	adds	r0, #1
 8005f94:	d0e6      	beq.n	8005f64 <_printf_common+0xa4>
 8005f96:	3601      	adds	r6, #1
 8005f98:	e7d9      	b.n	8005f4e <_printf_common+0x8e>
	...

08005f9c <_printf_i>:
 8005f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa0:	7e0f      	ldrb	r7, [r1, #24]
 8005fa2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005fa4:	2f78      	cmp	r7, #120	@ 0x78
 8005fa6:	4691      	mov	r9, r2
 8005fa8:	4680      	mov	r8, r0
 8005faa:	460c      	mov	r4, r1
 8005fac:	469a      	mov	sl, r3
 8005fae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005fb2:	d807      	bhi.n	8005fc4 <_printf_i+0x28>
 8005fb4:	2f62      	cmp	r7, #98	@ 0x62
 8005fb6:	d80a      	bhi.n	8005fce <_printf_i+0x32>
 8005fb8:	2f00      	cmp	r7, #0
 8005fba:	f000 80d2 	beq.w	8006162 <_printf_i+0x1c6>
 8005fbe:	2f58      	cmp	r7, #88	@ 0x58
 8005fc0:	f000 80b9 	beq.w	8006136 <_printf_i+0x19a>
 8005fc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005fcc:	e03a      	b.n	8006044 <_printf_i+0xa8>
 8005fce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005fd2:	2b15      	cmp	r3, #21
 8005fd4:	d8f6      	bhi.n	8005fc4 <_printf_i+0x28>
 8005fd6:	a101      	add	r1, pc, #4	@ (adr r1, 8005fdc <_printf_i+0x40>)
 8005fd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fdc:	08006035 	.word	0x08006035
 8005fe0:	08006049 	.word	0x08006049
 8005fe4:	08005fc5 	.word	0x08005fc5
 8005fe8:	08005fc5 	.word	0x08005fc5
 8005fec:	08005fc5 	.word	0x08005fc5
 8005ff0:	08005fc5 	.word	0x08005fc5
 8005ff4:	08006049 	.word	0x08006049
 8005ff8:	08005fc5 	.word	0x08005fc5
 8005ffc:	08005fc5 	.word	0x08005fc5
 8006000:	08005fc5 	.word	0x08005fc5
 8006004:	08005fc5 	.word	0x08005fc5
 8006008:	08006149 	.word	0x08006149
 800600c:	08006073 	.word	0x08006073
 8006010:	08006103 	.word	0x08006103
 8006014:	08005fc5 	.word	0x08005fc5
 8006018:	08005fc5 	.word	0x08005fc5
 800601c:	0800616b 	.word	0x0800616b
 8006020:	08005fc5 	.word	0x08005fc5
 8006024:	08006073 	.word	0x08006073
 8006028:	08005fc5 	.word	0x08005fc5
 800602c:	08005fc5 	.word	0x08005fc5
 8006030:	0800610b 	.word	0x0800610b
 8006034:	6833      	ldr	r3, [r6, #0]
 8006036:	1d1a      	adds	r2, r3, #4
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6032      	str	r2, [r6, #0]
 800603c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006040:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006044:	2301      	movs	r3, #1
 8006046:	e09d      	b.n	8006184 <_printf_i+0x1e8>
 8006048:	6833      	ldr	r3, [r6, #0]
 800604a:	6820      	ldr	r0, [r4, #0]
 800604c:	1d19      	adds	r1, r3, #4
 800604e:	6031      	str	r1, [r6, #0]
 8006050:	0606      	lsls	r6, r0, #24
 8006052:	d501      	bpl.n	8006058 <_printf_i+0xbc>
 8006054:	681d      	ldr	r5, [r3, #0]
 8006056:	e003      	b.n	8006060 <_printf_i+0xc4>
 8006058:	0645      	lsls	r5, r0, #25
 800605a:	d5fb      	bpl.n	8006054 <_printf_i+0xb8>
 800605c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006060:	2d00      	cmp	r5, #0
 8006062:	da03      	bge.n	800606c <_printf_i+0xd0>
 8006064:	232d      	movs	r3, #45	@ 0x2d
 8006066:	426d      	negs	r5, r5
 8006068:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800606c:	4859      	ldr	r0, [pc, #356]	@ (80061d4 <_printf_i+0x238>)
 800606e:	230a      	movs	r3, #10
 8006070:	e011      	b.n	8006096 <_printf_i+0xfa>
 8006072:	6821      	ldr	r1, [r4, #0]
 8006074:	6833      	ldr	r3, [r6, #0]
 8006076:	0608      	lsls	r0, r1, #24
 8006078:	f853 5b04 	ldr.w	r5, [r3], #4
 800607c:	d402      	bmi.n	8006084 <_printf_i+0xe8>
 800607e:	0649      	lsls	r1, r1, #25
 8006080:	bf48      	it	mi
 8006082:	b2ad      	uxthmi	r5, r5
 8006084:	2f6f      	cmp	r7, #111	@ 0x6f
 8006086:	4853      	ldr	r0, [pc, #332]	@ (80061d4 <_printf_i+0x238>)
 8006088:	6033      	str	r3, [r6, #0]
 800608a:	bf14      	ite	ne
 800608c:	230a      	movne	r3, #10
 800608e:	2308      	moveq	r3, #8
 8006090:	2100      	movs	r1, #0
 8006092:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006096:	6866      	ldr	r6, [r4, #4]
 8006098:	60a6      	str	r6, [r4, #8]
 800609a:	2e00      	cmp	r6, #0
 800609c:	bfa2      	ittt	ge
 800609e:	6821      	ldrge	r1, [r4, #0]
 80060a0:	f021 0104 	bicge.w	r1, r1, #4
 80060a4:	6021      	strge	r1, [r4, #0]
 80060a6:	b90d      	cbnz	r5, 80060ac <_printf_i+0x110>
 80060a8:	2e00      	cmp	r6, #0
 80060aa:	d04b      	beq.n	8006144 <_printf_i+0x1a8>
 80060ac:	4616      	mov	r6, r2
 80060ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80060b2:	fb03 5711 	mls	r7, r3, r1, r5
 80060b6:	5dc7      	ldrb	r7, [r0, r7]
 80060b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060bc:	462f      	mov	r7, r5
 80060be:	42bb      	cmp	r3, r7
 80060c0:	460d      	mov	r5, r1
 80060c2:	d9f4      	bls.n	80060ae <_printf_i+0x112>
 80060c4:	2b08      	cmp	r3, #8
 80060c6:	d10b      	bne.n	80060e0 <_printf_i+0x144>
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	07df      	lsls	r7, r3, #31
 80060cc:	d508      	bpl.n	80060e0 <_printf_i+0x144>
 80060ce:	6923      	ldr	r3, [r4, #16]
 80060d0:	6861      	ldr	r1, [r4, #4]
 80060d2:	4299      	cmp	r1, r3
 80060d4:	bfde      	ittt	le
 80060d6:	2330      	movle	r3, #48	@ 0x30
 80060d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060e0:	1b92      	subs	r2, r2, r6
 80060e2:	6122      	str	r2, [r4, #16]
 80060e4:	f8cd a000 	str.w	sl, [sp]
 80060e8:	464b      	mov	r3, r9
 80060ea:	aa03      	add	r2, sp, #12
 80060ec:	4621      	mov	r1, r4
 80060ee:	4640      	mov	r0, r8
 80060f0:	f7ff fee6 	bl	8005ec0 <_printf_common>
 80060f4:	3001      	adds	r0, #1
 80060f6:	d14a      	bne.n	800618e <_printf_i+0x1f2>
 80060f8:	f04f 30ff 	mov.w	r0, #4294967295
 80060fc:	b004      	add	sp, #16
 80060fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	f043 0320 	orr.w	r3, r3, #32
 8006108:	6023      	str	r3, [r4, #0]
 800610a:	4833      	ldr	r0, [pc, #204]	@ (80061d8 <_printf_i+0x23c>)
 800610c:	2778      	movs	r7, #120	@ 0x78
 800610e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	6831      	ldr	r1, [r6, #0]
 8006116:	061f      	lsls	r7, r3, #24
 8006118:	f851 5b04 	ldr.w	r5, [r1], #4
 800611c:	d402      	bmi.n	8006124 <_printf_i+0x188>
 800611e:	065f      	lsls	r7, r3, #25
 8006120:	bf48      	it	mi
 8006122:	b2ad      	uxthmi	r5, r5
 8006124:	6031      	str	r1, [r6, #0]
 8006126:	07d9      	lsls	r1, r3, #31
 8006128:	bf44      	itt	mi
 800612a:	f043 0320 	orrmi.w	r3, r3, #32
 800612e:	6023      	strmi	r3, [r4, #0]
 8006130:	b11d      	cbz	r5, 800613a <_printf_i+0x19e>
 8006132:	2310      	movs	r3, #16
 8006134:	e7ac      	b.n	8006090 <_printf_i+0xf4>
 8006136:	4827      	ldr	r0, [pc, #156]	@ (80061d4 <_printf_i+0x238>)
 8006138:	e7e9      	b.n	800610e <_printf_i+0x172>
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	f023 0320 	bic.w	r3, r3, #32
 8006140:	6023      	str	r3, [r4, #0]
 8006142:	e7f6      	b.n	8006132 <_printf_i+0x196>
 8006144:	4616      	mov	r6, r2
 8006146:	e7bd      	b.n	80060c4 <_printf_i+0x128>
 8006148:	6833      	ldr	r3, [r6, #0]
 800614a:	6825      	ldr	r5, [r4, #0]
 800614c:	6961      	ldr	r1, [r4, #20]
 800614e:	1d18      	adds	r0, r3, #4
 8006150:	6030      	str	r0, [r6, #0]
 8006152:	062e      	lsls	r6, r5, #24
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	d501      	bpl.n	800615c <_printf_i+0x1c0>
 8006158:	6019      	str	r1, [r3, #0]
 800615a:	e002      	b.n	8006162 <_printf_i+0x1c6>
 800615c:	0668      	lsls	r0, r5, #25
 800615e:	d5fb      	bpl.n	8006158 <_printf_i+0x1bc>
 8006160:	8019      	strh	r1, [r3, #0]
 8006162:	2300      	movs	r3, #0
 8006164:	6123      	str	r3, [r4, #16]
 8006166:	4616      	mov	r6, r2
 8006168:	e7bc      	b.n	80060e4 <_printf_i+0x148>
 800616a:	6833      	ldr	r3, [r6, #0]
 800616c:	1d1a      	adds	r2, r3, #4
 800616e:	6032      	str	r2, [r6, #0]
 8006170:	681e      	ldr	r6, [r3, #0]
 8006172:	6862      	ldr	r2, [r4, #4]
 8006174:	2100      	movs	r1, #0
 8006176:	4630      	mov	r0, r6
 8006178:	f7fa f83a 	bl	80001f0 <memchr>
 800617c:	b108      	cbz	r0, 8006182 <_printf_i+0x1e6>
 800617e:	1b80      	subs	r0, r0, r6
 8006180:	6060      	str	r0, [r4, #4]
 8006182:	6863      	ldr	r3, [r4, #4]
 8006184:	6123      	str	r3, [r4, #16]
 8006186:	2300      	movs	r3, #0
 8006188:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800618c:	e7aa      	b.n	80060e4 <_printf_i+0x148>
 800618e:	6923      	ldr	r3, [r4, #16]
 8006190:	4632      	mov	r2, r6
 8006192:	4649      	mov	r1, r9
 8006194:	4640      	mov	r0, r8
 8006196:	47d0      	blx	sl
 8006198:	3001      	adds	r0, #1
 800619a:	d0ad      	beq.n	80060f8 <_printf_i+0x15c>
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	079b      	lsls	r3, r3, #30
 80061a0:	d413      	bmi.n	80061ca <_printf_i+0x22e>
 80061a2:	68e0      	ldr	r0, [r4, #12]
 80061a4:	9b03      	ldr	r3, [sp, #12]
 80061a6:	4298      	cmp	r0, r3
 80061a8:	bfb8      	it	lt
 80061aa:	4618      	movlt	r0, r3
 80061ac:	e7a6      	b.n	80060fc <_printf_i+0x160>
 80061ae:	2301      	movs	r3, #1
 80061b0:	4632      	mov	r2, r6
 80061b2:	4649      	mov	r1, r9
 80061b4:	4640      	mov	r0, r8
 80061b6:	47d0      	blx	sl
 80061b8:	3001      	adds	r0, #1
 80061ba:	d09d      	beq.n	80060f8 <_printf_i+0x15c>
 80061bc:	3501      	adds	r5, #1
 80061be:	68e3      	ldr	r3, [r4, #12]
 80061c0:	9903      	ldr	r1, [sp, #12]
 80061c2:	1a5b      	subs	r3, r3, r1
 80061c4:	42ab      	cmp	r3, r5
 80061c6:	dcf2      	bgt.n	80061ae <_printf_i+0x212>
 80061c8:	e7eb      	b.n	80061a2 <_printf_i+0x206>
 80061ca:	2500      	movs	r5, #0
 80061cc:	f104 0619 	add.w	r6, r4, #25
 80061d0:	e7f5      	b.n	80061be <_printf_i+0x222>
 80061d2:	bf00      	nop
 80061d4:	08008682 	.word	0x08008682
 80061d8:	08008693 	.word	0x08008693

080061dc <std>:
 80061dc:	2300      	movs	r3, #0
 80061de:	b510      	push	{r4, lr}
 80061e0:	4604      	mov	r4, r0
 80061e2:	e9c0 3300 	strd	r3, r3, [r0]
 80061e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061ea:	6083      	str	r3, [r0, #8]
 80061ec:	8181      	strh	r1, [r0, #12]
 80061ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80061f0:	81c2      	strh	r2, [r0, #14]
 80061f2:	6183      	str	r3, [r0, #24]
 80061f4:	4619      	mov	r1, r3
 80061f6:	2208      	movs	r2, #8
 80061f8:	305c      	adds	r0, #92	@ 0x5c
 80061fa:	f000 f914 	bl	8006426 <memset>
 80061fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006234 <std+0x58>)
 8006200:	6263      	str	r3, [r4, #36]	@ 0x24
 8006202:	4b0d      	ldr	r3, [pc, #52]	@ (8006238 <std+0x5c>)
 8006204:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006206:	4b0d      	ldr	r3, [pc, #52]	@ (800623c <std+0x60>)
 8006208:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800620a:	4b0d      	ldr	r3, [pc, #52]	@ (8006240 <std+0x64>)
 800620c:	6323      	str	r3, [r4, #48]	@ 0x30
 800620e:	4b0d      	ldr	r3, [pc, #52]	@ (8006244 <std+0x68>)
 8006210:	6224      	str	r4, [r4, #32]
 8006212:	429c      	cmp	r4, r3
 8006214:	d006      	beq.n	8006224 <std+0x48>
 8006216:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800621a:	4294      	cmp	r4, r2
 800621c:	d002      	beq.n	8006224 <std+0x48>
 800621e:	33d0      	adds	r3, #208	@ 0xd0
 8006220:	429c      	cmp	r4, r3
 8006222:	d105      	bne.n	8006230 <std+0x54>
 8006224:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800622c:	f000 b978 	b.w	8006520 <__retarget_lock_init_recursive>
 8006230:	bd10      	pop	{r4, pc}
 8006232:	bf00      	nop
 8006234:	080063a1 	.word	0x080063a1
 8006238:	080063c3 	.word	0x080063c3
 800623c:	080063fb 	.word	0x080063fb
 8006240:	0800641f 	.word	0x0800641f
 8006244:	20000854 	.word	0x20000854

08006248 <stdio_exit_handler>:
 8006248:	4a02      	ldr	r2, [pc, #8]	@ (8006254 <stdio_exit_handler+0xc>)
 800624a:	4903      	ldr	r1, [pc, #12]	@ (8006258 <stdio_exit_handler+0x10>)
 800624c:	4803      	ldr	r0, [pc, #12]	@ (800625c <stdio_exit_handler+0x14>)
 800624e:	f000 b869 	b.w	8006324 <_fwalk_sglue>
 8006252:	bf00      	nop
 8006254:	2000000c 	.word	0x2000000c
 8006258:	08007e7d 	.word	0x08007e7d
 800625c:	2000001c 	.word	0x2000001c

08006260 <cleanup_stdio>:
 8006260:	6841      	ldr	r1, [r0, #4]
 8006262:	4b0c      	ldr	r3, [pc, #48]	@ (8006294 <cleanup_stdio+0x34>)
 8006264:	4299      	cmp	r1, r3
 8006266:	b510      	push	{r4, lr}
 8006268:	4604      	mov	r4, r0
 800626a:	d001      	beq.n	8006270 <cleanup_stdio+0x10>
 800626c:	f001 fe06 	bl	8007e7c <_fflush_r>
 8006270:	68a1      	ldr	r1, [r4, #8]
 8006272:	4b09      	ldr	r3, [pc, #36]	@ (8006298 <cleanup_stdio+0x38>)
 8006274:	4299      	cmp	r1, r3
 8006276:	d002      	beq.n	800627e <cleanup_stdio+0x1e>
 8006278:	4620      	mov	r0, r4
 800627a:	f001 fdff 	bl	8007e7c <_fflush_r>
 800627e:	68e1      	ldr	r1, [r4, #12]
 8006280:	4b06      	ldr	r3, [pc, #24]	@ (800629c <cleanup_stdio+0x3c>)
 8006282:	4299      	cmp	r1, r3
 8006284:	d004      	beq.n	8006290 <cleanup_stdio+0x30>
 8006286:	4620      	mov	r0, r4
 8006288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800628c:	f001 bdf6 	b.w	8007e7c <_fflush_r>
 8006290:	bd10      	pop	{r4, pc}
 8006292:	bf00      	nop
 8006294:	20000854 	.word	0x20000854
 8006298:	200008bc 	.word	0x200008bc
 800629c:	20000924 	.word	0x20000924

080062a0 <global_stdio_init.part.0>:
 80062a0:	b510      	push	{r4, lr}
 80062a2:	4b0b      	ldr	r3, [pc, #44]	@ (80062d0 <global_stdio_init.part.0+0x30>)
 80062a4:	4c0b      	ldr	r4, [pc, #44]	@ (80062d4 <global_stdio_init.part.0+0x34>)
 80062a6:	4a0c      	ldr	r2, [pc, #48]	@ (80062d8 <global_stdio_init.part.0+0x38>)
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	4620      	mov	r0, r4
 80062ac:	2200      	movs	r2, #0
 80062ae:	2104      	movs	r1, #4
 80062b0:	f7ff ff94 	bl	80061dc <std>
 80062b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80062b8:	2201      	movs	r2, #1
 80062ba:	2109      	movs	r1, #9
 80062bc:	f7ff ff8e 	bl	80061dc <std>
 80062c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80062c4:	2202      	movs	r2, #2
 80062c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062ca:	2112      	movs	r1, #18
 80062cc:	f7ff bf86 	b.w	80061dc <std>
 80062d0:	2000098c 	.word	0x2000098c
 80062d4:	20000854 	.word	0x20000854
 80062d8:	08006249 	.word	0x08006249

080062dc <__sfp_lock_acquire>:
 80062dc:	4801      	ldr	r0, [pc, #4]	@ (80062e4 <__sfp_lock_acquire+0x8>)
 80062de:	f000 b920 	b.w	8006522 <__retarget_lock_acquire_recursive>
 80062e2:	bf00      	nop
 80062e4:	20000995 	.word	0x20000995

080062e8 <__sfp_lock_release>:
 80062e8:	4801      	ldr	r0, [pc, #4]	@ (80062f0 <__sfp_lock_release+0x8>)
 80062ea:	f000 b91b 	b.w	8006524 <__retarget_lock_release_recursive>
 80062ee:	bf00      	nop
 80062f0:	20000995 	.word	0x20000995

080062f4 <__sinit>:
 80062f4:	b510      	push	{r4, lr}
 80062f6:	4604      	mov	r4, r0
 80062f8:	f7ff fff0 	bl	80062dc <__sfp_lock_acquire>
 80062fc:	6a23      	ldr	r3, [r4, #32]
 80062fe:	b11b      	cbz	r3, 8006308 <__sinit+0x14>
 8006300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006304:	f7ff bff0 	b.w	80062e8 <__sfp_lock_release>
 8006308:	4b04      	ldr	r3, [pc, #16]	@ (800631c <__sinit+0x28>)
 800630a:	6223      	str	r3, [r4, #32]
 800630c:	4b04      	ldr	r3, [pc, #16]	@ (8006320 <__sinit+0x2c>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1f5      	bne.n	8006300 <__sinit+0xc>
 8006314:	f7ff ffc4 	bl	80062a0 <global_stdio_init.part.0>
 8006318:	e7f2      	b.n	8006300 <__sinit+0xc>
 800631a:	bf00      	nop
 800631c:	08006261 	.word	0x08006261
 8006320:	2000098c 	.word	0x2000098c

08006324 <_fwalk_sglue>:
 8006324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006328:	4607      	mov	r7, r0
 800632a:	4688      	mov	r8, r1
 800632c:	4614      	mov	r4, r2
 800632e:	2600      	movs	r6, #0
 8006330:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006334:	f1b9 0901 	subs.w	r9, r9, #1
 8006338:	d505      	bpl.n	8006346 <_fwalk_sglue+0x22>
 800633a:	6824      	ldr	r4, [r4, #0]
 800633c:	2c00      	cmp	r4, #0
 800633e:	d1f7      	bne.n	8006330 <_fwalk_sglue+0xc>
 8006340:	4630      	mov	r0, r6
 8006342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006346:	89ab      	ldrh	r3, [r5, #12]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d907      	bls.n	800635c <_fwalk_sglue+0x38>
 800634c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006350:	3301      	adds	r3, #1
 8006352:	d003      	beq.n	800635c <_fwalk_sglue+0x38>
 8006354:	4629      	mov	r1, r5
 8006356:	4638      	mov	r0, r7
 8006358:	47c0      	blx	r8
 800635a:	4306      	orrs	r6, r0
 800635c:	3568      	adds	r5, #104	@ 0x68
 800635e:	e7e9      	b.n	8006334 <_fwalk_sglue+0x10>

08006360 <siprintf>:
 8006360:	b40e      	push	{r1, r2, r3}
 8006362:	b500      	push	{lr}
 8006364:	b09c      	sub	sp, #112	@ 0x70
 8006366:	ab1d      	add	r3, sp, #116	@ 0x74
 8006368:	9002      	str	r0, [sp, #8]
 800636a:	9006      	str	r0, [sp, #24]
 800636c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006370:	4809      	ldr	r0, [pc, #36]	@ (8006398 <siprintf+0x38>)
 8006372:	9107      	str	r1, [sp, #28]
 8006374:	9104      	str	r1, [sp, #16]
 8006376:	4909      	ldr	r1, [pc, #36]	@ (800639c <siprintf+0x3c>)
 8006378:	f853 2b04 	ldr.w	r2, [r3], #4
 800637c:	9105      	str	r1, [sp, #20]
 800637e:	6800      	ldr	r0, [r0, #0]
 8006380:	9301      	str	r3, [sp, #4]
 8006382:	a902      	add	r1, sp, #8
 8006384:	f001 fbfa 	bl	8007b7c <_svfiprintf_r>
 8006388:	9b02      	ldr	r3, [sp, #8]
 800638a:	2200      	movs	r2, #0
 800638c:	701a      	strb	r2, [r3, #0]
 800638e:	b01c      	add	sp, #112	@ 0x70
 8006390:	f85d eb04 	ldr.w	lr, [sp], #4
 8006394:	b003      	add	sp, #12
 8006396:	4770      	bx	lr
 8006398:	20000018 	.word	0x20000018
 800639c:	ffff0208 	.word	0xffff0208

080063a0 <__sread>:
 80063a0:	b510      	push	{r4, lr}
 80063a2:	460c      	mov	r4, r1
 80063a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063a8:	f000 f86c 	bl	8006484 <_read_r>
 80063ac:	2800      	cmp	r0, #0
 80063ae:	bfab      	itete	ge
 80063b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80063b2:	89a3      	ldrhlt	r3, [r4, #12]
 80063b4:	181b      	addge	r3, r3, r0
 80063b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80063ba:	bfac      	ite	ge
 80063bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80063be:	81a3      	strhlt	r3, [r4, #12]
 80063c0:	bd10      	pop	{r4, pc}

080063c2 <__swrite>:
 80063c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c6:	461f      	mov	r7, r3
 80063c8:	898b      	ldrh	r3, [r1, #12]
 80063ca:	05db      	lsls	r3, r3, #23
 80063cc:	4605      	mov	r5, r0
 80063ce:	460c      	mov	r4, r1
 80063d0:	4616      	mov	r6, r2
 80063d2:	d505      	bpl.n	80063e0 <__swrite+0x1e>
 80063d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063d8:	2302      	movs	r3, #2
 80063da:	2200      	movs	r2, #0
 80063dc:	f000 f840 	bl	8006460 <_lseek_r>
 80063e0:	89a3      	ldrh	r3, [r4, #12]
 80063e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063ea:	81a3      	strh	r3, [r4, #12]
 80063ec:	4632      	mov	r2, r6
 80063ee:	463b      	mov	r3, r7
 80063f0:	4628      	mov	r0, r5
 80063f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063f6:	f000 b857 	b.w	80064a8 <_write_r>

080063fa <__sseek>:
 80063fa:	b510      	push	{r4, lr}
 80063fc:	460c      	mov	r4, r1
 80063fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006402:	f000 f82d 	bl	8006460 <_lseek_r>
 8006406:	1c43      	adds	r3, r0, #1
 8006408:	89a3      	ldrh	r3, [r4, #12]
 800640a:	bf15      	itete	ne
 800640c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800640e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006412:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006416:	81a3      	strheq	r3, [r4, #12]
 8006418:	bf18      	it	ne
 800641a:	81a3      	strhne	r3, [r4, #12]
 800641c:	bd10      	pop	{r4, pc}

0800641e <__sclose>:
 800641e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006422:	f000 b80d 	b.w	8006440 <_close_r>

08006426 <memset>:
 8006426:	4402      	add	r2, r0
 8006428:	4603      	mov	r3, r0
 800642a:	4293      	cmp	r3, r2
 800642c:	d100      	bne.n	8006430 <memset+0xa>
 800642e:	4770      	bx	lr
 8006430:	f803 1b01 	strb.w	r1, [r3], #1
 8006434:	e7f9      	b.n	800642a <memset+0x4>
	...

08006438 <_localeconv_r>:
 8006438:	4800      	ldr	r0, [pc, #0]	@ (800643c <_localeconv_r+0x4>)
 800643a:	4770      	bx	lr
 800643c:	20000158 	.word	0x20000158

08006440 <_close_r>:
 8006440:	b538      	push	{r3, r4, r5, lr}
 8006442:	4d06      	ldr	r5, [pc, #24]	@ (800645c <_close_r+0x1c>)
 8006444:	2300      	movs	r3, #0
 8006446:	4604      	mov	r4, r0
 8006448:	4608      	mov	r0, r1
 800644a:	602b      	str	r3, [r5, #0]
 800644c:	f7fb fb83 	bl	8001b56 <_close>
 8006450:	1c43      	adds	r3, r0, #1
 8006452:	d102      	bne.n	800645a <_close_r+0x1a>
 8006454:	682b      	ldr	r3, [r5, #0]
 8006456:	b103      	cbz	r3, 800645a <_close_r+0x1a>
 8006458:	6023      	str	r3, [r4, #0]
 800645a:	bd38      	pop	{r3, r4, r5, pc}
 800645c:	20000990 	.word	0x20000990

08006460 <_lseek_r>:
 8006460:	b538      	push	{r3, r4, r5, lr}
 8006462:	4d07      	ldr	r5, [pc, #28]	@ (8006480 <_lseek_r+0x20>)
 8006464:	4604      	mov	r4, r0
 8006466:	4608      	mov	r0, r1
 8006468:	4611      	mov	r1, r2
 800646a:	2200      	movs	r2, #0
 800646c:	602a      	str	r2, [r5, #0]
 800646e:	461a      	mov	r2, r3
 8006470:	f7fb fb98 	bl	8001ba4 <_lseek>
 8006474:	1c43      	adds	r3, r0, #1
 8006476:	d102      	bne.n	800647e <_lseek_r+0x1e>
 8006478:	682b      	ldr	r3, [r5, #0]
 800647a:	b103      	cbz	r3, 800647e <_lseek_r+0x1e>
 800647c:	6023      	str	r3, [r4, #0]
 800647e:	bd38      	pop	{r3, r4, r5, pc}
 8006480:	20000990 	.word	0x20000990

08006484 <_read_r>:
 8006484:	b538      	push	{r3, r4, r5, lr}
 8006486:	4d07      	ldr	r5, [pc, #28]	@ (80064a4 <_read_r+0x20>)
 8006488:	4604      	mov	r4, r0
 800648a:	4608      	mov	r0, r1
 800648c:	4611      	mov	r1, r2
 800648e:	2200      	movs	r2, #0
 8006490:	602a      	str	r2, [r5, #0]
 8006492:	461a      	mov	r2, r3
 8006494:	f7fb fb26 	bl	8001ae4 <_read>
 8006498:	1c43      	adds	r3, r0, #1
 800649a:	d102      	bne.n	80064a2 <_read_r+0x1e>
 800649c:	682b      	ldr	r3, [r5, #0]
 800649e:	b103      	cbz	r3, 80064a2 <_read_r+0x1e>
 80064a0:	6023      	str	r3, [r4, #0]
 80064a2:	bd38      	pop	{r3, r4, r5, pc}
 80064a4:	20000990 	.word	0x20000990

080064a8 <_write_r>:
 80064a8:	b538      	push	{r3, r4, r5, lr}
 80064aa:	4d07      	ldr	r5, [pc, #28]	@ (80064c8 <_write_r+0x20>)
 80064ac:	4604      	mov	r4, r0
 80064ae:	4608      	mov	r0, r1
 80064b0:	4611      	mov	r1, r2
 80064b2:	2200      	movs	r2, #0
 80064b4:	602a      	str	r2, [r5, #0]
 80064b6:	461a      	mov	r2, r3
 80064b8:	f7fb fb31 	bl	8001b1e <_write>
 80064bc:	1c43      	adds	r3, r0, #1
 80064be:	d102      	bne.n	80064c6 <_write_r+0x1e>
 80064c0:	682b      	ldr	r3, [r5, #0]
 80064c2:	b103      	cbz	r3, 80064c6 <_write_r+0x1e>
 80064c4:	6023      	str	r3, [r4, #0]
 80064c6:	bd38      	pop	{r3, r4, r5, pc}
 80064c8:	20000990 	.word	0x20000990

080064cc <__errno>:
 80064cc:	4b01      	ldr	r3, [pc, #4]	@ (80064d4 <__errno+0x8>)
 80064ce:	6818      	ldr	r0, [r3, #0]
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	20000018 	.word	0x20000018

080064d8 <__libc_init_array>:
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	4d0d      	ldr	r5, [pc, #52]	@ (8006510 <__libc_init_array+0x38>)
 80064dc:	4c0d      	ldr	r4, [pc, #52]	@ (8006514 <__libc_init_array+0x3c>)
 80064de:	1b64      	subs	r4, r4, r5
 80064e0:	10a4      	asrs	r4, r4, #2
 80064e2:	2600      	movs	r6, #0
 80064e4:	42a6      	cmp	r6, r4
 80064e6:	d109      	bne.n	80064fc <__libc_init_array+0x24>
 80064e8:	4d0b      	ldr	r5, [pc, #44]	@ (8006518 <__libc_init_array+0x40>)
 80064ea:	4c0c      	ldr	r4, [pc, #48]	@ (800651c <__libc_init_array+0x44>)
 80064ec:	f002 f864 	bl	80085b8 <_init>
 80064f0:	1b64      	subs	r4, r4, r5
 80064f2:	10a4      	asrs	r4, r4, #2
 80064f4:	2600      	movs	r6, #0
 80064f6:	42a6      	cmp	r6, r4
 80064f8:	d105      	bne.n	8006506 <__libc_init_array+0x2e>
 80064fa:	bd70      	pop	{r4, r5, r6, pc}
 80064fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006500:	4798      	blx	r3
 8006502:	3601      	adds	r6, #1
 8006504:	e7ee      	b.n	80064e4 <__libc_init_array+0xc>
 8006506:	f855 3b04 	ldr.w	r3, [r5], #4
 800650a:	4798      	blx	r3
 800650c:	3601      	adds	r6, #1
 800650e:	e7f2      	b.n	80064f6 <__libc_init_array+0x1e>
 8006510:	080089e8 	.word	0x080089e8
 8006514:	080089e8 	.word	0x080089e8
 8006518:	080089e8 	.word	0x080089e8
 800651c:	080089ec 	.word	0x080089ec

08006520 <__retarget_lock_init_recursive>:
 8006520:	4770      	bx	lr

08006522 <__retarget_lock_acquire_recursive>:
 8006522:	4770      	bx	lr

08006524 <__retarget_lock_release_recursive>:
 8006524:	4770      	bx	lr

08006526 <quorem>:
 8006526:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652a:	6903      	ldr	r3, [r0, #16]
 800652c:	690c      	ldr	r4, [r1, #16]
 800652e:	42a3      	cmp	r3, r4
 8006530:	4607      	mov	r7, r0
 8006532:	db7e      	blt.n	8006632 <quorem+0x10c>
 8006534:	3c01      	subs	r4, #1
 8006536:	f101 0814 	add.w	r8, r1, #20
 800653a:	00a3      	lsls	r3, r4, #2
 800653c:	f100 0514 	add.w	r5, r0, #20
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006546:	9301      	str	r3, [sp, #4]
 8006548:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800654c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006550:	3301      	adds	r3, #1
 8006552:	429a      	cmp	r2, r3
 8006554:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006558:	fbb2 f6f3 	udiv	r6, r2, r3
 800655c:	d32e      	bcc.n	80065bc <quorem+0x96>
 800655e:	f04f 0a00 	mov.w	sl, #0
 8006562:	46c4      	mov	ip, r8
 8006564:	46ae      	mov	lr, r5
 8006566:	46d3      	mov	fp, sl
 8006568:	f85c 3b04 	ldr.w	r3, [ip], #4
 800656c:	b298      	uxth	r0, r3
 800656e:	fb06 a000 	mla	r0, r6, r0, sl
 8006572:	0c02      	lsrs	r2, r0, #16
 8006574:	0c1b      	lsrs	r3, r3, #16
 8006576:	fb06 2303 	mla	r3, r6, r3, r2
 800657a:	f8de 2000 	ldr.w	r2, [lr]
 800657e:	b280      	uxth	r0, r0
 8006580:	b292      	uxth	r2, r2
 8006582:	1a12      	subs	r2, r2, r0
 8006584:	445a      	add	r2, fp
 8006586:	f8de 0000 	ldr.w	r0, [lr]
 800658a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800658e:	b29b      	uxth	r3, r3
 8006590:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006594:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006598:	b292      	uxth	r2, r2
 800659a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800659e:	45e1      	cmp	r9, ip
 80065a0:	f84e 2b04 	str.w	r2, [lr], #4
 80065a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80065a8:	d2de      	bcs.n	8006568 <quorem+0x42>
 80065aa:	9b00      	ldr	r3, [sp, #0]
 80065ac:	58eb      	ldr	r3, [r5, r3]
 80065ae:	b92b      	cbnz	r3, 80065bc <quorem+0x96>
 80065b0:	9b01      	ldr	r3, [sp, #4]
 80065b2:	3b04      	subs	r3, #4
 80065b4:	429d      	cmp	r5, r3
 80065b6:	461a      	mov	r2, r3
 80065b8:	d32f      	bcc.n	800661a <quorem+0xf4>
 80065ba:	613c      	str	r4, [r7, #16]
 80065bc:	4638      	mov	r0, r7
 80065be:	f001 f979 	bl	80078b4 <__mcmp>
 80065c2:	2800      	cmp	r0, #0
 80065c4:	db25      	blt.n	8006612 <quorem+0xec>
 80065c6:	4629      	mov	r1, r5
 80065c8:	2000      	movs	r0, #0
 80065ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80065ce:	f8d1 c000 	ldr.w	ip, [r1]
 80065d2:	fa1f fe82 	uxth.w	lr, r2
 80065d6:	fa1f f38c 	uxth.w	r3, ip
 80065da:	eba3 030e 	sub.w	r3, r3, lr
 80065de:	4403      	add	r3, r0
 80065e0:	0c12      	lsrs	r2, r2, #16
 80065e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80065e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065f0:	45c1      	cmp	r9, r8
 80065f2:	f841 3b04 	str.w	r3, [r1], #4
 80065f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80065fa:	d2e6      	bcs.n	80065ca <quorem+0xa4>
 80065fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006600:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006604:	b922      	cbnz	r2, 8006610 <quorem+0xea>
 8006606:	3b04      	subs	r3, #4
 8006608:	429d      	cmp	r5, r3
 800660a:	461a      	mov	r2, r3
 800660c:	d30b      	bcc.n	8006626 <quorem+0x100>
 800660e:	613c      	str	r4, [r7, #16]
 8006610:	3601      	adds	r6, #1
 8006612:	4630      	mov	r0, r6
 8006614:	b003      	add	sp, #12
 8006616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800661a:	6812      	ldr	r2, [r2, #0]
 800661c:	3b04      	subs	r3, #4
 800661e:	2a00      	cmp	r2, #0
 8006620:	d1cb      	bne.n	80065ba <quorem+0x94>
 8006622:	3c01      	subs	r4, #1
 8006624:	e7c6      	b.n	80065b4 <quorem+0x8e>
 8006626:	6812      	ldr	r2, [r2, #0]
 8006628:	3b04      	subs	r3, #4
 800662a:	2a00      	cmp	r2, #0
 800662c:	d1ef      	bne.n	800660e <quorem+0xe8>
 800662e:	3c01      	subs	r4, #1
 8006630:	e7ea      	b.n	8006608 <quorem+0xe2>
 8006632:	2000      	movs	r0, #0
 8006634:	e7ee      	b.n	8006614 <quorem+0xee>
	...

08006638 <_dtoa_r>:
 8006638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663c:	69c7      	ldr	r7, [r0, #28]
 800663e:	b099      	sub	sp, #100	@ 0x64
 8006640:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006644:	ec55 4b10 	vmov	r4, r5, d0
 8006648:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800664a:	9109      	str	r1, [sp, #36]	@ 0x24
 800664c:	4683      	mov	fp, r0
 800664e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006650:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006652:	b97f      	cbnz	r7, 8006674 <_dtoa_r+0x3c>
 8006654:	2010      	movs	r0, #16
 8006656:	f000 fdfd 	bl	8007254 <malloc>
 800665a:	4602      	mov	r2, r0
 800665c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006660:	b920      	cbnz	r0, 800666c <_dtoa_r+0x34>
 8006662:	4ba7      	ldr	r3, [pc, #668]	@ (8006900 <_dtoa_r+0x2c8>)
 8006664:	21ef      	movs	r1, #239	@ 0xef
 8006666:	48a7      	ldr	r0, [pc, #668]	@ (8006904 <_dtoa_r+0x2cc>)
 8006668:	f001 fc68 	bl	8007f3c <__assert_func>
 800666c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006670:	6007      	str	r7, [r0, #0]
 8006672:	60c7      	str	r7, [r0, #12]
 8006674:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006678:	6819      	ldr	r1, [r3, #0]
 800667a:	b159      	cbz	r1, 8006694 <_dtoa_r+0x5c>
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	604a      	str	r2, [r1, #4]
 8006680:	2301      	movs	r3, #1
 8006682:	4093      	lsls	r3, r2
 8006684:	608b      	str	r3, [r1, #8]
 8006686:	4658      	mov	r0, fp
 8006688:	f000 feda 	bl	8007440 <_Bfree>
 800668c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006690:	2200      	movs	r2, #0
 8006692:	601a      	str	r2, [r3, #0]
 8006694:	1e2b      	subs	r3, r5, #0
 8006696:	bfb9      	ittee	lt
 8006698:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800669c:	9303      	strlt	r3, [sp, #12]
 800669e:	2300      	movge	r3, #0
 80066a0:	6033      	strge	r3, [r6, #0]
 80066a2:	9f03      	ldr	r7, [sp, #12]
 80066a4:	4b98      	ldr	r3, [pc, #608]	@ (8006908 <_dtoa_r+0x2d0>)
 80066a6:	bfbc      	itt	lt
 80066a8:	2201      	movlt	r2, #1
 80066aa:	6032      	strlt	r2, [r6, #0]
 80066ac:	43bb      	bics	r3, r7
 80066ae:	d112      	bne.n	80066d6 <_dtoa_r+0x9e>
 80066b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80066b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80066bc:	4323      	orrs	r3, r4
 80066be:	f000 854d 	beq.w	800715c <_dtoa_r+0xb24>
 80066c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80066c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800691c <_dtoa_r+0x2e4>
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 854f 	beq.w	800716c <_dtoa_r+0xb34>
 80066ce:	f10a 0303 	add.w	r3, sl, #3
 80066d2:	f000 bd49 	b.w	8007168 <_dtoa_r+0xb30>
 80066d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066da:	2200      	movs	r2, #0
 80066dc:	ec51 0b17 	vmov	r0, r1, d7
 80066e0:	2300      	movs	r3, #0
 80066e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80066e6:	f7fa f9ff 	bl	8000ae8 <__aeabi_dcmpeq>
 80066ea:	4680      	mov	r8, r0
 80066ec:	b158      	cbz	r0, 8006706 <_dtoa_r+0xce>
 80066ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80066f0:	2301      	movs	r3, #1
 80066f2:	6013      	str	r3, [r2, #0]
 80066f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80066f6:	b113      	cbz	r3, 80066fe <_dtoa_r+0xc6>
 80066f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80066fa:	4b84      	ldr	r3, [pc, #528]	@ (800690c <_dtoa_r+0x2d4>)
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006920 <_dtoa_r+0x2e8>
 8006702:	f000 bd33 	b.w	800716c <_dtoa_r+0xb34>
 8006706:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800670a:	aa16      	add	r2, sp, #88	@ 0x58
 800670c:	a917      	add	r1, sp, #92	@ 0x5c
 800670e:	4658      	mov	r0, fp
 8006710:	f001 f980 	bl	8007a14 <__d2b>
 8006714:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006718:	4681      	mov	r9, r0
 800671a:	2e00      	cmp	r6, #0
 800671c:	d077      	beq.n	800680e <_dtoa_r+0x1d6>
 800671e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006720:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006728:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800672c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006730:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006734:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006738:	4619      	mov	r1, r3
 800673a:	2200      	movs	r2, #0
 800673c:	4b74      	ldr	r3, [pc, #464]	@ (8006910 <_dtoa_r+0x2d8>)
 800673e:	f7f9 fdb3 	bl	80002a8 <__aeabi_dsub>
 8006742:	a369      	add	r3, pc, #420	@ (adr r3, 80068e8 <_dtoa_r+0x2b0>)
 8006744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006748:	f7f9 ff66 	bl	8000618 <__aeabi_dmul>
 800674c:	a368      	add	r3, pc, #416	@ (adr r3, 80068f0 <_dtoa_r+0x2b8>)
 800674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006752:	f7f9 fdab 	bl	80002ac <__adddf3>
 8006756:	4604      	mov	r4, r0
 8006758:	4630      	mov	r0, r6
 800675a:	460d      	mov	r5, r1
 800675c:	f7f9 fef2 	bl	8000544 <__aeabi_i2d>
 8006760:	a365      	add	r3, pc, #404	@ (adr r3, 80068f8 <_dtoa_r+0x2c0>)
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	f7f9 ff57 	bl	8000618 <__aeabi_dmul>
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	4620      	mov	r0, r4
 8006770:	4629      	mov	r1, r5
 8006772:	f7f9 fd9b 	bl	80002ac <__adddf3>
 8006776:	4604      	mov	r4, r0
 8006778:	460d      	mov	r5, r1
 800677a:	f7fa f9fd 	bl	8000b78 <__aeabi_d2iz>
 800677e:	2200      	movs	r2, #0
 8006780:	4607      	mov	r7, r0
 8006782:	2300      	movs	r3, #0
 8006784:	4620      	mov	r0, r4
 8006786:	4629      	mov	r1, r5
 8006788:	f7fa f9b8 	bl	8000afc <__aeabi_dcmplt>
 800678c:	b140      	cbz	r0, 80067a0 <_dtoa_r+0x168>
 800678e:	4638      	mov	r0, r7
 8006790:	f7f9 fed8 	bl	8000544 <__aeabi_i2d>
 8006794:	4622      	mov	r2, r4
 8006796:	462b      	mov	r3, r5
 8006798:	f7fa f9a6 	bl	8000ae8 <__aeabi_dcmpeq>
 800679c:	b900      	cbnz	r0, 80067a0 <_dtoa_r+0x168>
 800679e:	3f01      	subs	r7, #1
 80067a0:	2f16      	cmp	r7, #22
 80067a2:	d851      	bhi.n	8006848 <_dtoa_r+0x210>
 80067a4:	4b5b      	ldr	r3, [pc, #364]	@ (8006914 <_dtoa_r+0x2dc>)
 80067a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067b2:	f7fa f9a3 	bl	8000afc <__aeabi_dcmplt>
 80067b6:	2800      	cmp	r0, #0
 80067b8:	d048      	beq.n	800684c <_dtoa_r+0x214>
 80067ba:	3f01      	subs	r7, #1
 80067bc:	2300      	movs	r3, #0
 80067be:	9312      	str	r3, [sp, #72]	@ 0x48
 80067c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80067c2:	1b9b      	subs	r3, r3, r6
 80067c4:	1e5a      	subs	r2, r3, #1
 80067c6:	bf44      	itt	mi
 80067c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80067cc:	2300      	movmi	r3, #0
 80067ce:	9208      	str	r2, [sp, #32]
 80067d0:	bf54      	ite	pl
 80067d2:	f04f 0800 	movpl.w	r8, #0
 80067d6:	9308      	strmi	r3, [sp, #32]
 80067d8:	2f00      	cmp	r7, #0
 80067da:	db39      	blt.n	8006850 <_dtoa_r+0x218>
 80067dc:	9b08      	ldr	r3, [sp, #32]
 80067de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80067e0:	443b      	add	r3, r7
 80067e2:	9308      	str	r3, [sp, #32]
 80067e4:	2300      	movs	r3, #0
 80067e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80067e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ea:	2b09      	cmp	r3, #9
 80067ec:	d864      	bhi.n	80068b8 <_dtoa_r+0x280>
 80067ee:	2b05      	cmp	r3, #5
 80067f0:	bfc4      	itt	gt
 80067f2:	3b04      	subgt	r3, #4
 80067f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80067f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067f8:	f1a3 0302 	sub.w	r3, r3, #2
 80067fc:	bfcc      	ite	gt
 80067fe:	2400      	movgt	r4, #0
 8006800:	2401      	movle	r4, #1
 8006802:	2b03      	cmp	r3, #3
 8006804:	d863      	bhi.n	80068ce <_dtoa_r+0x296>
 8006806:	e8df f003 	tbb	[pc, r3]
 800680a:	372a      	.short	0x372a
 800680c:	5535      	.short	0x5535
 800680e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006812:	441e      	add	r6, r3
 8006814:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006818:	2b20      	cmp	r3, #32
 800681a:	bfc1      	itttt	gt
 800681c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006820:	409f      	lslgt	r7, r3
 8006822:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006826:	fa24 f303 	lsrgt.w	r3, r4, r3
 800682a:	bfd6      	itet	le
 800682c:	f1c3 0320 	rsble	r3, r3, #32
 8006830:	ea47 0003 	orrgt.w	r0, r7, r3
 8006834:	fa04 f003 	lslle.w	r0, r4, r3
 8006838:	f7f9 fe74 	bl	8000524 <__aeabi_ui2d>
 800683c:	2201      	movs	r2, #1
 800683e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006842:	3e01      	subs	r6, #1
 8006844:	9214      	str	r2, [sp, #80]	@ 0x50
 8006846:	e777      	b.n	8006738 <_dtoa_r+0x100>
 8006848:	2301      	movs	r3, #1
 800684a:	e7b8      	b.n	80067be <_dtoa_r+0x186>
 800684c:	9012      	str	r0, [sp, #72]	@ 0x48
 800684e:	e7b7      	b.n	80067c0 <_dtoa_r+0x188>
 8006850:	427b      	negs	r3, r7
 8006852:	930a      	str	r3, [sp, #40]	@ 0x28
 8006854:	2300      	movs	r3, #0
 8006856:	eba8 0807 	sub.w	r8, r8, r7
 800685a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800685c:	e7c4      	b.n	80067e8 <_dtoa_r+0x1b0>
 800685e:	2300      	movs	r3, #0
 8006860:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006862:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006864:	2b00      	cmp	r3, #0
 8006866:	dc35      	bgt.n	80068d4 <_dtoa_r+0x29c>
 8006868:	2301      	movs	r3, #1
 800686a:	9300      	str	r3, [sp, #0]
 800686c:	9307      	str	r3, [sp, #28]
 800686e:	461a      	mov	r2, r3
 8006870:	920e      	str	r2, [sp, #56]	@ 0x38
 8006872:	e00b      	b.n	800688c <_dtoa_r+0x254>
 8006874:	2301      	movs	r3, #1
 8006876:	e7f3      	b.n	8006860 <_dtoa_r+0x228>
 8006878:	2300      	movs	r3, #0
 800687a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800687c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800687e:	18fb      	adds	r3, r7, r3
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	3301      	adds	r3, #1
 8006884:	2b01      	cmp	r3, #1
 8006886:	9307      	str	r3, [sp, #28]
 8006888:	bfb8      	it	lt
 800688a:	2301      	movlt	r3, #1
 800688c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006890:	2100      	movs	r1, #0
 8006892:	2204      	movs	r2, #4
 8006894:	f102 0514 	add.w	r5, r2, #20
 8006898:	429d      	cmp	r5, r3
 800689a:	d91f      	bls.n	80068dc <_dtoa_r+0x2a4>
 800689c:	6041      	str	r1, [r0, #4]
 800689e:	4658      	mov	r0, fp
 80068a0:	f000 fd8e 	bl	80073c0 <_Balloc>
 80068a4:	4682      	mov	sl, r0
 80068a6:	2800      	cmp	r0, #0
 80068a8:	d13c      	bne.n	8006924 <_dtoa_r+0x2ec>
 80068aa:	4b1b      	ldr	r3, [pc, #108]	@ (8006918 <_dtoa_r+0x2e0>)
 80068ac:	4602      	mov	r2, r0
 80068ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80068b2:	e6d8      	b.n	8006666 <_dtoa_r+0x2e>
 80068b4:	2301      	movs	r3, #1
 80068b6:	e7e0      	b.n	800687a <_dtoa_r+0x242>
 80068b8:	2401      	movs	r4, #1
 80068ba:	2300      	movs	r3, #0
 80068bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80068be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80068c0:	f04f 33ff 	mov.w	r3, #4294967295
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	9307      	str	r3, [sp, #28]
 80068c8:	2200      	movs	r2, #0
 80068ca:	2312      	movs	r3, #18
 80068cc:	e7d0      	b.n	8006870 <_dtoa_r+0x238>
 80068ce:	2301      	movs	r3, #1
 80068d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068d2:	e7f5      	b.n	80068c0 <_dtoa_r+0x288>
 80068d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	9307      	str	r3, [sp, #28]
 80068da:	e7d7      	b.n	800688c <_dtoa_r+0x254>
 80068dc:	3101      	adds	r1, #1
 80068de:	0052      	lsls	r2, r2, #1
 80068e0:	e7d8      	b.n	8006894 <_dtoa_r+0x25c>
 80068e2:	bf00      	nop
 80068e4:	f3af 8000 	nop.w
 80068e8:	636f4361 	.word	0x636f4361
 80068ec:	3fd287a7 	.word	0x3fd287a7
 80068f0:	8b60c8b3 	.word	0x8b60c8b3
 80068f4:	3fc68a28 	.word	0x3fc68a28
 80068f8:	509f79fb 	.word	0x509f79fb
 80068fc:	3fd34413 	.word	0x3fd34413
 8006900:	080086b1 	.word	0x080086b1
 8006904:	080086c8 	.word	0x080086c8
 8006908:	7ff00000 	.word	0x7ff00000
 800690c:	08008681 	.word	0x08008681
 8006910:	3ff80000 	.word	0x3ff80000
 8006914:	080087c0 	.word	0x080087c0
 8006918:	08008720 	.word	0x08008720
 800691c:	080086ad 	.word	0x080086ad
 8006920:	08008680 	.word	0x08008680
 8006924:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006928:	6018      	str	r0, [r3, #0]
 800692a:	9b07      	ldr	r3, [sp, #28]
 800692c:	2b0e      	cmp	r3, #14
 800692e:	f200 80a4 	bhi.w	8006a7a <_dtoa_r+0x442>
 8006932:	2c00      	cmp	r4, #0
 8006934:	f000 80a1 	beq.w	8006a7a <_dtoa_r+0x442>
 8006938:	2f00      	cmp	r7, #0
 800693a:	dd33      	ble.n	80069a4 <_dtoa_r+0x36c>
 800693c:	4bad      	ldr	r3, [pc, #692]	@ (8006bf4 <_dtoa_r+0x5bc>)
 800693e:	f007 020f 	and.w	r2, r7, #15
 8006942:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006946:	ed93 7b00 	vldr	d7, [r3]
 800694a:	05f8      	lsls	r0, r7, #23
 800694c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006950:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006954:	d516      	bpl.n	8006984 <_dtoa_r+0x34c>
 8006956:	4ba8      	ldr	r3, [pc, #672]	@ (8006bf8 <_dtoa_r+0x5c0>)
 8006958:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800695c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006960:	f7f9 ff84 	bl	800086c <__aeabi_ddiv>
 8006964:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006968:	f004 040f 	and.w	r4, r4, #15
 800696c:	2603      	movs	r6, #3
 800696e:	4da2      	ldr	r5, [pc, #648]	@ (8006bf8 <_dtoa_r+0x5c0>)
 8006970:	b954      	cbnz	r4, 8006988 <_dtoa_r+0x350>
 8006972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800697a:	f7f9 ff77 	bl	800086c <__aeabi_ddiv>
 800697e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006982:	e028      	b.n	80069d6 <_dtoa_r+0x39e>
 8006984:	2602      	movs	r6, #2
 8006986:	e7f2      	b.n	800696e <_dtoa_r+0x336>
 8006988:	07e1      	lsls	r1, r4, #31
 800698a:	d508      	bpl.n	800699e <_dtoa_r+0x366>
 800698c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006990:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006994:	f7f9 fe40 	bl	8000618 <__aeabi_dmul>
 8006998:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800699c:	3601      	adds	r6, #1
 800699e:	1064      	asrs	r4, r4, #1
 80069a0:	3508      	adds	r5, #8
 80069a2:	e7e5      	b.n	8006970 <_dtoa_r+0x338>
 80069a4:	f000 80d2 	beq.w	8006b4c <_dtoa_r+0x514>
 80069a8:	427c      	negs	r4, r7
 80069aa:	4b92      	ldr	r3, [pc, #584]	@ (8006bf4 <_dtoa_r+0x5bc>)
 80069ac:	4d92      	ldr	r5, [pc, #584]	@ (8006bf8 <_dtoa_r+0x5c0>)
 80069ae:	f004 020f 	and.w	r2, r4, #15
 80069b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069be:	f7f9 fe2b 	bl	8000618 <__aeabi_dmul>
 80069c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069c6:	1124      	asrs	r4, r4, #4
 80069c8:	2300      	movs	r3, #0
 80069ca:	2602      	movs	r6, #2
 80069cc:	2c00      	cmp	r4, #0
 80069ce:	f040 80b2 	bne.w	8006b36 <_dtoa_r+0x4fe>
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1d3      	bne.n	800697e <_dtoa_r+0x346>
 80069d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80069d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 80b7 	beq.w	8006b50 <_dtoa_r+0x518>
 80069e2:	4b86      	ldr	r3, [pc, #536]	@ (8006bfc <_dtoa_r+0x5c4>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	4620      	mov	r0, r4
 80069e8:	4629      	mov	r1, r5
 80069ea:	f7fa f887 	bl	8000afc <__aeabi_dcmplt>
 80069ee:	2800      	cmp	r0, #0
 80069f0:	f000 80ae 	beq.w	8006b50 <_dtoa_r+0x518>
 80069f4:	9b07      	ldr	r3, [sp, #28]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f000 80aa 	beq.w	8006b50 <_dtoa_r+0x518>
 80069fc:	9b00      	ldr	r3, [sp, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	dd37      	ble.n	8006a72 <_dtoa_r+0x43a>
 8006a02:	1e7b      	subs	r3, r7, #1
 8006a04:	9304      	str	r3, [sp, #16]
 8006a06:	4620      	mov	r0, r4
 8006a08:	4b7d      	ldr	r3, [pc, #500]	@ (8006c00 <_dtoa_r+0x5c8>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	4629      	mov	r1, r5
 8006a0e:	f7f9 fe03 	bl	8000618 <__aeabi_dmul>
 8006a12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a16:	9c00      	ldr	r4, [sp, #0]
 8006a18:	3601      	adds	r6, #1
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	f7f9 fd92 	bl	8000544 <__aeabi_i2d>
 8006a20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a24:	f7f9 fdf8 	bl	8000618 <__aeabi_dmul>
 8006a28:	4b76      	ldr	r3, [pc, #472]	@ (8006c04 <_dtoa_r+0x5cc>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f7f9 fc3e 	bl	80002ac <__adddf3>
 8006a30:	4605      	mov	r5, r0
 8006a32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006a36:	2c00      	cmp	r4, #0
 8006a38:	f040 808d 	bne.w	8006b56 <_dtoa_r+0x51e>
 8006a3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a40:	4b71      	ldr	r3, [pc, #452]	@ (8006c08 <_dtoa_r+0x5d0>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	f7f9 fc30 	bl	80002a8 <__aeabi_dsub>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a50:	462a      	mov	r2, r5
 8006a52:	4633      	mov	r3, r6
 8006a54:	f7fa f870 	bl	8000b38 <__aeabi_dcmpgt>
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	f040 828b 	bne.w	8006f74 <_dtoa_r+0x93c>
 8006a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a62:	462a      	mov	r2, r5
 8006a64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006a68:	f7fa f848 	bl	8000afc <__aeabi_dcmplt>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	f040 8128 	bne.w	8006cc2 <_dtoa_r+0x68a>
 8006a72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006a76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006a7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f2c0 815a 	blt.w	8006d36 <_dtoa_r+0x6fe>
 8006a82:	2f0e      	cmp	r7, #14
 8006a84:	f300 8157 	bgt.w	8006d36 <_dtoa_r+0x6fe>
 8006a88:	4b5a      	ldr	r3, [pc, #360]	@ (8006bf4 <_dtoa_r+0x5bc>)
 8006a8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a8e:	ed93 7b00 	vldr	d7, [r3]
 8006a92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	ed8d 7b00 	vstr	d7, [sp]
 8006a9a:	da03      	bge.n	8006aa4 <_dtoa_r+0x46c>
 8006a9c:	9b07      	ldr	r3, [sp, #28]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f340 8101 	ble.w	8006ca6 <_dtoa_r+0x66e>
 8006aa4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006aa8:	4656      	mov	r6, sl
 8006aaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006aae:	4620      	mov	r0, r4
 8006ab0:	4629      	mov	r1, r5
 8006ab2:	f7f9 fedb 	bl	800086c <__aeabi_ddiv>
 8006ab6:	f7fa f85f 	bl	8000b78 <__aeabi_d2iz>
 8006aba:	4680      	mov	r8, r0
 8006abc:	f7f9 fd42 	bl	8000544 <__aeabi_i2d>
 8006ac0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ac4:	f7f9 fda8 	bl	8000618 <__aeabi_dmul>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	4620      	mov	r0, r4
 8006ace:	4629      	mov	r1, r5
 8006ad0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006ad4:	f7f9 fbe8 	bl	80002a8 <__aeabi_dsub>
 8006ad8:	f806 4b01 	strb.w	r4, [r6], #1
 8006adc:	9d07      	ldr	r5, [sp, #28]
 8006ade:	eba6 040a 	sub.w	r4, r6, sl
 8006ae2:	42a5      	cmp	r5, r4
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	f040 8117 	bne.w	8006d1a <_dtoa_r+0x6e2>
 8006aec:	f7f9 fbde 	bl	80002ac <__adddf3>
 8006af0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006af4:	4604      	mov	r4, r0
 8006af6:	460d      	mov	r5, r1
 8006af8:	f7fa f81e 	bl	8000b38 <__aeabi_dcmpgt>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	f040 80f9 	bne.w	8006cf4 <_dtoa_r+0x6bc>
 8006b02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b06:	4620      	mov	r0, r4
 8006b08:	4629      	mov	r1, r5
 8006b0a:	f7f9 ffed 	bl	8000ae8 <__aeabi_dcmpeq>
 8006b0e:	b118      	cbz	r0, 8006b18 <_dtoa_r+0x4e0>
 8006b10:	f018 0f01 	tst.w	r8, #1
 8006b14:	f040 80ee 	bne.w	8006cf4 <_dtoa_r+0x6bc>
 8006b18:	4649      	mov	r1, r9
 8006b1a:	4658      	mov	r0, fp
 8006b1c:	f000 fc90 	bl	8007440 <_Bfree>
 8006b20:	2300      	movs	r3, #0
 8006b22:	7033      	strb	r3, [r6, #0]
 8006b24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006b26:	3701      	adds	r7, #1
 8006b28:	601f      	str	r7, [r3, #0]
 8006b2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 831d 	beq.w	800716c <_dtoa_r+0xb34>
 8006b32:	601e      	str	r6, [r3, #0]
 8006b34:	e31a      	b.n	800716c <_dtoa_r+0xb34>
 8006b36:	07e2      	lsls	r2, r4, #31
 8006b38:	d505      	bpl.n	8006b46 <_dtoa_r+0x50e>
 8006b3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b3e:	f7f9 fd6b 	bl	8000618 <__aeabi_dmul>
 8006b42:	3601      	adds	r6, #1
 8006b44:	2301      	movs	r3, #1
 8006b46:	1064      	asrs	r4, r4, #1
 8006b48:	3508      	adds	r5, #8
 8006b4a:	e73f      	b.n	80069cc <_dtoa_r+0x394>
 8006b4c:	2602      	movs	r6, #2
 8006b4e:	e742      	b.n	80069d6 <_dtoa_r+0x39e>
 8006b50:	9c07      	ldr	r4, [sp, #28]
 8006b52:	9704      	str	r7, [sp, #16]
 8006b54:	e761      	b.n	8006a1a <_dtoa_r+0x3e2>
 8006b56:	4b27      	ldr	r3, [pc, #156]	@ (8006bf4 <_dtoa_r+0x5bc>)
 8006b58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b62:	4454      	add	r4, sl
 8006b64:	2900      	cmp	r1, #0
 8006b66:	d053      	beq.n	8006c10 <_dtoa_r+0x5d8>
 8006b68:	4928      	ldr	r1, [pc, #160]	@ (8006c0c <_dtoa_r+0x5d4>)
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	f7f9 fe7e 	bl	800086c <__aeabi_ddiv>
 8006b70:	4633      	mov	r3, r6
 8006b72:	462a      	mov	r2, r5
 8006b74:	f7f9 fb98 	bl	80002a8 <__aeabi_dsub>
 8006b78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b7c:	4656      	mov	r6, sl
 8006b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b82:	f7f9 fff9 	bl	8000b78 <__aeabi_d2iz>
 8006b86:	4605      	mov	r5, r0
 8006b88:	f7f9 fcdc 	bl	8000544 <__aeabi_i2d>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	460b      	mov	r3, r1
 8006b90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b94:	f7f9 fb88 	bl	80002a8 <__aeabi_dsub>
 8006b98:	3530      	adds	r5, #48	@ 0x30
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ba2:	f806 5b01 	strb.w	r5, [r6], #1
 8006ba6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006baa:	f7f9 ffa7 	bl	8000afc <__aeabi_dcmplt>
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	d171      	bne.n	8006c96 <_dtoa_r+0x65e>
 8006bb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bb6:	4911      	ldr	r1, [pc, #68]	@ (8006bfc <_dtoa_r+0x5c4>)
 8006bb8:	2000      	movs	r0, #0
 8006bba:	f7f9 fb75 	bl	80002a8 <__aeabi_dsub>
 8006bbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006bc2:	f7f9 ff9b 	bl	8000afc <__aeabi_dcmplt>
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	f040 8095 	bne.w	8006cf6 <_dtoa_r+0x6be>
 8006bcc:	42a6      	cmp	r6, r4
 8006bce:	f43f af50 	beq.w	8006a72 <_dtoa_r+0x43a>
 8006bd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8006c00 <_dtoa_r+0x5c8>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f7f9 fd1d 	bl	8000618 <__aeabi_dmul>
 8006bde:	4b08      	ldr	r3, [pc, #32]	@ (8006c00 <_dtoa_r+0x5c8>)
 8006be0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006be4:	2200      	movs	r2, #0
 8006be6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bea:	f7f9 fd15 	bl	8000618 <__aeabi_dmul>
 8006bee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bf2:	e7c4      	b.n	8006b7e <_dtoa_r+0x546>
 8006bf4:	080087c0 	.word	0x080087c0
 8006bf8:	08008798 	.word	0x08008798
 8006bfc:	3ff00000 	.word	0x3ff00000
 8006c00:	40240000 	.word	0x40240000
 8006c04:	401c0000 	.word	0x401c0000
 8006c08:	40140000 	.word	0x40140000
 8006c0c:	3fe00000 	.word	0x3fe00000
 8006c10:	4631      	mov	r1, r6
 8006c12:	4628      	mov	r0, r5
 8006c14:	f7f9 fd00 	bl	8000618 <__aeabi_dmul>
 8006c18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c1c:	9415      	str	r4, [sp, #84]	@ 0x54
 8006c1e:	4656      	mov	r6, sl
 8006c20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c24:	f7f9 ffa8 	bl	8000b78 <__aeabi_d2iz>
 8006c28:	4605      	mov	r5, r0
 8006c2a:	f7f9 fc8b 	bl	8000544 <__aeabi_i2d>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	460b      	mov	r3, r1
 8006c32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c36:	f7f9 fb37 	bl	80002a8 <__aeabi_dsub>
 8006c3a:	3530      	adds	r5, #48	@ 0x30
 8006c3c:	f806 5b01 	strb.w	r5, [r6], #1
 8006c40:	4602      	mov	r2, r0
 8006c42:	460b      	mov	r3, r1
 8006c44:	42a6      	cmp	r6, r4
 8006c46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c4a:	f04f 0200 	mov.w	r2, #0
 8006c4e:	d124      	bne.n	8006c9a <_dtoa_r+0x662>
 8006c50:	4bac      	ldr	r3, [pc, #688]	@ (8006f04 <_dtoa_r+0x8cc>)
 8006c52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006c56:	f7f9 fb29 	bl	80002ac <__adddf3>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c62:	f7f9 ff69 	bl	8000b38 <__aeabi_dcmpgt>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d145      	bne.n	8006cf6 <_dtoa_r+0x6be>
 8006c6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006c6e:	49a5      	ldr	r1, [pc, #660]	@ (8006f04 <_dtoa_r+0x8cc>)
 8006c70:	2000      	movs	r0, #0
 8006c72:	f7f9 fb19 	bl	80002a8 <__aeabi_dsub>
 8006c76:	4602      	mov	r2, r0
 8006c78:	460b      	mov	r3, r1
 8006c7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c7e:	f7f9 ff3d 	bl	8000afc <__aeabi_dcmplt>
 8006c82:	2800      	cmp	r0, #0
 8006c84:	f43f aef5 	beq.w	8006a72 <_dtoa_r+0x43a>
 8006c88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006c8a:	1e73      	subs	r3, r6, #1
 8006c8c:	9315      	str	r3, [sp, #84]	@ 0x54
 8006c8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006c92:	2b30      	cmp	r3, #48	@ 0x30
 8006c94:	d0f8      	beq.n	8006c88 <_dtoa_r+0x650>
 8006c96:	9f04      	ldr	r7, [sp, #16]
 8006c98:	e73e      	b.n	8006b18 <_dtoa_r+0x4e0>
 8006c9a:	4b9b      	ldr	r3, [pc, #620]	@ (8006f08 <_dtoa_r+0x8d0>)
 8006c9c:	f7f9 fcbc 	bl	8000618 <__aeabi_dmul>
 8006ca0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ca4:	e7bc      	b.n	8006c20 <_dtoa_r+0x5e8>
 8006ca6:	d10c      	bne.n	8006cc2 <_dtoa_r+0x68a>
 8006ca8:	4b98      	ldr	r3, [pc, #608]	@ (8006f0c <_dtoa_r+0x8d4>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006cb0:	f7f9 fcb2 	bl	8000618 <__aeabi_dmul>
 8006cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cb8:	f7f9 ff34 	bl	8000b24 <__aeabi_dcmpge>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	f000 8157 	beq.w	8006f70 <_dtoa_r+0x938>
 8006cc2:	2400      	movs	r4, #0
 8006cc4:	4625      	mov	r5, r4
 8006cc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cc8:	43db      	mvns	r3, r3
 8006cca:	9304      	str	r3, [sp, #16]
 8006ccc:	4656      	mov	r6, sl
 8006cce:	2700      	movs	r7, #0
 8006cd0:	4621      	mov	r1, r4
 8006cd2:	4658      	mov	r0, fp
 8006cd4:	f000 fbb4 	bl	8007440 <_Bfree>
 8006cd8:	2d00      	cmp	r5, #0
 8006cda:	d0dc      	beq.n	8006c96 <_dtoa_r+0x65e>
 8006cdc:	b12f      	cbz	r7, 8006cea <_dtoa_r+0x6b2>
 8006cde:	42af      	cmp	r7, r5
 8006ce0:	d003      	beq.n	8006cea <_dtoa_r+0x6b2>
 8006ce2:	4639      	mov	r1, r7
 8006ce4:	4658      	mov	r0, fp
 8006ce6:	f000 fbab 	bl	8007440 <_Bfree>
 8006cea:	4629      	mov	r1, r5
 8006cec:	4658      	mov	r0, fp
 8006cee:	f000 fba7 	bl	8007440 <_Bfree>
 8006cf2:	e7d0      	b.n	8006c96 <_dtoa_r+0x65e>
 8006cf4:	9704      	str	r7, [sp, #16]
 8006cf6:	4633      	mov	r3, r6
 8006cf8:	461e      	mov	r6, r3
 8006cfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cfe:	2a39      	cmp	r2, #57	@ 0x39
 8006d00:	d107      	bne.n	8006d12 <_dtoa_r+0x6da>
 8006d02:	459a      	cmp	sl, r3
 8006d04:	d1f8      	bne.n	8006cf8 <_dtoa_r+0x6c0>
 8006d06:	9a04      	ldr	r2, [sp, #16]
 8006d08:	3201      	adds	r2, #1
 8006d0a:	9204      	str	r2, [sp, #16]
 8006d0c:	2230      	movs	r2, #48	@ 0x30
 8006d0e:	f88a 2000 	strb.w	r2, [sl]
 8006d12:	781a      	ldrb	r2, [r3, #0]
 8006d14:	3201      	adds	r2, #1
 8006d16:	701a      	strb	r2, [r3, #0]
 8006d18:	e7bd      	b.n	8006c96 <_dtoa_r+0x65e>
 8006d1a:	4b7b      	ldr	r3, [pc, #492]	@ (8006f08 <_dtoa_r+0x8d0>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f7f9 fc7b 	bl	8000618 <__aeabi_dmul>
 8006d22:	2200      	movs	r2, #0
 8006d24:	2300      	movs	r3, #0
 8006d26:	4604      	mov	r4, r0
 8006d28:	460d      	mov	r5, r1
 8006d2a:	f7f9 fedd 	bl	8000ae8 <__aeabi_dcmpeq>
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	f43f aebb 	beq.w	8006aaa <_dtoa_r+0x472>
 8006d34:	e6f0      	b.n	8006b18 <_dtoa_r+0x4e0>
 8006d36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006d38:	2a00      	cmp	r2, #0
 8006d3a:	f000 80db 	beq.w	8006ef4 <_dtoa_r+0x8bc>
 8006d3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d40:	2a01      	cmp	r2, #1
 8006d42:	f300 80bf 	bgt.w	8006ec4 <_dtoa_r+0x88c>
 8006d46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006d48:	2a00      	cmp	r2, #0
 8006d4a:	f000 80b7 	beq.w	8006ebc <_dtoa_r+0x884>
 8006d4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006d52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006d54:	4646      	mov	r6, r8
 8006d56:	9a08      	ldr	r2, [sp, #32]
 8006d58:	2101      	movs	r1, #1
 8006d5a:	441a      	add	r2, r3
 8006d5c:	4658      	mov	r0, fp
 8006d5e:	4498      	add	r8, r3
 8006d60:	9208      	str	r2, [sp, #32]
 8006d62:	f000 fc21 	bl	80075a8 <__i2b>
 8006d66:	4605      	mov	r5, r0
 8006d68:	b15e      	cbz	r6, 8006d82 <_dtoa_r+0x74a>
 8006d6a:	9b08      	ldr	r3, [sp, #32]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	dd08      	ble.n	8006d82 <_dtoa_r+0x74a>
 8006d70:	42b3      	cmp	r3, r6
 8006d72:	9a08      	ldr	r2, [sp, #32]
 8006d74:	bfa8      	it	ge
 8006d76:	4633      	movge	r3, r6
 8006d78:	eba8 0803 	sub.w	r8, r8, r3
 8006d7c:	1af6      	subs	r6, r6, r3
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	9308      	str	r3, [sp, #32]
 8006d82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d84:	b1f3      	cbz	r3, 8006dc4 <_dtoa_r+0x78c>
 8006d86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 80b7 	beq.w	8006efc <_dtoa_r+0x8c4>
 8006d8e:	b18c      	cbz	r4, 8006db4 <_dtoa_r+0x77c>
 8006d90:	4629      	mov	r1, r5
 8006d92:	4622      	mov	r2, r4
 8006d94:	4658      	mov	r0, fp
 8006d96:	f000 fcc7 	bl	8007728 <__pow5mult>
 8006d9a:	464a      	mov	r2, r9
 8006d9c:	4601      	mov	r1, r0
 8006d9e:	4605      	mov	r5, r0
 8006da0:	4658      	mov	r0, fp
 8006da2:	f000 fc17 	bl	80075d4 <__multiply>
 8006da6:	4649      	mov	r1, r9
 8006da8:	9004      	str	r0, [sp, #16]
 8006daa:	4658      	mov	r0, fp
 8006dac:	f000 fb48 	bl	8007440 <_Bfree>
 8006db0:	9b04      	ldr	r3, [sp, #16]
 8006db2:	4699      	mov	r9, r3
 8006db4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006db6:	1b1a      	subs	r2, r3, r4
 8006db8:	d004      	beq.n	8006dc4 <_dtoa_r+0x78c>
 8006dba:	4649      	mov	r1, r9
 8006dbc:	4658      	mov	r0, fp
 8006dbe:	f000 fcb3 	bl	8007728 <__pow5mult>
 8006dc2:	4681      	mov	r9, r0
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	4658      	mov	r0, fp
 8006dc8:	f000 fbee 	bl	80075a8 <__i2b>
 8006dcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006dce:	4604      	mov	r4, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 81cf 	beq.w	8007174 <_dtoa_r+0xb3c>
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	4601      	mov	r1, r0
 8006dda:	4658      	mov	r0, fp
 8006ddc:	f000 fca4 	bl	8007728 <__pow5mult>
 8006de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	4604      	mov	r4, r0
 8006de6:	f300 8095 	bgt.w	8006f14 <_dtoa_r+0x8dc>
 8006dea:	9b02      	ldr	r3, [sp, #8]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f040 8087 	bne.w	8006f00 <_dtoa_r+0x8c8>
 8006df2:	9b03      	ldr	r3, [sp, #12]
 8006df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f040 8089 	bne.w	8006f10 <_dtoa_r+0x8d8>
 8006dfe:	9b03      	ldr	r3, [sp, #12]
 8006e00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e04:	0d1b      	lsrs	r3, r3, #20
 8006e06:	051b      	lsls	r3, r3, #20
 8006e08:	b12b      	cbz	r3, 8006e16 <_dtoa_r+0x7de>
 8006e0a:	9b08      	ldr	r3, [sp, #32]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	9308      	str	r3, [sp, #32]
 8006e10:	f108 0801 	add.w	r8, r8, #1
 8006e14:	2301      	movs	r3, #1
 8006e16:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 81b0 	beq.w	8007180 <_dtoa_r+0xb48>
 8006e20:	6923      	ldr	r3, [r4, #16]
 8006e22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006e26:	6918      	ldr	r0, [r3, #16]
 8006e28:	f000 fb72 	bl	8007510 <__hi0bits>
 8006e2c:	f1c0 0020 	rsb	r0, r0, #32
 8006e30:	9b08      	ldr	r3, [sp, #32]
 8006e32:	4418      	add	r0, r3
 8006e34:	f010 001f 	ands.w	r0, r0, #31
 8006e38:	d077      	beq.n	8006f2a <_dtoa_r+0x8f2>
 8006e3a:	f1c0 0320 	rsb	r3, r0, #32
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	dd6b      	ble.n	8006f1a <_dtoa_r+0x8e2>
 8006e42:	9b08      	ldr	r3, [sp, #32]
 8006e44:	f1c0 001c 	rsb	r0, r0, #28
 8006e48:	4403      	add	r3, r0
 8006e4a:	4480      	add	r8, r0
 8006e4c:	4406      	add	r6, r0
 8006e4e:	9308      	str	r3, [sp, #32]
 8006e50:	f1b8 0f00 	cmp.w	r8, #0
 8006e54:	dd05      	ble.n	8006e62 <_dtoa_r+0x82a>
 8006e56:	4649      	mov	r1, r9
 8006e58:	4642      	mov	r2, r8
 8006e5a:	4658      	mov	r0, fp
 8006e5c:	f000 fcbe 	bl	80077dc <__lshift>
 8006e60:	4681      	mov	r9, r0
 8006e62:	9b08      	ldr	r3, [sp, #32]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	dd05      	ble.n	8006e74 <_dtoa_r+0x83c>
 8006e68:	4621      	mov	r1, r4
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	4658      	mov	r0, fp
 8006e6e:	f000 fcb5 	bl	80077dc <__lshift>
 8006e72:	4604      	mov	r4, r0
 8006e74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d059      	beq.n	8006f2e <_dtoa_r+0x8f6>
 8006e7a:	4621      	mov	r1, r4
 8006e7c:	4648      	mov	r0, r9
 8006e7e:	f000 fd19 	bl	80078b4 <__mcmp>
 8006e82:	2800      	cmp	r0, #0
 8006e84:	da53      	bge.n	8006f2e <_dtoa_r+0x8f6>
 8006e86:	1e7b      	subs	r3, r7, #1
 8006e88:	9304      	str	r3, [sp, #16]
 8006e8a:	4649      	mov	r1, r9
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	220a      	movs	r2, #10
 8006e90:	4658      	mov	r0, fp
 8006e92:	f000 faf7 	bl	8007484 <__multadd>
 8006e96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e98:	4681      	mov	r9, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f000 8172 	beq.w	8007184 <_dtoa_r+0xb4c>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	4629      	mov	r1, r5
 8006ea4:	220a      	movs	r2, #10
 8006ea6:	4658      	mov	r0, fp
 8006ea8:	f000 faec 	bl	8007484 <__multadd>
 8006eac:	9b00      	ldr	r3, [sp, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	4605      	mov	r5, r0
 8006eb2:	dc67      	bgt.n	8006f84 <_dtoa_r+0x94c>
 8006eb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	dc41      	bgt.n	8006f3e <_dtoa_r+0x906>
 8006eba:	e063      	b.n	8006f84 <_dtoa_r+0x94c>
 8006ebc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006ebe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006ec2:	e746      	b.n	8006d52 <_dtoa_r+0x71a>
 8006ec4:	9b07      	ldr	r3, [sp, #28]
 8006ec6:	1e5c      	subs	r4, r3, #1
 8006ec8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006eca:	42a3      	cmp	r3, r4
 8006ecc:	bfbf      	itttt	lt
 8006ece:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006ed0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006ed2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006ed4:	1ae3      	sublt	r3, r4, r3
 8006ed6:	bfb4      	ite	lt
 8006ed8:	18d2      	addlt	r2, r2, r3
 8006eda:	1b1c      	subge	r4, r3, r4
 8006edc:	9b07      	ldr	r3, [sp, #28]
 8006ede:	bfbc      	itt	lt
 8006ee0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006ee2:	2400      	movlt	r4, #0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	bfb5      	itete	lt
 8006ee8:	eba8 0603 	sublt.w	r6, r8, r3
 8006eec:	9b07      	ldrge	r3, [sp, #28]
 8006eee:	2300      	movlt	r3, #0
 8006ef0:	4646      	movge	r6, r8
 8006ef2:	e730      	b.n	8006d56 <_dtoa_r+0x71e>
 8006ef4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006ef6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006ef8:	4646      	mov	r6, r8
 8006efa:	e735      	b.n	8006d68 <_dtoa_r+0x730>
 8006efc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006efe:	e75c      	b.n	8006dba <_dtoa_r+0x782>
 8006f00:	2300      	movs	r3, #0
 8006f02:	e788      	b.n	8006e16 <_dtoa_r+0x7de>
 8006f04:	3fe00000 	.word	0x3fe00000
 8006f08:	40240000 	.word	0x40240000
 8006f0c:	40140000 	.word	0x40140000
 8006f10:	9b02      	ldr	r3, [sp, #8]
 8006f12:	e780      	b.n	8006e16 <_dtoa_r+0x7de>
 8006f14:	2300      	movs	r3, #0
 8006f16:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f18:	e782      	b.n	8006e20 <_dtoa_r+0x7e8>
 8006f1a:	d099      	beq.n	8006e50 <_dtoa_r+0x818>
 8006f1c:	9a08      	ldr	r2, [sp, #32]
 8006f1e:	331c      	adds	r3, #28
 8006f20:	441a      	add	r2, r3
 8006f22:	4498      	add	r8, r3
 8006f24:	441e      	add	r6, r3
 8006f26:	9208      	str	r2, [sp, #32]
 8006f28:	e792      	b.n	8006e50 <_dtoa_r+0x818>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	e7f6      	b.n	8006f1c <_dtoa_r+0x8e4>
 8006f2e:	9b07      	ldr	r3, [sp, #28]
 8006f30:	9704      	str	r7, [sp, #16]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	dc20      	bgt.n	8006f78 <_dtoa_r+0x940>
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	dd1e      	ble.n	8006f7c <_dtoa_r+0x944>
 8006f3e:	9b00      	ldr	r3, [sp, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f47f aec0 	bne.w	8006cc6 <_dtoa_r+0x68e>
 8006f46:	4621      	mov	r1, r4
 8006f48:	2205      	movs	r2, #5
 8006f4a:	4658      	mov	r0, fp
 8006f4c:	f000 fa9a 	bl	8007484 <__multadd>
 8006f50:	4601      	mov	r1, r0
 8006f52:	4604      	mov	r4, r0
 8006f54:	4648      	mov	r0, r9
 8006f56:	f000 fcad 	bl	80078b4 <__mcmp>
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	f77f aeb3 	ble.w	8006cc6 <_dtoa_r+0x68e>
 8006f60:	4656      	mov	r6, sl
 8006f62:	2331      	movs	r3, #49	@ 0x31
 8006f64:	f806 3b01 	strb.w	r3, [r6], #1
 8006f68:	9b04      	ldr	r3, [sp, #16]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	9304      	str	r3, [sp, #16]
 8006f6e:	e6ae      	b.n	8006cce <_dtoa_r+0x696>
 8006f70:	9c07      	ldr	r4, [sp, #28]
 8006f72:	9704      	str	r7, [sp, #16]
 8006f74:	4625      	mov	r5, r4
 8006f76:	e7f3      	b.n	8006f60 <_dtoa_r+0x928>
 8006f78:	9b07      	ldr	r3, [sp, #28]
 8006f7a:	9300      	str	r3, [sp, #0]
 8006f7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f000 8104 	beq.w	800718c <_dtoa_r+0xb54>
 8006f84:	2e00      	cmp	r6, #0
 8006f86:	dd05      	ble.n	8006f94 <_dtoa_r+0x95c>
 8006f88:	4629      	mov	r1, r5
 8006f8a:	4632      	mov	r2, r6
 8006f8c:	4658      	mov	r0, fp
 8006f8e:	f000 fc25 	bl	80077dc <__lshift>
 8006f92:	4605      	mov	r5, r0
 8006f94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d05a      	beq.n	8007050 <_dtoa_r+0xa18>
 8006f9a:	6869      	ldr	r1, [r5, #4]
 8006f9c:	4658      	mov	r0, fp
 8006f9e:	f000 fa0f 	bl	80073c0 <_Balloc>
 8006fa2:	4606      	mov	r6, r0
 8006fa4:	b928      	cbnz	r0, 8006fb2 <_dtoa_r+0x97a>
 8006fa6:	4b84      	ldr	r3, [pc, #528]	@ (80071b8 <_dtoa_r+0xb80>)
 8006fa8:	4602      	mov	r2, r0
 8006faa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006fae:	f7ff bb5a 	b.w	8006666 <_dtoa_r+0x2e>
 8006fb2:	692a      	ldr	r2, [r5, #16]
 8006fb4:	3202      	adds	r2, #2
 8006fb6:	0092      	lsls	r2, r2, #2
 8006fb8:	f105 010c 	add.w	r1, r5, #12
 8006fbc:	300c      	adds	r0, #12
 8006fbe:	f000 ffaf 	bl	8007f20 <memcpy>
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	4631      	mov	r1, r6
 8006fc6:	4658      	mov	r0, fp
 8006fc8:	f000 fc08 	bl	80077dc <__lshift>
 8006fcc:	f10a 0301 	add.w	r3, sl, #1
 8006fd0:	9307      	str	r3, [sp, #28]
 8006fd2:	9b00      	ldr	r3, [sp, #0]
 8006fd4:	4453      	add	r3, sl
 8006fd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006fd8:	9b02      	ldr	r3, [sp, #8]
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	462f      	mov	r7, r5
 8006fe0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fe2:	4605      	mov	r5, r0
 8006fe4:	9b07      	ldr	r3, [sp, #28]
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	4648      	mov	r0, r9
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	f7ff fa9a 	bl	8006526 <quorem>
 8006ff2:	4639      	mov	r1, r7
 8006ff4:	9002      	str	r0, [sp, #8]
 8006ff6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006ffa:	4648      	mov	r0, r9
 8006ffc:	f000 fc5a 	bl	80078b4 <__mcmp>
 8007000:	462a      	mov	r2, r5
 8007002:	9008      	str	r0, [sp, #32]
 8007004:	4621      	mov	r1, r4
 8007006:	4658      	mov	r0, fp
 8007008:	f000 fc70 	bl	80078ec <__mdiff>
 800700c:	68c2      	ldr	r2, [r0, #12]
 800700e:	4606      	mov	r6, r0
 8007010:	bb02      	cbnz	r2, 8007054 <_dtoa_r+0xa1c>
 8007012:	4601      	mov	r1, r0
 8007014:	4648      	mov	r0, r9
 8007016:	f000 fc4d 	bl	80078b4 <__mcmp>
 800701a:	4602      	mov	r2, r0
 800701c:	4631      	mov	r1, r6
 800701e:	4658      	mov	r0, fp
 8007020:	920e      	str	r2, [sp, #56]	@ 0x38
 8007022:	f000 fa0d 	bl	8007440 <_Bfree>
 8007026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007028:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800702a:	9e07      	ldr	r6, [sp, #28]
 800702c:	ea43 0102 	orr.w	r1, r3, r2
 8007030:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007032:	4319      	orrs	r1, r3
 8007034:	d110      	bne.n	8007058 <_dtoa_r+0xa20>
 8007036:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800703a:	d029      	beq.n	8007090 <_dtoa_r+0xa58>
 800703c:	9b08      	ldr	r3, [sp, #32]
 800703e:	2b00      	cmp	r3, #0
 8007040:	dd02      	ble.n	8007048 <_dtoa_r+0xa10>
 8007042:	9b02      	ldr	r3, [sp, #8]
 8007044:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007048:	9b00      	ldr	r3, [sp, #0]
 800704a:	f883 8000 	strb.w	r8, [r3]
 800704e:	e63f      	b.n	8006cd0 <_dtoa_r+0x698>
 8007050:	4628      	mov	r0, r5
 8007052:	e7bb      	b.n	8006fcc <_dtoa_r+0x994>
 8007054:	2201      	movs	r2, #1
 8007056:	e7e1      	b.n	800701c <_dtoa_r+0x9e4>
 8007058:	9b08      	ldr	r3, [sp, #32]
 800705a:	2b00      	cmp	r3, #0
 800705c:	db04      	blt.n	8007068 <_dtoa_r+0xa30>
 800705e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007060:	430b      	orrs	r3, r1
 8007062:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007064:	430b      	orrs	r3, r1
 8007066:	d120      	bne.n	80070aa <_dtoa_r+0xa72>
 8007068:	2a00      	cmp	r2, #0
 800706a:	dded      	ble.n	8007048 <_dtoa_r+0xa10>
 800706c:	4649      	mov	r1, r9
 800706e:	2201      	movs	r2, #1
 8007070:	4658      	mov	r0, fp
 8007072:	f000 fbb3 	bl	80077dc <__lshift>
 8007076:	4621      	mov	r1, r4
 8007078:	4681      	mov	r9, r0
 800707a:	f000 fc1b 	bl	80078b4 <__mcmp>
 800707e:	2800      	cmp	r0, #0
 8007080:	dc03      	bgt.n	800708a <_dtoa_r+0xa52>
 8007082:	d1e1      	bne.n	8007048 <_dtoa_r+0xa10>
 8007084:	f018 0f01 	tst.w	r8, #1
 8007088:	d0de      	beq.n	8007048 <_dtoa_r+0xa10>
 800708a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800708e:	d1d8      	bne.n	8007042 <_dtoa_r+0xa0a>
 8007090:	9a00      	ldr	r2, [sp, #0]
 8007092:	2339      	movs	r3, #57	@ 0x39
 8007094:	7013      	strb	r3, [r2, #0]
 8007096:	4633      	mov	r3, r6
 8007098:	461e      	mov	r6, r3
 800709a:	3b01      	subs	r3, #1
 800709c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80070a0:	2a39      	cmp	r2, #57	@ 0x39
 80070a2:	d052      	beq.n	800714a <_dtoa_r+0xb12>
 80070a4:	3201      	adds	r2, #1
 80070a6:	701a      	strb	r2, [r3, #0]
 80070a8:	e612      	b.n	8006cd0 <_dtoa_r+0x698>
 80070aa:	2a00      	cmp	r2, #0
 80070ac:	dd07      	ble.n	80070be <_dtoa_r+0xa86>
 80070ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80070b2:	d0ed      	beq.n	8007090 <_dtoa_r+0xa58>
 80070b4:	9a00      	ldr	r2, [sp, #0]
 80070b6:	f108 0301 	add.w	r3, r8, #1
 80070ba:	7013      	strb	r3, [r2, #0]
 80070bc:	e608      	b.n	8006cd0 <_dtoa_r+0x698>
 80070be:	9b07      	ldr	r3, [sp, #28]
 80070c0:	9a07      	ldr	r2, [sp, #28]
 80070c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80070c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d028      	beq.n	800711e <_dtoa_r+0xae6>
 80070cc:	4649      	mov	r1, r9
 80070ce:	2300      	movs	r3, #0
 80070d0:	220a      	movs	r2, #10
 80070d2:	4658      	mov	r0, fp
 80070d4:	f000 f9d6 	bl	8007484 <__multadd>
 80070d8:	42af      	cmp	r7, r5
 80070da:	4681      	mov	r9, r0
 80070dc:	f04f 0300 	mov.w	r3, #0
 80070e0:	f04f 020a 	mov.w	r2, #10
 80070e4:	4639      	mov	r1, r7
 80070e6:	4658      	mov	r0, fp
 80070e8:	d107      	bne.n	80070fa <_dtoa_r+0xac2>
 80070ea:	f000 f9cb 	bl	8007484 <__multadd>
 80070ee:	4607      	mov	r7, r0
 80070f0:	4605      	mov	r5, r0
 80070f2:	9b07      	ldr	r3, [sp, #28]
 80070f4:	3301      	adds	r3, #1
 80070f6:	9307      	str	r3, [sp, #28]
 80070f8:	e774      	b.n	8006fe4 <_dtoa_r+0x9ac>
 80070fa:	f000 f9c3 	bl	8007484 <__multadd>
 80070fe:	4629      	mov	r1, r5
 8007100:	4607      	mov	r7, r0
 8007102:	2300      	movs	r3, #0
 8007104:	220a      	movs	r2, #10
 8007106:	4658      	mov	r0, fp
 8007108:	f000 f9bc 	bl	8007484 <__multadd>
 800710c:	4605      	mov	r5, r0
 800710e:	e7f0      	b.n	80070f2 <_dtoa_r+0xaba>
 8007110:	9b00      	ldr	r3, [sp, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	bfcc      	ite	gt
 8007116:	461e      	movgt	r6, r3
 8007118:	2601      	movle	r6, #1
 800711a:	4456      	add	r6, sl
 800711c:	2700      	movs	r7, #0
 800711e:	4649      	mov	r1, r9
 8007120:	2201      	movs	r2, #1
 8007122:	4658      	mov	r0, fp
 8007124:	f000 fb5a 	bl	80077dc <__lshift>
 8007128:	4621      	mov	r1, r4
 800712a:	4681      	mov	r9, r0
 800712c:	f000 fbc2 	bl	80078b4 <__mcmp>
 8007130:	2800      	cmp	r0, #0
 8007132:	dcb0      	bgt.n	8007096 <_dtoa_r+0xa5e>
 8007134:	d102      	bne.n	800713c <_dtoa_r+0xb04>
 8007136:	f018 0f01 	tst.w	r8, #1
 800713a:	d1ac      	bne.n	8007096 <_dtoa_r+0xa5e>
 800713c:	4633      	mov	r3, r6
 800713e:	461e      	mov	r6, r3
 8007140:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007144:	2a30      	cmp	r2, #48	@ 0x30
 8007146:	d0fa      	beq.n	800713e <_dtoa_r+0xb06>
 8007148:	e5c2      	b.n	8006cd0 <_dtoa_r+0x698>
 800714a:	459a      	cmp	sl, r3
 800714c:	d1a4      	bne.n	8007098 <_dtoa_r+0xa60>
 800714e:	9b04      	ldr	r3, [sp, #16]
 8007150:	3301      	adds	r3, #1
 8007152:	9304      	str	r3, [sp, #16]
 8007154:	2331      	movs	r3, #49	@ 0x31
 8007156:	f88a 3000 	strb.w	r3, [sl]
 800715a:	e5b9      	b.n	8006cd0 <_dtoa_r+0x698>
 800715c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800715e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80071bc <_dtoa_r+0xb84>
 8007162:	b11b      	cbz	r3, 800716c <_dtoa_r+0xb34>
 8007164:	f10a 0308 	add.w	r3, sl, #8
 8007168:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800716a:	6013      	str	r3, [r2, #0]
 800716c:	4650      	mov	r0, sl
 800716e:	b019      	add	sp, #100	@ 0x64
 8007170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007176:	2b01      	cmp	r3, #1
 8007178:	f77f ae37 	ble.w	8006dea <_dtoa_r+0x7b2>
 800717c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800717e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007180:	2001      	movs	r0, #1
 8007182:	e655      	b.n	8006e30 <_dtoa_r+0x7f8>
 8007184:	9b00      	ldr	r3, [sp, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	f77f aed6 	ble.w	8006f38 <_dtoa_r+0x900>
 800718c:	4656      	mov	r6, sl
 800718e:	4621      	mov	r1, r4
 8007190:	4648      	mov	r0, r9
 8007192:	f7ff f9c8 	bl	8006526 <quorem>
 8007196:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800719a:	f806 8b01 	strb.w	r8, [r6], #1
 800719e:	9b00      	ldr	r3, [sp, #0]
 80071a0:	eba6 020a 	sub.w	r2, r6, sl
 80071a4:	4293      	cmp	r3, r2
 80071a6:	ddb3      	ble.n	8007110 <_dtoa_r+0xad8>
 80071a8:	4649      	mov	r1, r9
 80071aa:	2300      	movs	r3, #0
 80071ac:	220a      	movs	r2, #10
 80071ae:	4658      	mov	r0, fp
 80071b0:	f000 f968 	bl	8007484 <__multadd>
 80071b4:	4681      	mov	r9, r0
 80071b6:	e7ea      	b.n	800718e <_dtoa_r+0xb56>
 80071b8:	08008720 	.word	0x08008720
 80071bc:	080086a4 	.word	0x080086a4

080071c0 <_free_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	4605      	mov	r5, r0
 80071c4:	2900      	cmp	r1, #0
 80071c6:	d041      	beq.n	800724c <_free_r+0x8c>
 80071c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071cc:	1f0c      	subs	r4, r1, #4
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	bfb8      	it	lt
 80071d2:	18e4      	addlt	r4, r4, r3
 80071d4:	f000 f8e8 	bl	80073a8 <__malloc_lock>
 80071d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007250 <_free_r+0x90>)
 80071da:	6813      	ldr	r3, [r2, #0]
 80071dc:	b933      	cbnz	r3, 80071ec <_free_r+0x2c>
 80071de:	6063      	str	r3, [r4, #4]
 80071e0:	6014      	str	r4, [r2, #0]
 80071e2:	4628      	mov	r0, r5
 80071e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071e8:	f000 b8e4 	b.w	80073b4 <__malloc_unlock>
 80071ec:	42a3      	cmp	r3, r4
 80071ee:	d908      	bls.n	8007202 <_free_r+0x42>
 80071f0:	6820      	ldr	r0, [r4, #0]
 80071f2:	1821      	adds	r1, r4, r0
 80071f4:	428b      	cmp	r3, r1
 80071f6:	bf01      	itttt	eq
 80071f8:	6819      	ldreq	r1, [r3, #0]
 80071fa:	685b      	ldreq	r3, [r3, #4]
 80071fc:	1809      	addeq	r1, r1, r0
 80071fe:	6021      	streq	r1, [r4, #0]
 8007200:	e7ed      	b.n	80071de <_free_r+0x1e>
 8007202:	461a      	mov	r2, r3
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	b10b      	cbz	r3, 800720c <_free_r+0x4c>
 8007208:	42a3      	cmp	r3, r4
 800720a:	d9fa      	bls.n	8007202 <_free_r+0x42>
 800720c:	6811      	ldr	r1, [r2, #0]
 800720e:	1850      	adds	r0, r2, r1
 8007210:	42a0      	cmp	r0, r4
 8007212:	d10b      	bne.n	800722c <_free_r+0x6c>
 8007214:	6820      	ldr	r0, [r4, #0]
 8007216:	4401      	add	r1, r0
 8007218:	1850      	adds	r0, r2, r1
 800721a:	4283      	cmp	r3, r0
 800721c:	6011      	str	r1, [r2, #0]
 800721e:	d1e0      	bne.n	80071e2 <_free_r+0x22>
 8007220:	6818      	ldr	r0, [r3, #0]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	6053      	str	r3, [r2, #4]
 8007226:	4408      	add	r0, r1
 8007228:	6010      	str	r0, [r2, #0]
 800722a:	e7da      	b.n	80071e2 <_free_r+0x22>
 800722c:	d902      	bls.n	8007234 <_free_r+0x74>
 800722e:	230c      	movs	r3, #12
 8007230:	602b      	str	r3, [r5, #0]
 8007232:	e7d6      	b.n	80071e2 <_free_r+0x22>
 8007234:	6820      	ldr	r0, [r4, #0]
 8007236:	1821      	adds	r1, r4, r0
 8007238:	428b      	cmp	r3, r1
 800723a:	bf04      	itt	eq
 800723c:	6819      	ldreq	r1, [r3, #0]
 800723e:	685b      	ldreq	r3, [r3, #4]
 8007240:	6063      	str	r3, [r4, #4]
 8007242:	bf04      	itt	eq
 8007244:	1809      	addeq	r1, r1, r0
 8007246:	6021      	streq	r1, [r4, #0]
 8007248:	6054      	str	r4, [r2, #4]
 800724a:	e7ca      	b.n	80071e2 <_free_r+0x22>
 800724c:	bd38      	pop	{r3, r4, r5, pc}
 800724e:	bf00      	nop
 8007250:	2000099c 	.word	0x2000099c

08007254 <malloc>:
 8007254:	4b02      	ldr	r3, [pc, #8]	@ (8007260 <malloc+0xc>)
 8007256:	4601      	mov	r1, r0
 8007258:	6818      	ldr	r0, [r3, #0]
 800725a:	f000 b825 	b.w	80072a8 <_malloc_r>
 800725e:	bf00      	nop
 8007260:	20000018 	.word	0x20000018

08007264 <sbrk_aligned>:
 8007264:	b570      	push	{r4, r5, r6, lr}
 8007266:	4e0f      	ldr	r6, [pc, #60]	@ (80072a4 <sbrk_aligned+0x40>)
 8007268:	460c      	mov	r4, r1
 800726a:	6831      	ldr	r1, [r6, #0]
 800726c:	4605      	mov	r5, r0
 800726e:	b911      	cbnz	r1, 8007276 <sbrk_aligned+0x12>
 8007270:	f000 fe46 	bl	8007f00 <_sbrk_r>
 8007274:	6030      	str	r0, [r6, #0]
 8007276:	4621      	mov	r1, r4
 8007278:	4628      	mov	r0, r5
 800727a:	f000 fe41 	bl	8007f00 <_sbrk_r>
 800727e:	1c43      	adds	r3, r0, #1
 8007280:	d103      	bne.n	800728a <sbrk_aligned+0x26>
 8007282:	f04f 34ff 	mov.w	r4, #4294967295
 8007286:	4620      	mov	r0, r4
 8007288:	bd70      	pop	{r4, r5, r6, pc}
 800728a:	1cc4      	adds	r4, r0, #3
 800728c:	f024 0403 	bic.w	r4, r4, #3
 8007290:	42a0      	cmp	r0, r4
 8007292:	d0f8      	beq.n	8007286 <sbrk_aligned+0x22>
 8007294:	1a21      	subs	r1, r4, r0
 8007296:	4628      	mov	r0, r5
 8007298:	f000 fe32 	bl	8007f00 <_sbrk_r>
 800729c:	3001      	adds	r0, #1
 800729e:	d1f2      	bne.n	8007286 <sbrk_aligned+0x22>
 80072a0:	e7ef      	b.n	8007282 <sbrk_aligned+0x1e>
 80072a2:	bf00      	nop
 80072a4:	20000998 	.word	0x20000998

080072a8 <_malloc_r>:
 80072a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072ac:	1ccd      	adds	r5, r1, #3
 80072ae:	f025 0503 	bic.w	r5, r5, #3
 80072b2:	3508      	adds	r5, #8
 80072b4:	2d0c      	cmp	r5, #12
 80072b6:	bf38      	it	cc
 80072b8:	250c      	movcc	r5, #12
 80072ba:	2d00      	cmp	r5, #0
 80072bc:	4606      	mov	r6, r0
 80072be:	db01      	blt.n	80072c4 <_malloc_r+0x1c>
 80072c0:	42a9      	cmp	r1, r5
 80072c2:	d904      	bls.n	80072ce <_malloc_r+0x26>
 80072c4:	230c      	movs	r3, #12
 80072c6:	6033      	str	r3, [r6, #0]
 80072c8:	2000      	movs	r0, #0
 80072ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80073a4 <_malloc_r+0xfc>
 80072d2:	f000 f869 	bl	80073a8 <__malloc_lock>
 80072d6:	f8d8 3000 	ldr.w	r3, [r8]
 80072da:	461c      	mov	r4, r3
 80072dc:	bb44      	cbnz	r4, 8007330 <_malloc_r+0x88>
 80072de:	4629      	mov	r1, r5
 80072e0:	4630      	mov	r0, r6
 80072e2:	f7ff ffbf 	bl	8007264 <sbrk_aligned>
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	4604      	mov	r4, r0
 80072ea:	d158      	bne.n	800739e <_malloc_r+0xf6>
 80072ec:	f8d8 4000 	ldr.w	r4, [r8]
 80072f0:	4627      	mov	r7, r4
 80072f2:	2f00      	cmp	r7, #0
 80072f4:	d143      	bne.n	800737e <_malloc_r+0xd6>
 80072f6:	2c00      	cmp	r4, #0
 80072f8:	d04b      	beq.n	8007392 <_malloc_r+0xea>
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	4639      	mov	r1, r7
 80072fe:	4630      	mov	r0, r6
 8007300:	eb04 0903 	add.w	r9, r4, r3
 8007304:	f000 fdfc 	bl	8007f00 <_sbrk_r>
 8007308:	4581      	cmp	r9, r0
 800730a:	d142      	bne.n	8007392 <_malloc_r+0xea>
 800730c:	6821      	ldr	r1, [r4, #0]
 800730e:	1a6d      	subs	r5, r5, r1
 8007310:	4629      	mov	r1, r5
 8007312:	4630      	mov	r0, r6
 8007314:	f7ff ffa6 	bl	8007264 <sbrk_aligned>
 8007318:	3001      	adds	r0, #1
 800731a:	d03a      	beq.n	8007392 <_malloc_r+0xea>
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	442b      	add	r3, r5
 8007320:	6023      	str	r3, [r4, #0]
 8007322:	f8d8 3000 	ldr.w	r3, [r8]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	bb62      	cbnz	r2, 8007384 <_malloc_r+0xdc>
 800732a:	f8c8 7000 	str.w	r7, [r8]
 800732e:	e00f      	b.n	8007350 <_malloc_r+0xa8>
 8007330:	6822      	ldr	r2, [r4, #0]
 8007332:	1b52      	subs	r2, r2, r5
 8007334:	d420      	bmi.n	8007378 <_malloc_r+0xd0>
 8007336:	2a0b      	cmp	r2, #11
 8007338:	d917      	bls.n	800736a <_malloc_r+0xc2>
 800733a:	1961      	adds	r1, r4, r5
 800733c:	42a3      	cmp	r3, r4
 800733e:	6025      	str	r5, [r4, #0]
 8007340:	bf18      	it	ne
 8007342:	6059      	strne	r1, [r3, #4]
 8007344:	6863      	ldr	r3, [r4, #4]
 8007346:	bf08      	it	eq
 8007348:	f8c8 1000 	streq.w	r1, [r8]
 800734c:	5162      	str	r2, [r4, r5]
 800734e:	604b      	str	r3, [r1, #4]
 8007350:	4630      	mov	r0, r6
 8007352:	f000 f82f 	bl	80073b4 <__malloc_unlock>
 8007356:	f104 000b 	add.w	r0, r4, #11
 800735a:	1d23      	adds	r3, r4, #4
 800735c:	f020 0007 	bic.w	r0, r0, #7
 8007360:	1ac2      	subs	r2, r0, r3
 8007362:	bf1c      	itt	ne
 8007364:	1a1b      	subne	r3, r3, r0
 8007366:	50a3      	strne	r3, [r4, r2]
 8007368:	e7af      	b.n	80072ca <_malloc_r+0x22>
 800736a:	6862      	ldr	r2, [r4, #4]
 800736c:	42a3      	cmp	r3, r4
 800736e:	bf0c      	ite	eq
 8007370:	f8c8 2000 	streq.w	r2, [r8]
 8007374:	605a      	strne	r2, [r3, #4]
 8007376:	e7eb      	b.n	8007350 <_malloc_r+0xa8>
 8007378:	4623      	mov	r3, r4
 800737a:	6864      	ldr	r4, [r4, #4]
 800737c:	e7ae      	b.n	80072dc <_malloc_r+0x34>
 800737e:	463c      	mov	r4, r7
 8007380:	687f      	ldr	r7, [r7, #4]
 8007382:	e7b6      	b.n	80072f2 <_malloc_r+0x4a>
 8007384:	461a      	mov	r2, r3
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	42a3      	cmp	r3, r4
 800738a:	d1fb      	bne.n	8007384 <_malloc_r+0xdc>
 800738c:	2300      	movs	r3, #0
 800738e:	6053      	str	r3, [r2, #4]
 8007390:	e7de      	b.n	8007350 <_malloc_r+0xa8>
 8007392:	230c      	movs	r3, #12
 8007394:	6033      	str	r3, [r6, #0]
 8007396:	4630      	mov	r0, r6
 8007398:	f000 f80c 	bl	80073b4 <__malloc_unlock>
 800739c:	e794      	b.n	80072c8 <_malloc_r+0x20>
 800739e:	6005      	str	r5, [r0, #0]
 80073a0:	e7d6      	b.n	8007350 <_malloc_r+0xa8>
 80073a2:	bf00      	nop
 80073a4:	2000099c 	.word	0x2000099c

080073a8 <__malloc_lock>:
 80073a8:	4801      	ldr	r0, [pc, #4]	@ (80073b0 <__malloc_lock+0x8>)
 80073aa:	f7ff b8ba 	b.w	8006522 <__retarget_lock_acquire_recursive>
 80073ae:	bf00      	nop
 80073b0:	20000994 	.word	0x20000994

080073b4 <__malloc_unlock>:
 80073b4:	4801      	ldr	r0, [pc, #4]	@ (80073bc <__malloc_unlock+0x8>)
 80073b6:	f7ff b8b5 	b.w	8006524 <__retarget_lock_release_recursive>
 80073ba:	bf00      	nop
 80073bc:	20000994 	.word	0x20000994

080073c0 <_Balloc>:
 80073c0:	b570      	push	{r4, r5, r6, lr}
 80073c2:	69c6      	ldr	r6, [r0, #28]
 80073c4:	4604      	mov	r4, r0
 80073c6:	460d      	mov	r5, r1
 80073c8:	b976      	cbnz	r6, 80073e8 <_Balloc+0x28>
 80073ca:	2010      	movs	r0, #16
 80073cc:	f7ff ff42 	bl	8007254 <malloc>
 80073d0:	4602      	mov	r2, r0
 80073d2:	61e0      	str	r0, [r4, #28]
 80073d4:	b920      	cbnz	r0, 80073e0 <_Balloc+0x20>
 80073d6:	4b18      	ldr	r3, [pc, #96]	@ (8007438 <_Balloc+0x78>)
 80073d8:	4818      	ldr	r0, [pc, #96]	@ (800743c <_Balloc+0x7c>)
 80073da:	216b      	movs	r1, #107	@ 0x6b
 80073dc:	f000 fdae 	bl	8007f3c <__assert_func>
 80073e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073e4:	6006      	str	r6, [r0, #0]
 80073e6:	60c6      	str	r6, [r0, #12]
 80073e8:	69e6      	ldr	r6, [r4, #28]
 80073ea:	68f3      	ldr	r3, [r6, #12]
 80073ec:	b183      	cbz	r3, 8007410 <_Balloc+0x50>
 80073ee:	69e3      	ldr	r3, [r4, #28]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80073f6:	b9b8      	cbnz	r0, 8007428 <_Balloc+0x68>
 80073f8:	2101      	movs	r1, #1
 80073fa:	fa01 f605 	lsl.w	r6, r1, r5
 80073fe:	1d72      	adds	r2, r6, #5
 8007400:	0092      	lsls	r2, r2, #2
 8007402:	4620      	mov	r0, r4
 8007404:	f000 fdb8 	bl	8007f78 <_calloc_r>
 8007408:	b160      	cbz	r0, 8007424 <_Balloc+0x64>
 800740a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800740e:	e00e      	b.n	800742e <_Balloc+0x6e>
 8007410:	2221      	movs	r2, #33	@ 0x21
 8007412:	2104      	movs	r1, #4
 8007414:	4620      	mov	r0, r4
 8007416:	f000 fdaf 	bl	8007f78 <_calloc_r>
 800741a:	69e3      	ldr	r3, [r4, #28]
 800741c:	60f0      	str	r0, [r6, #12]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1e4      	bne.n	80073ee <_Balloc+0x2e>
 8007424:	2000      	movs	r0, #0
 8007426:	bd70      	pop	{r4, r5, r6, pc}
 8007428:	6802      	ldr	r2, [r0, #0]
 800742a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800742e:	2300      	movs	r3, #0
 8007430:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007434:	e7f7      	b.n	8007426 <_Balloc+0x66>
 8007436:	bf00      	nop
 8007438:	080086b1 	.word	0x080086b1
 800743c:	08008731 	.word	0x08008731

08007440 <_Bfree>:
 8007440:	b570      	push	{r4, r5, r6, lr}
 8007442:	69c6      	ldr	r6, [r0, #28]
 8007444:	4605      	mov	r5, r0
 8007446:	460c      	mov	r4, r1
 8007448:	b976      	cbnz	r6, 8007468 <_Bfree+0x28>
 800744a:	2010      	movs	r0, #16
 800744c:	f7ff ff02 	bl	8007254 <malloc>
 8007450:	4602      	mov	r2, r0
 8007452:	61e8      	str	r0, [r5, #28]
 8007454:	b920      	cbnz	r0, 8007460 <_Bfree+0x20>
 8007456:	4b09      	ldr	r3, [pc, #36]	@ (800747c <_Bfree+0x3c>)
 8007458:	4809      	ldr	r0, [pc, #36]	@ (8007480 <_Bfree+0x40>)
 800745a:	218f      	movs	r1, #143	@ 0x8f
 800745c:	f000 fd6e 	bl	8007f3c <__assert_func>
 8007460:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007464:	6006      	str	r6, [r0, #0]
 8007466:	60c6      	str	r6, [r0, #12]
 8007468:	b13c      	cbz	r4, 800747a <_Bfree+0x3a>
 800746a:	69eb      	ldr	r3, [r5, #28]
 800746c:	6862      	ldr	r2, [r4, #4]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007474:	6021      	str	r1, [r4, #0]
 8007476:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800747a:	bd70      	pop	{r4, r5, r6, pc}
 800747c:	080086b1 	.word	0x080086b1
 8007480:	08008731 	.word	0x08008731

08007484 <__multadd>:
 8007484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007488:	690d      	ldr	r5, [r1, #16]
 800748a:	4607      	mov	r7, r0
 800748c:	460c      	mov	r4, r1
 800748e:	461e      	mov	r6, r3
 8007490:	f101 0c14 	add.w	ip, r1, #20
 8007494:	2000      	movs	r0, #0
 8007496:	f8dc 3000 	ldr.w	r3, [ip]
 800749a:	b299      	uxth	r1, r3
 800749c:	fb02 6101 	mla	r1, r2, r1, r6
 80074a0:	0c1e      	lsrs	r6, r3, #16
 80074a2:	0c0b      	lsrs	r3, r1, #16
 80074a4:	fb02 3306 	mla	r3, r2, r6, r3
 80074a8:	b289      	uxth	r1, r1
 80074aa:	3001      	adds	r0, #1
 80074ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80074b0:	4285      	cmp	r5, r0
 80074b2:	f84c 1b04 	str.w	r1, [ip], #4
 80074b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80074ba:	dcec      	bgt.n	8007496 <__multadd+0x12>
 80074bc:	b30e      	cbz	r6, 8007502 <__multadd+0x7e>
 80074be:	68a3      	ldr	r3, [r4, #8]
 80074c0:	42ab      	cmp	r3, r5
 80074c2:	dc19      	bgt.n	80074f8 <__multadd+0x74>
 80074c4:	6861      	ldr	r1, [r4, #4]
 80074c6:	4638      	mov	r0, r7
 80074c8:	3101      	adds	r1, #1
 80074ca:	f7ff ff79 	bl	80073c0 <_Balloc>
 80074ce:	4680      	mov	r8, r0
 80074d0:	b928      	cbnz	r0, 80074de <__multadd+0x5a>
 80074d2:	4602      	mov	r2, r0
 80074d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007508 <__multadd+0x84>)
 80074d6:	480d      	ldr	r0, [pc, #52]	@ (800750c <__multadd+0x88>)
 80074d8:	21ba      	movs	r1, #186	@ 0xba
 80074da:	f000 fd2f 	bl	8007f3c <__assert_func>
 80074de:	6922      	ldr	r2, [r4, #16]
 80074e0:	3202      	adds	r2, #2
 80074e2:	f104 010c 	add.w	r1, r4, #12
 80074e6:	0092      	lsls	r2, r2, #2
 80074e8:	300c      	adds	r0, #12
 80074ea:	f000 fd19 	bl	8007f20 <memcpy>
 80074ee:	4621      	mov	r1, r4
 80074f0:	4638      	mov	r0, r7
 80074f2:	f7ff ffa5 	bl	8007440 <_Bfree>
 80074f6:	4644      	mov	r4, r8
 80074f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80074fc:	3501      	adds	r5, #1
 80074fe:	615e      	str	r6, [r3, #20]
 8007500:	6125      	str	r5, [r4, #16]
 8007502:	4620      	mov	r0, r4
 8007504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007508:	08008720 	.word	0x08008720
 800750c:	08008731 	.word	0x08008731

08007510 <__hi0bits>:
 8007510:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007514:	4603      	mov	r3, r0
 8007516:	bf36      	itet	cc
 8007518:	0403      	lslcc	r3, r0, #16
 800751a:	2000      	movcs	r0, #0
 800751c:	2010      	movcc	r0, #16
 800751e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007522:	bf3c      	itt	cc
 8007524:	021b      	lslcc	r3, r3, #8
 8007526:	3008      	addcc	r0, #8
 8007528:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800752c:	bf3c      	itt	cc
 800752e:	011b      	lslcc	r3, r3, #4
 8007530:	3004      	addcc	r0, #4
 8007532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007536:	bf3c      	itt	cc
 8007538:	009b      	lslcc	r3, r3, #2
 800753a:	3002      	addcc	r0, #2
 800753c:	2b00      	cmp	r3, #0
 800753e:	db05      	blt.n	800754c <__hi0bits+0x3c>
 8007540:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007544:	f100 0001 	add.w	r0, r0, #1
 8007548:	bf08      	it	eq
 800754a:	2020      	moveq	r0, #32
 800754c:	4770      	bx	lr

0800754e <__lo0bits>:
 800754e:	6803      	ldr	r3, [r0, #0]
 8007550:	4602      	mov	r2, r0
 8007552:	f013 0007 	ands.w	r0, r3, #7
 8007556:	d00b      	beq.n	8007570 <__lo0bits+0x22>
 8007558:	07d9      	lsls	r1, r3, #31
 800755a:	d421      	bmi.n	80075a0 <__lo0bits+0x52>
 800755c:	0798      	lsls	r0, r3, #30
 800755e:	bf49      	itett	mi
 8007560:	085b      	lsrmi	r3, r3, #1
 8007562:	089b      	lsrpl	r3, r3, #2
 8007564:	2001      	movmi	r0, #1
 8007566:	6013      	strmi	r3, [r2, #0]
 8007568:	bf5c      	itt	pl
 800756a:	6013      	strpl	r3, [r2, #0]
 800756c:	2002      	movpl	r0, #2
 800756e:	4770      	bx	lr
 8007570:	b299      	uxth	r1, r3
 8007572:	b909      	cbnz	r1, 8007578 <__lo0bits+0x2a>
 8007574:	0c1b      	lsrs	r3, r3, #16
 8007576:	2010      	movs	r0, #16
 8007578:	b2d9      	uxtb	r1, r3
 800757a:	b909      	cbnz	r1, 8007580 <__lo0bits+0x32>
 800757c:	3008      	adds	r0, #8
 800757e:	0a1b      	lsrs	r3, r3, #8
 8007580:	0719      	lsls	r1, r3, #28
 8007582:	bf04      	itt	eq
 8007584:	091b      	lsreq	r3, r3, #4
 8007586:	3004      	addeq	r0, #4
 8007588:	0799      	lsls	r1, r3, #30
 800758a:	bf04      	itt	eq
 800758c:	089b      	lsreq	r3, r3, #2
 800758e:	3002      	addeq	r0, #2
 8007590:	07d9      	lsls	r1, r3, #31
 8007592:	d403      	bmi.n	800759c <__lo0bits+0x4e>
 8007594:	085b      	lsrs	r3, r3, #1
 8007596:	f100 0001 	add.w	r0, r0, #1
 800759a:	d003      	beq.n	80075a4 <__lo0bits+0x56>
 800759c:	6013      	str	r3, [r2, #0]
 800759e:	4770      	bx	lr
 80075a0:	2000      	movs	r0, #0
 80075a2:	4770      	bx	lr
 80075a4:	2020      	movs	r0, #32
 80075a6:	4770      	bx	lr

080075a8 <__i2b>:
 80075a8:	b510      	push	{r4, lr}
 80075aa:	460c      	mov	r4, r1
 80075ac:	2101      	movs	r1, #1
 80075ae:	f7ff ff07 	bl	80073c0 <_Balloc>
 80075b2:	4602      	mov	r2, r0
 80075b4:	b928      	cbnz	r0, 80075c2 <__i2b+0x1a>
 80075b6:	4b05      	ldr	r3, [pc, #20]	@ (80075cc <__i2b+0x24>)
 80075b8:	4805      	ldr	r0, [pc, #20]	@ (80075d0 <__i2b+0x28>)
 80075ba:	f240 1145 	movw	r1, #325	@ 0x145
 80075be:	f000 fcbd 	bl	8007f3c <__assert_func>
 80075c2:	2301      	movs	r3, #1
 80075c4:	6144      	str	r4, [r0, #20]
 80075c6:	6103      	str	r3, [r0, #16]
 80075c8:	bd10      	pop	{r4, pc}
 80075ca:	bf00      	nop
 80075cc:	08008720 	.word	0x08008720
 80075d0:	08008731 	.word	0x08008731

080075d4 <__multiply>:
 80075d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d8:	4614      	mov	r4, r2
 80075da:	690a      	ldr	r2, [r1, #16]
 80075dc:	6923      	ldr	r3, [r4, #16]
 80075de:	429a      	cmp	r2, r3
 80075e0:	bfa8      	it	ge
 80075e2:	4623      	movge	r3, r4
 80075e4:	460f      	mov	r7, r1
 80075e6:	bfa4      	itt	ge
 80075e8:	460c      	movge	r4, r1
 80075ea:	461f      	movge	r7, r3
 80075ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80075f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80075f4:	68a3      	ldr	r3, [r4, #8]
 80075f6:	6861      	ldr	r1, [r4, #4]
 80075f8:	eb0a 0609 	add.w	r6, sl, r9
 80075fc:	42b3      	cmp	r3, r6
 80075fe:	b085      	sub	sp, #20
 8007600:	bfb8      	it	lt
 8007602:	3101      	addlt	r1, #1
 8007604:	f7ff fedc 	bl	80073c0 <_Balloc>
 8007608:	b930      	cbnz	r0, 8007618 <__multiply+0x44>
 800760a:	4602      	mov	r2, r0
 800760c:	4b44      	ldr	r3, [pc, #272]	@ (8007720 <__multiply+0x14c>)
 800760e:	4845      	ldr	r0, [pc, #276]	@ (8007724 <__multiply+0x150>)
 8007610:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007614:	f000 fc92 	bl	8007f3c <__assert_func>
 8007618:	f100 0514 	add.w	r5, r0, #20
 800761c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007620:	462b      	mov	r3, r5
 8007622:	2200      	movs	r2, #0
 8007624:	4543      	cmp	r3, r8
 8007626:	d321      	bcc.n	800766c <__multiply+0x98>
 8007628:	f107 0114 	add.w	r1, r7, #20
 800762c:	f104 0214 	add.w	r2, r4, #20
 8007630:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007634:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007638:	9302      	str	r3, [sp, #8]
 800763a:	1b13      	subs	r3, r2, r4
 800763c:	3b15      	subs	r3, #21
 800763e:	f023 0303 	bic.w	r3, r3, #3
 8007642:	3304      	adds	r3, #4
 8007644:	f104 0715 	add.w	r7, r4, #21
 8007648:	42ba      	cmp	r2, r7
 800764a:	bf38      	it	cc
 800764c:	2304      	movcc	r3, #4
 800764e:	9301      	str	r3, [sp, #4]
 8007650:	9b02      	ldr	r3, [sp, #8]
 8007652:	9103      	str	r1, [sp, #12]
 8007654:	428b      	cmp	r3, r1
 8007656:	d80c      	bhi.n	8007672 <__multiply+0x9e>
 8007658:	2e00      	cmp	r6, #0
 800765a:	dd03      	ble.n	8007664 <__multiply+0x90>
 800765c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007660:	2b00      	cmp	r3, #0
 8007662:	d05b      	beq.n	800771c <__multiply+0x148>
 8007664:	6106      	str	r6, [r0, #16]
 8007666:	b005      	add	sp, #20
 8007668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800766c:	f843 2b04 	str.w	r2, [r3], #4
 8007670:	e7d8      	b.n	8007624 <__multiply+0x50>
 8007672:	f8b1 a000 	ldrh.w	sl, [r1]
 8007676:	f1ba 0f00 	cmp.w	sl, #0
 800767a:	d024      	beq.n	80076c6 <__multiply+0xf2>
 800767c:	f104 0e14 	add.w	lr, r4, #20
 8007680:	46a9      	mov	r9, r5
 8007682:	f04f 0c00 	mov.w	ip, #0
 8007686:	f85e 7b04 	ldr.w	r7, [lr], #4
 800768a:	f8d9 3000 	ldr.w	r3, [r9]
 800768e:	fa1f fb87 	uxth.w	fp, r7
 8007692:	b29b      	uxth	r3, r3
 8007694:	fb0a 330b 	mla	r3, sl, fp, r3
 8007698:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800769c:	f8d9 7000 	ldr.w	r7, [r9]
 80076a0:	4463      	add	r3, ip
 80076a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80076a6:	fb0a c70b 	mla	r7, sl, fp, ip
 80076aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80076b4:	4572      	cmp	r2, lr
 80076b6:	f849 3b04 	str.w	r3, [r9], #4
 80076ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80076be:	d8e2      	bhi.n	8007686 <__multiply+0xb2>
 80076c0:	9b01      	ldr	r3, [sp, #4]
 80076c2:	f845 c003 	str.w	ip, [r5, r3]
 80076c6:	9b03      	ldr	r3, [sp, #12]
 80076c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80076cc:	3104      	adds	r1, #4
 80076ce:	f1b9 0f00 	cmp.w	r9, #0
 80076d2:	d021      	beq.n	8007718 <__multiply+0x144>
 80076d4:	682b      	ldr	r3, [r5, #0]
 80076d6:	f104 0c14 	add.w	ip, r4, #20
 80076da:	46ae      	mov	lr, r5
 80076dc:	f04f 0a00 	mov.w	sl, #0
 80076e0:	f8bc b000 	ldrh.w	fp, [ip]
 80076e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80076e8:	fb09 770b 	mla	r7, r9, fp, r7
 80076ec:	4457      	add	r7, sl
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80076f4:	f84e 3b04 	str.w	r3, [lr], #4
 80076f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80076fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007700:	f8be 3000 	ldrh.w	r3, [lr]
 8007704:	fb09 330a 	mla	r3, r9, sl, r3
 8007708:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800770c:	4562      	cmp	r2, ip
 800770e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007712:	d8e5      	bhi.n	80076e0 <__multiply+0x10c>
 8007714:	9f01      	ldr	r7, [sp, #4]
 8007716:	51eb      	str	r3, [r5, r7]
 8007718:	3504      	adds	r5, #4
 800771a:	e799      	b.n	8007650 <__multiply+0x7c>
 800771c:	3e01      	subs	r6, #1
 800771e:	e79b      	b.n	8007658 <__multiply+0x84>
 8007720:	08008720 	.word	0x08008720
 8007724:	08008731 	.word	0x08008731

08007728 <__pow5mult>:
 8007728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800772c:	4615      	mov	r5, r2
 800772e:	f012 0203 	ands.w	r2, r2, #3
 8007732:	4607      	mov	r7, r0
 8007734:	460e      	mov	r6, r1
 8007736:	d007      	beq.n	8007748 <__pow5mult+0x20>
 8007738:	4c25      	ldr	r4, [pc, #148]	@ (80077d0 <__pow5mult+0xa8>)
 800773a:	3a01      	subs	r2, #1
 800773c:	2300      	movs	r3, #0
 800773e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007742:	f7ff fe9f 	bl	8007484 <__multadd>
 8007746:	4606      	mov	r6, r0
 8007748:	10ad      	asrs	r5, r5, #2
 800774a:	d03d      	beq.n	80077c8 <__pow5mult+0xa0>
 800774c:	69fc      	ldr	r4, [r7, #28]
 800774e:	b97c      	cbnz	r4, 8007770 <__pow5mult+0x48>
 8007750:	2010      	movs	r0, #16
 8007752:	f7ff fd7f 	bl	8007254 <malloc>
 8007756:	4602      	mov	r2, r0
 8007758:	61f8      	str	r0, [r7, #28]
 800775a:	b928      	cbnz	r0, 8007768 <__pow5mult+0x40>
 800775c:	4b1d      	ldr	r3, [pc, #116]	@ (80077d4 <__pow5mult+0xac>)
 800775e:	481e      	ldr	r0, [pc, #120]	@ (80077d8 <__pow5mult+0xb0>)
 8007760:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007764:	f000 fbea 	bl	8007f3c <__assert_func>
 8007768:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800776c:	6004      	str	r4, [r0, #0]
 800776e:	60c4      	str	r4, [r0, #12]
 8007770:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007774:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007778:	b94c      	cbnz	r4, 800778e <__pow5mult+0x66>
 800777a:	f240 2171 	movw	r1, #625	@ 0x271
 800777e:	4638      	mov	r0, r7
 8007780:	f7ff ff12 	bl	80075a8 <__i2b>
 8007784:	2300      	movs	r3, #0
 8007786:	f8c8 0008 	str.w	r0, [r8, #8]
 800778a:	4604      	mov	r4, r0
 800778c:	6003      	str	r3, [r0, #0]
 800778e:	f04f 0900 	mov.w	r9, #0
 8007792:	07eb      	lsls	r3, r5, #31
 8007794:	d50a      	bpl.n	80077ac <__pow5mult+0x84>
 8007796:	4631      	mov	r1, r6
 8007798:	4622      	mov	r2, r4
 800779a:	4638      	mov	r0, r7
 800779c:	f7ff ff1a 	bl	80075d4 <__multiply>
 80077a0:	4631      	mov	r1, r6
 80077a2:	4680      	mov	r8, r0
 80077a4:	4638      	mov	r0, r7
 80077a6:	f7ff fe4b 	bl	8007440 <_Bfree>
 80077aa:	4646      	mov	r6, r8
 80077ac:	106d      	asrs	r5, r5, #1
 80077ae:	d00b      	beq.n	80077c8 <__pow5mult+0xa0>
 80077b0:	6820      	ldr	r0, [r4, #0]
 80077b2:	b938      	cbnz	r0, 80077c4 <__pow5mult+0x9c>
 80077b4:	4622      	mov	r2, r4
 80077b6:	4621      	mov	r1, r4
 80077b8:	4638      	mov	r0, r7
 80077ba:	f7ff ff0b 	bl	80075d4 <__multiply>
 80077be:	6020      	str	r0, [r4, #0]
 80077c0:	f8c0 9000 	str.w	r9, [r0]
 80077c4:	4604      	mov	r4, r0
 80077c6:	e7e4      	b.n	8007792 <__pow5mult+0x6a>
 80077c8:	4630      	mov	r0, r6
 80077ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ce:	bf00      	nop
 80077d0:	0800878c 	.word	0x0800878c
 80077d4:	080086b1 	.word	0x080086b1
 80077d8:	08008731 	.word	0x08008731

080077dc <__lshift>:
 80077dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077e0:	460c      	mov	r4, r1
 80077e2:	6849      	ldr	r1, [r1, #4]
 80077e4:	6923      	ldr	r3, [r4, #16]
 80077e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80077ea:	68a3      	ldr	r3, [r4, #8]
 80077ec:	4607      	mov	r7, r0
 80077ee:	4691      	mov	r9, r2
 80077f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80077f4:	f108 0601 	add.w	r6, r8, #1
 80077f8:	42b3      	cmp	r3, r6
 80077fa:	db0b      	blt.n	8007814 <__lshift+0x38>
 80077fc:	4638      	mov	r0, r7
 80077fe:	f7ff fddf 	bl	80073c0 <_Balloc>
 8007802:	4605      	mov	r5, r0
 8007804:	b948      	cbnz	r0, 800781a <__lshift+0x3e>
 8007806:	4602      	mov	r2, r0
 8007808:	4b28      	ldr	r3, [pc, #160]	@ (80078ac <__lshift+0xd0>)
 800780a:	4829      	ldr	r0, [pc, #164]	@ (80078b0 <__lshift+0xd4>)
 800780c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007810:	f000 fb94 	bl	8007f3c <__assert_func>
 8007814:	3101      	adds	r1, #1
 8007816:	005b      	lsls	r3, r3, #1
 8007818:	e7ee      	b.n	80077f8 <__lshift+0x1c>
 800781a:	2300      	movs	r3, #0
 800781c:	f100 0114 	add.w	r1, r0, #20
 8007820:	f100 0210 	add.w	r2, r0, #16
 8007824:	4618      	mov	r0, r3
 8007826:	4553      	cmp	r3, sl
 8007828:	db33      	blt.n	8007892 <__lshift+0xb6>
 800782a:	6920      	ldr	r0, [r4, #16]
 800782c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007830:	f104 0314 	add.w	r3, r4, #20
 8007834:	f019 091f 	ands.w	r9, r9, #31
 8007838:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800783c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007840:	d02b      	beq.n	800789a <__lshift+0xbe>
 8007842:	f1c9 0e20 	rsb	lr, r9, #32
 8007846:	468a      	mov	sl, r1
 8007848:	2200      	movs	r2, #0
 800784a:	6818      	ldr	r0, [r3, #0]
 800784c:	fa00 f009 	lsl.w	r0, r0, r9
 8007850:	4310      	orrs	r0, r2
 8007852:	f84a 0b04 	str.w	r0, [sl], #4
 8007856:	f853 2b04 	ldr.w	r2, [r3], #4
 800785a:	459c      	cmp	ip, r3
 800785c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007860:	d8f3      	bhi.n	800784a <__lshift+0x6e>
 8007862:	ebac 0304 	sub.w	r3, ip, r4
 8007866:	3b15      	subs	r3, #21
 8007868:	f023 0303 	bic.w	r3, r3, #3
 800786c:	3304      	adds	r3, #4
 800786e:	f104 0015 	add.w	r0, r4, #21
 8007872:	4584      	cmp	ip, r0
 8007874:	bf38      	it	cc
 8007876:	2304      	movcc	r3, #4
 8007878:	50ca      	str	r2, [r1, r3]
 800787a:	b10a      	cbz	r2, 8007880 <__lshift+0xa4>
 800787c:	f108 0602 	add.w	r6, r8, #2
 8007880:	3e01      	subs	r6, #1
 8007882:	4638      	mov	r0, r7
 8007884:	612e      	str	r6, [r5, #16]
 8007886:	4621      	mov	r1, r4
 8007888:	f7ff fdda 	bl	8007440 <_Bfree>
 800788c:	4628      	mov	r0, r5
 800788e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007892:	f842 0f04 	str.w	r0, [r2, #4]!
 8007896:	3301      	adds	r3, #1
 8007898:	e7c5      	b.n	8007826 <__lshift+0x4a>
 800789a:	3904      	subs	r1, #4
 800789c:	f853 2b04 	ldr.w	r2, [r3], #4
 80078a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80078a4:	459c      	cmp	ip, r3
 80078a6:	d8f9      	bhi.n	800789c <__lshift+0xc0>
 80078a8:	e7ea      	b.n	8007880 <__lshift+0xa4>
 80078aa:	bf00      	nop
 80078ac:	08008720 	.word	0x08008720
 80078b0:	08008731 	.word	0x08008731

080078b4 <__mcmp>:
 80078b4:	690a      	ldr	r2, [r1, #16]
 80078b6:	4603      	mov	r3, r0
 80078b8:	6900      	ldr	r0, [r0, #16]
 80078ba:	1a80      	subs	r0, r0, r2
 80078bc:	b530      	push	{r4, r5, lr}
 80078be:	d10e      	bne.n	80078de <__mcmp+0x2a>
 80078c0:	3314      	adds	r3, #20
 80078c2:	3114      	adds	r1, #20
 80078c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80078c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80078cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80078d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80078d4:	4295      	cmp	r5, r2
 80078d6:	d003      	beq.n	80078e0 <__mcmp+0x2c>
 80078d8:	d205      	bcs.n	80078e6 <__mcmp+0x32>
 80078da:	f04f 30ff 	mov.w	r0, #4294967295
 80078de:	bd30      	pop	{r4, r5, pc}
 80078e0:	42a3      	cmp	r3, r4
 80078e2:	d3f3      	bcc.n	80078cc <__mcmp+0x18>
 80078e4:	e7fb      	b.n	80078de <__mcmp+0x2a>
 80078e6:	2001      	movs	r0, #1
 80078e8:	e7f9      	b.n	80078de <__mcmp+0x2a>
	...

080078ec <__mdiff>:
 80078ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f0:	4689      	mov	r9, r1
 80078f2:	4606      	mov	r6, r0
 80078f4:	4611      	mov	r1, r2
 80078f6:	4648      	mov	r0, r9
 80078f8:	4614      	mov	r4, r2
 80078fa:	f7ff ffdb 	bl	80078b4 <__mcmp>
 80078fe:	1e05      	subs	r5, r0, #0
 8007900:	d112      	bne.n	8007928 <__mdiff+0x3c>
 8007902:	4629      	mov	r1, r5
 8007904:	4630      	mov	r0, r6
 8007906:	f7ff fd5b 	bl	80073c0 <_Balloc>
 800790a:	4602      	mov	r2, r0
 800790c:	b928      	cbnz	r0, 800791a <__mdiff+0x2e>
 800790e:	4b3f      	ldr	r3, [pc, #252]	@ (8007a0c <__mdiff+0x120>)
 8007910:	f240 2137 	movw	r1, #567	@ 0x237
 8007914:	483e      	ldr	r0, [pc, #248]	@ (8007a10 <__mdiff+0x124>)
 8007916:	f000 fb11 	bl	8007f3c <__assert_func>
 800791a:	2301      	movs	r3, #1
 800791c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007920:	4610      	mov	r0, r2
 8007922:	b003      	add	sp, #12
 8007924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007928:	bfbc      	itt	lt
 800792a:	464b      	movlt	r3, r9
 800792c:	46a1      	movlt	r9, r4
 800792e:	4630      	mov	r0, r6
 8007930:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007934:	bfba      	itte	lt
 8007936:	461c      	movlt	r4, r3
 8007938:	2501      	movlt	r5, #1
 800793a:	2500      	movge	r5, #0
 800793c:	f7ff fd40 	bl	80073c0 <_Balloc>
 8007940:	4602      	mov	r2, r0
 8007942:	b918      	cbnz	r0, 800794c <__mdiff+0x60>
 8007944:	4b31      	ldr	r3, [pc, #196]	@ (8007a0c <__mdiff+0x120>)
 8007946:	f240 2145 	movw	r1, #581	@ 0x245
 800794a:	e7e3      	b.n	8007914 <__mdiff+0x28>
 800794c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007950:	6926      	ldr	r6, [r4, #16]
 8007952:	60c5      	str	r5, [r0, #12]
 8007954:	f109 0310 	add.w	r3, r9, #16
 8007958:	f109 0514 	add.w	r5, r9, #20
 800795c:	f104 0e14 	add.w	lr, r4, #20
 8007960:	f100 0b14 	add.w	fp, r0, #20
 8007964:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007968:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800796c:	9301      	str	r3, [sp, #4]
 800796e:	46d9      	mov	r9, fp
 8007970:	f04f 0c00 	mov.w	ip, #0
 8007974:	9b01      	ldr	r3, [sp, #4]
 8007976:	f85e 0b04 	ldr.w	r0, [lr], #4
 800797a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800797e:	9301      	str	r3, [sp, #4]
 8007980:	fa1f f38a 	uxth.w	r3, sl
 8007984:	4619      	mov	r1, r3
 8007986:	b283      	uxth	r3, r0
 8007988:	1acb      	subs	r3, r1, r3
 800798a:	0c00      	lsrs	r0, r0, #16
 800798c:	4463      	add	r3, ip
 800798e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007992:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007996:	b29b      	uxth	r3, r3
 8007998:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800799c:	4576      	cmp	r6, lr
 800799e:	f849 3b04 	str.w	r3, [r9], #4
 80079a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80079a6:	d8e5      	bhi.n	8007974 <__mdiff+0x88>
 80079a8:	1b33      	subs	r3, r6, r4
 80079aa:	3b15      	subs	r3, #21
 80079ac:	f023 0303 	bic.w	r3, r3, #3
 80079b0:	3415      	adds	r4, #21
 80079b2:	3304      	adds	r3, #4
 80079b4:	42a6      	cmp	r6, r4
 80079b6:	bf38      	it	cc
 80079b8:	2304      	movcc	r3, #4
 80079ba:	441d      	add	r5, r3
 80079bc:	445b      	add	r3, fp
 80079be:	461e      	mov	r6, r3
 80079c0:	462c      	mov	r4, r5
 80079c2:	4544      	cmp	r4, r8
 80079c4:	d30e      	bcc.n	80079e4 <__mdiff+0xf8>
 80079c6:	f108 0103 	add.w	r1, r8, #3
 80079ca:	1b49      	subs	r1, r1, r5
 80079cc:	f021 0103 	bic.w	r1, r1, #3
 80079d0:	3d03      	subs	r5, #3
 80079d2:	45a8      	cmp	r8, r5
 80079d4:	bf38      	it	cc
 80079d6:	2100      	movcc	r1, #0
 80079d8:	440b      	add	r3, r1
 80079da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80079de:	b191      	cbz	r1, 8007a06 <__mdiff+0x11a>
 80079e0:	6117      	str	r7, [r2, #16]
 80079e2:	e79d      	b.n	8007920 <__mdiff+0x34>
 80079e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80079e8:	46e6      	mov	lr, ip
 80079ea:	0c08      	lsrs	r0, r1, #16
 80079ec:	fa1c fc81 	uxtah	ip, ip, r1
 80079f0:	4471      	add	r1, lr
 80079f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80079f6:	b289      	uxth	r1, r1
 80079f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80079fc:	f846 1b04 	str.w	r1, [r6], #4
 8007a00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a04:	e7dd      	b.n	80079c2 <__mdiff+0xd6>
 8007a06:	3f01      	subs	r7, #1
 8007a08:	e7e7      	b.n	80079da <__mdiff+0xee>
 8007a0a:	bf00      	nop
 8007a0c:	08008720 	.word	0x08008720
 8007a10:	08008731 	.word	0x08008731

08007a14 <__d2b>:
 8007a14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a18:	460f      	mov	r7, r1
 8007a1a:	2101      	movs	r1, #1
 8007a1c:	ec59 8b10 	vmov	r8, r9, d0
 8007a20:	4616      	mov	r6, r2
 8007a22:	f7ff fccd 	bl	80073c0 <_Balloc>
 8007a26:	4604      	mov	r4, r0
 8007a28:	b930      	cbnz	r0, 8007a38 <__d2b+0x24>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	4b23      	ldr	r3, [pc, #140]	@ (8007abc <__d2b+0xa8>)
 8007a2e:	4824      	ldr	r0, [pc, #144]	@ (8007ac0 <__d2b+0xac>)
 8007a30:	f240 310f 	movw	r1, #783	@ 0x30f
 8007a34:	f000 fa82 	bl	8007f3c <__assert_func>
 8007a38:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a40:	b10d      	cbz	r5, 8007a46 <__d2b+0x32>
 8007a42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a46:	9301      	str	r3, [sp, #4]
 8007a48:	f1b8 0300 	subs.w	r3, r8, #0
 8007a4c:	d023      	beq.n	8007a96 <__d2b+0x82>
 8007a4e:	4668      	mov	r0, sp
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	f7ff fd7c 	bl	800754e <__lo0bits>
 8007a56:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007a5a:	b1d0      	cbz	r0, 8007a92 <__d2b+0x7e>
 8007a5c:	f1c0 0320 	rsb	r3, r0, #32
 8007a60:	fa02 f303 	lsl.w	r3, r2, r3
 8007a64:	430b      	orrs	r3, r1
 8007a66:	40c2      	lsrs	r2, r0
 8007a68:	6163      	str	r3, [r4, #20]
 8007a6a:	9201      	str	r2, [sp, #4]
 8007a6c:	9b01      	ldr	r3, [sp, #4]
 8007a6e:	61a3      	str	r3, [r4, #24]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	bf0c      	ite	eq
 8007a74:	2201      	moveq	r2, #1
 8007a76:	2202      	movne	r2, #2
 8007a78:	6122      	str	r2, [r4, #16]
 8007a7a:	b1a5      	cbz	r5, 8007aa6 <__d2b+0x92>
 8007a7c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007a80:	4405      	add	r5, r0
 8007a82:	603d      	str	r5, [r7, #0]
 8007a84:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007a88:	6030      	str	r0, [r6, #0]
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	b003      	add	sp, #12
 8007a8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a92:	6161      	str	r1, [r4, #20]
 8007a94:	e7ea      	b.n	8007a6c <__d2b+0x58>
 8007a96:	a801      	add	r0, sp, #4
 8007a98:	f7ff fd59 	bl	800754e <__lo0bits>
 8007a9c:	9b01      	ldr	r3, [sp, #4]
 8007a9e:	6163      	str	r3, [r4, #20]
 8007aa0:	3020      	adds	r0, #32
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	e7e8      	b.n	8007a78 <__d2b+0x64>
 8007aa6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007aaa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007aae:	6038      	str	r0, [r7, #0]
 8007ab0:	6918      	ldr	r0, [r3, #16]
 8007ab2:	f7ff fd2d 	bl	8007510 <__hi0bits>
 8007ab6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007aba:	e7e5      	b.n	8007a88 <__d2b+0x74>
 8007abc:	08008720 	.word	0x08008720
 8007ac0:	08008731 	.word	0x08008731

08007ac4 <__ssputs_r>:
 8007ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ac8:	688e      	ldr	r6, [r1, #8]
 8007aca:	461f      	mov	r7, r3
 8007acc:	42be      	cmp	r6, r7
 8007ace:	680b      	ldr	r3, [r1, #0]
 8007ad0:	4682      	mov	sl, r0
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	4690      	mov	r8, r2
 8007ad6:	d82d      	bhi.n	8007b34 <__ssputs_r+0x70>
 8007ad8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007adc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ae0:	d026      	beq.n	8007b30 <__ssputs_r+0x6c>
 8007ae2:	6965      	ldr	r5, [r4, #20]
 8007ae4:	6909      	ldr	r1, [r1, #16]
 8007ae6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007aea:	eba3 0901 	sub.w	r9, r3, r1
 8007aee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007af2:	1c7b      	adds	r3, r7, #1
 8007af4:	444b      	add	r3, r9
 8007af6:	106d      	asrs	r5, r5, #1
 8007af8:	429d      	cmp	r5, r3
 8007afa:	bf38      	it	cc
 8007afc:	461d      	movcc	r5, r3
 8007afe:	0553      	lsls	r3, r2, #21
 8007b00:	d527      	bpl.n	8007b52 <__ssputs_r+0x8e>
 8007b02:	4629      	mov	r1, r5
 8007b04:	f7ff fbd0 	bl	80072a8 <_malloc_r>
 8007b08:	4606      	mov	r6, r0
 8007b0a:	b360      	cbz	r0, 8007b66 <__ssputs_r+0xa2>
 8007b0c:	6921      	ldr	r1, [r4, #16]
 8007b0e:	464a      	mov	r2, r9
 8007b10:	f000 fa06 	bl	8007f20 <memcpy>
 8007b14:	89a3      	ldrh	r3, [r4, #12]
 8007b16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007b1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b1e:	81a3      	strh	r3, [r4, #12]
 8007b20:	6126      	str	r6, [r4, #16]
 8007b22:	6165      	str	r5, [r4, #20]
 8007b24:	444e      	add	r6, r9
 8007b26:	eba5 0509 	sub.w	r5, r5, r9
 8007b2a:	6026      	str	r6, [r4, #0]
 8007b2c:	60a5      	str	r5, [r4, #8]
 8007b2e:	463e      	mov	r6, r7
 8007b30:	42be      	cmp	r6, r7
 8007b32:	d900      	bls.n	8007b36 <__ssputs_r+0x72>
 8007b34:	463e      	mov	r6, r7
 8007b36:	6820      	ldr	r0, [r4, #0]
 8007b38:	4632      	mov	r2, r6
 8007b3a:	4641      	mov	r1, r8
 8007b3c:	f000 f9c6 	bl	8007ecc <memmove>
 8007b40:	68a3      	ldr	r3, [r4, #8]
 8007b42:	1b9b      	subs	r3, r3, r6
 8007b44:	60a3      	str	r3, [r4, #8]
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	4433      	add	r3, r6
 8007b4a:	6023      	str	r3, [r4, #0]
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b52:	462a      	mov	r2, r5
 8007b54:	f000 fa36 	bl	8007fc4 <_realloc_r>
 8007b58:	4606      	mov	r6, r0
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	d1e0      	bne.n	8007b20 <__ssputs_r+0x5c>
 8007b5e:	6921      	ldr	r1, [r4, #16]
 8007b60:	4650      	mov	r0, sl
 8007b62:	f7ff fb2d 	bl	80071c0 <_free_r>
 8007b66:	230c      	movs	r3, #12
 8007b68:	f8ca 3000 	str.w	r3, [sl]
 8007b6c:	89a3      	ldrh	r3, [r4, #12]
 8007b6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b72:	81a3      	strh	r3, [r4, #12]
 8007b74:	f04f 30ff 	mov.w	r0, #4294967295
 8007b78:	e7e9      	b.n	8007b4e <__ssputs_r+0x8a>
	...

08007b7c <_svfiprintf_r>:
 8007b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b80:	4698      	mov	r8, r3
 8007b82:	898b      	ldrh	r3, [r1, #12]
 8007b84:	061b      	lsls	r3, r3, #24
 8007b86:	b09d      	sub	sp, #116	@ 0x74
 8007b88:	4607      	mov	r7, r0
 8007b8a:	460d      	mov	r5, r1
 8007b8c:	4614      	mov	r4, r2
 8007b8e:	d510      	bpl.n	8007bb2 <_svfiprintf_r+0x36>
 8007b90:	690b      	ldr	r3, [r1, #16]
 8007b92:	b973      	cbnz	r3, 8007bb2 <_svfiprintf_r+0x36>
 8007b94:	2140      	movs	r1, #64	@ 0x40
 8007b96:	f7ff fb87 	bl	80072a8 <_malloc_r>
 8007b9a:	6028      	str	r0, [r5, #0]
 8007b9c:	6128      	str	r0, [r5, #16]
 8007b9e:	b930      	cbnz	r0, 8007bae <_svfiprintf_r+0x32>
 8007ba0:	230c      	movs	r3, #12
 8007ba2:	603b      	str	r3, [r7, #0]
 8007ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba8:	b01d      	add	sp, #116	@ 0x74
 8007baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bae:	2340      	movs	r3, #64	@ 0x40
 8007bb0:	616b      	str	r3, [r5, #20]
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bb6:	2320      	movs	r3, #32
 8007bb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007bbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bc0:	2330      	movs	r3, #48	@ 0x30
 8007bc2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007d60 <_svfiprintf_r+0x1e4>
 8007bc6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007bca:	f04f 0901 	mov.w	r9, #1
 8007bce:	4623      	mov	r3, r4
 8007bd0:	469a      	mov	sl, r3
 8007bd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bd6:	b10a      	cbz	r2, 8007bdc <_svfiprintf_r+0x60>
 8007bd8:	2a25      	cmp	r2, #37	@ 0x25
 8007bda:	d1f9      	bne.n	8007bd0 <_svfiprintf_r+0x54>
 8007bdc:	ebba 0b04 	subs.w	fp, sl, r4
 8007be0:	d00b      	beq.n	8007bfa <_svfiprintf_r+0x7e>
 8007be2:	465b      	mov	r3, fp
 8007be4:	4622      	mov	r2, r4
 8007be6:	4629      	mov	r1, r5
 8007be8:	4638      	mov	r0, r7
 8007bea:	f7ff ff6b 	bl	8007ac4 <__ssputs_r>
 8007bee:	3001      	adds	r0, #1
 8007bf0:	f000 80a7 	beq.w	8007d42 <_svfiprintf_r+0x1c6>
 8007bf4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bf6:	445a      	add	r2, fp
 8007bf8:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f000 809f 	beq.w	8007d42 <_svfiprintf_r+0x1c6>
 8007c04:	2300      	movs	r3, #0
 8007c06:	f04f 32ff 	mov.w	r2, #4294967295
 8007c0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c0e:	f10a 0a01 	add.w	sl, sl, #1
 8007c12:	9304      	str	r3, [sp, #16]
 8007c14:	9307      	str	r3, [sp, #28]
 8007c16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c1c:	4654      	mov	r4, sl
 8007c1e:	2205      	movs	r2, #5
 8007c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c24:	484e      	ldr	r0, [pc, #312]	@ (8007d60 <_svfiprintf_r+0x1e4>)
 8007c26:	f7f8 fae3 	bl	80001f0 <memchr>
 8007c2a:	9a04      	ldr	r2, [sp, #16]
 8007c2c:	b9d8      	cbnz	r0, 8007c66 <_svfiprintf_r+0xea>
 8007c2e:	06d0      	lsls	r0, r2, #27
 8007c30:	bf44      	itt	mi
 8007c32:	2320      	movmi	r3, #32
 8007c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c38:	0711      	lsls	r1, r2, #28
 8007c3a:	bf44      	itt	mi
 8007c3c:	232b      	movmi	r3, #43	@ 0x2b
 8007c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c42:	f89a 3000 	ldrb.w	r3, [sl]
 8007c46:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c48:	d015      	beq.n	8007c76 <_svfiprintf_r+0xfa>
 8007c4a:	9a07      	ldr	r2, [sp, #28]
 8007c4c:	4654      	mov	r4, sl
 8007c4e:	2000      	movs	r0, #0
 8007c50:	f04f 0c0a 	mov.w	ip, #10
 8007c54:	4621      	mov	r1, r4
 8007c56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c5a:	3b30      	subs	r3, #48	@ 0x30
 8007c5c:	2b09      	cmp	r3, #9
 8007c5e:	d94b      	bls.n	8007cf8 <_svfiprintf_r+0x17c>
 8007c60:	b1b0      	cbz	r0, 8007c90 <_svfiprintf_r+0x114>
 8007c62:	9207      	str	r2, [sp, #28]
 8007c64:	e014      	b.n	8007c90 <_svfiprintf_r+0x114>
 8007c66:	eba0 0308 	sub.w	r3, r0, r8
 8007c6a:	fa09 f303 	lsl.w	r3, r9, r3
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	9304      	str	r3, [sp, #16]
 8007c72:	46a2      	mov	sl, r4
 8007c74:	e7d2      	b.n	8007c1c <_svfiprintf_r+0xa0>
 8007c76:	9b03      	ldr	r3, [sp, #12]
 8007c78:	1d19      	adds	r1, r3, #4
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	9103      	str	r1, [sp, #12]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	bfbb      	ittet	lt
 8007c82:	425b      	neglt	r3, r3
 8007c84:	f042 0202 	orrlt.w	r2, r2, #2
 8007c88:	9307      	strge	r3, [sp, #28]
 8007c8a:	9307      	strlt	r3, [sp, #28]
 8007c8c:	bfb8      	it	lt
 8007c8e:	9204      	strlt	r2, [sp, #16]
 8007c90:	7823      	ldrb	r3, [r4, #0]
 8007c92:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c94:	d10a      	bne.n	8007cac <_svfiprintf_r+0x130>
 8007c96:	7863      	ldrb	r3, [r4, #1]
 8007c98:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c9a:	d132      	bne.n	8007d02 <_svfiprintf_r+0x186>
 8007c9c:	9b03      	ldr	r3, [sp, #12]
 8007c9e:	1d1a      	adds	r2, r3, #4
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	9203      	str	r2, [sp, #12]
 8007ca4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ca8:	3402      	adds	r4, #2
 8007caa:	9305      	str	r3, [sp, #20]
 8007cac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007d70 <_svfiprintf_r+0x1f4>
 8007cb0:	7821      	ldrb	r1, [r4, #0]
 8007cb2:	2203      	movs	r2, #3
 8007cb4:	4650      	mov	r0, sl
 8007cb6:	f7f8 fa9b 	bl	80001f0 <memchr>
 8007cba:	b138      	cbz	r0, 8007ccc <_svfiprintf_r+0x150>
 8007cbc:	9b04      	ldr	r3, [sp, #16]
 8007cbe:	eba0 000a 	sub.w	r0, r0, sl
 8007cc2:	2240      	movs	r2, #64	@ 0x40
 8007cc4:	4082      	lsls	r2, r0
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	3401      	adds	r4, #1
 8007cca:	9304      	str	r3, [sp, #16]
 8007ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cd0:	4824      	ldr	r0, [pc, #144]	@ (8007d64 <_svfiprintf_r+0x1e8>)
 8007cd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007cd6:	2206      	movs	r2, #6
 8007cd8:	f7f8 fa8a 	bl	80001f0 <memchr>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	d036      	beq.n	8007d4e <_svfiprintf_r+0x1d2>
 8007ce0:	4b21      	ldr	r3, [pc, #132]	@ (8007d68 <_svfiprintf_r+0x1ec>)
 8007ce2:	bb1b      	cbnz	r3, 8007d2c <_svfiprintf_r+0x1b0>
 8007ce4:	9b03      	ldr	r3, [sp, #12]
 8007ce6:	3307      	adds	r3, #7
 8007ce8:	f023 0307 	bic.w	r3, r3, #7
 8007cec:	3308      	adds	r3, #8
 8007cee:	9303      	str	r3, [sp, #12]
 8007cf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cf2:	4433      	add	r3, r6
 8007cf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cf6:	e76a      	b.n	8007bce <_svfiprintf_r+0x52>
 8007cf8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cfc:	460c      	mov	r4, r1
 8007cfe:	2001      	movs	r0, #1
 8007d00:	e7a8      	b.n	8007c54 <_svfiprintf_r+0xd8>
 8007d02:	2300      	movs	r3, #0
 8007d04:	3401      	adds	r4, #1
 8007d06:	9305      	str	r3, [sp, #20]
 8007d08:	4619      	mov	r1, r3
 8007d0a:	f04f 0c0a 	mov.w	ip, #10
 8007d0e:	4620      	mov	r0, r4
 8007d10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d14:	3a30      	subs	r2, #48	@ 0x30
 8007d16:	2a09      	cmp	r2, #9
 8007d18:	d903      	bls.n	8007d22 <_svfiprintf_r+0x1a6>
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d0c6      	beq.n	8007cac <_svfiprintf_r+0x130>
 8007d1e:	9105      	str	r1, [sp, #20]
 8007d20:	e7c4      	b.n	8007cac <_svfiprintf_r+0x130>
 8007d22:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d26:	4604      	mov	r4, r0
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e7f0      	b.n	8007d0e <_svfiprintf_r+0x192>
 8007d2c:	ab03      	add	r3, sp, #12
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	462a      	mov	r2, r5
 8007d32:	4b0e      	ldr	r3, [pc, #56]	@ (8007d6c <_svfiprintf_r+0x1f0>)
 8007d34:	a904      	add	r1, sp, #16
 8007d36:	4638      	mov	r0, r7
 8007d38:	f7fd fe98 	bl	8005a6c <_printf_float>
 8007d3c:	1c42      	adds	r2, r0, #1
 8007d3e:	4606      	mov	r6, r0
 8007d40:	d1d6      	bne.n	8007cf0 <_svfiprintf_r+0x174>
 8007d42:	89ab      	ldrh	r3, [r5, #12]
 8007d44:	065b      	lsls	r3, r3, #25
 8007d46:	f53f af2d 	bmi.w	8007ba4 <_svfiprintf_r+0x28>
 8007d4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d4c:	e72c      	b.n	8007ba8 <_svfiprintf_r+0x2c>
 8007d4e:	ab03      	add	r3, sp, #12
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	462a      	mov	r2, r5
 8007d54:	4b05      	ldr	r3, [pc, #20]	@ (8007d6c <_svfiprintf_r+0x1f0>)
 8007d56:	a904      	add	r1, sp, #16
 8007d58:	4638      	mov	r0, r7
 8007d5a:	f7fe f91f 	bl	8005f9c <_printf_i>
 8007d5e:	e7ed      	b.n	8007d3c <_svfiprintf_r+0x1c0>
 8007d60:	08008888 	.word	0x08008888
 8007d64:	08008892 	.word	0x08008892
 8007d68:	08005a6d 	.word	0x08005a6d
 8007d6c:	08007ac5 	.word	0x08007ac5
 8007d70:	0800888e 	.word	0x0800888e

08007d74 <__sflush_r>:
 8007d74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d7c:	0716      	lsls	r6, r2, #28
 8007d7e:	4605      	mov	r5, r0
 8007d80:	460c      	mov	r4, r1
 8007d82:	d454      	bmi.n	8007e2e <__sflush_r+0xba>
 8007d84:	684b      	ldr	r3, [r1, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	dc02      	bgt.n	8007d90 <__sflush_r+0x1c>
 8007d8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	dd48      	ble.n	8007e22 <__sflush_r+0xae>
 8007d90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d92:	2e00      	cmp	r6, #0
 8007d94:	d045      	beq.n	8007e22 <__sflush_r+0xae>
 8007d96:	2300      	movs	r3, #0
 8007d98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007d9c:	682f      	ldr	r7, [r5, #0]
 8007d9e:	6a21      	ldr	r1, [r4, #32]
 8007da0:	602b      	str	r3, [r5, #0]
 8007da2:	d030      	beq.n	8007e06 <__sflush_r+0x92>
 8007da4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007da6:	89a3      	ldrh	r3, [r4, #12]
 8007da8:	0759      	lsls	r1, r3, #29
 8007daa:	d505      	bpl.n	8007db8 <__sflush_r+0x44>
 8007dac:	6863      	ldr	r3, [r4, #4]
 8007dae:	1ad2      	subs	r2, r2, r3
 8007db0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007db2:	b10b      	cbz	r3, 8007db8 <__sflush_r+0x44>
 8007db4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007db6:	1ad2      	subs	r2, r2, r3
 8007db8:	2300      	movs	r3, #0
 8007dba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007dbc:	6a21      	ldr	r1, [r4, #32]
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	47b0      	blx	r6
 8007dc2:	1c43      	adds	r3, r0, #1
 8007dc4:	89a3      	ldrh	r3, [r4, #12]
 8007dc6:	d106      	bne.n	8007dd6 <__sflush_r+0x62>
 8007dc8:	6829      	ldr	r1, [r5, #0]
 8007dca:	291d      	cmp	r1, #29
 8007dcc:	d82b      	bhi.n	8007e26 <__sflush_r+0xb2>
 8007dce:	4a2a      	ldr	r2, [pc, #168]	@ (8007e78 <__sflush_r+0x104>)
 8007dd0:	410a      	asrs	r2, r1
 8007dd2:	07d6      	lsls	r6, r2, #31
 8007dd4:	d427      	bmi.n	8007e26 <__sflush_r+0xb2>
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	6062      	str	r2, [r4, #4]
 8007dda:	04d9      	lsls	r1, r3, #19
 8007ddc:	6922      	ldr	r2, [r4, #16]
 8007dde:	6022      	str	r2, [r4, #0]
 8007de0:	d504      	bpl.n	8007dec <__sflush_r+0x78>
 8007de2:	1c42      	adds	r2, r0, #1
 8007de4:	d101      	bne.n	8007dea <__sflush_r+0x76>
 8007de6:	682b      	ldr	r3, [r5, #0]
 8007de8:	b903      	cbnz	r3, 8007dec <__sflush_r+0x78>
 8007dea:	6560      	str	r0, [r4, #84]	@ 0x54
 8007dec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007dee:	602f      	str	r7, [r5, #0]
 8007df0:	b1b9      	cbz	r1, 8007e22 <__sflush_r+0xae>
 8007df2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007df6:	4299      	cmp	r1, r3
 8007df8:	d002      	beq.n	8007e00 <__sflush_r+0x8c>
 8007dfa:	4628      	mov	r0, r5
 8007dfc:	f7ff f9e0 	bl	80071c0 <_free_r>
 8007e00:	2300      	movs	r3, #0
 8007e02:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e04:	e00d      	b.n	8007e22 <__sflush_r+0xae>
 8007e06:	2301      	movs	r3, #1
 8007e08:	4628      	mov	r0, r5
 8007e0a:	47b0      	blx	r6
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	1c50      	adds	r0, r2, #1
 8007e10:	d1c9      	bne.n	8007da6 <__sflush_r+0x32>
 8007e12:	682b      	ldr	r3, [r5, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d0c6      	beq.n	8007da6 <__sflush_r+0x32>
 8007e18:	2b1d      	cmp	r3, #29
 8007e1a:	d001      	beq.n	8007e20 <__sflush_r+0xac>
 8007e1c:	2b16      	cmp	r3, #22
 8007e1e:	d11e      	bne.n	8007e5e <__sflush_r+0xea>
 8007e20:	602f      	str	r7, [r5, #0]
 8007e22:	2000      	movs	r0, #0
 8007e24:	e022      	b.n	8007e6c <__sflush_r+0xf8>
 8007e26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e2a:	b21b      	sxth	r3, r3
 8007e2c:	e01b      	b.n	8007e66 <__sflush_r+0xf2>
 8007e2e:	690f      	ldr	r7, [r1, #16]
 8007e30:	2f00      	cmp	r7, #0
 8007e32:	d0f6      	beq.n	8007e22 <__sflush_r+0xae>
 8007e34:	0793      	lsls	r3, r2, #30
 8007e36:	680e      	ldr	r6, [r1, #0]
 8007e38:	bf08      	it	eq
 8007e3a:	694b      	ldreq	r3, [r1, #20]
 8007e3c:	600f      	str	r7, [r1, #0]
 8007e3e:	bf18      	it	ne
 8007e40:	2300      	movne	r3, #0
 8007e42:	eba6 0807 	sub.w	r8, r6, r7
 8007e46:	608b      	str	r3, [r1, #8]
 8007e48:	f1b8 0f00 	cmp.w	r8, #0
 8007e4c:	dde9      	ble.n	8007e22 <__sflush_r+0xae>
 8007e4e:	6a21      	ldr	r1, [r4, #32]
 8007e50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007e52:	4643      	mov	r3, r8
 8007e54:	463a      	mov	r2, r7
 8007e56:	4628      	mov	r0, r5
 8007e58:	47b0      	blx	r6
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	dc08      	bgt.n	8007e70 <__sflush_r+0xfc>
 8007e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e66:	81a3      	strh	r3, [r4, #12]
 8007e68:	f04f 30ff 	mov.w	r0, #4294967295
 8007e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e70:	4407      	add	r7, r0
 8007e72:	eba8 0800 	sub.w	r8, r8, r0
 8007e76:	e7e7      	b.n	8007e48 <__sflush_r+0xd4>
 8007e78:	dfbffffe 	.word	0xdfbffffe

08007e7c <_fflush_r>:
 8007e7c:	b538      	push	{r3, r4, r5, lr}
 8007e7e:	690b      	ldr	r3, [r1, #16]
 8007e80:	4605      	mov	r5, r0
 8007e82:	460c      	mov	r4, r1
 8007e84:	b913      	cbnz	r3, 8007e8c <_fflush_r+0x10>
 8007e86:	2500      	movs	r5, #0
 8007e88:	4628      	mov	r0, r5
 8007e8a:	bd38      	pop	{r3, r4, r5, pc}
 8007e8c:	b118      	cbz	r0, 8007e96 <_fflush_r+0x1a>
 8007e8e:	6a03      	ldr	r3, [r0, #32]
 8007e90:	b90b      	cbnz	r3, 8007e96 <_fflush_r+0x1a>
 8007e92:	f7fe fa2f 	bl	80062f4 <__sinit>
 8007e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d0f3      	beq.n	8007e86 <_fflush_r+0xa>
 8007e9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ea0:	07d0      	lsls	r0, r2, #31
 8007ea2:	d404      	bmi.n	8007eae <_fflush_r+0x32>
 8007ea4:	0599      	lsls	r1, r3, #22
 8007ea6:	d402      	bmi.n	8007eae <_fflush_r+0x32>
 8007ea8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007eaa:	f7fe fb3a 	bl	8006522 <__retarget_lock_acquire_recursive>
 8007eae:	4628      	mov	r0, r5
 8007eb0:	4621      	mov	r1, r4
 8007eb2:	f7ff ff5f 	bl	8007d74 <__sflush_r>
 8007eb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007eb8:	07da      	lsls	r2, r3, #31
 8007eba:	4605      	mov	r5, r0
 8007ebc:	d4e4      	bmi.n	8007e88 <_fflush_r+0xc>
 8007ebe:	89a3      	ldrh	r3, [r4, #12]
 8007ec0:	059b      	lsls	r3, r3, #22
 8007ec2:	d4e1      	bmi.n	8007e88 <_fflush_r+0xc>
 8007ec4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ec6:	f7fe fb2d 	bl	8006524 <__retarget_lock_release_recursive>
 8007eca:	e7dd      	b.n	8007e88 <_fflush_r+0xc>

08007ecc <memmove>:
 8007ecc:	4288      	cmp	r0, r1
 8007ece:	b510      	push	{r4, lr}
 8007ed0:	eb01 0402 	add.w	r4, r1, r2
 8007ed4:	d902      	bls.n	8007edc <memmove+0x10>
 8007ed6:	4284      	cmp	r4, r0
 8007ed8:	4623      	mov	r3, r4
 8007eda:	d807      	bhi.n	8007eec <memmove+0x20>
 8007edc:	1e43      	subs	r3, r0, #1
 8007ede:	42a1      	cmp	r1, r4
 8007ee0:	d008      	beq.n	8007ef4 <memmove+0x28>
 8007ee2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ee6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007eea:	e7f8      	b.n	8007ede <memmove+0x12>
 8007eec:	4402      	add	r2, r0
 8007eee:	4601      	mov	r1, r0
 8007ef0:	428a      	cmp	r2, r1
 8007ef2:	d100      	bne.n	8007ef6 <memmove+0x2a>
 8007ef4:	bd10      	pop	{r4, pc}
 8007ef6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007efa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007efe:	e7f7      	b.n	8007ef0 <memmove+0x24>

08007f00 <_sbrk_r>:
 8007f00:	b538      	push	{r3, r4, r5, lr}
 8007f02:	4d06      	ldr	r5, [pc, #24]	@ (8007f1c <_sbrk_r+0x1c>)
 8007f04:	2300      	movs	r3, #0
 8007f06:	4604      	mov	r4, r0
 8007f08:	4608      	mov	r0, r1
 8007f0a:	602b      	str	r3, [r5, #0]
 8007f0c:	f7f9 fe58 	bl	8001bc0 <_sbrk>
 8007f10:	1c43      	adds	r3, r0, #1
 8007f12:	d102      	bne.n	8007f1a <_sbrk_r+0x1a>
 8007f14:	682b      	ldr	r3, [r5, #0]
 8007f16:	b103      	cbz	r3, 8007f1a <_sbrk_r+0x1a>
 8007f18:	6023      	str	r3, [r4, #0]
 8007f1a:	bd38      	pop	{r3, r4, r5, pc}
 8007f1c:	20000990 	.word	0x20000990

08007f20 <memcpy>:
 8007f20:	440a      	add	r2, r1
 8007f22:	4291      	cmp	r1, r2
 8007f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f28:	d100      	bne.n	8007f2c <memcpy+0xc>
 8007f2a:	4770      	bx	lr
 8007f2c:	b510      	push	{r4, lr}
 8007f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f36:	4291      	cmp	r1, r2
 8007f38:	d1f9      	bne.n	8007f2e <memcpy+0xe>
 8007f3a:	bd10      	pop	{r4, pc}

08007f3c <__assert_func>:
 8007f3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f3e:	4614      	mov	r4, r2
 8007f40:	461a      	mov	r2, r3
 8007f42:	4b09      	ldr	r3, [pc, #36]	@ (8007f68 <__assert_func+0x2c>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4605      	mov	r5, r0
 8007f48:	68d8      	ldr	r0, [r3, #12]
 8007f4a:	b954      	cbnz	r4, 8007f62 <__assert_func+0x26>
 8007f4c:	4b07      	ldr	r3, [pc, #28]	@ (8007f6c <__assert_func+0x30>)
 8007f4e:	461c      	mov	r4, r3
 8007f50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f54:	9100      	str	r1, [sp, #0]
 8007f56:	462b      	mov	r3, r5
 8007f58:	4905      	ldr	r1, [pc, #20]	@ (8007f70 <__assert_func+0x34>)
 8007f5a:	f000 f86f 	bl	800803c <fiprintf>
 8007f5e:	f000 f87f 	bl	8008060 <abort>
 8007f62:	4b04      	ldr	r3, [pc, #16]	@ (8007f74 <__assert_func+0x38>)
 8007f64:	e7f4      	b.n	8007f50 <__assert_func+0x14>
 8007f66:	bf00      	nop
 8007f68:	20000018 	.word	0x20000018
 8007f6c:	080088de 	.word	0x080088de
 8007f70:	080088b0 	.word	0x080088b0
 8007f74:	080088a3 	.word	0x080088a3

08007f78 <_calloc_r>:
 8007f78:	b570      	push	{r4, r5, r6, lr}
 8007f7a:	fba1 5402 	umull	r5, r4, r1, r2
 8007f7e:	b93c      	cbnz	r4, 8007f90 <_calloc_r+0x18>
 8007f80:	4629      	mov	r1, r5
 8007f82:	f7ff f991 	bl	80072a8 <_malloc_r>
 8007f86:	4606      	mov	r6, r0
 8007f88:	b928      	cbnz	r0, 8007f96 <_calloc_r+0x1e>
 8007f8a:	2600      	movs	r6, #0
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	bd70      	pop	{r4, r5, r6, pc}
 8007f90:	220c      	movs	r2, #12
 8007f92:	6002      	str	r2, [r0, #0]
 8007f94:	e7f9      	b.n	8007f8a <_calloc_r+0x12>
 8007f96:	462a      	mov	r2, r5
 8007f98:	4621      	mov	r1, r4
 8007f9a:	f7fe fa44 	bl	8006426 <memset>
 8007f9e:	e7f5      	b.n	8007f8c <_calloc_r+0x14>

08007fa0 <__ascii_mbtowc>:
 8007fa0:	b082      	sub	sp, #8
 8007fa2:	b901      	cbnz	r1, 8007fa6 <__ascii_mbtowc+0x6>
 8007fa4:	a901      	add	r1, sp, #4
 8007fa6:	b142      	cbz	r2, 8007fba <__ascii_mbtowc+0x1a>
 8007fa8:	b14b      	cbz	r3, 8007fbe <__ascii_mbtowc+0x1e>
 8007faa:	7813      	ldrb	r3, [r2, #0]
 8007fac:	600b      	str	r3, [r1, #0]
 8007fae:	7812      	ldrb	r2, [r2, #0]
 8007fb0:	1e10      	subs	r0, r2, #0
 8007fb2:	bf18      	it	ne
 8007fb4:	2001      	movne	r0, #1
 8007fb6:	b002      	add	sp, #8
 8007fb8:	4770      	bx	lr
 8007fba:	4610      	mov	r0, r2
 8007fbc:	e7fb      	b.n	8007fb6 <__ascii_mbtowc+0x16>
 8007fbe:	f06f 0001 	mvn.w	r0, #1
 8007fc2:	e7f8      	b.n	8007fb6 <__ascii_mbtowc+0x16>

08007fc4 <_realloc_r>:
 8007fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc8:	4680      	mov	r8, r0
 8007fca:	4615      	mov	r5, r2
 8007fcc:	460c      	mov	r4, r1
 8007fce:	b921      	cbnz	r1, 8007fda <_realloc_r+0x16>
 8007fd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	f7ff b967 	b.w	80072a8 <_malloc_r>
 8007fda:	b92a      	cbnz	r2, 8007fe8 <_realloc_r+0x24>
 8007fdc:	f7ff f8f0 	bl	80071c0 <_free_r>
 8007fe0:	2400      	movs	r4, #0
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fe8:	f000 f841 	bl	800806e <_malloc_usable_size_r>
 8007fec:	4285      	cmp	r5, r0
 8007fee:	4606      	mov	r6, r0
 8007ff0:	d802      	bhi.n	8007ff8 <_realloc_r+0x34>
 8007ff2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007ff6:	d8f4      	bhi.n	8007fe2 <_realloc_r+0x1e>
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	4640      	mov	r0, r8
 8007ffc:	f7ff f954 	bl	80072a8 <_malloc_r>
 8008000:	4607      	mov	r7, r0
 8008002:	2800      	cmp	r0, #0
 8008004:	d0ec      	beq.n	8007fe0 <_realloc_r+0x1c>
 8008006:	42b5      	cmp	r5, r6
 8008008:	462a      	mov	r2, r5
 800800a:	4621      	mov	r1, r4
 800800c:	bf28      	it	cs
 800800e:	4632      	movcs	r2, r6
 8008010:	f7ff ff86 	bl	8007f20 <memcpy>
 8008014:	4621      	mov	r1, r4
 8008016:	4640      	mov	r0, r8
 8008018:	f7ff f8d2 	bl	80071c0 <_free_r>
 800801c:	463c      	mov	r4, r7
 800801e:	e7e0      	b.n	8007fe2 <_realloc_r+0x1e>

08008020 <__ascii_wctomb>:
 8008020:	4603      	mov	r3, r0
 8008022:	4608      	mov	r0, r1
 8008024:	b141      	cbz	r1, 8008038 <__ascii_wctomb+0x18>
 8008026:	2aff      	cmp	r2, #255	@ 0xff
 8008028:	d904      	bls.n	8008034 <__ascii_wctomb+0x14>
 800802a:	228a      	movs	r2, #138	@ 0x8a
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	f04f 30ff 	mov.w	r0, #4294967295
 8008032:	4770      	bx	lr
 8008034:	700a      	strb	r2, [r1, #0]
 8008036:	2001      	movs	r0, #1
 8008038:	4770      	bx	lr
	...

0800803c <fiprintf>:
 800803c:	b40e      	push	{r1, r2, r3}
 800803e:	b503      	push	{r0, r1, lr}
 8008040:	4601      	mov	r1, r0
 8008042:	ab03      	add	r3, sp, #12
 8008044:	4805      	ldr	r0, [pc, #20]	@ (800805c <fiprintf+0x20>)
 8008046:	f853 2b04 	ldr.w	r2, [r3], #4
 800804a:	6800      	ldr	r0, [r0, #0]
 800804c:	9301      	str	r3, [sp, #4]
 800804e:	f000 f83f 	bl	80080d0 <_vfiprintf_r>
 8008052:	b002      	add	sp, #8
 8008054:	f85d eb04 	ldr.w	lr, [sp], #4
 8008058:	b003      	add	sp, #12
 800805a:	4770      	bx	lr
 800805c:	20000018 	.word	0x20000018

08008060 <abort>:
 8008060:	b508      	push	{r3, lr}
 8008062:	2006      	movs	r0, #6
 8008064:	f000 fa08 	bl	8008478 <raise>
 8008068:	2001      	movs	r0, #1
 800806a:	f7f9 fd30 	bl	8001ace <_exit>

0800806e <_malloc_usable_size_r>:
 800806e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008072:	1f18      	subs	r0, r3, #4
 8008074:	2b00      	cmp	r3, #0
 8008076:	bfbc      	itt	lt
 8008078:	580b      	ldrlt	r3, [r1, r0]
 800807a:	18c0      	addlt	r0, r0, r3
 800807c:	4770      	bx	lr

0800807e <__sfputc_r>:
 800807e:	6893      	ldr	r3, [r2, #8]
 8008080:	3b01      	subs	r3, #1
 8008082:	2b00      	cmp	r3, #0
 8008084:	b410      	push	{r4}
 8008086:	6093      	str	r3, [r2, #8]
 8008088:	da08      	bge.n	800809c <__sfputc_r+0x1e>
 800808a:	6994      	ldr	r4, [r2, #24]
 800808c:	42a3      	cmp	r3, r4
 800808e:	db01      	blt.n	8008094 <__sfputc_r+0x16>
 8008090:	290a      	cmp	r1, #10
 8008092:	d103      	bne.n	800809c <__sfputc_r+0x1e>
 8008094:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008098:	f000 b932 	b.w	8008300 <__swbuf_r>
 800809c:	6813      	ldr	r3, [r2, #0]
 800809e:	1c58      	adds	r0, r3, #1
 80080a0:	6010      	str	r0, [r2, #0]
 80080a2:	7019      	strb	r1, [r3, #0]
 80080a4:	4608      	mov	r0, r1
 80080a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <__sfputs_r>:
 80080ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ae:	4606      	mov	r6, r0
 80080b0:	460f      	mov	r7, r1
 80080b2:	4614      	mov	r4, r2
 80080b4:	18d5      	adds	r5, r2, r3
 80080b6:	42ac      	cmp	r4, r5
 80080b8:	d101      	bne.n	80080be <__sfputs_r+0x12>
 80080ba:	2000      	movs	r0, #0
 80080bc:	e007      	b.n	80080ce <__sfputs_r+0x22>
 80080be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080c2:	463a      	mov	r2, r7
 80080c4:	4630      	mov	r0, r6
 80080c6:	f7ff ffda 	bl	800807e <__sfputc_r>
 80080ca:	1c43      	adds	r3, r0, #1
 80080cc:	d1f3      	bne.n	80080b6 <__sfputs_r+0xa>
 80080ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080080d0 <_vfiprintf_r>:
 80080d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d4:	460d      	mov	r5, r1
 80080d6:	b09d      	sub	sp, #116	@ 0x74
 80080d8:	4614      	mov	r4, r2
 80080da:	4698      	mov	r8, r3
 80080dc:	4606      	mov	r6, r0
 80080de:	b118      	cbz	r0, 80080e8 <_vfiprintf_r+0x18>
 80080e0:	6a03      	ldr	r3, [r0, #32]
 80080e2:	b90b      	cbnz	r3, 80080e8 <_vfiprintf_r+0x18>
 80080e4:	f7fe f906 	bl	80062f4 <__sinit>
 80080e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080ea:	07d9      	lsls	r1, r3, #31
 80080ec:	d405      	bmi.n	80080fa <_vfiprintf_r+0x2a>
 80080ee:	89ab      	ldrh	r3, [r5, #12]
 80080f0:	059a      	lsls	r2, r3, #22
 80080f2:	d402      	bmi.n	80080fa <_vfiprintf_r+0x2a>
 80080f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080f6:	f7fe fa14 	bl	8006522 <__retarget_lock_acquire_recursive>
 80080fa:	89ab      	ldrh	r3, [r5, #12]
 80080fc:	071b      	lsls	r3, r3, #28
 80080fe:	d501      	bpl.n	8008104 <_vfiprintf_r+0x34>
 8008100:	692b      	ldr	r3, [r5, #16]
 8008102:	b99b      	cbnz	r3, 800812c <_vfiprintf_r+0x5c>
 8008104:	4629      	mov	r1, r5
 8008106:	4630      	mov	r0, r6
 8008108:	f000 f938 	bl	800837c <__swsetup_r>
 800810c:	b170      	cbz	r0, 800812c <_vfiprintf_r+0x5c>
 800810e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008110:	07dc      	lsls	r4, r3, #31
 8008112:	d504      	bpl.n	800811e <_vfiprintf_r+0x4e>
 8008114:	f04f 30ff 	mov.w	r0, #4294967295
 8008118:	b01d      	add	sp, #116	@ 0x74
 800811a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800811e:	89ab      	ldrh	r3, [r5, #12]
 8008120:	0598      	lsls	r0, r3, #22
 8008122:	d4f7      	bmi.n	8008114 <_vfiprintf_r+0x44>
 8008124:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008126:	f7fe f9fd 	bl	8006524 <__retarget_lock_release_recursive>
 800812a:	e7f3      	b.n	8008114 <_vfiprintf_r+0x44>
 800812c:	2300      	movs	r3, #0
 800812e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008130:	2320      	movs	r3, #32
 8008132:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008136:	f8cd 800c 	str.w	r8, [sp, #12]
 800813a:	2330      	movs	r3, #48	@ 0x30
 800813c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80082ec <_vfiprintf_r+0x21c>
 8008140:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008144:	f04f 0901 	mov.w	r9, #1
 8008148:	4623      	mov	r3, r4
 800814a:	469a      	mov	sl, r3
 800814c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008150:	b10a      	cbz	r2, 8008156 <_vfiprintf_r+0x86>
 8008152:	2a25      	cmp	r2, #37	@ 0x25
 8008154:	d1f9      	bne.n	800814a <_vfiprintf_r+0x7a>
 8008156:	ebba 0b04 	subs.w	fp, sl, r4
 800815a:	d00b      	beq.n	8008174 <_vfiprintf_r+0xa4>
 800815c:	465b      	mov	r3, fp
 800815e:	4622      	mov	r2, r4
 8008160:	4629      	mov	r1, r5
 8008162:	4630      	mov	r0, r6
 8008164:	f7ff ffa2 	bl	80080ac <__sfputs_r>
 8008168:	3001      	adds	r0, #1
 800816a:	f000 80a7 	beq.w	80082bc <_vfiprintf_r+0x1ec>
 800816e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008170:	445a      	add	r2, fp
 8008172:	9209      	str	r2, [sp, #36]	@ 0x24
 8008174:	f89a 3000 	ldrb.w	r3, [sl]
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 809f 	beq.w	80082bc <_vfiprintf_r+0x1ec>
 800817e:	2300      	movs	r3, #0
 8008180:	f04f 32ff 	mov.w	r2, #4294967295
 8008184:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008188:	f10a 0a01 	add.w	sl, sl, #1
 800818c:	9304      	str	r3, [sp, #16]
 800818e:	9307      	str	r3, [sp, #28]
 8008190:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008194:	931a      	str	r3, [sp, #104]	@ 0x68
 8008196:	4654      	mov	r4, sl
 8008198:	2205      	movs	r2, #5
 800819a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800819e:	4853      	ldr	r0, [pc, #332]	@ (80082ec <_vfiprintf_r+0x21c>)
 80081a0:	f7f8 f826 	bl	80001f0 <memchr>
 80081a4:	9a04      	ldr	r2, [sp, #16]
 80081a6:	b9d8      	cbnz	r0, 80081e0 <_vfiprintf_r+0x110>
 80081a8:	06d1      	lsls	r1, r2, #27
 80081aa:	bf44      	itt	mi
 80081ac:	2320      	movmi	r3, #32
 80081ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081b2:	0713      	lsls	r3, r2, #28
 80081b4:	bf44      	itt	mi
 80081b6:	232b      	movmi	r3, #43	@ 0x2b
 80081b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081bc:	f89a 3000 	ldrb.w	r3, [sl]
 80081c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80081c2:	d015      	beq.n	80081f0 <_vfiprintf_r+0x120>
 80081c4:	9a07      	ldr	r2, [sp, #28]
 80081c6:	4654      	mov	r4, sl
 80081c8:	2000      	movs	r0, #0
 80081ca:	f04f 0c0a 	mov.w	ip, #10
 80081ce:	4621      	mov	r1, r4
 80081d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081d4:	3b30      	subs	r3, #48	@ 0x30
 80081d6:	2b09      	cmp	r3, #9
 80081d8:	d94b      	bls.n	8008272 <_vfiprintf_r+0x1a2>
 80081da:	b1b0      	cbz	r0, 800820a <_vfiprintf_r+0x13a>
 80081dc:	9207      	str	r2, [sp, #28]
 80081de:	e014      	b.n	800820a <_vfiprintf_r+0x13a>
 80081e0:	eba0 0308 	sub.w	r3, r0, r8
 80081e4:	fa09 f303 	lsl.w	r3, r9, r3
 80081e8:	4313      	orrs	r3, r2
 80081ea:	9304      	str	r3, [sp, #16]
 80081ec:	46a2      	mov	sl, r4
 80081ee:	e7d2      	b.n	8008196 <_vfiprintf_r+0xc6>
 80081f0:	9b03      	ldr	r3, [sp, #12]
 80081f2:	1d19      	adds	r1, r3, #4
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	9103      	str	r1, [sp, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	bfbb      	ittet	lt
 80081fc:	425b      	neglt	r3, r3
 80081fe:	f042 0202 	orrlt.w	r2, r2, #2
 8008202:	9307      	strge	r3, [sp, #28]
 8008204:	9307      	strlt	r3, [sp, #28]
 8008206:	bfb8      	it	lt
 8008208:	9204      	strlt	r2, [sp, #16]
 800820a:	7823      	ldrb	r3, [r4, #0]
 800820c:	2b2e      	cmp	r3, #46	@ 0x2e
 800820e:	d10a      	bne.n	8008226 <_vfiprintf_r+0x156>
 8008210:	7863      	ldrb	r3, [r4, #1]
 8008212:	2b2a      	cmp	r3, #42	@ 0x2a
 8008214:	d132      	bne.n	800827c <_vfiprintf_r+0x1ac>
 8008216:	9b03      	ldr	r3, [sp, #12]
 8008218:	1d1a      	adds	r2, r3, #4
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	9203      	str	r2, [sp, #12]
 800821e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008222:	3402      	adds	r4, #2
 8008224:	9305      	str	r3, [sp, #20]
 8008226:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80082fc <_vfiprintf_r+0x22c>
 800822a:	7821      	ldrb	r1, [r4, #0]
 800822c:	2203      	movs	r2, #3
 800822e:	4650      	mov	r0, sl
 8008230:	f7f7 ffde 	bl	80001f0 <memchr>
 8008234:	b138      	cbz	r0, 8008246 <_vfiprintf_r+0x176>
 8008236:	9b04      	ldr	r3, [sp, #16]
 8008238:	eba0 000a 	sub.w	r0, r0, sl
 800823c:	2240      	movs	r2, #64	@ 0x40
 800823e:	4082      	lsls	r2, r0
 8008240:	4313      	orrs	r3, r2
 8008242:	3401      	adds	r4, #1
 8008244:	9304      	str	r3, [sp, #16]
 8008246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800824a:	4829      	ldr	r0, [pc, #164]	@ (80082f0 <_vfiprintf_r+0x220>)
 800824c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008250:	2206      	movs	r2, #6
 8008252:	f7f7 ffcd 	bl	80001f0 <memchr>
 8008256:	2800      	cmp	r0, #0
 8008258:	d03f      	beq.n	80082da <_vfiprintf_r+0x20a>
 800825a:	4b26      	ldr	r3, [pc, #152]	@ (80082f4 <_vfiprintf_r+0x224>)
 800825c:	bb1b      	cbnz	r3, 80082a6 <_vfiprintf_r+0x1d6>
 800825e:	9b03      	ldr	r3, [sp, #12]
 8008260:	3307      	adds	r3, #7
 8008262:	f023 0307 	bic.w	r3, r3, #7
 8008266:	3308      	adds	r3, #8
 8008268:	9303      	str	r3, [sp, #12]
 800826a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800826c:	443b      	add	r3, r7
 800826e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008270:	e76a      	b.n	8008148 <_vfiprintf_r+0x78>
 8008272:	fb0c 3202 	mla	r2, ip, r2, r3
 8008276:	460c      	mov	r4, r1
 8008278:	2001      	movs	r0, #1
 800827a:	e7a8      	b.n	80081ce <_vfiprintf_r+0xfe>
 800827c:	2300      	movs	r3, #0
 800827e:	3401      	adds	r4, #1
 8008280:	9305      	str	r3, [sp, #20]
 8008282:	4619      	mov	r1, r3
 8008284:	f04f 0c0a 	mov.w	ip, #10
 8008288:	4620      	mov	r0, r4
 800828a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800828e:	3a30      	subs	r2, #48	@ 0x30
 8008290:	2a09      	cmp	r2, #9
 8008292:	d903      	bls.n	800829c <_vfiprintf_r+0x1cc>
 8008294:	2b00      	cmp	r3, #0
 8008296:	d0c6      	beq.n	8008226 <_vfiprintf_r+0x156>
 8008298:	9105      	str	r1, [sp, #20]
 800829a:	e7c4      	b.n	8008226 <_vfiprintf_r+0x156>
 800829c:	fb0c 2101 	mla	r1, ip, r1, r2
 80082a0:	4604      	mov	r4, r0
 80082a2:	2301      	movs	r3, #1
 80082a4:	e7f0      	b.n	8008288 <_vfiprintf_r+0x1b8>
 80082a6:	ab03      	add	r3, sp, #12
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	462a      	mov	r2, r5
 80082ac:	4b12      	ldr	r3, [pc, #72]	@ (80082f8 <_vfiprintf_r+0x228>)
 80082ae:	a904      	add	r1, sp, #16
 80082b0:	4630      	mov	r0, r6
 80082b2:	f7fd fbdb 	bl	8005a6c <_printf_float>
 80082b6:	4607      	mov	r7, r0
 80082b8:	1c78      	adds	r0, r7, #1
 80082ba:	d1d6      	bne.n	800826a <_vfiprintf_r+0x19a>
 80082bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082be:	07d9      	lsls	r1, r3, #31
 80082c0:	d405      	bmi.n	80082ce <_vfiprintf_r+0x1fe>
 80082c2:	89ab      	ldrh	r3, [r5, #12]
 80082c4:	059a      	lsls	r2, r3, #22
 80082c6:	d402      	bmi.n	80082ce <_vfiprintf_r+0x1fe>
 80082c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082ca:	f7fe f92b 	bl	8006524 <__retarget_lock_release_recursive>
 80082ce:	89ab      	ldrh	r3, [r5, #12]
 80082d0:	065b      	lsls	r3, r3, #25
 80082d2:	f53f af1f 	bmi.w	8008114 <_vfiprintf_r+0x44>
 80082d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082d8:	e71e      	b.n	8008118 <_vfiprintf_r+0x48>
 80082da:	ab03      	add	r3, sp, #12
 80082dc:	9300      	str	r3, [sp, #0]
 80082de:	462a      	mov	r2, r5
 80082e0:	4b05      	ldr	r3, [pc, #20]	@ (80082f8 <_vfiprintf_r+0x228>)
 80082e2:	a904      	add	r1, sp, #16
 80082e4:	4630      	mov	r0, r6
 80082e6:	f7fd fe59 	bl	8005f9c <_printf_i>
 80082ea:	e7e4      	b.n	80082b6 <_vfiprintf_r+0x1e6>
 80082ec:	08008888 	.word	0x08008888
 80082f0:	08008892 	.word	0x08008892
 80082f4:	08005a6d 	.word	0x08005a6d
 80082f8:	080080ad 	.word	0x080080ad
 80082fc:	0800888e 	.word	0x0800888e

08008300 <__swbuf_r>:
 8008300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008302:	460e      	mov	r6, r1
 8008304:	4614      	mov	r4, r2
 8008306:	4605      	mov	r5, r0
 8008308:	b118      	cbz	r0, 8008312 <__swbuf_r+0x12>
 800830a:	6a03      	ldr	r3, [r0, #32]
 800830c:	b90b      	cbnz	r3, 8008312 <__swbuf_r+0x12>
 800830e:	f7fd fff1 	bl	80062f4 <__sinit>
 8008312:	69a3      	ldr	r3, [r4, #24]
 8008314:	60a3      	str	r3, [r4, #8]
 8008316:	89a3      	ldrh	r3, [r4, #12]
 8008318:	071a      	lsls	r2, r3, #28
 800831a:	d501      	bpl.n	8008320 <__swbuf_r+0x20>
 800831c:	6923      	ldr	r3, [r4, #16]
 800831e:	b943      	cbnz	r3, 8008332 <__swbuf_r+0x32>
 8008320:	4621      	mov	r1, r4
 8008322:	4628      	mov	r0, r5
 8008324:	f000 f82a 	bl	800837c <__swsetup_r>
 8008328:	b118      	cbz	r0, 8008332 <__swbuf_r+0x32>
 800832a:	f04f 37ff 	mov.w	r7, #4294967295
 800832e:	4638      	mov	r0, r7
 8008330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	6922      	ldr	r2, [r4, #16]
 8008336:	1a98      	subs	r0, r3, r2
 8008338:	6963      	ldr	r3, [r4, #20]
 800833a:	b2f6      	uxtb	r6, r6
 800833c:	4283      	cmp	r3, r0
 800833e:	4637      	mov	r7, r6
 8008340:	dc05      	bgt.n	800834e <__swbuf_r+0x4e>
 8008342:	4621      	mov	r1, r4
 8008344:	4628      	mov	r0, r5
 8008346:	f7ff fd99 	bl	8007e7c <_fflush_r>
 800834a:	2800      	cmp	r0, #0
 800834c:	d1ed      	bne.n	800832a <__swbuf_r+0x2a>
 800834e:	68a3      	ldr	r3, [r4, #8]
 8008350:	3b01      	subs	r3, #1
 8008352:	60a3      	str	r3, [r4, #8]
 8008354:	6823      	ldr	r3, [r4, #0]
 8008356:	1c5a      	adds	r2, r3, #1
 8008358:	6022      	str	r2, [r4, #0]
 800835a:	701e      	strb	r6, [r3, #0]
 800835c:	6962      	ldr	r2, [r4, #20]
 800835e:	1c43      	adds	r3, r0, #1
 8008360:	429a      	cmp	r2, r3
 8008362:	d004      	beq.n	800836e <__swbuf_r+0x6e>
 8008364:	89a3      	ldrh	r3, [r4, #12]
 8008366:	07db      	lsls	r3, r3, #31
 8008368:	d5e1      	bpl.n	800832e <__swbuf_r+0x2e>
 800836a:	2e0a      	cmp	r6, #10
 800836c:	d1df      	bne.n	800832e <__swbuf_r+0x2e>
 800836e:	4621      	mov	r1, r4
 8008370:	4628      	mov	r0, r5
 8008372:	f7ff fd83 	bl	8007e7c <_fflush_r>
 8008376:	2800      	cmp	r0, #0
 8008378:	d0d9      	beq.n	800832e <__swbuf_r+0x2e>
 800837a:	e7d6      	b.n	800832a <__swbuf_r+0x2a>

0800837c <__swsetup_r>:
 800837c:	b538      	push	{r3, r4, r5, lr}
 800837e:	4b29      	ldr	r3, [pc, #164]	@ (8008424 <__swsetup_r+0xa8>)
 8008380:	4605      	mov	r5, r0
 8008382:	6818      	ldr	r0, [r3, #0]
 8008384:	460c      	mov	r4, r1
 8008386:	b118      	cbz	r0, 8008390 <__swsetup_r+0x14>
 8008388:	6a03      	ldr	r3, [r0, #32]
 800838a:	b90b      	cbnz	r3, 8008390 <__swsetup_r+0x14>
 800838c:	f7fd ffb2 	bl	80062f4 <__sinit>
 8008390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008394:	0719      	lsls	r1, r3, #28
 8008396:	d422      	bmi.n	80083de <__swsetup_r+0x62>
 8008398:	06da      	lsls	r2, r3, #27
 800839a:	d407      	bmi.n	80083ac <__swsetup_r+0x30>
 800839c:	2209      	movs	r2, #9
 800839e:	602a      	str	r2, [r5, #0]
 80083a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083a4:	81a3      	strh	r3, [r4, #12]
 80083a6:	f04f 30ff 	mov.w	r0, #4294967295
 80083aa:	e033      	b.n	8008414 <__swsetup_r+0x98>
 80083ac:	0758      	lsls	r0, r3, #29
 80083ae:	d512      	bpl.n	80083d6 <__swsetup_r+0x5a>
 80083b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083b2:	b141      	cbz	r1, 80083c6 <__swsetup_r+0x4a>
 80083b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083b8:	4299      	cmp	r1, r3
 80083ba:	d002      	beq.n	80083c2 <__swsetup_r+0x46>
 80083bc:	4628      	mov	r0, r5
 80083be:	f7fe feff 	bl	80071c0 <_free_r>
 80083c2:	2300      	movs	r3, #0
 80083c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80083c6:	89a3      	ldrh	r3, [r4, #12]
 80083c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80083cc:	81a3      	strh	r3, [r4, #12]
 80083ce:	2300      	movs	r3, #0
 80083d0:	6063      	str	r3, [r4, #4]
 80083d2:	6923      	ldr	r3, [r4, #16]
 80083d4:	6023      	str	r3, [r4, #0]
 80083d6:	89a3      	ldrh	r3, [r4, #12]
 80083d8:	f043 0308 	orr.w	r3, r3, #8
 80083dc:	81a3      	strh	r3, [r4, #12]
 80083de:	6923      	ldr	r3, [r4, #16]
 80083e0:	b94b      	cbnz	r3, 80083f6 <__swsetup_r+0x7a>
 80083e2:	89a3      	ldrh	r3, [r4, #12]
 80083e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80083e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083ec:	d003      	beq.n	80083f6 <__swsetup_r+0x7a>
 80083ee:	4621      	mov	r1, r4
 80083f0:	4628      	mov	r0, r5
 80083f2:	f000 f883 	bl	80084fc <__smakebuf_r>
 80083f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083fa:	f013 0201 	ands.w	r2, r3, #1
 80083fe:	d00a      	beq.n	8008416 <__swsetup_r+0x9a>
 8008400:	2200      	movs	r2, #0
 8008402:	60a2      	str	r2, [r4, #8]
 8008404:	6962      	ldr	r2, [r4, #20]
 8008406:	4252      	negs	r2, r2
 8008408:	61a2      	str	r2, [r4, #24]
 800840a:	6922      	ldr	r2, [r4, #16]
 800840c:	b942      	cbnz	r2, 8008420 <__swsetup_r+0xa4>
 800840e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008412:	d1c5      	bne.n	80083a0 <__swsetup_r+0x24>
 8008414:	bd38      	pop	{r3, r4, r5, pc}
 8008416:	0799      	lsls	r1, r3, #30
 8008418:	bf58      	it	pl
 800841a:	6962      	ldrpl	r2, [r4, #20]
 800841c:	60a2      	str	r2, [r4, #8]
 800841e:	e7f4      	b.n	800840a <__swsetup_r+0x8e>
 8008420:	2000      	movs	r0, #0
 8008422:	e7f7      	b.n	8008414 <__swsetup_r+0x98>
 8008424:	20000018 	.word	0x20000018

08008428 <_raise_r>:
 8008428:	291f      	cmp	r1, #31
 800842a:	b538      	push	{r3, r4, r5, lr}
 800842c:	4605      	mov	r5, r0
 800842e:	460c      	mov	r4, r1
 8008430:	d904      	bls.n	800843c <_raise_r+0x14>
 8008432:	2316      	movs	r3, #22
 8008434:	6003      	str	r3, [r0, #0]
 8008436:	f04f 30ff 	mov.w	r0, #4294967295
 800843a:	bd38      	pop	{r3, r4, r5, pc}
 800843c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800843e:	b112      	cbz	r2, 8008446 <_raise_r+0x1e>
 8008440:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008444:	b94b      	cbnz	r3, 800845a <_raise_r+0x32>
 8008446:	4628      	mov	r0, r5
 8008448:	f000 f830 	bl	80084ac <_getpid_r>
 800844c:	4622      	mov	r2, r4
 800844e:	4601      	mov	r1, r0
 8008450:	4628      	mov	r0, r5
 8008452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008456:	f000 b817 	b.w	8008488 <_kill_r>
 800845a:	2b01      	cmp	r3, #1
 800845c:	d00a      	beq.n	8008474 <_raise_r+0x4c>
 800845e:	1c59      	adds	r1, r3, #1
 8008460:	d103      	bne.n	800846a <_raise_r+0x42>
 8008462:	2316      	movs	r3, #22
 8008464:	6003      	str	r3, [r0, #0]
 8008466:	2001      	movs	r0, #1
 8008468:	e7e7      	b.n	800843a <_raise_r+0x12>
 800846a:	2100      	movs	r1, #0
 800846c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008470:	4620      	mov	r0, r4
 8008472:	4798      	blx	r3
 8008474:	2000      	movs	r0, #0
 8008476:	e7e0      	b.n	800843a <_raise_r+0x12>

08008478 <raise>:
 8008478:	4b02      	ldr	r3, [pc, #8]	@ (8008484 <raise+0xc>)
 800847a:	4601      	mov	r1, r0
 800847c:	6818      	ldr	r0, [r3, #0]
 800847e:	f7ff bfd3 	b.w	8008428 <_raise_r>
 8008482:	bf00      	nop
 8008484:	20000018 	.word	0x20000018

08008488 <_kill_r>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	4d07      	ldr	r5, [pc, #28]	@ (80084a8 <_kill_r+0x20>)
 800848c:	2300      	movs	r3, #0
 800848e:	4604      	mov	r4, r0
 8008490:	4608      	mov	r0, r1
 8008492:	4611      	mov	r1, r2
 8008494:	602b      	str	r3, [r5, #0]
 8008496:	f7f9 fb0a 	bl	8001aae <_kill>
 800849a:	1c43      	adds	r3, r0, #1
 800849c:	d102      	bne.n	80084a4 <_kill_r+0x1c>
 800849e:	682b      	ldr	r3, [r5, #0]
 80084a0:	b103      	cbz	r3, 80084a4 <_kill_r+0x1c>
 80084a2:	6023      	str	r3, [r4, #0]
 80084a4:	bd38      	pop	{r3, r4, r5, pc}
 80084a6:	bf00      	nop
 80084a8:	20000990 	.word	0x20000990

080084ac <_getpid_r>:
 80084ac:	f7f9 baf7 	b.w	8001a9e <_getpid>

080084b0 <__swhatbuf_r>:
 80084b0:	b570      	push	{r4, r5, r6, lr}
 80084b2:	460c      	mov	r4, r1
 80084b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084b8:	2900      	cmp	r1, #0
 80084ba:	b096      	sub	sp, #88	@ 0x58
 80084bc:	4615      	mov	r5, r2
 80084be:	461e      	mov	r6, r3
 80084c0:	da0d      	bge.n	80084de <__swhatbuf_r+0x2e>
 80084c2:	89a3      	ldrh	r3, [r4, #12]
 80084c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80084c8:	f04f 0100 	mov.w	r1, #0
 80084cc:	bf14      	ite	ne
 80084ce:	2340      	movne	r3, #64	@ 0x40
 80084d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80084d4:	2000      	movs	r0, #0
 80084d6:	6031      	str	r1, [r6, #0]
 80084d8:	602b      	str	r3, [r5, #0]
 80084da:	b016      	add	sp, #88	@ 0x58
 80084dc:	bd70      	pop	{r4, r5, r6, pc}
 80084de:	466a      	mov	r2, sp
 80084e0:	f000 f848 	bl	8008574 <_fstat_r>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	dbec      	blt.n	80084c2 <__swhatbuf_r+0x12>
 80084e8:	9901      	ldr	r1, [sp, #4]
 80084ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80084ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80084f2:	4259      	negs	r1, r3
 80084f4:	4159      	adcs	r1, r3
 80084f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80084fa:	e7eb      	b.n	80084d4 <__swhatbuf_r+0x24>

080084fc <__smakebuf_r>:
 80084fc:	898b      	ldrh	r3, [r1, #12]
 80084fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008500:	079d      	lsls	r5, r3, #30
 8008502:	4606      	mov	r6, r0
 8008504:	460c      	mov	r4, r1
 8008506:	d507      	bpl.n	8008518 <__smakebuf_r+0x1c>
 8008508:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800850c:	6023      	str	r3, [r4, #0]
 800850e:	6123      	str	r3, [r4, #16]
 8008510:	2301      	movs	r3, #1
 8008512:	6163      	str	r3, [r4, #20]
 8008514:	b003      	add	sp, #12
 8008516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008518:	ab01      	add	r3, sp, #4
 800851a:	466a      	mov	r2, sp
 800851c:	f7ff ffc8 	bl	80084b0 <__swhatbuf_r>
 8008520:	9f00      	ldr	r7, [sp, #0]
 8008522:	4605      	mov	r5, r0
 8008524:	4639      	mov	r1, r7
 8008526:	4630      	mov	r0, r6
 8008528:	f7fe febe 	bl	80072a8 <_malloc_r>
 800852c:	b948      	cbnz	r0, 8008542 <__smakebuf_r+0x46>
 800852e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008532:	059a      	lsls	r2, r3, #22
 8008534:	d4ee      	bmi.n	8008514 <__smakebuf_r+0x18>
 8008536:	f023 0303 	bic.w	r3, r3, #3
 800853a:	f043 0302 	orr.w	r3, r3, #2
 800853e:	81a3      	strh	r3, [r4, #12]
 8008540:	e7e2      	b.n	8008508 <__smakebuf_r+0xc>
 8008542:	89a3      	ldrh	r3, [r4, #12]
 8008544:	6020      	str	r0, [r4, #0]
 8008546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800854a:	81a3      	strh	r3, [r4, #12]
 800854c:	9b01      	ldr	r3, [sp, #4]
 800854e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008552:	b15b      	cbz	r3, 800856c <__smakebuf_r+0x70>
 8008554:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008558:	4630      	mov	r0, r6
 800855a:	f000 f81d 	bl	8008598 <_isatty_r>
 800855e:	b128      	cbz	r0, 800856c <__smakebuf_r+0x70>
 8008560:	89a3      	ldrh	r3, [r4, #12]
 8008562:	f023 0303 	bic.w	r3, r3, #3
 8008566:	f043 0301 	orr.w	r3, r3, #1
 800856a:	81a3      	strh	r3, [r4, #12]
 800856c:	89a3      	ldrh	r3, [r4, #12]
 800856e:	431d      	orrs	r5, r3
 8008570:	81a5      	strh	r5, [r4, #12]
 8008572:	e7cf      	b.n	8008514 <__smakebuf_r+0x18>

08008574 <_fstat_r>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	4d07      	ldr	r5, [pc, #28]	@ (8008594 <_fstat_r+0x20>)
 8008578:	2300      	movs	r3, #0
 800857a:	4604      	mov	r4, r0
 800857c:	4608      	mov	r0, r1
 800857e:	4611      	mov	r1, r2
 8008580:	602b      	str	r3, [r5, #0]
 8008582:	f7f9 faf4 	bl	8001b6e <_fstat>
 8008586:	1c43      	adds	r3, r0, #1
 8008588:	d102      	bne.n	8008590 <_fstat_r+0x1c>
 800858a:	682b      	ldr	r3, [r5, #0]
 800858c:	b103      	cbz	r3, 8008590 <_fstat_r+0x1c>
 800858e:	6023      	str	r3, [r4, #0]
 8008590:	bd38      	pop	{r3, r4, r5, pc}
 8008592:	bf00      	nop
 8008594:	20000990 	.word	0x20000990

08008598 <_isatty_r>:
 8008598:	b538      	push	{r3, r4, r5, lr}
 800859a:	4d06      	ldr	r5, [pc, #24]	@ (80085b4 <_isatty_r+0x1c>)
 800859c:	2300      	movs	r3, #0
 800859e:	4604      	mov	r4, r0
 80085a0:	4608      	mov	r0, r1
 80085a2:	602b      	str	r3, [r5, #0]
 80085a4:	f7f9 faf3 	bl	8001b8e <_isatty>
 80085a8:	1c43      	adds	r3, r0, #1
 80085aa:	d102      	bne.n	80085b2 <_isatty_r+0x1a>
 80085ac:	682b      	ldr	r3, [r5, #0]
 80085ae:	b103      	cbz	r3, 80085b2 <_isatty_r+0x1a>
 80085b0:	6023      	str	r3, [r4, #0]
 80085b2:	bd38      	pop	{r3, r4, r5, pc}
 80085b4:	20000990 	.word	0x20000990

080085b8 <_init>:
 80085b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ba:	bf00      	nop
 80085bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085be:	bc08      	pop	{r3}
 80085c0:	469e      	mov	lr, r3
 80085c2:	4770      	bx	lr

080085c4 <_fini>:
 80085c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c6:	bf00      	nop
 80085c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ca:	bc08      	pop	{r3}
 80085cc:	469e      	mov	lr, r3
 80085ce:	4770      	bx	lr
