
sht31_mac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008528  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  080086d8  080086d8  000096d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b50  08008b50  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008b50  08008b50  00009b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b58  08008b58  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b58  08008b58  00009b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b5c  08008b5c  00009b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008b60  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b8  200001d4  08008d34  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000098c  08008d34  0000a98c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136f4  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae8  00000000  00000000  0001d8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  000203e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d16  00000000  00000000  000214e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a7f4  00000000  00000000  000221f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015369  00000000  00000000  0004c9ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd8ff  00000000  00000000  00061d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015f652  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005874  00000000  00000000  0015f698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00164f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080086c0 	.word	0x080086c0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	080086c0 	.word	0x080086c0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96a 	b.w	8000f54 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14e      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	458c      	cmp	ip, r1
 8000ca8:	4686      	mov	lr, r0
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	d962      	bls.n	8000d76 <__udivmoddi4+0xde>
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0320 	rsb	r3, r2, #32
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f f68c 	uxth.w	r6, ip
 8000cce:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb04 f106 	mul.w	r1, r4, r6
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cee:	f080 8112 	bcs.w	8000f16 <__udivmoddi4+0x27e>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 810f 	bls.w	8000f16 <__udivmoddi4+0x27e>
 8000cf8:	3c02      	subs	r4, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	fa1f f38e 	uxth.w	r3, lr
 8000d02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d06:	fb07 1110 	mls	r1, r7, r0, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f606 	mul.w	r6, r0, r6
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x94>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1e:	f080 80fc 	bcs.w	8000f1a <__udivmoddi4+0x282>
 8000d22:	429e      	cmp	r6, r3
 8000d24:	f240 80f9 	bls.w	8000f1a <__udivmoddi4+0x282>
 8000d28:	4463      	add	r3, ip
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	2100      	movs	r1, #0
 8000d34:	b11d      	cbz	r5, 8000d3e <__udivmoddi4+0xa6>
 8000d36:	40d3      	lsrs	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d905      	bls.n	8000d52 <__udivmoddi4+0xba>
 8000d46:	b10d      	cbz	r5, 8000d4c <__udivmoddi4+0xb4>
 8000d48:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e7f5      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d52:	fab3 f183 	clz	r1, r3
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d146      	bne.n	8000de8 <__udivmoddi4+0x150>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xcc>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f0c0 80f0 	bcc.w	8000f44 <__udivmoddi4+0x2ac>
 8000d64:	1a86      	subs	r6, r0, r2
 8000d66:	eb64 0303 	sbc.w	r3, r4, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d0e6      	beq.n	8000d3e <__udivmoddi4+0xa6>
 8000d70:	e9c5 6300 	strd	r6, r3, [r5]
 8000d74:	e7e3      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x204>
 8000d7c:	eba1 040c 	sub.w	r4, r1, ip
 8000d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d84:	fa1f f78c 	uxth.w	r7, ip
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb08 4416 	mls	r4, r8, r6, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb07 f006 	mul.w	r0, r7, r6
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x11c>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x11a>
 8000dac:	4298      	cmp	r0, r3
 8000dae:	f200 80cd 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000db2:	4626      	mov	r6, r4
 8000db4:	1a1c      	subs	r4, r3, r0
 8000db6:	fa1f f38e 	uxth.w	r3, lr
 8000dba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb00 f707 	mul.w	r7, r0, r7
 8000dca:	429f      	cmp	r7, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x148>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x146>
 8000dd8:	429f      	cmp	r7, r3
 8000dda:	f200 80b0 	bhi.w	8000f3e <__udivmoddi4+0x2a6>
 8000dde:	4620      	mov	r0, r4
 8000de0:	1bdb      	subs	r3, r3, r7
 8000de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0x9c>
 8000de8:	f1c1 0620 	rsb	r6, r1, #32
 8000dec:	408b      	lsls	r3, r1
 8000dee:	fa22 f706 	lsr.w	r7, r2, r6
 8000df2:	431f      	orrs	r7, r3
 8000df4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000df8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dfc:	ea43 030c 	orr.w	r3, r3, ip
 8000e00:	40f4      	lsrs	r4, r6
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	0c38      	lsrs	r0, r7, #16
 8000e08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e10:	fa1f fc87 	uxth.w	ip, r7
 8000e14:	fb00 441e 	mls	r4, r0, lr, r4
 8000e18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e20:	45a1      	cmp	r9, r4
 8000e22:	fa02 f201 	lsl.w	r2, r2, r1
 8000e26:	d90a      	bls.n	8000e3e <__udivmoddi4+0x1a6>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e2e:	f080 8084 	bcs.w	8000f3a <__udivmoddi4+0x2a2>
 8000e32:	45a1      	cmp	r9, r4
 8000e34:	f240 8081 	bls.w	8000f3a <__udivmoddi4+0x2a2>
 8000e38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	eba4 0409 	sub.w	r4, r4, r9
 8000e42:	fa1f f983 	uxth.w	r9, r3
 8000e46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1d2>
 8000e5a:	193c      	adds	r4, r7, r4
 8000e5c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e60:	d267      	bcs.n	8000f32 <__udivmoddi4+0x29a>
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d965      	bls.n	8000f32 <__udivmoddi4+0x29a>
 8000e66:	3b02      	subs	r3, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e72:	eba4 040c 	sub.w	r4, r4, ip
 8000e76:	429c      	cmp	r4, r3
 8000e78:	46ce      	mov	lr, r9
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	d351      	bcc.n	8000f22 <__udivmoddi4+0x28a>
 8000e7e:	d04e      	beq.n	8000f1e <__udivmoddi4+0x286>
 8000e80:	b155      	cbz	r5, 8000e98 <__udivmoddi4+0x200>
 8000e82:	ebb8 030e 	subs.w	r3, r8, lr
 8000e86:	eb64 040c 	sbc.w	r4, r4, ip
 8000e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8e:	40cb      	lsrs	r3, r1
 8000e90:	431e      	orrs	r6, r3
 8000e92:	40cc      	lsrs	r4, r1
 8000e94:	e9c5 6400 	strd	r6, r4, [r5]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	e750      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eac:	4094      	lsls	r4, r2
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb8:	fa1f f78c 	uxth.w	r7, ip
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec4:	0c23      	lsrs	r3, r4, #16
 8000ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eca:	fb00 f107 	mul.w	r1, r0, r7
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x24c>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eda:	d22c      	bcs.n	8000f36 <__udivmoddi4+0x29e>
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d92a      	bls.n	8000f36 <__udivmoddi4+0x29e>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eec:	fb08 3311 	mls	r3, r8, r1, r3
 8000ef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef4:	fb01 f307 	mul.w	r3, r1, r7
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x276>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f04:	d213      	bcs.n	8000f2e <__udivmoddi4+0x296>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d911      	bls.n	8000f2e <__udivmoddi4+0x296>
 8000f0a:	3902      	subs	r1, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	1ae4      	subs	r4, r4, r3
 8000f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f14:	e739      	b.n	8000d8a <__udivmoddi4+0xf2>
 8000f16:	4604      	mov	r4, r0
 8000f18:	e6f0      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e706      	b.n	8000d2c <__udivmoddi4+0x94>
 8000f1e:	45c8      	cmp	r8, r9
 8000f20:	d2ae      	bcs.n	8000e80 <__udivmoddi4+0x1e8>
 8000f22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7a8      	b.n	8000e80 <__udivmoddi4+0x1e8>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	e7ed      	b.n	8000f0e <__udivmoddi4+0x276>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e799      	b.n	8000e6a <__udivmoddi4+0x1d2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	e7d4      	b.n	8000ee4 <__udivmoddi4+0x24c>
 8000f3a:	46d6      	mov	lr, sl
 8000f3c:	e77f      	b.n	8000e3e <__udivmoddi4+0x1a6>
 8000f3e:	4463      	add	r3, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e74d      	b.n	8000de0 <__udivmoddi4+0x148>
 8000f44:	4606      	mov	r6, r0
 8000f46:	4623      	mov	r3, r4
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e70f      	b.n	8000d6c <__udivmoddi4+0xd4>
 8000f4c:	3e02      	subs	r6, #2
 8000f4e:	4463      	add	r3, ip
 8000f50:	e730      	b.n	8000db4 <__udivmoddi4+0x11c>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f5a:	b0bd      	sub	sp, #244	@ 0xf4
 8000f5c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5e:	f000 ff24 	bl	8001daa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f62:	f000 f8f1 	bl	8001148 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f66:	f000 fa1f 	bl	80013a8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000f6a:	f000 f991 	bl	8001290 <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f6e:	f000 f9ed 	bl	800134c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000f72:	f000 f94d 	bl	8001210 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000f76:	f000 f9b9 	bl	80012ec <MX_USART3_UART_Init>
  // Create an instance of the SHT31_INFO structure for the sensor
  // Inicializar instancia del sensor
  sht31 sensor;

  // Inicializar sensor con address SHT31_ADDRESS_A, una medicion nostretch_medium
  SHT31_Status status_init = SHT31_Init(&sensor, &hi2c1, SHT31_ADDRESS_A, SHT31_MEASUREMENT_NOSTRETCH_MEDIUM);
 8000f7a:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8000f7e:	f242 430b 	movw	r3, #9227	@ 0x240b
 8000f82:	2244      	movs	r2, #68	@ 0x44
 8000f84:	4968      	ldr	r1, [pc, #416]	@ (8001128 <main+0x1d0>)
 8000f86:	f000 fbe5 	bl	8001754 <SHT31_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  if (status_init != SHT31_OK) {
 8000f90:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d018      	beq.n	8000fca <main+0x72>
      char fail_msg[] = "Error inicializando sensor!\n";
 8000f98:	4b64      	ldr	r3, [pc, #400]	@ (800112c <main+0x1d4>)
 8000f9a:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 8000f9e:	461d      	mov	r5, r3
 8000fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fa8:	c407      	stmia	r4!, {r0, r1, r2}
 8000faa:	7023      	strb	r3, [r4, #0]
      HAL_UART_Transmit(&huart3, (uint8_t*)fail_msg, strlen(fail_msg), HAL_MAX_DELAY);
 8000fac:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff f96d 	bl	8000290 <strlen>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	485b      	ldr	r0, [pc, #364]	@ (8001130 <main+0x1d8>)
 8000fc4:	f003 fd2e 	bl	8004a24 <HAL_UART_Transmit>
 8000fc8:	e015      	b.n	8000ff6 <main+0x9e>

  }else{
      char fail_msg[] = "Inicio correcto!\n";
 8000fca:	4b5a      	ldr	r3, [pc, #360]	@ (8001134 <main+0x1dc>)
 8000fcc:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8000fd0:	461d      	mov	r5, r3
 8000fd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd6:	682b      	ldr	r3, [r5, #0]
 8000fd8:	8023      	strh	r3, [r4, #0]
      HAL_UART_Transmit(&huart3, (uint8_t*)fail_msg, strlen(fail_msg), HAL_MAX_DELAY);
 8000fda:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff f956 	bl	8000290 <strlen>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff0:	484f      	ldr	r0, [pc, #316]	@ (8001130 <main+0x1d8>)
 8000ff2:	f003 fd17 	bl	8004a24 <HAL_UART_Transmit>
  }

  // Obtener ID del sensor
  SHT31_Status status_id = SHT31_GetID(&sensor);
 8000ff6:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fb78 	bl	80016f0 <SHT31_GetID>
 8001000:	4603      	mov	r3, r0
 8001002:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
  if (status_id == SHT31_OK) {
 8001006:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 800100a:	2b00      	cmp	r3, #0
 800100c:	d125      	bne.n	800105a <main+0x102>
	  char id_msg[100];
	  sprintf(id_msg, "Sensor ID: 0x%02X%02X%02X%02X%02X%02X\n",
			  sensor.id[0], sensor.id[1], sensor.id[2],
 800100e:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
	  sprintf(id_msg, "Sensor ID: 0x%02X%02X%02X%02X%02X%02X\n",
 8001012:	461d      	mov	r5, r3
			  sensor.id[0], sensor.id[1], sensor.id[2],
 8001014:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
	  sprintf(id_msg, "Sensor ID: 0x%02X%02X%02X%02X%02X%02X\n",
 8001018:	461e      	mov	r6, r3
			  sensor.id[0], sensor.id[1], sensor.id[2],
 800101a:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
			  sensor.id[3], sensor.id[4], sensor.id[5]);
 800101e:	f897 20d7 	ldrb.w	r2, [r7, #215]	@ 0xd7
 8001022:	f897 10d8 	ldrb.w	r1, [r7, #216]	@ 0xd8
 8001026:	f897 00d9 	ldrb.w	r0, [r7, #217]	@ 0xd9
	  sprintf(id_msg, "Sensor ID: 0x%02X%02X%02X%02X%02X%02X\n",
 800102a:	4604      	mov	r4, r0
 800102c:	4638      	mov	r0, r7
 800102e:	9403      	str	r4, [sp, #12]
 8001030:	9102      	str	r1, [sp, #8]
 8001032:	9201      	str	r2, [sp, #4]
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	4633      	mov	r3, r6
 8001038:	462a      	mov	r2, r5
 800103a:	493f      	ldr	r1, [pc, #252]	@ (8001138 <main+0x1e0>)
 800103c:	f005 fa14 	bl	8006468 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)id_msg, strlen(id_msg), HAL_MAX_DELAY);
 8001040:	463b      	mov	r3, r7
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff f924 	bl	8000290 <strlen>
 8001048:	4603      	mov	r3, r0
 800104a:	b29a      	uxth	r2, r3
 800104c:	4639      	mov	r1, r7
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	4837      	ldr	r0, [pc, #220]	@ (8001130 <main+0x1d8>)
 8001054:	f003 fce6 	bl	8004a24 <HAL_UART_Transmit>
 8001058:	e016      	b.n	8001088 <main+0x130>
  } else {
	  char id_fail_msg[] = "Falla en lectura del ID sensor!\n";
 800105a:	4b38      	ldr	r3, [pc, #224]	@ (800113c <main+0x1e4>)
 800105c:	463c      	mov	r4, r7
 800105e:	461d      	mov	r5, r3
 8001060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001068:	682b      	ldr	r3, [r5, #0]
 800106a:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t*)id_fail_msg, strlen(id_fail_msg), HAL_MAX_DELAY);
 800106c:	463b      	mov	r3, r7
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff f90e 	bl	8000290 <strlen>
 8001074:	4603      	mov	r3, r0
 8001076:	b29a      	uxth	r2, r3
 8001078:	4639      	mov	r1, r7
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	482c      	ldr	r0, [pc, #176]	@ (8001130 <main+0x1d8>)
 8001080:	f003 fcd0 	bl	8004a24 <HAL_UART_Transmit>
	  while (1);
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <main+0x12c>

  while (1){
	  float temperature, humidity;

	  // Leer temperatura y humedad
	  SHT31_Status status_read = SHT31_ReadTempHum(&sensor, &temperature, &humidity);
 8001088:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 800108c:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8001090:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001094:	4618      	mov	r0, r3
 8001096:	f000 fb78 	bl	800178a <SHT31_ReadTempHum>
 800109a:	4603      	mov	r3, r0
 800109c:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
	  if (status_read == SHT31_OK) {
 80010a0:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d122      	bne.n	80010ee <main+0x196>
		  char data_msg[50];
		  sprintf(data_msg, "Temp: %.2f C, Hum: %.2f %%\n", temperature, humidity);
 80010a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa5b 	bl	8000568 <__aeabi_f2d>
 80010b2:	4604      	mov	r4, r0
 80010b4:	460d      	mov	r5, r1
 80010b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fa54 	bl	8000568 <__aeabi_f2d>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4638      	mov	r0, r7
 80010c6:	e9cd 2300 	strd	r2, r3, [sp]
 80010ca:	4622      	mov	r2, r4
 80010cc:	462b      	mov	r3, r5
 80010ce:	491c      	ldr	r1, [pc, #112]	@ (8001140 <main+0x1e8>)
 80010d0:	f005 f9ca 	bl	8006468 <siprintf>
		  HAL_UART_Transmit(&huart3, (uint8_t*)data_msg, strlen(data_msg), HAL_MAX_DELAY);
 80010d4:	463b      	mov	r3, r7
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff f8da 	bl	8000290 <strlen>
 80010dc:	4603      	mov	r3, r0
 80010de:	b29a      	uxth	r2, r3
 80010e0:	4639      	mov	r1, r7
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	4812      	ldr	r0, [pc, #72]	@ (8001130 <main+0x1d8>)
 80010e8:	f003 fc9c 	bl	8004a24 <HAL_UART_Transmit>
 80010ec:	e017      	b.n	800111e <main+0x1c6>
	  } else {
		  char error_msg[] = "Error en lectura del sensor\n";
 80010ee:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <main+0x1ec>)
 80010f0:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 80010f4:	461d      	mov	r5, r3
 80010f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010fe:	c407      	stmia	r4!, {r0, r1, r2}
 8001100:	7023      	strb	r3, [r4, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t*)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 8001102:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff f8c2 	bl	8000290 <strlen>
 800110c:	4603      	mov	r3, r0
 800110e:	b29a      	uxth	r2, r3
 8001110:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8001114:	f04f 33ff 	mov.w	r3, #4294967295
 8001118:	4805      	ldr	r0, [pc, #20]	@ (8001130 <main+0x1d8>)
 800111a:	f003 fc83 	bl	8004a24 <HAL_UART_Transmit>
	  }

	  HAL_Delay(2000);
 800111e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001122:	f000 feb7 	bl	8001e94 <HAL_Delay>
  while (1){
 8001126:	e7af      	b.n	8001088 <main+0x130>
 8001128:	200001f0 	.word	0x200001f0
 800112c:	0800871c 	.word	0x0800871c
 8001130:	200002cc 	.word	0x200002cc
 8001134:	0800873c 	.word	0x0800873c
 8001138:	080086d8 	.word	0x080086d8
 800113c:	08008750 	.word	0x08008750
 8001140:	08008700 	.word	0x08008700
 8001144:	08008774 	.word	0x08008774

08001148 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b096      	sub	sp, #88	@ 0x58
 800114c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	2244      	movs	r2, #68	@ 0x44
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f005 f9e9 	bl	800652e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800115c:	463b      	mov	r3, r7
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800116a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800116e:	f002 f87d 	bl	800326c <HAL_PWREx_ControlVoltageScaling>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001178:	f000 f9ae 	bl	80014d8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
 800117c:	f002 f858 	bl	8003230 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001180:	4b22      	ldr	r3, [pc, #136]	@ (800120c <SystemClock_Config+0xc4>)
 8001182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001186:	4a21      	ldr	r2, [pc, #132]	@ (800120c <SystemClock_Config+0xc4>)
 8001188:	f023 0318 	bic.w	r3, r3, #24
 800118c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
 8001190:	2314      	movs	r3, #20
 8001192:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001194:	2301      	movs	r3, #1
 8001196:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001198:	2301      	movs	r3, #1
 800119a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011a0:	2360      	movs	r3, #96	@ 0x60
 80011a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a4:	2302      	movs	r3, #2
 80011a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011a8:	2301      	movs	r3, #1
 80011aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011ac:	2301      	movs	r3, #1
 80011ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 80011b0:	2347      	movs	r3, #71	@ 0x47
 80011b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b4:	2302      	movs	r3, #2
 80011b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80011bc:	2306      	movs	r3, #6
 80011be:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 f8c7 	bl	8003358 <HAL_RCC_OscConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011d0:	f000 f982 	bl	80014d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80011d4:	230f      	movs	r3, #15
 80011d6:	603b      	str	r3, [r7, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d8:	2303      	movs	r3, #3
 80011da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011ea:	463b      	mov	r3, r7
 80011ec:	2102      	movs	r1, #2
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 fccc 	bl	8003b8c <HAL_RCC_ClockConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80011fa:	f000 f96d 	bl	80014d8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
   */
  HAL_RCCEx_EnableMSIPLLMode();
 80011fe:	f003 f9e5 	bl	80045cc <HAL_RCCEx_EnableMSIPLLMode>
}
 8001202:	bf00      	nop
 8001204:	3758      	adds	r7, #88	@ 0x58
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000

08001210 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b1b      	ldr	r3, [pc, #108]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001216:	4a1c      	ldr	r2, [pc, #112]	@ (8001288 <MX_I2C1_Init+0x78>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00505B89;
 800121a:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <MX_I2C1_Init+0x74>)
 800121c:	4a1b      	ldr	r2, [pc, #108]	@ (800128c <MX_I2C1_Init+0x7c>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001220:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001226:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001228:	2201      	movs	r2, #1
 800122a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800122c:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <MX_I2C1_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001232:	4b14      	ldr	r3, [pc, #80]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001234:	2200      	movs	r2, #0
 8001236:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <MX_I2C1_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800123e:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001244:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124a:	480e      	ldr	r0, [pc, #56]	@ (8001284 <MX_I2C1_Init+0x74>)
 800124c:	f001 f8d6 	bl	80023fc <HAL_I2C_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001256:	f000 f93f 	bl	80014d8 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800125a:	2100      	movs	r1, #0
 800125c:	4809      	ldr	r0, [pc, #36]	@ (8001284 <MX_I2C1_Init+0x74>)
 800125e:	f001 fe1d 	bl	8002e9c <HAL_I2CEx_ConfigAnalogFilter>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001268:	f000 f936 	bl	80014d8 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800126c:	2100      	movs	r1, #0
 800126e:	4805      	ldr	r0, [pc, #20]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001270:	f001 fe5f 	bl	8002f32 <HAL_I2CEx_ConfigDigitalFilter>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800127a:	f000 f92d 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200001f0 	.word	0x200001f0
 8001288:	40005400 	.word	0x40005400
 800128c:	00505b89 	.word	0x00505b89

08001290 <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001294:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <MX_LPUART1_UART_Init+0x50>)
 8001296:	4a13      	ldr	r2, [pc, #76]	@ (80012e4 <MX_LPUART1_UART_Init+0x54>)
 8001298:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800129a:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <MX_LPUART1_UART_Init+0x50>)
 800129c:	4a12      	ldr	r2, [pc, #72]	@ (80012e8 <MX_LPUART1_UART_Init+0x58>)
 800129e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <MX_LPUART1_UART_Init+0x50>)
 80012a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80012a6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80012a8:	4b0d      	ldr	r3, [pc, #52]	@ (80012e0 <MX_LPUART1_UART_Init+0x50>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80012ae:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <MX_LPUART1_UART_Init+0x50>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80012b4:	4b0a      	ldr	r3, [pc, #40]	@ (80012e0 <MX_LPUART1_UART_Init+0x50>)
 80012b6:	220c      	movs	r2, #12
 80012b8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ba:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <MX_LPUART1_UART_Init+0x50>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012c0:	4b07      	ldr	r3, [pc, #28]	@ (80012e0 <MX_LPUART1_UART_Init+0x50>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c6:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <MX_LPUART1_UART_Init+0x50>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80012cc:	4804      	ldr	r0, [pc, #16]	@ (80012e0 <MX_LPUART1_UART_Init+0x50>)
 80012ce:	f003 fb5b 	bl	8004988 <HAL_UART_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80012d8:	f000 f8fe 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000244 	.word	0x20000244
 80012e4:	40008000 	.word	0x40008000
 80012e8:	00033324 	.word	0x00033324

080012ec <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012f0:	4b14      	ldr	r3, [pc, #80]	@ (8001344 <MX_USART3_UART_Init+0x58>)
 80012f2:	4a15      	ldr	r2, [pc, #84]	@ (8001348 <MX_USART3_UART_Init+0x5c>)
 80012f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012f6:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <MX_USART3_UART_Init+0x58>)
 80012f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012fe:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <MX_USART3_UART_Init+0x58>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001304:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <MX_USART3_UART_Init+0x58>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800130a:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <MX_USART3_UART_Init+0x58>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001310:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <MX_USART3_UART_Init+0x58>)
 8001312:	220c      	movs	r2, #12
 8001314:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001316:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <MX_USART3_UART_Init+0x58>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <MX_USART3_UART_Init+0x58>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001322:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <MX_USART3_UART_Init+0x58>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <MX_USART3_UART_Init+0x58>)
 800132a:	2200      	movs	r2, #0
 800132c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800132e:	4805      	ldr	r0, [pc, #20]	@ (8001344 <MX_USART3_UART_Init+0x58>)
 8001330:	f003 fb2a 	bl	8004988 <HAL_UART_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800133a:	f000 f8cd 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200002cc 	.word	0x200002cc
 8001348:	40004800 	.word	0x40004800

0800134c <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001350:	4b14      	ldr	r3, [pc, #80]	@ (80013a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001352:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001356:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001358:	4b12      	ldr	r3, [pc, #72]	@ (80013a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800135a:	2206      	movs	r2, #6
 800135c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800135e:	4b11      	ldr	r3, [pc, #68]	@ (80013a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001360:	2202      	movs	r2, #2
 8001362:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001364:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001366:	2202      	movs	r2, #2
 8001368:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800136a:	4b0e      	ldr	r3, [pc, #56]	@ (80013a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800136c:	2201      	movs	r2, #1
 800136e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001370:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001372:	2200      	movs	r2, #0
 8001374:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001376:	4b0b      	ldr	r3, [pc, #44]	@ (80013a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001378:	2200      	movs	r2, #0
 800137a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800137c:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800137e:	2201      	movs	r2, #1
 8001380:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001382:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001384:	2200      	movs	r2, #0
 8001386:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800138a:	2201      	movs	r2, #1
 800138c:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800138e:	4805      	ldr	r0, [pc, #20]	@ (80013a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001390:	f001 fe1b 	bl	8002fca <HAL_PCD_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800139a:	f000 f89d 	bl	80014d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000354 	.word	0x20000354

080013a8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	@ 0x28
 80013ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013be:	4b42      	ldr	r3, [pc, #264]	@ (80014c8 <MX_GPIO_Init+0x120>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c2:	4a41      	ldr	r2, [pc, #260]	@ (80014c8 <MX_GPIO_Init+0x120>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ca:	4b3f      	ldr	r3, [pc, #252]	@ (80014c8 <MX_GPIO_Init+0x120>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d6:	4b3c      	ldr	r3, [pc, #240]	@ (80014c8 <MX_GPIO_Init+0x120>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	4a3b      	ldr	r2, [pc, #236]	@ (80014c8 <MX_GPIO_Init+0x120>)
 80013dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e2:	4b39      	ldr	r3, [pc, #228]	@ (80014c8 <MX_GPIO_Init+0x120>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	4b36      	ldr	r3, [pc, #216]	@ (80014c8 <MX_GPIO_Init+0x120>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f2:	4a35      	ldr	r2, [pc, #212]	@ (80014c8 <MX_GPIO_Init+0x120>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fa:	4b33      	ldr	r3, [pc, #204]	@ (80014c8 <MX_GPIO_Init+0x120>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001406:	4b30      	ldr	r3, [pc, #192]	@ (80014c8 <MX_GPIO_Init+0x120>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140a:	4a2f      	ldr	r2, [pc, #188]	@ (80014c8 <MX_GPIO_Init+0x120>)
 800140c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001410:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001412:	4b2d      	ldr	r3, [pc, #180]	@ (80014c8 <MX_GPIO_Init+0x120>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800141e:	f001 ff8b 	bl	8003338 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	4b29      	ldr	r3, [pc, #164]	@ (80014c8 <MX_GPIO_Init+0x120>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001426:	4a28      	ldr	r2, [pc, #160]	@ (80014c8 <MX_GPIO_Init+0x120>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800142e:	4b26      	ldr	r3, [pc, #152]	@ (80014c8 <MX_GPIO_Init+0x120>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001440:	4822      	ldr	r0, [pc, #136]	@ (80014cc <MX_GPIO_Init+0x124>)
 8001442:	f000 ffc3 	bl	80023cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	2140      	movs	r1, #64	@ 0x40
 800144a:	4821      	ldr	r0, [pc, #132]	@ (80014d0 <MX_GPIO_Init+0x128>)
 800144c:	f000 ffbe 	bl	80023cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001450:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001456:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800145a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	481b      	ldr	r0, [pc, #108]	@ (80014d4 <MX_GPIO_Init+0x12c>)
 8001468:	f000 fe1e 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin | LD2_Pin;
 800146c:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8001470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	4811      	ldr	r0, [pc, #68]	@ (80014cc <MX_GPIO_Init+0x124>)
 8001486:	f000 fe0f 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800148a:	2320      	movs	r3, #32
 800148c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	480c      	ldr	r0, [pc, #48]	@ (80014d0 <MX_GPIO_Init+0x128>)
 800149e:	f000 fe03 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014a2:	2340      	movs	r3, #64	@ 0x40
 80014a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a6:	2301      	movs	r3, #1
 80014a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	4805      	ldr	r0, [pc, #20]	@ (80014d0 <MX_GPIO_Init+0x128>)
 80014ba:	f000 fdf5 	bl	80020a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80014be:	bf00      	nop
 80014c0:	3728      	adds	r7, #40	@ 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000
 80014cc:	48000400 	.word	0x48000400
 80014d0:	48001800 	.word	0x48001800
 80014d4:	48000800 	.word	0x48000800

080014d8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014dc:	b672      	cpsid	i
}
 80014de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <Error_Handler+0x8>

080014e4 <SHT31_SendCommand>:
#include "sht31.h"
#include <string.h>
#include <math.h>

static SHT31_Status SHT31_SendCommand(sht31* sensor, uint16_t command) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af02      	add	r7, sp, #8
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	807b      	strh	r3, [r7, #2]
    uint8_t cmd[2];
    cmd[0] = (command >> 8) & 0xFF;
 80014f0:	887b      	ldrh	r3, [r7, #2]
 80014f2:	0a1b      	lsrs	r3, r3, #8
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	733b      	strb	r3, [r7, #12]
    cmd[1] = command & 0xFF;
 80014fa:	887b      	ldrh	r3, [r7, #2]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	737b      	strb	r3, [r7, #13]

    if (HAL_I2C_Master_Transmit(sensor->hi2c, (sensor->address << 1), cmd, 2, HAL_MAX_DELAY) != HAL_OK) {
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6858      	ldr	r0, [r3, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	b299      	uxth	r1, r3
 800150c:	f107 020c 	add.w	r2, r7, #12
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	2302      	movs	r3, #2
 8001518:	f001 f80c 	bl	8002534 <HAL_I2C_Master_Transmit>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <SHT31_SendCommand+0x42>
        return SHT31_TRANSMIT_ERROR;
 8001522:	2302      	movs	r3, #2
 8001524:	e000      	b.n	8001528 <SHT31_SendCommand+0x44>
    }
    return SHT31_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <SHT31_CRC8>:

static uint8_t SHT31_CRC8(uint8_t *data, int len) {
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0xFF;
 800153a:	23ff      	movs	r3, #255	@ 0xff
 800153c:	73fb      	strb	r3, [r7, #15]
    const uint8_t poly = 0x31;
 800153e:	2331      	movs	r3, #49	@ 0x31
 8001540:	733b      	strb	r3, [r7, #12]

    for (uint8_t byte = len; byte; byte--) {
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	73bb      	strb	r3, [r7, #14]
 8001546:	e023      	b.n	8001590 <SHT31_CRC8+0x60>
        crc ^= *(data++);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	781a      	ldrb	r2, [r3, #0]
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	4053      	eors	r3, r2
 8001554:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 8; i; i--) {
 8001556:	2308      	movs	r3, #8
 8001558:	737b      	strb	r3, [r7, #13]
 800155a:	e013      	b.n	8001584 <SHT31_CRC8+0x54>
            crc = (crc & 0x80) ? (crc << 1) ^ poly : (crc << 1);
 800155c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001560:	2b00      	cmp	r3, #0
 8001562:	da08      	bge.n	8001576 <SHT31_CRC8+0x46>
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	b25a      	sxtb	r2, r3
 800156a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800156e:	4053      	eors	r3, r2
 8001570:	b25b      	sxtb	r3, r3
 8001572:	b2db      	uxtb	r3, r3
 8001574:	e002      	b.n	800157c <SHT31_CRC8+0x4c>
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	b2db      	uxtb	r3, r3
 800157c:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 8; i; i--) {
 800157e:	7b7b      	ldrb	r3, [r7, #13]
 8001580:	3b01      	subs	r3, #1
 8001582:	737b      	strb	r3, [r7, #13]
 8001584:	7b7b      	ldrb	r3, [r7, #13]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1e8      	bne.n	800155c <SHT31_CRC8+0x2c>
    for (uint8_t byte = len; byte; byte--) {
 800158a:	7bbb      	ldrb	r3, [r7, #14]
 800158c:	3b01      	subs	r3, #1
 800158e:	73bb      	strb	r3, [r7, #14]
 8001590:	7bbb      	ldrb	r3, [r7, #14]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1d8      	bne.n	8001548 <SHT31_CRC8+0x18>
        }
    }
    return crc;
 8001596:	7bfb      	ldrb	r3, [r7, #15]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	0000      	movs	r0, r0
	...

080015a8 <SHT31_ReadData>:

static SHT31_Status SHT31_ReadData(sht31* sensor) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af02      	add	r7, sp, #8
 80015ae:	6078      	str	r0, [r7, #4]
    uint8_t data[6];
    SHT31_Status status = SHT31_SendCommand(sensor, sensor->command);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	891b      	ldrh	r3, [r3, #8]
 80015b4:	4619      	mov	r1, r3
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ff94 	bl	80014e4 <SHT31_SendCommand>
 80015bc:	4603      	mov	r3, r0
 80015be:	75fb      	strb	r3, [r7, #23]
    if (status != SHT31_OK) {
 80015c0:	7dfb      	ldrb	r3, [r7, #23]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SHT31_ReadData+0x22>
        return status;
 80015c6:	7dfb      	ldrb	r3, [r7, #23]
 80015c8:	e080      	b.n	80016cc <SHT31_ReadData+0x124>
    }

    HAL_Delay(15);  // Espera a que se complete la medicion
 80015ca:	200f      	movs	r0, #15
 80015cc:	f000 fc62 	bl	8001e94 <HAL_Delay>

    if (HAL_I2C_Master_Receive(sensor->hi2c, (sensor->address << 1), data, 6, HAL_MAX_DELAY) != HAL_OK) {
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6858      	ldr	r0, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	b299      	uxth	r1, r3
 80015dc:	f107 020c 	add.w	r2, r7, #12
 80015e0:	f04f 33ff 	mov.w	r3, #4294967295
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	2306      	movs	r3, #6
 80015e8:	f001 f8bc 	bl	8002764 <HAL_I2C_Master_Receive>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <SHT31_ReadData+0x4e>
        return SHT31_RECEIVE_ERROR;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e06a      	b.n	80016cc <SHT31_ReadData+0x124>
    }
    // CRC temperatura
    if (SHT31_CRC8(data, 2) != data[2]) {
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	2102      	movs	r1, #2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff97 	bl	8001530 <SHT31_CRC8>
 8001602:	4603      	mov	r3, r0
 8001604:	461a      	mov	r2, r3
 8001606:	7bbb      	ldrb	r3, [r7, #14]
 8001608:	429a      	cmp	r2, r3
 800160a:	d001      	beq.n	8001610 <SHT31_ReadData+0x68>
        return SHT31_CRC_ERROR;
 800160c:	2307      	movs	r3, #7
 800160e:	e05d      	b.n	80016cc <SHT31_ReadData+0x124>
    }
    // CRC humedad
    if (SHT31_CRC8(data + 3, 2) != data[5]) {
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	3303      	adds	r3, #3
 8001616:	2102      	movs	r1, #2
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff89 	bl	8001530 <SHT31_CRC8>
 800161e:	4603      	mov	r3, r0
 8001620:	461a      	mov	r2, r3
 8001622:	7c7b      	ldrb	r3, [r7, #17]
 8001624:	429a      	cmp	r2, r3
 8001626:	d001      	beq.n	800162c <SHT31_ReadData+0x84>
        return SHT31_CRC_ERROR;
 8001628:	2307      	movs	r3, #7
 800162a:	e04f      	b.n	80016cc <SHT31_ReadData+0x124>
    }

    uint16_t temperature_raw = (data[0] << 8) | data[1];
 800162c:	7b3b      	ldrb	r3, [r7, #12]
 800162e:	021b      	lsls	r3, r3, #8
 8001630:	b21a      	sxth	r2, r3
 8001632:	7b7b      	ldrb	r3, [r7, #13]
 8001634:	b21b      	sxth	r3, r3
 8001636:	4313      	orrs	r3, r2
 8001638:	b21b      	sxth	r3, r3
 800163a:	82bb      	strh	r3, [r7, #20]
    uint16_t humidity_raw = (data[3] << 8) | data[4];
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	b21a      	sxth	r2, r3
 8001642:	7c3b      	ldrb	r3, [r7, #16]
 8001644:	b21b      	sxth	r3, r3
 8001646:	4313      	orrs	r3, r2
 8001648:	b21b      	sxth	r3, r3
 800164a:	827b      	strh	r3, [r7, #18]

    sensor->temperature = -45 + 175 * (temperature_raw / 65535.0);
 800164c:	8abb      	ldrh	r3, [r7, #20]
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ff78 	bl	8000544 <__aeabi_i2d>
 8001654:	a320      	add	r3, pc, #128	@ (adr r3, 80016d8 <SHT31_ReadData+0x130>)
 8001656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165a:	f7ff f907 	bl	800086c <__aeabi_ddiv>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	a320      	add	r3, pc, #128	@ (adr r3, 80016e8 <SHT31_ReadData+0x140>)
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	f7fe ffd4 	bl	8000618 <__aeabi_dmul>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	4b18      	ldr	r3, [pc, #96]	@ (80016e0 <SHT31_ReadData+0x138>)
 800167e:	f7fe fe13 	bl	80002a8 <__aeabi_dsub>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f7ff fa9d 	bl	8000bc8 <__aeabi_d2f>
 800168e:	4602      	mov	r2, r0
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	60da      	str	r2, [r3, #12]
    sensor->humidity = 100 * (humidity_raw / 65535.0);
 8001694:	8a7b      	ldrh	r3, [r7, #18]
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe ff54 	bl	8000544 <__aeabi_i2d>
 800169c:	a30e      	add	r3, pc, #56	@ (adr r3, 80016d8 <SHT31_ReadData+0x130>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	f7ff f8e3 	bl	800086c <__aeabi_ddiv>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <SHT31_ReadData+0x13c>)
 80016b4:	f7fe ffb0 	bl	8000618 <__aeabi_dmul>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f7ff fa82 	bl	8000bc8 <__aeabi_d2f>
 80016c4:	4602      	mov	r2, r0
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	611a      	str	r2, [r3, #16]

    return SHT31_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	f3af 8000 	nop.w
 80016d8:	00000000 	.word	0x00000000
 80016dc:	40efffe0 	.word	0x40efffe0
 80016e0:	40468000 	.word	0x40468000
 80016e4:	40590000 	.word	0x40590000
 80016e8:	00000000 	.word	0x00000000
 80016ec:	4065e000 	.word	0x4065e000

080016f0 <SHT31_GetID>:

SHT31_Status SHT31_GetID(sht31* sensor) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af02      	add	r7, sp, #8
 80016f6:	6078      	str	r0, [r7, #4]
    uint8_t serial_number[6];
    if (SHT31_SendCommand(sensor, SHT31_READ_SERIAL_NUMBER) != SHT31_OK) {
 80016f8:	f44f 515e 	mov.w	r1, #14208	@ 0x3780
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff fef1 	bl	80014e4 <SHT31_SendCommand>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <SHT31_GetID+0x1c>
        return SHT31_SEND_COMMAND_ID_ERROR;
 8001708:	2308      	movs	r3, #8
 800170a:	e01f      	b.n	800174c <SHT31_GetID+0x5c>
    }
    HAL_Delay(15);
 800170c:	200f      	movs	r0, #15
 800170e:	f000 fbc1 	bl	8001e94 <HAL_Delay>

    if (HAL_I2C_Master_Receive(sensor->hi2c, (sensor->address << 1), serial_number, 6, HAL_MAX_DELAY) != HAL_OK) {
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6858      	ldr	r0, [r3, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	b299      	uxth	r1, r3
 800171e:	f107 0208 	add.w	r2, r7, #8
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	2306      	movs	r3, #6
 800172a:	f001 f81b 	bl	8002764 <HAL_I2C_Master_Receive>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <SHT31_GetID+0x48>
        return SHT31_RECEIVE_ID_ERROR;
 8001734:	2309      	movs	r3, #9
 8001736:	e009      	b.n	800174c <SHT31_GetID+0x5c>
    }
    memcpy(sensor->id, serial_number, 6);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3314      	adds	r3, #20
 800173c:	461a      	mov	r2, r3
 800173e:	f107 0308 	add.w	r3, r7, #8
 8001742:	6818      	ldr	r0, [r3, #0]
 8001744:	6010      	str	r0, [r2, #0]
 8001746:	889b      	ldrh	r3, [r3, #4]
 8001748:	8093      	strh	r3, [r2, #4]
    return SHT31_OK;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <SHT31_Init>:

SHT31_Status SHT31_Init(sht31* sensor, I2C_HandleTypeDef* hi2c, uint8_t address, uint16_t command) {
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	4611      	mov	r1, r2
 8001760:	461a      	mov	r2, r3
 8001762:	460b      	mov	r3, r1
 8001764:	71fb      	strb	r3, [r7, #7]
 8001766:	4613      	mov	r3, r2
 8001768:	80bb      	strh	r3, [r7, #4]
    sensor->hi2c = hi2c;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	68ba      	ldr	r2, [r7, #8]
 800176e:	605a      	str	r2, [r3, #4]
    sensor->address = address;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	79fa      	ldrb	r2, [r7, #7]
 8001774:	701a      	strb	r2, [r3, #0]
    sensor->command = command;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	88ba      	ldrh	r2, [r7, #4]
 800177a:	811a      	strh	r2, [r3, #8]
    return SHT31_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <SHT31_ReadTempHum>:

SHT31_Status SHT31_ReadTempHum(sht31* sensor, float* temperature_out, float* humidity_out) {
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
    SHT31_Status status = SHT31_ReadData(sensor);
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f7ff ff06 	bl	80015a8 <SHT31_ReadData>
 800179c:	4603      	mov	r3, r0
 800179e:	75fb      	strb	r3, [r7, #23]
    if (status == SHT31_OK) {
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d107      	bne.n	80017b6 <SHT31_ReadTempHum+0x2c>
        *temperature_out = sensor->temperature;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	601a      	str	r2, [r3, #0]
        *humidity_out = sensor->humidity;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	691a      	ldr	r2, [r3, #16]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	601a      	str	r2, [r3, #0]
    }
    return status;
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <HAL_MspInit+0x44>)
 80017c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001804 <HAL_MspInit+0x44>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80017d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <HAL_MspInit+0x44>)
 80017d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <HAL_MspInit+0x44>)
 80017e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e2:	4a08      	ldr	r2, [pc, #32]	@ (8001804 <HAL_MspInit+0x44>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80017ea:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <HAL_MspInit+0x44>)
 80017ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000

08001808 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b0ac      	sub	sp, #176	@ 0xb0
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001820:	f107 0310 	add.w	r3, r7, #16
 8001824:	228c      	movs	r2, #140	@ 0x8c
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f004 fe80 	bl	800652e <memset>
  if(hi2c->Instance==I2C1)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a21      	ldr	r2, [pc, #132]	@ (80018b8 <HAL_I2C_MspInit+0xb0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d13b      	bne.n	80018b0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001838:	2340      	movs	r3, #64	@ 0x40
 800183a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800183c:	2300      	movs	r3, #0
 800183e:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	4618      	mov	r0, r3
 8001846:	f002 fbc5 	bl	8003fd4 <HAL_RCCEx_PeriphCLKConfig>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001850:	f7ff fe42 	bl	80014d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001854:	4b19      	ldr	r3, [pc, #100]	@ (80018bc <HAL_I2C_MspInit+0xb4>)
 8001856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001858:	4a18      	ldr	r2, [pc, #96]	@ (80018bc <HAL_I2C_MspInit+0xb4>)
 800185a:	f043 0302 	orr.w	r3, r3, #2
 800185e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001860:	4b16      	ldr	r3, [pc, #88]	@ (80018bc <HAL_I2C_MspInit+0xb4>)
 8001862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800186c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001870:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001874:	2312      	movs	r3, #18
 8001876:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001880:	2303      	movs	r3, #3
 8001882:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001886:	2304      	movs	r3, #4
 8001888:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001890:	4619      	mov	r1, r3
 8001892:	480b      	ldr	r0, [pc, #44]	@ (80018c0 <HAL_I2C_MspInit+0xb8>)
 8001894:	f000 fc08 	bl	80020a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001898:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <HAL_I2C_MspInit+0xb4>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189c:	4a07      	ldr	r2, [pc, #28]	@ (80018bc <HAL_I2C_MspInit+0xb4>)
 800189e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80018a4:	4b05      	ldr	r3, [pc, #20]	@ (80018bc <HAL_I2C_MspInit+0xb4>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018b0:	bf00      	nop
 80018b2:	37b0      	adds	r7, #176	@ 0xb0
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40005400 	.word	0x40005400
 80018bc:	40021000 	.word	0x40021000
 80018c0:	48000400 	.word	0x48000400

080018c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b0ae      	sub	sp, #184	@ 0xb8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018dc:	f107 0318 	add.w	r3, r7, #24
 80018e0:	228c      	movs	r2, #140	@ 0x8c
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f004 fe22 	bl	800652e <memset>
  if(huart->Instance==LPUART1)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a43      	ldr	r2, [pc, #268]	@ (80019fc <HAL_UART_MspInit+0x138>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d13e      	bne.n	8001972 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80018f4:	2320      	movs	r3, #32
 80018f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80018f8:	2300      	movs	r3, #0
 80018fa:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018fc:	f107 0318 	add.w	r3, r7, #24
 8001900:	4618      	mov	r0, r3
 8001902:	f002 fb67 	bl	8003fd4 <HAL_RCCEx_PeriphCLKConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800190c:	f7ff fde4 	bl	80014d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001910:	4b3b      	ldr	r3, [pc, #236]	@ (8001a00 <HAL_UART_MspInit+0x13c>)
 8001912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001914:	4a3a      	ldr	r2, [pc, #232]	@ (8001a00 <HAL_UART_MspInit+0x13c>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800191c:	4b38      	ldr	r3, [pc, #224]	@ (8001a00 <HAL_UART_MspInit+0x13c>)
 800191e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001928:	4b35      	ldr	r3, [pc, #212]	@ (8001a00 <HAL_UART_MspInit+0x13c>)
 800192a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192c:	4a34      	ldr	r2, [pc, #208]	@ (8001a00 <HAL_UART_MspInit+0x13c>)
 800192e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001932:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001934:	4b32      	ldr	r3, [pc, #200]	@ (8001a00 <HAL_UART_MspInit+0x13c>)
 8001936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001940:	f001 fcfa 	bl	8003338 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001944:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001948:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800195e:	2308      	movs	r3, #8
 8001960:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001964:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001968:	4619      	mov	r1, r3
 800196a:	4826      	ldr	r0, [pc, #152]	@ (8001a04 <HAL_UART_MspInit+0x140>)
 800196c:	f000 fb9c 	bl	80020a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001970:	e03f      	b.n	80019f2 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART3)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a24      	ldr	r2, [pc, #144]	@ (8001a08 <HAL_UART_MspInit+0x144>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d13a      	bne.n	80019f2 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800197c:	2304      	movs	r3, #4
 800197e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001980:	2300      	movs	r3, #0
 8001982:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001984:	f107 0318 	add.w	r3, r7, #24
 8001988:	4618      	mov	r0, r3
 800198a:	f002 fb23 	bl	8003fd4 <HAL_RCCEx_PeriphCLKConfig>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001994:	f7ff fda0 	bl	80014d8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001998:	4b19      	ldr	r3, [pc, #100]	@ (8001a00 <HAL_UART_MspInit+0x13c>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199c:	4a18      	ldr	r2, [pc, #96]	@ (8001a00 <HAL_UART_MspInit+0x13c>)
 800199e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80019a4:	4b16      	ldr	r3, [pc, #88]	@ (8001a00 <HAL_UART_MspInit+0x13c>)
 80019a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b0:	4b13      	ldr	r3, [pc, #76]	@ (8001a00 <HAL_UART_MspInit+0x13c>)
 80019b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b4:	4a12      	ldr	r2, [pc, #72]	@ (8001a00 <HAL_UART_MspInit+0x13c>)
 80019b6:	f043 0304 	orr.w	r3, r3, #4
 80019ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019bc:	4b10      	ldr	r3, [pc, #64]	@ (8001a00 <HAL_UART_MspInit+0x13c>)
 80019be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80019c8:	2330      	movs	r3, #48	@ 0x30
 80019ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019da:	2303      	movs	r3, #3
 80019dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019e0:	2307      	movs	r3, #7
 80019e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019ea:	4619      	mov	r1, r3
 80019ec:	4807      	ldr	r0, [pc, #28]	@ (8001a0c <HAL_UART_MspInit+0x148>)
 80019ee:	f000 fb5b 	bl	80020a8 <HAL_GPIO_Init>
}
 80019f2:	bf00      	nop
 80019f4:	37b8      	adds	r7, #184	@ 0xb8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40008000 	.word	0x40008000
 8001a00:	40021000 	.word	0x40021000
 8001a04:	48001800 	.word	0x48001800
 8001a08:	40004800 	.word	0x40004800
 8001a0c:	48000800 	.word	0x48000800

08001a10 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b0ae      	sub	sp, #184	@ 0xb8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a28:	f107 0318 	add.w	r3, r7, #24
 8001a2c:	228c      	movs	r2, #140	@ 0x8c
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f004 fd7c 	bl	800652e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a3e:	d17c      	bne.n	8001b3a <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001a40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a44:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001a46:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001a4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001a52:	2301      	movs	r3, #1
 8001a54:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001a56:	2318      	movs	r3, #24
 8001a58:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001a62:	2302      	movs	r3, #2
 8001a64:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001a66:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001a6a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a6c:	f107 0318 	add.w	r3, r7, #24
 8001a70:	4618      	mov	r0, r3
 8001a72:	f002 faaf 	bl	8003fd4 <HAL_RCCEx_PeriphCLKConfig>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001a7c:	f7ff fd2c 	bl	80014d8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a80:	4b30      	ldr	r3, [pc, #192]	@ (8001b44 <HAL_PCD_MspInit+0x134>)
 8001a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a84:	4a2f      	ldr	r2, [pc, #188]	@ (8001b44 <HAL_PCD_MspInit+0x134>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b44 <HAL_PCD_MspInit+0x134>)
 8001a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a98:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001a9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aac:	2303      	movs	r3, #3
 8001aae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ab2:	230a      	movs	r3, #10
 8001ab4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001abc:	4619      	mov	r1, r3
 8001abe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ac2:	f000 faf1 	bl	80020a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001ac6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001aca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ada:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae4:	f000 fae0 	bl	80020a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ae8:	4b16      	ldr	r3, [pc, #88]	@ (8001b44 <HAL_PCD_MspInit+0x134>)
 8001aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aec:	4a15      	ldr	r2, [pc, #84]	@ (8001b44 <HAL_PCD_MspInit+0x134>)
 8001aee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001af2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001af4:	4b13      	ldr	r3, [pc, #76]	@ (8001b44 <HAL_PCD_MspInit+0x134>)
 8001af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b00:	4b10      	ldr	r3, [pc, #64]	@ (8001b44 <HAL_PCD_MspInit+0x134>)
 8001b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d114      	bne.n	8001b36 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b44 <HAL_PCD_MspInit+0x134>)
 8001b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b10:	4a0c      	ldr	r2, [pc, #48]	@ (8001b44 <HAL_PCD_MspInit+0x134>)
 8001b12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b16:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b18:	4b0a      	ldr	r3, [pc, #40]	@ (8001b44 <HAL_PCD_MspInit+0x134>)
 8001b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001b24:	f001 fbf8 	bl	8003318 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b28:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_PCD_MspInit+0x134>)
 8001b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2c:	4a05      	ldr	r2, [pc, #20]	@ (8001b44 <HAL_PCD_MspInit+0x134>)
 8001b2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b32:	6593      	str	r3, [r2, #88]	@ 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001b34:	e001      	b.n	8001b3a <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001b36:	f001 fbef 	bl	8003318 <HAL_PWREx_EnableVddUSB>
}
 8001b3a:	bf00      	nop
 8001b3c:	37b8      	adds	r7, #184	@ 0xb8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000

08001b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <NMI_Handler+0x4>

08001b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <HardFault_Handler+0x4>

08001b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <MemManage_Handler+0x4>

08001b60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <BusFault_Handler+0x4>

08001b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <UsageFault_Handler+0x4>

08001b70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b9e:	f000 f959 	bl	8001e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0
  return 1;
 8001baa:	2301      	movs	r3, #1
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <_kill>:

int _kill(int pid, int sig)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bc0:	f004 fd08 	bl	80065d4 <__errno>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2216      	movs	r2, #22
 8001bc8:	601a      	str	r2, [r3, #0]
  return -1;
 8001bca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <_exit>:

void _exit (int status)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bde:	f04f 31ff 	mov.w	r1, #4294967295
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ffe7 	bl	8001bb6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <_exit+0x12>

08001bec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	e00a      	b.n	8001c14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bfe:	f3af 8000 	nop.w
 8001c02:	4601      	mov	r1, r0
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	60ba      	str	r2, [r7, #8]
 8001c0a:	b2ca      	uxtb	r2, r1
 8001c0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	3301      	adds	r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	dbf0      	blt.n	8001bfe <_read+0x12>
  }

  return len;
 8001c1c:	687b      	ldr	r3, [r7, #4]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	e009      	b.n	8001c4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	60ba      	str	r2, [r7, #8]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	dbf1      	blt.n	8001c38 <_write+0x12>
  }
  return len;
 8001c54:	687b      	ldr	r3, [r7, #4]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <_close>:

int _close(int file)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c86:	605a      	str	r2, [r3, #4]
  return 0;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <_isatty>:

int _isatty(int file)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c9e:	2301      	movs	r3, #1
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd0:	4a14      	ldr	r2, [pc, #80]	@ (8001d24 <_sbrk+0x5c>)
 8001cd2:	4b15      	ldr	r3, [pc, #84]	@ (8001d28 <_sbrk+0x60>)
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cdc:	4b13      	ldr	r3, [pc, #76]	@ (8001d2c <_sbrk+0x64>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d102      	bne.n	8001cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <_sbrk+0x64>)
 8001ce6:	4a12      	ldr	r2, [pc, #72]	@ (8001d30 <_sbrk+0x68>)
 8001ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cea:	4b10      	ldr	r3, [pc, #64]	@ (8001d2c <_sbrk+0x64>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d207      	bcs.n	8001d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf8:	f004 fc6c 	bl	80065d4 <__errno>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	220c      	movs	r2, #12
 8001d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295
 8001d06:	e009      	b.n	8001d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d08:	4b08      	ldr	r3, [pc, #32]	@ (8001d2c <_sbrk+0x64>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d0e:	4b07      	ldr	r3, [pc, #28]	@ (8001d2c <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	4a05      	ldr	r2, [pc, #20]	@ (8001d2c <_sbrk+0x64>)
 8001d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20050000 	.word	0x20050000
 8001d28:	00000400 	.word	0x00000400
 8001d2c:	20000838 	.word	0x20000838
 8001d30:	20000990 	.word	0x20000990

08001d34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d38:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <SystemInit+0x20>)
 8001d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d3e:	4a05      	ldr	r2, [pc, #20]	@ (8001d54 <SystemInit+0x20>)
 8001d40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d5c:	f7ff ffea 	bl	8001d34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d60:	480c      	ldr	r0, [pc, #48]	@ (8001d94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d62:	490d      	ldr	r1, [pc, #52]	@ (8001d98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d64:	4a0d      	ldr	r2, [pc, #52]	@ (8001d9c <LoopForever+0xe>)
  movs r3, #0
 8001d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d68:	e002      	b.n	8001d70 <LoopCopyDataInit>

08001d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d6e:	3304      	adds	r3, #4

08001d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d74:	d3f9      	bcc.n	8001d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d76:	4a0a      	ldr	r2, [pc, #40]	@ (8001da0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d78:	4c0a      	ldr	r4, [pc, #40]	@ (8001da4 <LoopForever+0x16>)
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d7c:	e001      	b.n	8001d82 <LoopFillZerobss>

08001d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d80:	3204      	adds	r2, #4

08001d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d84:	d3fb      	bcc.n	8001d7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d86:	f004 fc2b 	bl	80065e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d8a:	f7ff f8e5 	bl	8000f58 <main>

08001d8e <LoopForever>:

LoopForever:
    b LoopForever
 8001d8e:	e7fe      	b.n	8001d8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d90:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d98:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001d9c:	08008b60 	.word	0x08008b60
  ldr r2, =_sbss
 8001da0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001da4:	2000098c 	.word	0x2000098c

08001da8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001da8:	e7fe      	b.n	8001da8 <ADC1_2_IRQHandler>

08001daa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db4:	2003      	movs	r0, #3
 8001db6:	f000 f943 	bl	8002040 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f000 f80e 	bl	8001ddc <HAL_InitTick>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d002      	beq.n	8001dcc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	71fb      	strb	r3, [r7, #7]
 8001dca:	e001      	b.n	8001dd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dcc:	f7ff fcf8 	bl	80017c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001de8:	4b17      	ldr	r3, [pc, #92]	@ (8001e48 <HAL_InitTick+0x6c>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d023      	beq.n	8001e38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001df0:	4b16      	ldr	r3, [pc, #88]	@ (8001e4c <HAL_InitTick+0x70>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b14      	ldr	r3, [pc, #80]	@ (8001e48 <HAL_InitTick+0x6c>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 f941 	bl	800208e <HAL_SYSTICK_Config>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10f      	bne.n	8001e32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b0f      	cmp	r3, #15
 8001e16:	d809      	bhi.n	8001e2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e20:	f000 f919 	bl	8002056 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e24:	4a0a      	ldr	r2, [pc, #40]	@ (8001e50 <HAL_InitTick+0x74>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	e007      	b.n	8001e3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
 8001e30:	e004      	b.n	8001e3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	73fb      	strb	r3, [r7, #15]
 8001e36:	e001      	b.n	8001e3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000008 	.word	0x20000008
 8001e4c:	20000000 	.word	0x20000000
 8001e50:	20000004 	.word	0x20000004

08001e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e58:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <HAL_IncTick+0x20>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <HAL_IncTick+0x24>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4413      	add	r3, r2
 8001e64:	4a04      	ldr	r2, [pc, #16]	@ (8001e78 <HAL_IncTick+0x24>)
 8001e66:	6013      	str	r3, [r2, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000008 	.word	0x20000008
 8001e78:	2000083c 	.word	0x2000083c

08001e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e80:	4b03      	ldr	r3, [pc, #12]	@ (8001e90 <HAL_GetTick+0x14>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	2000083c 	.word	0x2000083c

08001e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e9c:	f7ff ffee 	bl	8001e7c <HAL_GetTick>
 8001ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eac:	d005      	beq.n	8001eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001eae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <HAL_Delay+0x44>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eba:	bf00      	nop
 8001ebc:	f7ff ffde 	bl	8001e7c <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d8f7      	bhi.n	8001ebc <HAL_Delay+0x28>
  {
  }
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000008 	.word	0x20000008

08001edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eec:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f0e:	4a04      	ldr	r2, [pc, #16]	@ (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	60d3      	str	r3, [r2, #12]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f28:	4b04      	ldr	r3, [pc, #16]	@ (8001f3c <__NVIC_GetPriorityGrouping+0x18>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	0a1b      	lsrs	r3, r3, #8
 8001f2e:	f003 0307 	and.w	r3, r3, #7
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	db0a      	blt.n	8001f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	490c      	ldr	r1, [pc, #48]	@ (8001f8c <__NVIC_SetPriority+0x4c>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	0112      	lsls	r2, r2, #4
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	440b      	add	r3, r1
 8001f64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f68:	e00a      	b.n	8001f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4908      	ldr	r1, [pc, #32]	@ (8001f90 <__NVIC_SetPriority+0x50>)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	3b04      	subs	r3, #4
 8001f78:	0112      	lsls	r2, r2, #4
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	761a      	strb	r2, [r3, #24]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000e100 	.word	0xe000e100
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	@ 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f1c3 0307 	rsb	r3, r3, #7
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	bf28      	it	cs
 8001fb2:	2304      	movcs	r3, #4
 8001fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d902      	bls.n	8001fc4 <NVIC_EncodePriority+0x30>
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3b03      	subs	r3, #3
 8001fc2:	e000      	b.n	8001fc6 <NVIC_EncodePriority+0x32>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	43d9      	mvns	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	4313      	orrs	r3, r2
         );
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3724      	adds	r7, #36	@ 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3b01      	subs	r3, #1
 8002008:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800200c:	d301      	bcc.n	8002012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800200e:	2301      	movs	r3, #1
 8002010:	e00f      	b.n	8002032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002012:	4a0a      	ldr	r2, [pc, #40]	@ (800203c <SysTick_Config+0x40>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800201a:	210f      	movs	r1, #15
 800201c:	f04f 30ff 	mov.w	r0, #4294967295
 8002020:	f7ff ff8e 	bl	8001f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002024:	4b05      	ldr	r3, [pc, #20]	@ (800203c <SysTick_Config+0x40>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202a:	4b04      	ldr	r3, [pc, #16]	@ (800203c <SysTick_Config+0x40>)
 800202c:	2207      	movs	r2, #7
 800202e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	e000e010 	.word	0xe000e010

08002040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff ff47 	bl	8001edc <__NVIC_SetPriorityGrouping>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b086      	sub	sp, #24
 800205a:	af00      	add	r7, sp, #0
 800205c:	4603      	mov	r3, r0
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002068:	f7ff ff5c 	bl	8001f24 <__NVIC_GetPriorityGrouping>
 800206c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	6978      	ldr	r0, [r7, #20]
 8002074:	f7ff ff8e 	bl	8001f94 <NVIC_EncodePriority>
 8002078:	4602      	mov	r2, r0
 800207a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff5d 	bl	8001f40 <__NVIC_SetPriority>
}
 8002086:	bf00      	nop
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff ffb0 	bl	8001ffc <SysTick_Config>
 800209c:	4603      	mov	r3, r0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b087      	sub	sp, #28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b6:	e166      	b.n	8002386 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	2101      	movs	r1, #1
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	fa01 f303 	lsl.w	r3, r1, r3
 80020c4:	4013      	ands	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 8158 	beq.w	8002380 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d005      	beq.n	80020e8 <HAL_GPIO_Init+0x40>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d130      	bne.n	800214a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800211e:	2201      	movs	r2, #1
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4013      	ands	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	091b      	lsrs	r3, r3, #4
 8002134:	f003 0201 	and.w	r2, r3, #1
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	2b03      	cmp	r3, #3
 8002154:	d017      	beq.n	8002186 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	2203      	movs	r2, #3
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	4013      	ands	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d123      	bne.n	80021da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	08da      	lsrs	r2, r3, #3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3208      	adds	r2, #8
 800219a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800219e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	220f      	movs	r2, #15
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	691a      	ldr	r2, [r3, #16]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	08da      	lsrs	r2, r3, #3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3208      	adds	r2, #8
 80021d4:	6939      	ldr	r1, [r7, #16]
 80021d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	2203      	movs	r2, #3
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	4013      	ands	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 0203 	and.w	r2, r3, #3
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 80b2 	beq.w	8002380 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221c:	4b61      	ldr	r3, [pc, #388]	@ (80023a4 <HAL_GPIO_Init+0x2fc>)
 800221e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002220:	4a60      	ldr	r2, [pc, #384]	@ (80023a4 <HAL_GPIO_Init+0x2fc>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	6613      	str	r3, [r2, #96]	@ 0x60
 8002228:	4b5e      	ldr	r3, [pc, #376]	@ (80023a4 <HAL_GPIO_Init+0x2fc>)
 800222a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002234:	4a5c      	ldr	r2, [pc, #368]	@ (80023a8 <HAL_GPIO_Init+0x300>)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	089b      	lsrs	r3, r3, #2
 800223a:	3302      	adds	r3, #2
 800223c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002240:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	220f      	movs	r2, #15
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800225e:	d02b      	beq.n	80022b8 <HAL_GPIO_Init+0x210>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a52      	ldr	r2, [pc, #328]	@ (80023ac <HAL_GPIO_Init+0x304>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d025      	beq.n	80022b4 <HAL_GPIO_Init+0x20c>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a51      	ldr	r2, [pc, #324]	@ (80023b0 <HAL_GPIO_Init+0x308>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d01f      	beq.n	80022b0 <HAL_GPIO_Init+0x208>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a50      	ldr	r2, [pc, #320]	@ (80023b4 <HAL_GPIO_Init+0x30c>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d019      	beq.n	80022ac <HAL_GPIO_Init+0x204>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a4f      	ldr	r2, [pc, #316]	@ (80023b8 <HAL_GPIO_Init+0x310>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d013      	beq.n	80022a8 <HAL_GPIO_Init+0x200>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a4e      	ldr	r2, [pc, #312]	@ (80023bc <HAL_GPIO_Init+0x314>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d00d      	beq.n	80022a4 <HAL_GPIO_Init+0x1fc>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a4d      	ldr	r2, [pc, #308]	@ (80023c0 <HAL_GPIO_Init+0x318>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d007      	beq.n	80022a0 <HAL_GPIO_Init+0x1f8>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a4c      	ldr	r2, [pc, #304]	@ (80023c4 <HAL_GPIO_Init+0x31c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d101      	bne.n	800229c <HAL_GPIO_Init+0x1f4>
 8002298:	2307      	movs	r3, #7
 800229a:	e00e      	b.n	80022ba <HAL_GPIO_Init+0x212>
 800229c:	2308      	movs	r3, #8
 800229e:	e00c      	b.n	80022ba <HAL_GPIO_Init+0x212>
 80022a0:	2306      	movs	r3, #6
 80022a2:	e00a      	b.n	80022ba <HAL_GPIO_Init+0x212>
 80022a4:	2305      	movs	r3, #5
 80022a6:	e008      	b.n	80022ba <HAL_GPIO_Init+0x212>
 80022a8:	2304      	movs	r3, #4
 80022aa:	e006      	b.n	80022ba <HAL_GPIO_Init+0x212>
 80022ac:	2303      	movs	r3, #3
 80022ae:	e004      	b.n	80022ba <HAL_GPIO_Init+0x212>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e002      	b.n	80022ba <HAL_GPIO_Init+0x212>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <HAL_GPIO_Init+0x212>
 80022b8:	2300      	movs	r3, #0
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	f002 0203 	and.w	r2, r2, #3
 80022c0:	0092      	lsls	r2, r2, #2
 80022c2:	4093      	lsls	r3, r2
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022ca:	4937      	ldr	r1, [pc, #220]	@ (80023a8 <HAL_GPIO_Init+0x300>)
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	089b      	lsrs	r3, r3, #2
 80022d0:	3302      	adds	r3, #2
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022d8:	4b3b      	ldr	r3, [pc, #236]	@ (80023c8 <HAL_GPIO_Init+0x320>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	43db      	mvns	r3, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4013      	ands	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022fc:	4a32      	ldr	r2, [pc, #200]	@ (80023c8 <HAL_GPIO_Init+0x320>)
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002302:	4b31      	ldr	r3, [pc, #196]	@ (80023c8 <HAL_GPIO_Init+0x320>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	43db      	mvns	r3, r3
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4013      	ands	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002326:	4a28      	ldr	r2, [pc, #160]	@ (80023c8 <HAL_GPIO_Init+0x320>)
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800232c:	4b26      	ldr	r3, [pc, #152]	@ (80023c8 <HAL_GPIO_Init+0x320>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	43db      	mvns	r3, r3
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4013      	ands	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002350:	4a1d      	ldr	r2, [pc, #116]	@ (80023c8 <HAL_GPIO_Init+0x320>)
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002356:	4b1c      	ldr	r3, [pc, #112]	@ (80023c8 <HAL_GPIO_Init+0x320>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	43db      	mvns	r3, r3
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4013      	ands	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800237a:	4a13      	ldr	r2, [pc, #76]	@ (80023c8 <HAL_GPIO_Init+0x320>)
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	3301      	adds	r3, #1
 8002384:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	fa22 f303 	lsr.w	r3, r2, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	f47f ae91 	bne.w	80020b8 <HAL_GPIO_Init+0x10>
  }
}
 8002396:	bf00      	nop
 8002398:	bf00      	nop
 800239a:	371c      	adds	r7, #28
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40010000 	.word	0x40010000
 80023ac:	48000400 	.word	0x48000400
 80023b0:	48000800 	.word	0x48000800
 80023b4:	48000c00 	.word	0x48000c00
 80023b8:	48001000 	.word	0x48001000
 80023bc:	48001400 	.word	0x48001400
 80023c0:	48001800 	.word	0x48001800
 80023c4:	48001c00 	.word	0x48001c00
 80023c8:	40010400 	.word	0x40010400

080023cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	807b      	strh	r3, [r7, #2]
 80023d8:	4613      	mov	r3, r2
 80023da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023dc:	787b      	ldrb	r3, [r7, #1]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023e2:	887a      	ldrh	r2, [r7, #2]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023e8:	e002      	b.n	80023f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023ea:	887a      	ldrh	r2, [r7, #2]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e08d      	b.n	800252a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d106      	bne.n	8002428 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff f9f0 	bl	8001808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2224      	movs	r2, #36	@ 0x24
 800242c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0201 	bic.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800244c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800245c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d107      	bne.n	8002476 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	e006      	b.n	8002484 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002482:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d108      	bne.n	800249e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	e007      	b.n	80024ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691a      	ldr	r2, [r3, #16]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69d9      	ldr	r1, [r3, #28]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1a      	ldr	r2, [r3, #32]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0201 	orr.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af02      	add	r7, sp, #8
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	461a      	mov	r2, r3
 8002540:	460b      	mov	r3, r1
 8002542:	817b      	strh	r3, [r7, #10]
 8002544:	4613      	mov	r3, r2
 8002546:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b20      	cmp	r3, #32
 8002552:	f040 80fd 	bne.w	8002750 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_I2C_Master_Transmit+0x30>
 8002560:	2302      	movs	r3, #2
 8002562:	e0f6      	b.n	8002752 <HAL_I2C_Master_Transmit+0x21e>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800256c:	f7ff fc86 	bl	8001e7c <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	2319      	movs	r3, #25
 8002578:	2201      	movs	r2, #1
 800257a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 fa0a 	bl	8002998 <I2C_WaitOnFlagUntilTimeout>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e0e1      	b.n	8002752 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2221      	movs	r2, #33	@ 0x21
 8002592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2210      	movs	r2, #16
 800259a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	893a      	ldrh	r2, [r7, #8]
 80025ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	2bff      	cmp	r3, #255	@ 0xff
 80025be:	d906      	bls.n	80025ce <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	22ff      	movs	r2, #255	@ 0xff
 80025c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80025c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	e007      	b.n	80025de <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80025d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025dc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d024      	beq.n	8002630 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ea:	781a      	ldrb	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002600:	b29b      	uxth	r3, r3
 8002602:	3b01      	subs	r3, #1
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800261a:	b2db      	uxtb	r3, r3
 800261c:	3301      	adds	r3, #1
 800261e:	b2da      	uxtb	r2, r3
 8002620:	8979      	ldrh	r1, [r7, #10]
 8002622:	4b4e      	ldr	r3, [pc, #312]	@ (800275c <HAL_I2C_Master_Transmit+0x228>)
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 fc05 	bl	8002e38 <I2C_TransferConfig>
 800262e:	e066      	b.n	80026fe <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002634:	b2da      	uxtb	r2, r3
 8002636:	8979      	ldrh	r1, [r7, #10]
 8002638:	4b48      	ldr	r3, [pc, #288]	@ (800275c <HAL_I2C_Master_Transmit+0x228>)
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 fbfa 	bl	8002e38 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002644:	e05b      	b.n	80026fe <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	6a39      	ldr	r1, [r7, #32]
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f9fd 	bl	8002a4a <I2C_WaitOnTXISFlagUntilTimeout>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e07b      	b.n	8002752 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265e:	781a      	ldrb	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002674:	b29b      	uxth	r3, r3
 8002676:	3b01      	subs	r3, #1
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002682:	3b01      	subs	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800268e:	b29b      	uxth	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d034      	beq.n	80026fe <HAL_I2C_Master_Transmit+0x1ca>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002698:	2b00      	cmp	r3, #0
 800269a:	d130      	bne.n	80026fe <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	2200      	movs	r2, #0
 80026a4:	2180      	movs	r1, #128	@ 0x80
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f976 	bl	8002998 <I2C_WaitOnFlagUntilTimeout>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e04d      	b.n	8002752 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	2bff      	cmp	r3, #255	@ 0xff
 80026be:	d90e      	bls.n	80026de <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	22ff      	movs	r2, #255	@ 0xff
 80026c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	8979      	ldrh	r1, [r7, #10]
 80026ce:	2300      	movs	r3, #0
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 fbae 	bl	8002e38 <I2C_TransferConfig>
 80026dc:	e00f      	b.n	80026fe <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	8979      	ldrh	r1, [r7, #10]
 80026f0:	2300      	movs	r3, #0
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 fb9d 	bl	8002e38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002702:	b29b      	uxth	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d19e      	bne.n	8002646 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	6a39      	ldr	r1, [r7, #32]
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 f9e3 	bl	8002ad8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e01a      	b.n	8002752 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2220      	movs	r2, #32
 8002722:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6859      	ldr	r1, [r3, #4]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	4b0c      	ldr	r3, [pc, #48]	@ (8002760 <HAL_I2C_Master_Transmit+0x22c>)
 8002730:	400b      	ands	r3, r1
 8002732:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800274c:	2300      	movs	r3, #0
 800274e:	e000      	b.n	8002752 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002750:	2302      	movs	r3, #2
  }
}
 8002752:	4618      	mov	r0, r3
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	80002000 	.word	0x80002000
 8002760:	fe00e800 	.word	0xfe00e800

08002764 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af02      	add	r7, sp, #8
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	607a      	str	r2, [r7, #4]
 800276e:	461a      	mov	r2, r3
 8002770:	460b      	mov	r3, r1
 8002772:	817b      	strh	r3, [r7, #10]
 8002774:	4613      	mov	r3, r2
 8002776:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b20      	cmp	r3, #32
 8002782:	f040 80db 	bne.w	800293c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <HAL_I2C_Master_Receive+0x30>
 8002790:	2302      	movs	r3, #2
 8002792:	e0d4      	b.n	800293e <HAL_I2C_Master_Receive+0x1da>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800279c:	f7ff fb6e 	bl	8001e7c <HAL_GetTick>
 80027a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	2319      	movs	r3, #25
 80027a8:	2201      	movs	r2, #1
 80027aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 f8f2 	bl	8002998 <I2C_WaitOnFlagUntilTimeout>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0bf      	b.n	800293e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2222      	movs	r2, #34	@ 0x22
 80027c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2210      	movs	r2, #16
 80027ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	893a      	ldrh	r2, [r7, #8]
 80027de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	2bff      	cmp	r3, #255	@ 0xff
 80027ee:	d90e      	bls.n	800280e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2201      	movs	r2, #1
 80027f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	8979      	ldrh	r1, [r7, #10]
 80027fe:	4b52      	ldr	r3, [pc, #328]	@ (8002948 <HAL_I2C_Master_Receive+0x1e4>)
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 fb16 	bl	8002e38 <I2C_TransferConfig>
 800280c:	e06d      	b.n	80028ea <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002812:	b29a      	uxth	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800281c:	b2da      	uxtb	r2, r3
 800281e:	8979      	ldrh	r1, [r7, #10]
 8002820:	4b49      	ldr	r3, [pc, #292]	@ (8002948 <HAL_I2C_Master_Receive+0x1e4>)
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 fb05 	bl	8002e38 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800282e:	e05c      	b.n	80028ea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	6a39      	ldr	r1, [r7, #32]
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 f993 	bl	8002b60 <I2C_WaitOnRXNEFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e07c      	b.n	800293e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	d034      	beq.n	80028ea <HAL_I2C_Master_Receive+0x186>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002884:	2b00      	cmp	r3, #0
 8002886:	d130      	bne.n	80028ea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	2200      	movs	r2, #0
 8002890:	2180      	movs	r1, #128	@ 0x80
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 f880 	bl	8002998 <I2C_WaitOnFlagUntilTimeout>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e04d      	b.n	800293e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	2bff      	cmp	r3, #255	@ 0xff
 80028aa:	d90e      	bls.n	80028ca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	22ff      	movs	r2, #255	@ 0xff
 80028b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	8979      	ldrh	r1, [r7, #10]
 80028ba:	2300      	movs	r3, #0
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 fab8 	bl	8002e38 <I2C_TransferConfig>
 80028c8:	e00f      	b.n	80028ea <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	8979      	ldrh	r1, [r7, #10]
 80028dc:	2300      	movs	r3, #0
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f000 faa7 	bl	8002e38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d19d      	bne.n	8002830 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	6a39      	ldr	r1, [r7, #32]
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 f8ed 	bl	8002ad8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e01a      	b.n	800293e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2220      	movs	r2, #32
 800290e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6859      	ldr	r1, [r3, #4]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	4b0c      	ldr	r3, [pc, #48]	@ (800294c <HAL_I2C_Master_Receive+0x1e8>)
 800291c:	400b      	ands	r3, r1
 800291e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	e000      	b.n	800293e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800293c:	2302      	movs	r3, #2
  }
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	80002400 	.word	0x80002400
 800294c:	fe00e800 	.word	0xfe00e800

08002950 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b02      	cmp	r3, #2
 8002964:	d103      	bne.n	800296e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2200      	movs	r2, #0
 800296c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b01      	cmp	r3, #1
 800297a:	d007      	beq.n	800298c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	619a      	str	r2, [r3, #24]
  }
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	4613      	mov	r3, r2
 80029a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029a8:	e03b      	b.n	8002a22 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	6839      	ldr	r1, [r7, #0]
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f962 	bl	8002c78 <I2C_IsErrorOccurred>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e041      	b.n	8002a42 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c4:	d02d      	beq.n	8002a22 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c6:	f7ff fa59 	bl	8001e7c <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d302      	bcc.n	80029dc <I2C_WaitOnFlagUntilTimeout+0x44>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d122      	bne.n	8002a22 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	4013      	ands	r3, r2
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	bf0c      	ite	eq
 80029ec:	2301      	moveq	r3, #1
 80029ee:	2300      	movne	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d113      	bne.n	8002a22 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fe:	f043 0220 	orr.w	r2, r3, #32
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e00f      	b.n	8002a42 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	699a      	ldr	r2, [r3, #24]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	bf0c      	ite	eq
 8002a32:	2301      	moveq	r3, #1
 8002a34:	2300      	movne	r3, #0
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	461a      	mov	r2, r3
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d0b4      	beq.n	80029aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a56:	e033      	b.n	8002ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	68b9      	ldr	r1, [r7, #8]
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 f90b 	bl	8002c78 <I2C_IsErrorOccurred>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e031      	b.n	8002ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a72:	d025      	beq.n	8002ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a74:	f7ff fa02 	bl	8001e7c <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d302      	bcc.n	8002a8a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d11a      	bne.n	8002ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d013      	beq.n	8002ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9c:	f043 0220 	orr.w	r2, r3, #32
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e007      	b.n	8002ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d1c4      	bne.n	8002a58 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ae4:	e02f      	b.n	8002b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f8c4 	bl	8002c78 <I2C_IsErrorOccurred>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e02d      	b.n	8002b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002afa:	f7ff f9bf 	bl	8001e7c <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d302      	bcc.n	8002b10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d11a      	bne.n	8002b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	f003 0320 	and.w	r3, r3, #32
 8002b1a:	2b20      	cmp	r3, #32
 8002b1c:	d013      	beq.n	8002b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b22:	f043 0220 	orr.w	r2, r3, #32
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e007      	b.n	8002b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d1c8      	bne.n	8002ae6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002b70:	e071      	b.n	8002c56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	68b9      	ldr	r1, [r7, #8]
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 f87e 	bl	8002c78 <I2C_IsErrorOccurred>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	f003 0320 	and.w	r3, r3, #32
 8002b90:	2b20      	cmp	r3, #32
 8002b92:	d13b      	bne.n	8002c0c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002b94:	7dfb      	ldrb	r3, [r7, #23]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d138      	bne.n	8002c0c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d105      	bne.n	8002bb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	2b10      	cmp	r3, #16
 8002bc0:	d121      	bne.n	8002c06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2210      	movs	r2, #16
 8002bc8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2204      	movs	r2, #4
 8002bce:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6859      	ldr	r1, [r3, #4]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	4b24      	ldr	r3, [pc, #144]	@ (8002c74 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002be4:	400b      	ands	r3, r1
 8002be6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	75fb      	strb	r3, [r7, #23]
 8002c04:	e002      	b.n	8002c0c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002c0c:	f7ff f936 	bl	8001e7c <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d302      	bcc.n	8002c22 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d119      	bne.n	8002c56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002c22:	7dfb      	ldrb	r3, [r7, #23]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d116      	bne.n	8002c56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d00f      	beq.n	8002c56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3a:	f043 0220 	orr.w	r2, r3, #32
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2220      	movs	r2, #32
 8002c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d002      	beq.n	8002c6a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002c64:	7dfb      	ldrb	r3, [r7, #23]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d083      	beq.n	8002b72 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	fe00e800 	.word	0xfe00e800

08002c78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08a      	sub	sp, #40	@ 0x28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d068      	beq.n	8002d76 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2210      	movs	r2, #16
 8002caa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cac:	e049      	b.n	8002d42 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d045      	beq.n	8002d42 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cb6:	f7ff f8e1 	bl	8001e7c <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d302      	bcc.n	8002ccc <I2C_IsErrorOccurred+0x54>
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d13a      	bne.n	8002d42 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cd6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002cde:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cee:	d121      	bne.n	8002d34 <I2C_IsErrorOccurred+0xbc>
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cf6:	d01d      	beq.n	8002d34 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002cf8:	7cfb      	ldrb	r3, [r7, #19]
 8002cfa:	2b20      	cmp	r3, #32
 8002cfc:	d01a      	beq.n	8002d34 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d0c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d0e:	f7ff f8b5 	bl	8001e7c <HAL_GetTick>
 8002d12:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d14:	e00e      	b.n	8002d34 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d16:	f7ff f8b1 	bl	8001e7c <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b19      	cmp	r3, #25
 8002d22:	d907      	bls.n	8002d34 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	f043 0320 	orr.w	r3, r3, #32
 8002d2a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002d32:	e006      	b.n	8002d42 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b20      	cmp	r3, #32
 8002d40:	d1e9      	bne.n	8002d16 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b20      	cmp	r3, #32
 8002d4e:	d003      	beq.n	8002d58 <I2C_IsErrorOccurred+0xe0>
 8002d50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0aa      	beq.n	8002cae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d103      	bne.n	8002d68 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2220      	movs	r2, #32
 8002d66:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	f043 0304 	orr.w	r3, r3, #4
 8002d6e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00b      	beq.n	8002da0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00b      	beq.n	8002dc2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	f043 0308 	orr.w	r3, r3, #8
 8002db0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002dba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00b      	beq.n	8002de4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	f043 0302 	orr.w	r3, r3, #2
 8002dd2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ddc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002de4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01c      	beq.n	8002e26 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f7ff fdaf 	bl	8002950 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6859      	ldr	r1, [r3, #4]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8002e34 <I2C_IsErrorOccurred+0x1bc>)
 8002dfe:	400b      	ands	r3, r1
 8002e00:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002e26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3728      	adds	r7, #40	@ 0x28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	fe00e800 	.word	0xfe00e800

08002e38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	607b      	str	r3, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	817b      	strh	r3, [r7, #10]
 8002e46:	4613      	mov	r3, r2
 8002e48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e4a:	897b      	ldrh	r3, [r7, #10]
 8002e4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e50:	7a7b      	ldrb	r3, [r7, #9]
 8002e52:	041b      	lsls	r3, r3, #16
 8002e54:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e58:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e66:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	0d5b      	lsrs	r3, r3, #21
 8002e72:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002e76:	4b08      	ldr	r3, [pc, #32]	@ (8002e98 <I2C_TransferConfig+0x60>)
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	ea02 0103 	and.w	r1, r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e8a:	bf00      	nop
 8002e8c:	371c      	adds	r7, #28
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	03ff63ff 	.word	0x03ff63ff

08002e9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b20      	cmp	r3, #32
 8002eb0:	d138      	bne.n	8002f24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e032      	b.n	8002f26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2224      	movs	r2, #36	@ 0x24
 8002ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0201 	bic.w	r2, r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002eee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6819      	ldr	r1, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	e000      	b.n	8002f26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f24:	2302      	movs	r3, #2
  }
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b085      	sub	sp, #20
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b20      	cmp	r3, #32
 8002f46:	d139      	bne.n	8002fbc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e033      	b.n	8002fbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2224      	movs	r2, #36	@ 0x24
 8002f62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0201 	bic.w	r2, r2, #1
 8002f74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f84:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	021b      	lsls	r3, r3, #8
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	e000      	b.n	8002fbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fbc:	2302      	movs	r3, #2
  }
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b086      	sub	sp, #24
 8002fce:	af02      	add	r7, sp, #8
 8002fd0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e101      	b.n	80031e0 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d106      	bne.n	8002ff6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7fe fd0d 	bl	8001a10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f002 fa95 	bl	8005538 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	7c1a      	ldrb	r2, [r3, #16]
 8003016:	f88d 2000 	strb.w	r2, [sp]
 800301a:	3304      	adds	r3, #4
 800301c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800301e:	f002 fa5e 	bl	80054de <USB_CoreInit>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0d5      	b.n	80031e0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2100      	movs	r1, #0
 800303a:	4618      	mov	r0, r3
 800303c:	f002 fa8d 	bl	800555a <USB_SetCurrentMode>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d005      	beq.n	8003052 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2202      	movs	r2, #2
 800304a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e0c6      	b.n	80031e0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003052:	2300      	movs	r3, #0
 8003054:	73fb      	strb	r3, [r7, #15]
 8003056:	e04a      	b.n	80030ee <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003058:	7bfa      	ldrb	r2, [r7, #15]
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	3315      	adds	r3, #21
 8003068:	2201      	movs	r2, #1
 800306a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800306c:	7bfa      	ldrb	r2, [r7, #15]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	3314      	adds	r3, #20
 800307c:	7bfa      	ldrb	r2, [r7, #15]
 800307e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003080:	7bfa      	ldrb	r2, [r7, #15]
 8003082:	7bfb      	ldrb	r3, [r7, #15]
 8003084:	b298      	uxth	r0, r3
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	332e      	adds	r3, #46	@ 0x2e
 8003094:	4602      	mov	r2, r0
 8003096:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003098:	7bfa      	ldrb	r2, [r7, #15]
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	3318      	adds	r3, #24
 80030a8:	2200      	movs	r2, #0
 80030aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030ac:	7bfa      	ldrb	r2, [r7, #15]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	4413      	add	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	331c      	adds	r3, #28
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030c0:	7bfa      	ldrb	r2, [r7, #15]
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	4613      	mov	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	4413      	add	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	3320      	adds	r3, #32
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030d4:	7bfa      	ldrb	r2, [r7, #15]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	3324      	adds	r3, #36	@ 0x24
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	3301      	adds	r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	791b      	ldrb	r3, [r3, #4]
 80030f2:	7bfa      	ldrb	r2, [r7, #15]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d3af      	bcc.n	8003058 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f8:	2300      	movs	r3, #0
 80030fa:	73fb      	strb	r3, [r7, #15]
 80030fc:	e044      	b.n	8003188 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030fe:	7bfa      	ldrb	r2, [r7, #15]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	4413      	add	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003114:	7bfa      	ldrb	r2, [r7, #15]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003126:	7bfa      	ldrb	r2, [r7, #15]
 8003128:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800312a:	7bfa      	ldrb	r2, [r7, #15]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800313c:	2200      	movs	r2, #0
 800313e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003140:	7bfa      	ldrb	r2, [r7, #15]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003156:	7bfa      	ldrb	r2, [r7, #15]
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4413      	add	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800316c:	7bfa      	ldrb	r2, [r7, #15]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	3301      	adds	r3, #1
 8003186:	73fb      	strb	r3, [r7, #15]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	791b      	ldrb	r3, [r3, #4]
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	429a      	cmp	r2, r3
 8003190:	d3b5      	bcc.n	80030fe <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	7c1a      	ldrb	r2, [r3, #16]
 800319a:	f88d 2000 	strb.w	r2, [sp]
 800319e:	3304      	adds	r3, #4
 80031a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031a2:	f002 fa27 	bl	80055f4 <USB_DevInit>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e013      	b.n	80031e0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	7b1b      	ldrb	r3, [r3, #12]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d102      	bne.n	80031d4 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f80a 	bl	80031e8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f002 fbcc 	bl	8005976 <USB_DevDisconnect>

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003216:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800321a:	f043 0303 	orr.w	r3, r3, #3
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003234:	4b05      	ldr	r3, [pc, #20]	@ (800324c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a04      	ldr	r2, [pc, #16]	@ (800324c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800323a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800323e:	6013      	str	r3, [r2, #0]
}
 8003240:	bf00      	nop
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40007000 	.word	0x40007000

08003250 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003254:	4b04      	ldr	r3, [pc, #16]	@ (8003268 <HAL_PWREx_GetVoltageRange+0x18>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800325c:	4618      	mov	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40007000 	.word	0x40007000

0800326c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800327a:	d130      	bne.n	80032de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800327c:	4b23      	ldr	r3, [pc, #140]	@ (800330c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003288:	d038      	beq.n	80032fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800328a:	4b20      	ldr	r3, [pc, #128]	@ (800330c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003292:	4a1e      	ldr	r2, [pc, #120]	@ (800330c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003294:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003298:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800329a:	4b1d      	ldr	r3, [pc, #116]	@ (8003310 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2232      	movs	r2, #50	@ 0x32
 80032a0:	fb02 f303 	mul.w	r3, r2, r3
 80032a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003314 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032a6:	fba2 2303 	umull	r2, r3, r2, r3
 80032aa:	0c9b      	lsrs	r3, r3, #18
 80032ac:	3301      	adds	r3, #1
 80032ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032b0:	e002      	b.n	80032b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	3b01      	subs	r3, #1
 80032b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032b8:	4b14      	ldr	r3, [pc, #80]	@ (800330c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c4:	d102      	bne.n	80032cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f2      	bne.n	80032b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032cc:	4b0f      	ldr	r3, [pc, #60]	@ (800330c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032d8:	d110      	bne.n	80032fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e00f      	b.n	80032fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032de:	4b0b      	ldr	r3, [pc, #44]	@ (800330c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ea:	d007      	beq.n	80032fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032ec:	4b07      	ldr	r3, [pc, #28]	@ (800330c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032f4:	4a05      	ldr	r2, [pc, #20]	@ (800330c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40007000 	.word	0x40007000
 8003310:	20000000 	.word	0x20000000
 8003314:	431bde83 	.word	0x431bde83

08003318 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800331c:	4b05      	ldr	r3, [pc, #20]	@ (8003334 <HAL_PWREx_EnableVddUSB+0x1c>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	4a04      	ldr	r2, [pc, #16]	@ (8003334 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003322:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003326:	6053      	str	r3, [r2, #4]
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40007000 	.word	0x40007000

08003338 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800333c:	4b05      	ldr	r3, [pc, #20]	@ (8003354 <HAL_PWREx_EnableVddIO2+0x1c>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	4a04      	ldr	r2, [pc, #16]	@ (8003354 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003342:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003346:	6053      	str	r3, [r2, #4]
}
 8003348:	bf00      	nop
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40007000 	.word	0x40007000

08003358 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d102      	bne.n	800336c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	f000 bc08 	b.w	8003b7c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800336c:	4b96      	ldr	r3, [pc, #600]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 030c 	and.w	r3, r3, #12
 8003374:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003376:	4b94      	ldr	r3, [pc, #592]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80e4 	beq.w	8003556 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d007      	beq.n	80033a4 <HAL_RCC_OscConfig+0x4c>
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	2b0c      	cmp	r3, #12
 8003398:	f040 808b 	bne.w	80034b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	f040 8087 	bne.w	80034b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033a4:	4b88      	ldr	r3, [pc, #544]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_RCC_OscConfig+0x64>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e3df      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1a      	ldr	r2, [r3, #32]
 80033c0:	4b81      	ldr	r3, [pc, #516]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d004      	beq.n	80033d6 <HAL_RCC_OscConfig+0x7e>
 80033cc:	4b7e      	ldr	r3, [pc, #504]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033d4:	e005      	b.n	80033e2 <HAL_RCC_OscConfig+0x8a>
 80033d6:	4b7c      	ldr	r3, [pc, #496]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 80033d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d223      	bcs.n	800342e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 fd92 	bl	8003f14 <RCC_SetFlashLatencyFromMSIRange>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e3c0      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033fa:	4b73      	ldr	r3, [pc, #460]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a72      	ldr	r2, [pc, #456]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003400:	f043 0308 	orr.w	r3, r3, #8
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	4b70      	ldr	r3, [pc, #448]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	496d      	ldr	r1, [pc, #436]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003414:	4313      	orrs	r3, r2
 8003416:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003418:	4b6b      	ldr	r3, [pc, #428]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	021b      	lsls	r3, r3, #8
 8003426:	4968      	ldr	r1, [pc, #416]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003428:	4313      	orrs	r3, r2
 800342a:	604b      	str	r3, [r1, #4]
 800342c:	e025      	b.n	800347a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800342e:	4b66      	ldr	r3, [pc, #408]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a65      	ldr	r2, [pc, #404]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003434:	f043 0308 	orr.w	r3, r3, #8
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	4b63      	ldr	r3, [pc, #396]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	4960      	ldr	r1, [pc, #384]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003448:	4313      	orrs	r3, r2
 800344a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800344c:	4b5e      	ldr	r3, [pc, #376]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	495b      	ldr	r1, [pc, #364]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 800345c:	4313      	orrs	r3, r2
 800345e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	4618      	mov	r0, r3
 800346c:	f000 fd52 	bl	8003f14 <RCC_SetFlashLatencyFromMSIRange>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e380      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800347a:	f000 fc87 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 800347e:	4602      	mov	r2, r0
 8003480:	4b51      	ldr	r3, [pc, #324]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	4950      	ldr	r1, [pc, #320]	@ (80035cc <HAL_RCC_OscConfig+0x274>)
 800348c:	5ccb      	ldrb	r3, [r1, r3]
 800348e:	f003 031f 	and.w	r3, r3, #31
 8003492:	fa22 f303 	lsr.w	r3, r2, r3
 8003496:	4a4e      	ldr	r2, [pc, #312]	@ (80035d0 <HAL_RCC_OscConfig+0x278>)
 8003498:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800349a:	4b4e      	ldr	r3, [pc, #312]	@ (80035d4 <HAL_RCC_OscConfig+0x27c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fe fc9c 	bl	8001ddc <HAL_InitTick>
 80034a4:	4603      	mov	r3, r0
 80034a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d052      	beq.n	8003554 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
 80034b0:	e364      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d032      	beq.n	8003520 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034ba:	4b43      	ldr	r3, [pc, #268]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a42      	ldr	r2, [pc, #264]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034c6:	f7fe fcd9 	bl	8001e7c <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034ce:	f7fe fcd5 	bl	8001e7c <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e34d      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034e0:	4b39      	ldr	r3, [pc, #228]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f0      	beq.n	80034ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034ec:	4b36      	ldr	r3, [pc, #216]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a35      	ldr	r2, [pc, #212]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 80034f2:	f043 0308 	orr.w	r3, r3, #8
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	4b33      	ldr	r3, [pc, #204]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	4930      	ldr	r1, [pc, #192]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003506:	4313      	orrs	r3, r2
 8003508:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800350a:	4b2f      	ldr	r3, [pc, #188]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	492b      	ldr	r1, [pc, #172]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 800351a:	4313      	orrs	r3, r2
 800351c:	604b      	str	r3, [r1, #4]
 800351e:	e01a      	b.n	8003556 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003520:	4b29      	ldr	r3, [pc, #164]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a28      	ldr	r2, [pc, #160]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003526:	f023 0301 	bic.w	r3, r3, #1
 800352a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800352c:	f7fe fca6 	bl	8001e7c <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003534:	f7fe fca2 	bl	8001e7c <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e31a      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003546:	4b20      	ldr	r3, [pc, #128]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x1dc>
 8003552:	e000      	b.n	8003556 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003554:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d073      	beq.n	800364a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b08      	cmp	r3, #8
 8003566:	d005      	beq.n	8003574 <HAL_RCC_OscConfig+0x21c>
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	2b0c      	cmp	r3, #12
 800356c:	d10e      	bne.n	800358c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2b03      	cmp	r3, #3
 8003572:	d10b      	bne.n	800358c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003574:	4b14      	ldr	r3, [pc, #80]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d063      	beq.n	8003648 <HAL_RCC_OscConfig+0x2f0>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d15f      	bne.n	8003648 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e2f7      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003594:	d106      	bne.n	80035a4 <HAL_RCC_OscConfig+0x24c>
 8003596:	4b0c      	ldr	r3, [pc, #48]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a0b      	ldr	r2, [pc, #44]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 800359c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	e025      	b.n	80035f0 <HAL_RCC_OscConfig+0x298>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035ac:	d114      	bne.n	80035d8 <HAL_RCC_OscConfig+0x280>
 80035ae:	4b06      	ldr	r3, [pc, #24]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a05      	ldr	r2, [pc, #20]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 80035b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	4b03      	ldr	r3, [pc, #12]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a02      	ldr	r2, [pc, #8]	@ (80035c8 <HAL_RCC_OscConfig+0x270>)
 80035c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e013      	b.n	80035f0 <HAL_RCC_OscConfig+0x298>
 80035c8:	40021000 	.word	0x40021000
 80035cc:	08008794 	.word	0x08008794
 80035d0:	20000000 	.word	0x20000000
 80035d4:	20000004 	.word	0x20000004
 80035d8:	4ba0      	ldr	r3, [pc, #640]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a9f      	ldr	r2, [pc, #636]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 80035de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	4b9d      	ldr	r3, [pc, #628]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a9c      	ldr	r2, [pc, #624]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 80035ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d013      	beq.n	8003620 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7fe fc40 	bl	8001e7c <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003600:	f7fe fc3c 	bl	8001e7c <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b64      	cmp	r3, #100	@ 0x64
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e2b4      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003612:	4b92      	ldr	r3, [pc, #584]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0x2a8>
 800361e:	e014      	b.n	800364a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fe fc2c 	bl	8001e7c <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003628:	f7fe fc28 	bl	8001e7c <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b64      	cmp	r3, #100	@ 0x64
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e2a0      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800363a:	4b88      	ldr	r3, [pc, #544]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0x2d0>
 8003646:	e000      	b.n	800364a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d060      	beq.n	8003718 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	2b04      	cmp	r3, #4
 800365a:	d005      	beq.n	8003668 <HAL_RCC_OscConfig+0x310>
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b0c      	cmp	r3, #12
 8003660:	d119      	bne.n	8003696 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d116      	bne.n	8003696 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003668:	4b7c      	ldr	r3, [pc, #496]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_RCC_OscConfig+0x328>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e27d      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003680:	4b76      	ldr	r3, [pc, #472]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	061b      	lsls	r3, r3, #24
 800368e:	4973      	ldr	r1, [pc, #460]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 8003690:	4313      	orrs	r3, r2
 8003692:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003694:	e040      	b.n	8003718 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d023      	beq.n	80036e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800369e:	4b6f      	ldr	r3, [pc, #444]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a6e      	ldr	r2, [pc, #440]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 80036a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036aa:	f7fe fbe7 	bl	8001e7c <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b2:	f7fe fbe3 	bl	8001e7c <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e25b      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036c4:	4b65      	ldr	r3, [pc, #404]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d0:	4b62      	ldr	r3, [pc, #392]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	061b      	lsls	r3, r3, #24
 80036de:	495f      	ldr	r1, [pc, #380]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	604b      	str	r3, [r1, #4]
 80036e4:	e018      	b.n	8003718 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036e6:	4b5d      	ldr	r3, [pc, #372]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a5c      	ldr	r2, [pc, #368]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 80036ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f2:	f7fe fbc3 	bl	8001e7c <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036fa:	f7fe fbbf 	bl	8001e7c <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e237      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800370c:	4b53      	ldr	r3, [pc, #332]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1f0      	bne.n	80036fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b00      	cmp	r3, #0
 8003722:	d03c      	beq.n	800379e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01c      	beq.n	8003766 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800372c:	4b4b      	ldr	r3, [pc, #300]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 800372e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003732:	4a4a      	ldr	r2, [pc, #296]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373c:	f7fe fb9e 	bl	8001e7c <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003744:	f7fe fb9a 	bl	8001e7c <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e212      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003756:	4b41      	ldr	r3, [pc, #260]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 8003758:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0ef      	beq.n	8003744 <HAL_RCC_OscConfig+0x3ec>
 8003764:	e01b      	b.n	800379e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003766:	4b3d      	ldr	r3, [pc, #244]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 8003768:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800376c:	4a3b      	ldr	r2, [pc, #236]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 800376e:	f023 0301 	bic.w	r3, r3, #1
 8003772:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003776:	f7fe fb81 	bl	8001e7c <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800377e:	f7fe fb7d 	bl	8001e7c <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e1f5      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003790:	4b32      	ldr	r3, [pc, #200]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 8003792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1ef      	bne.n	800377e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 80a6 	beq.w	80038f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ac:	2300      	movs	r3, #0
 80037ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037b0:	4b2a      	ldr	r3, [pc, #168]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 80037b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10d      	bne.n	80037d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037bc:	4b27      	ldr	r3, [pc, #156]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 80037be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c0:	4a26      	ldr	r2, [pc, #152]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 80037c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80037c8:	4b24      	ldr	r3, [pc, #144]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 80037ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037d0:	60bb      	str	r3, [r7, #8]
 80037d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d4:	2301      	movs	r3, #1
 80037d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037d8:	4b21      	ldr	r3, [pc, #132]	@ (8003860 <HAL_RCC_OscConfig+0x508>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d118      	bne.n	8003816 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003860 <HAL_RCC_OscConfig+0x508>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003860 <HAL_RCC_OscConfig+0x508>)
 80037ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f0:	f7fe fb44 	bl	8001e7c <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f8:	f7fe fb40 	bl	8001e7c <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e1b8      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800380a:	4b15      	ldr	r3, [pc, #84]	@ (8003860 <HAL_RCC_OscConfig+0x508>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d108      	bne.n	8003830 <HAL_RCC_OscConfig+0x4d8>
 800381e:	4b0f      	ldr	r3, [pc, #60]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003824:	4a0d      	ldr	r2, [pc, #52]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800382e:	e029      	b.n	8003884 <HAL_RCC_OscConfig+0x52c>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b05      	cmp	r3, #5
 8003836:	d115      	bne.n	8003864 <HAL_RCC_OscConfig+0x50c>
 8003838:	4b08      	ldr	r3, [pc, #32]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 800383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800383e:	4a07      	ldr	r2, [pc, #28]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 8003840:	f043 0304 	orr.w	r3, r3, #4
 8003844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003848:	4b04      	ldr	r3, [pc, #16]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384e:	4a03      	ldr	r2, [pc, #12]	@ (800385c <HAL_RCC_OscConfig+0x504>)
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003858:	e014      	b.n	8003884 <HAL_RCC_OscConfig+0x52c>
 800385a:	bf00      	nop
 800385c:	40021000 	.word	0x40021000
 8003860:	40007000 	.word	0x40007000
 8003864:	4b9d      	ldr	r3, [pc, #628]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386a:	4a9c      	ldr	r2, [pc, #624]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003874:	4b99      	ldr	r3, [pc, #612]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800387a:	4a98      	ldr	r2, [pc, #608]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 800387c:	f023 0304 	bic.w	r3, r3, #4
 8003880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d016      	beq.n	80038ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388c:	f7fe faf6 	bl	8001e7c <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003892:	e00a      	b.n	80038aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003894:	f7fe faf2 	bl	8001e7c <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e168      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038aa:	4b8c      	ldr	r3, [pc, #560]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0ed      	beq.n	8003894 <HAL_RCC_OscConfig+0x53c>
 80038b8:	e015      	b.n	80038e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ba:	f7fe fadf 	bl	8001e7c <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038c0:	e00a      	b.n	80038d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c2:	f7fe fadb 	bl	8001e7c <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e151      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038d8:	4b80      	ldr	r3, [pc, #512]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 80038da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1ed      	bne.n	80038c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038e6:	7ffb      	ldrb	r3, [r7, #31]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d105      	bne.n	80038f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ec:	4b7b      	ldr	r3, [pc, #492]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 80038ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f0:	4a7a      	ldr	r2, [pc, #488]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 80038f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038f6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0320 	and.w	r3, r3, #32
 8003900:	2b00      	cmp	r3, #0
 8003902:	d03c      	beq.n	800397e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003908:	2b00      	cmp	r3, #0
 800390a:	d01c      	beq.n	8003946 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800390c:	4b73      	ldr	r3, [pc, #460]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 800390e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003912:	4a72      	ldr	r2, [pc, #456]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391c:	f7fe faae 	bl	8001e7c <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003924:	f7fe faaa 	bl	8001e7c <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e122      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003936:	4b69      	ldr	r3, [pc, #420]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 8003938:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0ef      	beq.n	8003924 <HAL_RCC_OscConfig+0x5cc>
 8003944:	e01b      	b.n	800397e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003946:	4b65      	ldr	r3, [pc, #404]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 8003948:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800394c:	4a63      	ldr	r2, [pc, #396]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 800394e:	f023 0301 	bic.w	r3, r3, #1
 8003952:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003956:	f7fe fa91 	bl	8001e7c <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800395e:	f7fe fa8d 	bl	8001e7c <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e105      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003970:	4b5a      	ldr	r3, [pc, #360]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 8003972:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1ef      	bne.n	800395e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 80f9 	beq.w	8003b7a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398c:	2b02      	cmp	r3, #2
 800398e:	f040 80cf 	bne.w	8003b30 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003992:	4b52      	ldr	r3, [pc, #328]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f003 0203 	and.w	r2, r3, #3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d12c      	bne.n	8003a00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b0:	3b01      	subs	r3, #1
 80039b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d123      	bne.n	8003a00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d11b      	bne.n	8003a00 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d113      	bne.n	8003a00 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e2:	085b      	lsrs	r3, r3, #1
 80039e4:	3b01      	subs	r3, #1
 80039e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d109      	bne.n	8003a00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	085b      	lsrs	r3, r3, #1
 80039f8:	3b01      	subs	r3, #1
 80039fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d071      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	2b0c      	cmp	r3, #12
 8003a04:	d068      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a06:	4b35      	ldr	r3, [pc, #212]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d105      	bne.n	8003a1e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a12:	4b32      	ldr	r3, [pc, #200]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e0ac      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a22:	4b2e      	ldr	r3, [pc, #184]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a2d      	ldr	r2, [pc, #180]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 8003a28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a2c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a2e:	f7fe fa25 	bl	8001e7c <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a36:	f7fe fa21 	bl	8001e7c <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e099      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a48:	4b24      	ldr	r3, [pc, #144]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1f0      	bne.n	8003a36 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a54:	4b21      	ldr	r3, [pc, #132]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	4b21      	ldr	r3, [pc, #132]	@ (8003ae0 <HAL_RCC_OscConfig+0x788>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a64:	3a01      	subs	r2, #1
 8003a66:	0112      	lsls	r2, r2, #4
 8003a68:	4311      	orrs	r1, r2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a6e:	0212      	lsls	r2, r2, #8
 8003a70:	4311      	orrs	r1, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a76:	0852      	lsrs	r2, r2, #1
 8003a78:	3a01      	subs	r2, #1
 8003a7a:	0552      	lsls	r2, r2, #21
 8003a7c:	4311      	orrs	r1, r2
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003a82:	0852      	lsrs	r2, r2, #1
 8003a84:	3a01      	subs	r2, #1
 8003a86:	0652      	lsls	r2, r2, #25
 8003a88:	4311      	orrs	r1, r2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a8e:	06d2      	lsls	r2, r2, #27
 8003a90:	430a      	orrs	r2, r1
 8003a92:	4912      	ldr	r1, [pc, #72]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a98:	4b10      	ldr	r3, [pc, #64]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a0f      	ldr	r2, [pc, #60]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 8003a9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003aa2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	4a0c      	ldr	r2, [pc, #48]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 8003aaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003aae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ab0:	f7fe f9e4 	bl	8001e7c <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab8:	f7fe f9e0 	bl	8001e7c <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e058      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aca:	4b04      	ldr	r3, [pc, #16]	@ (8003adc <HAL_RCC_OscConfig+0x784>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0f0      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ad6:	e050      	b.n	8003b7a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e04f      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae4:	4b27      	ldr	r3, [pc, #156]	@ (8003b84 <HAL_RCC_OscConfig+0x82c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d144      	bne.n	8003b7a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003af0:	4b24      	ldr	r3, [pc, #144]	@ (8003b84 <HAL_RCC_OscConfig+0x82c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a23      	ldr	r2, [pc, #140]	@ (8003b84 <HAL_RCC_OscConfig+0x82c>)
 8003af6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003afa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003afc:	4b21      	ldr	r3, [pc, #132]	@ (8003b84 <HAL_RCC_OscConfig+0x82c>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4a20      	ldr	r2, [pc, #128]	@ (8003b84 <HAL_RCC_OscConfig+0x82c>)
 8003b02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b08:	f7fe f9b8 	bl	8001e7c <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b10:	f7fe f9b4 	bl	8001e7c <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e02c      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b22:	4b18      	ldr	r3, [pc, #96]	@ (8003b84 <HAL_RCC_OscConfig+0x82c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x7b8>
 8003b2e:	e024      	b.n	8003b7a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	2b0c      	cmp	r3, #12
 8003b34:	d01f      	beq.n	8003b76 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b36:	4b13      	ldr	r3, [pc, #76]	@ (8003b84 <HAL_RCC_OscConfig+0x82c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a12      	ldr	r2, [pc, #72]	@ (8003b84 <HAL_RCC_OscConfig+0x82c>)
 8003b3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b42:	f7fe f99b 	bl	8001e7c <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4a:	f7fe f997 	bl	8001e7c <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e00f      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b5c:	4b09      	ldr	r3, [pc, #36]	@ (8003b84 <HAL_RCC_OscConfig+0x82c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1f0      	bne.n	8003b4a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b68:	4b06      	ldr	r3, [pc, #24]	@ (8003b84 <HAL_RCC_OscConfig+0x82c>)
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	4905      	ldr	r1, [pc, #20]	@ (8003b84 <HAL_RCC_OscConfig+0x82c>)
 8003b6e:	4b06      	ldr	r3, [pc, #24]	@ (8003b88 <HAL_RCC_OscConfig+0x830>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	60cb      	str	r3, [r1, #12]
 8003b74:	e001      	b.n	8003b7a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3720      	adds	r7, #32
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40021000 	.word	0x40021000
 8003b88:	feeefffc 	.word	0xfeeefffc

08003b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e0e7      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba0:	4b75      	ldr	r3, [pc, #468]	@ (8003d78 <HAL_RCC_ClockConfig+0x1ec>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d910      	bls.n	8003bd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bae:	4b72      	ldr	r3, [pc, #456]	@ (8003d78 <HAL_RCC_ClockConfig+0x1ec>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f023 0207 	bic.w	r2, r3, #7
 8003bb6:	4970      	ldr	r1, [pc, #448]	@ (8003d78 <HAL_RCC_ClockConfig+0x1ec>)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bbe:	4b6e      	ldr	r3, [pc, #440]	@ (8003d78 <HAL_RCC_ClockConfig+0x1ec>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0cf      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d010      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	4b66      	ldr	r3, [pc, #408]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d908      	bls.n	8003bfe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bec:	4b63      	ldr	r3, [pc, #396]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	4960      	ldr	r1, [pc, #384]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d04c      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	d107      	bne.n	8003c22 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c12:	4b5a      	ldr	r3, [pc, #360]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d121      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e0a6      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d107      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c2a:	4b54      	ldr	r3, [pc, #336]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d115      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e09a      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d107      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c42:	4b4e      	ldr	r3, [pc, #312]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d109      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e08e      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c52:	4b4a      	ldr	r3, [pc, #296]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e086      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c62:	4b46      	ldr	r3, [pc, #280]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f023 0203 	bic.w	r2, r3, #3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	4943      	ldr	r1, [pc, #268]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c74:	f7fe f902 	bl	8001e7c <HAL_GetTick>
 8003c78:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7a:	e00a      	b.n	8003c92 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c7c:	f7fe f8fe 	bl	8001e7c <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e06e      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c92:	4b3a      	ldr	r3, [pc, #232]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 020c 	and.w	r2, r3, #12
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d1eb      	bne.n	8003c7c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d010      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	4b31      	ldr	r3, [pc, #196]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d208      	bcs.n	8003cd2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cc0:	4b2e      	ldr	r3, [pc, #184]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	492b      	ldr	r1, [pc, #172]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd2:	4b29      	ldr	r3, [pc, #164]	@ (8003d78 <HAL_RCC_ClockConfig+0x1ec>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d210      	bcs.n	8003d02 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce0:	4b25      	ldr	r3, [pc, #148]	@ (8003d78 <HAL_RCC_ClockConfig+0x1ec>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f023 0207 	bic.w	r2, r3, #7
 8003ce8:	4923      	ldr	r1, [pc, #140]	@ (8003d78 <HAL_RCC_ClockConfig+0x1ec>)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf0:	4b21      	ldr	r3, [pc, #132]	@ (8003d78 <HAL_RCC_ClockConfig+0x1ec>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d001      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e036      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d008      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	4918      	ldr	r1, [pc, #96]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d009      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d2c:	4b13      	ldr	r3, [pc, #76]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	4910      	ldr	r1, [pc, #64]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d40:	f000 f824 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8003d44:	4602      	mov	r2, r0
 8003d46:	4b0d      	ldr	r3, [pc, #52]	@ (8003d7c <HAL_RCC_ClockConfig+0x1f0>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	490b      	ldr	r1, [pc, #44]	@ (8003d80 <HAL_RCC_ClockConfig+0x1f4>)
 8003d52:	5ccb      	ldrb	r3, [r1, r3]
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5c:	4a09      	ldr	r2, [pc, #36]	@ (8003d84 <HAL_RCC_ClockConfig+0x1f8>)
 8003d5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d60:	4b09      	ldr	r3, [pc, #36]	@ (8003d88 <HAL_RCC_ClockConfig+0x1fc>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fe f839 	bl	8001ddc <HAL_InitTick>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d6e:	7afb      	ldrb	r3, [r7, #11]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40022000 	.word	0x40022000
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	08008794 	.word	0x08008794
 8003d84:	20000000 	.word	0x20000000
 8003d88:	20000004 	.word	0x20000004

08003d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b089      	sub	sp, #36	@ 0x24
 8003d90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61fb      	str	r3, [r7, #28]
 8003d96:	2300      	movs	r3, #0
 8003d98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003da4:	4b3b      	ldr	r3, [pc, #236]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0303 	and.w	r3, r3, #3
 8003dac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x34>
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	2b0c      	cmp	r3, #12
 8003db8:	d121      	bne.n	8003dfe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d11e      	bne.n	8003dfe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003dc0:	4b34      	ldr	r3, [pc, #208]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d107      	bne.n	8003ddc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003dcc:	4b31      	ldr	r3, [pc, #196]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dd2:	0a1b      	lsrs	r3, r3, #8
 8003dd4:	f003 030f 	and.w	r3, r3, #15
 8003dd8:	61fb      	str	r3, [r7, #28]
 8003dda:	e005      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ddc:	4b2d      	ldr	r3, [pc, #180]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	091b      	lsrs	r3, r3, #4
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003de8:	4a2b      	ldr	r2, [pc, #172]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10d      	bne.n	8003e14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dfc:	e00a      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d102      	bne.n	8003e0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e04:	4b25      	ldr	r3, [pc, #148]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0x110>)
 8003e06:	61bb      	str	r3, [r7, #24]
 8003e08:	e004      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d101      	bne.n	8003e14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e10:	4b23      	ldr	r3, [pc, #140]	@ (8003ea0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	2b0c      	cmp	r3, #12
 8003e18:	d134      	bne.n	8003e84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d003      	beq.n	8003e32 <HAL_RCC_GetSysClockFreq+0xa6>
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d003      	beq.n	8003e38 <HAL_RCC_GetSysClockFreq+0xac>
 8003e30:	e005      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e32:	4b1a      	ldr	r3, [pc, #104]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0x110>)
 8003e34:	617b      	str	r3, [r7, #20]
      break;
 8003e36:	e005      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e38:	4b19      	ldr	r3, [pc, #100]	@ (8003ea0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e3a:	617b      	str	r3, [r7, #20]
      break;
 8003e3c:	e002      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	617b      	str	r3, [r7, #20]
      break;
 8003e42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e44:	4b13      	ldr	r3, [pc, #76]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	091b      	lsrs	r3, r3, #4
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	3301      	adds	r3, #1
 8003e50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e52:	4b10      	ldr	r3, [pc, #64]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	0a1b      	lsrs	r3, r3, #8
 8003e58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	fb03 f202 	mul.w	r2, r3, r2
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	0e5b      	lsrs	r3, r3, #25
 8003e70:	f003 0303 	and.w	r3, r3, #3
 8003e74:	3301      	adds	r3, #1
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e84:	69bb      	ldr	r3, [r7, #24]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3724      	adds	r7, #36	@ 0x24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40021000 	.word	0x40021000
 8003e98:	080087ac 	.word	0x080087ac
 8003e9c:	00f42400 	.word	0x00f42400
 8003ea0:	007a1200 	.word	0x007a1200

08003ea4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea8:	4b03      	ldr	r3, [pc, #12]	@ (8003eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	20000000 	.word	0x20000000

08003ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ec0:	f7ff fff0 	bl	8003ea4 <HAL_RCC_GetHCLKFreq>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	4b06      	ldr	r3, [pc, #24]	@ (8003ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	0a1b      	lsrs	r3, r3, #8
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	4904      	ldr	r1, [pc, #16]	@ (8003ee4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ed2:	5ccb      	ldrb	r3, [r1, r3]
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	080087a4 	.word	0x080087a4

08003ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003eec:	f7ff ffda 	bl	8003ea4 <HAL_RCC_GetHCLKFreq>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	4b06      	ldr	r3, [pc, #24]	@ (8003f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	0adb      	lsrs	r3, r3, #11
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	4904      	ldr	r1, [pc, #16]	@ (8003f10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003efe:	5ccb      	ldrb	r3, [r1, r3]
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	080087a4 	.word	0x080087a4

08003f14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f20:	4b2a      	ldr	r3, [pc, #168]	@ (8003fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f2c:	f7ff f990 	bl	8003250 <HAL_PWREx_GetVoltageRange>
 8003f30:	6178      	str	r0, [r7, #20]
 8003f32:	e014      	b.n	8003f5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f34:	4b25      	ldr	r3, [pc, #148]	@ (8003fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f38:	4a24      	ldr	r2, [pc, #144]	@ (8003fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f40:	4b22      	ldr	r3, [pc, #136]	@ (8003fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f4c:	f7ff f980 	bl	8003250 <HAL_PWREx_GetVoltageRange>
 8003f50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f52:	4b1e      	ldr	r3, [pc, #120]	@ (8003fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f56:	4a1d      	ldr	r2, [pc, #116]	@ (8003fcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f5c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f64:	d10b      	bne.n	8003f7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b80      	cmp	r3, #128	@ 0x80
 8003f6a:	d919      	bls.n	8003fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003f70:	d902      	bls.n	8003f78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f72:	2302      	movs	r3, #2
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	e013      	b.n	8003fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f78:	2301      	movs	r3, #1
 8003f7a:	613b      	str	r3, [r7, #16]
 8003f7c:	e010      	b.n	8003fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b80      	cmp	r3, #128	@ 0x80
 8003f82:	d902      	bls.n	8003f8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f84:	2303      	movs	r3, #3
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	e00a      	b.n	8003fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b80      	cmp	r3, #128	@ 0x80
 8003f8e:	d102      	bne.n	8003f96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f90:	2302      	movs	r3, #2
 8003f92:	613b      	str	r3, [r7, #16]
 8003f94:	e004      	b.n	8003fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b70      	cmp	r3, #112	@ 0x70
 8003f9a:	d101      	bne.n	8003fa0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f023 0207 	bic.w	r2, r3, #7
 8003fa8:	4909      	ldr	r1, [pc, #36]	@ (8003fd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fb0:	4b07      	ldr	r3, [pc, #28]	@ (8003fd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d001      	beq.n	8003fc2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	40022000 	.word	0x40022000

08003fd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fdc:	2300      	movs	r3, #0
 8003fde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d041      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ff4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ff8:	d02a      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ffa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ffe:	d824      	bhi.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004000:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004004:	d008      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004006:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800400a:	d81e      	bhi.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004010:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004014:	d010      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004016:	e018      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004018:	4b86      	ldr	r3, [pc, #536]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4a85      	ldr	r2, [pc, #532]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800401e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004022:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004024:	e015      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3304      	adds	r3, #4
 800402a:	2100      	movs	r1, #0
 800402c:	4618      	mov	r0, r3
 800402e:	f000 fadd 	bl	80045ec <RCCEx_PLLSAI1_Config>
 8004032:	4603      	mov	r3, r0
 8004034:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004036:	e00c      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3320      	adds	r3, #32
 800403c:	2100      	movs	r1, #0
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fbc6 	bl	80047d0 <RCCEx_PLLSAI2_Config>
 8004044:	4603      	mov	r3, r0
 8004046:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004048:	e003      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	74fb      	strb	r3, [r7, #19]
      break;
 800404e:	e000      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004050:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004052:	7cfb      	ldrb	r3, [r7, #19]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10b      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004058:	4b76      	ldr	r3, [pc, #472]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004066:	4973      	ldr	r1, [pc, #460]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800406e:	e001      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004070:	7cfb      	ldrb	r3, [r7, #19]
 8004072:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d041      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004084:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004088:	d02a      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800408a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800408e:	d824      	bhi.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004090:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004094:	d008      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004096:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800409a:	d81e      	bhi.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x106>
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80040a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040a4:	d010      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040a6:	e018      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040a8:	4b62      	ldr	r3, [pc, #392]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	4a61      	ldr	r2, [pc, #388]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040b4:	e015      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3304      	adds	r3, #4
 80040ba:	2100      	movs	r1, #0
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 fa95 	bl	80045ec <RCCEx_PLLSAI1_Config>
 80040c2:	4603      	mov	r3, r0
 80040c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040c6:	e00c      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3320      	adds	r3, #32
 80040cc:	2100      	movs	r1, #0
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fb7e 	bl	80047d0 <RCCEx_PLLSAI2_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040d8:	e003      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	74fb      	strb	r3, [r7, #19]
      break;
 80040de:	e000      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80040e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040e2:	7cfb      	ldrb	r3, [r7, #19]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10b      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040e8:	4b52      	ldr	r3, [pc, #328]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040f6:	494f      	ldr	r1, [pc, #316]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80040fe:	e001      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004100:	7cfb      	ldrb	r3, [r7, #19]
 8004102:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 80a0 	beq.w	8004252 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004112:	2300      	movs	r3, #0
 8004114:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004116:	4b47      	ldr	r3, [pc, #284]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800411a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004126:	2300      	movs	r3, #0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00d      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800412c:	4b41      	ldr	r3, [pc, #260]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800412e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004130:	4a40      	ldr	r2, [pc, #256]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004132:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004136:	6593      	str	r3, [r2, #88]	@ 0x58
 8004138:	4b3e      	ldr	r3, [pc, #248]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800413a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004144:	2301      	movs	r3, #1
 8004146:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004148:	4b3b      	ldr	r3, [pc, #236]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a3a      	ldr	r2, [pc, #232]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800414e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004152:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004154:	f7fd fe92 	bl	8001e7c <HAL_GetTick>
 8004158:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800415a:	e009      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800415c:	f7fd fe8e 	bl	8001e7c <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d902      	bls.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	74fb      	strb	r3, [r7, #19]
        break;
 800416e:	e005      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004170:	4b31      	ldr	r3, [pc, #196]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0ef      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800417c:	7cfb      	ldrb	r3, [r7, #19]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d15c      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004182:	4b2c      	ldr	r3, [pc, #176]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004188:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800418c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01f      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	429a      	cmp	r2, r3
 800419e:	d019      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041a0:	4b24      	ldr	r3, [pc, #144]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041ac:	4b21      	ldr	r3, [pc, #132]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b2:	4a20      	ldr	r2, [pc, #128]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c2:	4a1c      	ldr	r2, [pc, #112]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041cc:	4a19      	ldr	r2, [pc, #100]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d016      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041de:	f7fd fe4d 	bl	8001e7c <HAL_GetTick>
 80041e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041e4:	e00b      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e6:	f7fd fe49 	bl	8001e7c <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d902      	bls.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	74fb      	strb	r3, [r7, #19]
            break;
 80041fc:	e006      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0ec      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800420c:	7cfb      	ldrb	r3, [r7, #19]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10c      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004212:	4b08      	ldr	r3, [pc, #32]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004218:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004222:	4904      	ldr	r1, [pc, #16]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004224:	4313      	orrs	r3, r2
 8004226:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800422a:	e009      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800422c:	7cfb      	ldrb	r3, [r7, #19]
 800422e:	74bb      	strb	r3, [r7, #18]
 8004230:	e006      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004232:	bf00      	nop
 8004234:	40021000 	.word	0x40021000
 8004238:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423c:	7cfb      	ldrb	r3, [r7, #19]
 800423e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004240:	7c7b      	ldrb	r3, [r7, #17]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d105      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004246:	4ba6      	ldr	r3, [pc, #664]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800424a:	4aa5      	ldr	r2, [pc, #660]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800424c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004250:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800425e:	4ba0      	ldr	r3, [pc, #640]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004264:	f023 0203 	bic.w	r2, r3, #3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800426c:	499c      	ldr	r1, [pc, #624]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004280:	4b97      	ldr	r3, [pc, #604]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004286:	f023 020c 	bic.w	r2, r3, #12
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428e:	4994      	ldr	r1, [pc, #592]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0304 	and.w	r3, r3, #4
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042a2:	4b8f      	ldr	r3, [pc, #572]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	498b      	ldr	r1, [pc, #556]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0308 	and.w	r3, r3, #8
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042c4:	4b86      	ldr	r3, [pc, #536]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d2:	4983      	ldr	r1, [pc, #524]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0310 	and.w	r3, r3, #16
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042e6:	4b7e      	ldr	r3, [pc, #504]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042f4:	497a      	ldr	r1, [pc, #488]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004308:	4b75      	ldr	r3, [pc, #468]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800430e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004316:	4972      	ldr	r1, [pc, #456]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800432a:	4b6d      	ldr	r3, [pc, #436]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004330:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004338:	4969      	ldr	r1, [pc, #420]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00a      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800434c:	4b64      	ldr	r3, [pc, #400]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004352:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800435a:	4961      	ldr	r1, [pc, #388]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800436e:	4b5c      	ldr	r3, [pc, #368]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004374:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800437c:	4958      	ldr	r1, [pc, #352]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00a      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004390:	4b53      	ldr	r3, [pc, #332]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004396:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800439e:	4950      	ldr	r1, [pc, #320]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043b2:	4b4b      	ldr	r3, [pc, #300]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c0:	4947      	ldr	r1, [pc, #284]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043d4:	4b42      	ldr	r3, [pc, #264]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043da:	f023 0203 	bic.w	r2, r3, #3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e2:	493f      	ldr	r1, [pc, #252]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d028      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043f6:	4b3a      	ldr	r3, [pc, #232]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004404:	4936      	ldr	r1, [pc, #216]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004410:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004414:	d106      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004416:	4b32      	ldr	r3, [pc, #200]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	4a31      	ldr	r2, [pc, #196]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800441c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004420:	60d3      	str	r3, [r2, #12]
 8004422:	e011      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004428:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800442c:	d10c      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3304      	adds	r3, #4
 8004432:	2101      	movs	r1, #1
 8004434:	4618      	mov	r0, r3
 8004436:	f000 f8d9 	bl	80045ec <RCCEx_PLLSAI1_Config>
 800443a:	4603      	mov	r3, r0
 800443c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800443e:	7cfb      	ldrb	r3, [r7, #19]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8004444:	7cfb      	ldrb	r3, [r7, #19]
 8004446:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d028      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004454:	4b22      	ldr	r3, [pc, #136]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800445a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004462:	491f      	ldr	r1, [pc, #124]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800446e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004472:	d106      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004474:	4b1a      	ldr	r3, [pc, #104]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4a19      	ldr	r2, [pc, #100]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800447a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800447e:	60d3      	str	r3, [r2, #12]
 8004480:	e011      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004486:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800448a:	d10c      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3304      	adds	r3, #4
 8004490:	2101      	movs	r1, #1
 8004492:	4618      	mov	r0, r3
 8004494:	f000 f8aa 	bl	80045ec <RCCEx_PLLSAI1_Config>
 8004498:	4603      	mov	r3, r0
 800449a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800449c:	7cfb      	ldrb	r3, [r7, #19]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80044a2:	7cfb      	ldrb	r3, [r7, #19]
 80044a4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d02a      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044b2:	4b0b      	ldr	r3, [pc, #44]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044c0:	4907      	ldr	r1, [pc, #28]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044d0:	d108      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044d2:	4b03      	ldr	r3, [pc, #12]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	4a02      	ldr	r2, [pc, #8]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044dc:	60d3      	str	r3, [r2, #12]
 80044de:	e013      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80044e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044ec:	d10c      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	3304      	adds	r3, #4
 80044f2:	2101      	movs	r1, #1
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 f879 	bl	80045ec <RCCEx_PLLSAI1_Config>
 80044fa:	4603      	mov	r3, r0
 80044fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044fe:	7cfb      	ldrb	r3, [r7, #19]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004504:	7cfb      	ldrb	r3, [r7, #19]
 8004506:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d02f      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004514:	4b2c      	ldr	r3, [pc, #176]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004522:	4929      	ldr	r1, [pc, #164]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004524:	4313      	orrs	r3, r2
 8004526:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800452e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004532:	d10d      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3304      	adds	r3, #4
 8004538:	2102      	movs	r1, #2
 800453a:	4618      	mov	r0, r3
 800453c:	f000 f856 	bl	80045ec <RCCEx_PLLSAI1_Config>
 8004540:	4603      	mov	r3, r0
 8004542:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004544:	7cfb      	ldrb	r3, [r7, #19]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d014      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800454a:	7cfb      	ldrb	r3, [r7, #19]
 800454c:	74bb      	strb	r3, [r7, #18]
 800454e:	e011      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004554:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004558:	d10c      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	3320      	adds	r3, #32
 800455e:	2102      	movs	r1, #2
 8004560:	4618      	mov	r0, r3
 8004562:	f000 f935 	bl	80047d0 <RCCEx_PLLSAI2_Config>
 8004566:	4603      	mov	r3, r0
 8004568:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800456a:	7cfb      	ldrb	r3, [r7, #19]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004570:	7cfb      	ldrb	r3, [r7, #19]
 8004572:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00b      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004580:	4b11      	ldr	r3, [pc, #68]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004586:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004590:	490d      	ldr	r1, [pc, #52]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00b      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045a4:	4b08      	ldr	r3, [pc, #32]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80045a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045b4:	4904      	ldr	r1, [pc, #16]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80045bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40021000 	.word	0x40021000

080045cc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80045d0:	4b05      	ldr	r3, [pc, #20]	@ (80045e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a04      	ldr	r2, [pc, #16]	@ (80045e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80045d6:	f043 0304 	orr.w	r3, r3, #4
 80045da:	6013      	str	r3, [r2, #0]
}
 80045dc:	bf00      	nop
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40021000 	.word	0x40021000

080045ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045fa:	4b74      	ldr	r3, [pc, #464]	@ (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d018      	beq.n	8004638 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004606:	4b71      	ldr	r3, [pc, #452]	@ (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f003 0203 	and.w	r2, r3, #3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d10d      	bne.n	8004632 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
       ||
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800461e:	4b6b      	ldr	r3, [pc, #428]	@ (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	091b      	lsrs	r3, r3, #4
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
       ||
 800462e:	429a      	cmp	r2, r3
 8004630:	d047      	beq.n	80046c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	73fb      	strb	r3, [r7, #15]
 8004636:	e044      	b.n	80046c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b03      	cmp	r3, #3
 800463e:	d018      	beq.n	8004672 <RCCEx_PLLSAI1_Config+0x86>
 8004640:	2b03      	cmp	r3, #3
 8004642:	d825      	bhi.n	8004690 <RCCEx_PLLSAI1_Config+0xa4>
 8004644:	2b01      	cmp	r3, #1
 8004646:	d002      	beq.n	800464e <RCCEx_PLLSAI1_Config+0x62>
 8004648:	2b02      	cmp	r3, #2
 800464a:	d009      	beq.n	8004660 <RCCEx_PLLSAI1_Config+0x74>
 800464c:	e020      	b.n	8004690 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800464e:	4b5f      	ldr	r3, [pc, #380]	@ (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d11d      	bne.n	8004696 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800465e:	e01a      	b.n	8004696 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004660:	4b5a      	ldr	r3, [pc, #360]	@ (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004668:	2b00      	cmp	r3, #0
 800466a:	d116      	bne.n	800469a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004670:	e013      	b.n	800469a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004672:	4b56      	ldr	r3, [pc, #344]	@ (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10f      	bne.n	800469e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800467e:	4b53      	ldr	r3, [pc, #332]	@ (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d109      	bne.n	800469e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800468e:	e006      	b.n	800469e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	73fb      	strb	r3, [r7, #15]
      break;
 8004694:	e004      	b.n	80046a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004696:	bf00      	nop
 8004698:	e002      	b.n	80046a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800469a:	bf00      	nop
 800469c:	e000      	b.n	80046a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800469e:	bf00      	nop
    }

    if(status == HAL_OK)
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10d      	bne.n	80046c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046a6:	4b49      	ldr	r3, [pc, #292]	@ (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6819      	ldr	r1, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	3b01      	subs	r3, #1
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	430b      	orrs	r3, r1
 80046bc:	4943      	ldr	r1, [pc, #268]	@ (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046c2:	7bfb      	ldrb	r3, [r7, #15]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d17c      	bne.n	80047c2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046c8:	4b40      	ldr	r3, [pc, #256]	@ (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a3f      	ldr	r2, [pc, #252]	@ (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80046ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80046d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046d4:	f7fd fbd2 	bl	8001e7c <HAL_GetTick>
 80046d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046da:	e009      	b.n	80046f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046dc:	f7fd fbce 	bl	8001e7c <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d902      	bls.n	80046f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	73fb      	strb	r3, [r7, #15]
        break;
 80046ee:	e005      	b.n	80046fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046f0:	4b36      	ldr	r3, [pc, #216]	@ (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1ef      	bne.n	80046dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d15f      	bne.n	80047c2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d110      	bne.n	800472a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004708:	4b30      	ldr	r3, [pc, #192]	@ (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004710:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6892      	ldr	r2, [r2, #8]
 8004718:	0211      	lsls	r1, r2, #8
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	68d2      	ldr	r2, [r2, #12]
 800471e:	06d2      	lsls	r2, r2, #27
 8004720:	430a      	orrs	r2, r1
 8004722:	492a      	ldr	r1, [pc, #168]	@ (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004724:	4313      	orrs	r3, r2
 8004726:	610b      	str	r3, [r1, #16]
 8004728:	e027      	b.n	800477a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d112      	bne.n	8004756 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004730:	4b26      	ldr	r3, [pc, #152]	@ (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004738:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6892      	ldr	r2, [r2, #8]
 8004740:	0211      	lsls	r1, r2, #8
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6912      	ldr	r2, [r2, #16]
 8004746:	0852      	lsrs	r2, r2, #1
 8004748:	3a01      	subs	r2, #1
 800474a:	0552      	lsls	r2, r2, #21
 800474c:	430a      	orrs	r2, r1
 800474e:	491f      	ldr	r1, [pc, #124]	@ (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004750:	4313      	orrs	r3, r2
 8004752:	610b      	str	r3, [r1, #16]
 8004754:	e011      	b.n	800477a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004756:	4b1d      	ldr	r3, [pc, #116]	@ (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800475e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6892      	ldr	r2, [r2, #8]
 8004766:	0211      	lsls	r1, r2, #8
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6952      	ldr	r2, [r2, #20]
 800476c:	0852      	lsrs	r2, r2, #1
 800476e:	3a01      	subs	r2, #1
 8004770:	0652      	lsls	r2, r2, #25
 8004772:	430a      	orrs	r2, r1
 8004774:	4915      	ldr	r1, [pc, #84]	@ (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004776:	4313      	orrs	r3, r2
 8004778:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800477a:	4b14      	ldr	r3, [pc, #80]	@ (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a13      	ldr	r2, [pc, #76]	@ (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004780:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004784:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004786:	f7fd fb79 	bl	8001e7c <HAL_GetTick>
 800478a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800478c:	e009      	b.n	80047a2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800478e:	f7fd fb75 	bl	8001e7c <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d902      	bls.n	80047a2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	73fb      	strb	r3, [r7, #15]
          break;
 80047a0:	e005      	b.n	80047ae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047a2:	4b0a      	ldr	r3, [pc, #40]	@ (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0ef      	beq.n	800478e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d106      	bne.n	80047c2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047b4:	4b05      	ldr	r3, [pc, #20]	@ (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	4903      	ldr	r1, [pc, #12]	@ (80047cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40021000 	.word	0x40021000

080047d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047de:	4b69      	ldr	r3, [pc, #420]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b4>)
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d018      	beq.n	800481c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047ea:	4b66      	ldr	r3, [pc, #408]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b4>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f003 0203 	and.w	r2, r3, #3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d10d      	bne.n	8004816 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
       ||
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d009      	beq.n	8004816 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004802:	4b60      	ldr	r3, [pc, #384]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
       ||
 8004812:	429a      	cmp	r2, r3
 8004814:	d047      	beq.n	80048a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	73fb      	strb	r3, [r7, #15]
 800481a:	e044      	b.n	80048a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b03      	cmp	r3, #3
 8004822:	d018      	beq.n	8004856 <RCCEx_PLLSAI2_Config+0x86>
 8004824:	2b03      	cmp	r3, #3
 8004826:	d825      	bhi.n	8004874 <RCCEx_PLLSAI2_Config+0xa4>
 8004828:	2b01      	cmp	r3, #1
 800482a:	d002      	beq.n	8004832 <RCCEx_PLLSAI2_Config+0x62>
 800482c:	2b02      	cmp	r3, #2
 800482e:	d009      	beq.n	8004844 <RCCEx_PLLSAI2_Config+0x74>
 8004830:	e020      	b.n	8004874 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004832:	4b54      	ldr	r3, [pc, #336]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d11d      	bne.n	800487a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004842:	e01a      	b.n	800487a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004844:	4b4f      	ldr	r3, [pc, #316]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800484c:	2b00      	cmp	r3, #0
 800484e:	d116      	bne.n	800487e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004854:	e013      	b.n	800487e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004856:	4b4b      	ldr	r3, [pc, #300]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10f      	bne.n	8004882 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004862:	4b48      	ldr	r3, [pc, #288]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d109      	bne.n	8004882 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004872:	e006      	b.n	8004882 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	73fb      	strb	r3, [r7, #15]
      break;
 8004878:	e004      	b.n	8004884 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800487a:	bf00      	nop
 800487c:	e002      	b.n	8004884 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800487e:	bf00      	nop
 8004880:	e000      	b.n	8004884 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004882:	bf00      	nop
    }

    if(status == HAL_OK)
 8004884:	7bfb      	ldrb	r3, [r7, #15]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10d      	bne.n	80048a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800488a:	4b3e      	ldr	r3, [pc, #248]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b4>)
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6819      	ldr	r1, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	3b01      	subs	r3, #1
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	430b      	orrs	r3, r1
 80048a0:	4938      	ldr	r1, [pc, #224]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b4>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d166      	bne.n	800497a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80048ac:	4b35      	ldr	r3, [pc, #212]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a34      	ldr	r2, [pc, #208]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b4>)
 80048b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b8:	f7fd fae0 	bl	8001e7c <HAL_GetTick>
 80048bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048be:	e009      	b.n	80048d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048c0:	f7fd fadc 	bl	8001e7c <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d902      	bls.n	80048d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	73fb      	strb	r3, [r7, #15]
        break;
 80048d2:	e005      	b.n	80048e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b4>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1ef      	bne.n	80048c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d149      	bne.n	800497a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d110      	bne.n	800490e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048ec:	4b25      	ldr	r3, [pc, #148]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b4>)
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80048f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6892      	ldr	r2, [r2, #8]
 80048fc:	0211      	lsls	r1, r2, #8
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	68d2      	ldr	r2, [r2, #12]
 8004902:	06d2      	lsls	r2, r2, #27
 8004904:	430a      	orrs	r2, r1
 8004906:	491f      	ldr	r1, [pc, #124]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004908:	4313      	orrs	r3, r2
 800490a:	614b      	str	r3, [r1, #20]
 800490c:	e011      	b.n	8004932 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800490e:	4b1d      	ldr	r3, [pc, #116]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004916:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6892      	ldr	r2, [r2, #8]
 800491e:	0211      	lsls	r1, r2, #8
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6912      	ldr	r2, [r2, #16]
 8004924:	0852      	lsrs	r2, r2, #1
 8004926:	3a01      	subs	r2, #1
 8004928:	0652      	lsls	r2, r2, #25
 800492a:	430a      	orrs	r2, r1
 800492c:	4915      	ldr	r1, [pc, #84]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b4>)
 800492e:	4313      	orrs	r3, r2
 8004930:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004932:	4b14      	ldr	r3, [pc, #80]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a13      	ldr	r2, [pc, #76]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800493c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493e:	f7fd fa9d 	bl	8001e7c <HAL_GetTick>
 8004942:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004944:	e009      	b.n	800495a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004946:	f7fd fa99 	bl	8001e7c <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d902      	bls.n	800495a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	73fb      	strb	r3, [r7, #15]
          break;
 8004958:	e005      	b.n	8004966 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800495a:	4b0a      	ldr	r3, [pc, #40]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b4>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0ef      	beq.n	8004946 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004966:	7bfb      	ldrb	r3, [r7, #15]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d106      	bne.n	800497a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800496c:	4b05      	ldr	r3, [pc, #20]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b4>)
 800496e:	695a      	ldr	r2, [r3, #20]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	4903      	ldr	r1, [pc, #12]	@ (8004984 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004976:	4313      	orrs	r3, r2
 8004978:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800497a:	7bfb      	ldrb	r3, [r7, #15]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40021000 	.word	0x40021000

08004988 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e040      	b.n	8004a1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d106      	bne.n	80049b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7fc ff8a 	bl	80018c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2224      	movs	r2, #36	@ 0x24
 80049b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0201 	bic.w	r2, r2, #1
 80049c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fb6a 	bl	80050a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f8af 	bl	8004b38 <UART_SetConfig>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e01b      	b.n	8004a1c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689a      	ldr	r2, [r3, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 0201 	orr.w	r2, r2, #1
 8004a12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 fbe9 	bl	80051ec <UART_CheckIdleState>
 8004a1a:	4603      	mov	r3, r0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08a      	sub	sp, #40	@ 0x28
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	603b      	str	r3, [r7, #0]
 8004a30:	4613      	mov	r3, r2
 8004a32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a38:	2b20      	cmp	r3, #32
 8004a3a:	d177      	bne.n	8004b2c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d002      	beq.n	8004a48 <HAL_UART_Transmit+0x24>
 8004a42:	88fb      	ldrh	r3, [r7, #6]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e070      	b.n	8004b2e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2221      	movs	r2, #33	@ 0x21
 8004a58:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a5a:	f7fd fa0f 	bl	8001e7c <HAL_GetTick>
 8004a5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	88fa      	ldrh	r2, [r7, #6]
 8004a64:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	88fa      	ldrh	r2, [r7, #6]
 8004a6c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a78:	d108      	bne.n	8004a8c <HAL_UART_Transmit+0x68>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d104      	bne.n	8004a8c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	61bb      	str	r3, [r7, #24]
 8004a8a:	e003      	b.n	8004a94 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a90:	2300      	movs	r3, #0
 8004a92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a94:	e02f      	b.n	8004af6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	2180      	movs	r1, #128	@ 0x80
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 fc4b 	bl	800533c <UART_WaitOnFlagUntilTimeout>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d004      	beq.n	8004ab6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e03b      	b.n	8004b2e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10b      	bne.n	8004ad4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	881a      	ldrh	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ac8:	b292      	uxth	r2, r2
 8004aca:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	3302      	adds	r3, #2
 8004ad0:	61bb      	str	r3, [r7, #24]
 8004ad2:	e007      	b.n	8004ae4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	781a      	ldrb	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1c9      	bne.n	8004a96 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2140      	movs	r1, #64	@ 0x40
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 fc15 	bl	800533c <UART_WaitOnFlagUntilTimeout>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d004      	beq.n	8004b22 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e005      	b.n	8004b2e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2220      	movs	r2, #32
 8004b26:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	e000      	b.n	8004b2e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004b2c:	2302      	movs	r3, #2
  }
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3720      	adds	r7, #32
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b3c:	b08a      	sub	sp, #40	@ 0x28
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b42:	2300      	movs	r3, #0
 8004b44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	431a      	orrs	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	431a      	orrs	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	4ba4      	ldr	r3, [pc, #656]	@ (8004df8 <UART_SetConfig+0x2c0>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	6812      	ldr	r2, [r2, #0]
 8004b6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b70:	430b      	orrs	r3, r1
 8004b72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a99      	ldr	r2, [pc, #612]	@ (8004dfc <UART_SetConfig+0x2c4>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d004      	beq.n	8004ba4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a90      	ldr	r2, [pc, #576]	@ (8004e00 <UART_SetConfig+0x2c8>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d126      	bne.n	8004c10 <UART_SetConfig+0xd8>
 8004bc2:	4b90      	ldr	r3, [pc, #576]	@ (8004e04 <UART_SetConfig+0x2cc>)
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc8:	f003 0303 	and.w	r3, r3, #3
 8004bcc:	2b03      	cmp	r3, #3
 8004bce:	d81b      	bhi.n	8004c08 <UART_SetConfig+0xd0>
 8004bd0:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd8 <UART_SetConfig+0xa0>)
 8004bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd6:	bf00      	nop
 8004bd8:	08004be9 	.word	0x08004be9
 8004bdc:	08004bf9 	.word	0x08004bf9
 8004be0:	08004bf1 	.word	0x08004bf1
 8004be4:	08004c01 	.word	0x08004c01
 8004be8:	2301      	movs	r3, #1
 8004bea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bee:	e116      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bf6:	e112      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004bf8:	2304      	movs	r3, #4
 8004bfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bfe:	e10e      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004c00:	2308      	movs	r3, #8
 8004c02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c06:	e10a      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004c08:	2310      	movs	r3, #16
 8004c0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c0e:	e106      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a7c      	ldr	r2, [pc, #496]	@ (8004e08 <UART_SetConfig+0x2d0>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d138      	bne.n	8004c8c <UART_SetConfig+0x154>
 8004c1a:	4b7a      	ldr	r3, [pc, #488]	@ (8004e04 <UART_SetConfig+0x2cc>)
 8004c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c20:	f003 030c 	and.w	r3, r3, #12
 8004c24:	2b0c      	cmp	r3, #12
 8004c26:	d82d      	bhi.n	8004c84 <UART_SetConfig+0x14c>
 8004c28:	a201      	add	r2, pc, #4	@ (adr r2, 8004c30 <UART_SetConfig+0xf8>)
 8004c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2e:	bf00      	nop
 8004c30:	08004c65 	.word	0x08004c65
 8004c34:	08004c85 	.word	0x08004c85
 8004c38:	08004c85 	.word	0x08004c85
 8004c3c:	08004c85 	.word	0x08004c85
 8004c40:	08004c75 	.word	0x08004c75
 8004c44:	08004c85 	.word	0x08004c85
 8004c48:	08004c85 	.word	0x08004c85
 8004c4c:	08004c85 	.word	0x08004c85
 8004c50:	08004c6d 	.word	0x08004c6d
 8004c54:	08004c85 	.word	0x08004c85
 8004c58:	08004c85 	.word	0x08004c85
 8004c5c:	08004c85 	.word	0x08004c85
 8004c60:	08004c7d 	.word	0x08004c7d
 8004c64:	2300      	movs	r3, #0
 8004c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c6a:	e0d8      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c72:	e0d4      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004c74:	2304      	movs	r3, #4
 8004c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c7a:	e0d0      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004c7c:	2308      	movs	r3, #8
 8004c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c82:	e0cc      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004c84:	2310      	movs	r3, #16
 8004c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c8a:	e0c8      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a5e      	ldr	r2, [pc, #376]	@ (8004e0c <UART_SetConfig+0x2d4>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d125      	bne.n	8004ce2 <UART_SetConfig+0x1aa>
 8004c96:	4b5b      	ldr	r3, [pc, #364]	@ (8004e04 <UART_SetConfig+0x2cc>)
 8004c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c9c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ca0:	2b30      	cmp	r3, #48	@ 0x30
 8004ca2:	d016      	beq.n	8004cd2 <UART_SetConfig+0x19a>
 8004ca4:	2b30      	cmp	r3, #48	@ 0x30
 8004ca6:	d818      	bhi.n	8004cda <UART_SetConfig+0x1a2>
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	d00a      	beq.n	8004cc2 <UART_SetConfig+0x18a>
 8004cac:	2b20      	cmp	r3, #32
 8004cae:	d814      	bhi.n	8004cda <UART_SetConfig+0x1a2>
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <UART_SetConfig+0x182>
 8004cb4:	2b10      	cmp	r3, #16
 8004cb6:	d008      	beq.n	8004cca <UART_SetConfig+0x192>
 8004cb8:	e00f      	b.n	8004cda <UART_SetConfig+0x1a2>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cc0:	e0ad      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cc8:	e0a9      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004cca:	2304      	movs	r3, #4
 8004ccc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cd0:	e0a5      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004cd2:	2308      	movs	r3, #8
 8004cd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cd8:	e0a1      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004cda:	2310      	movs	r3, #16
 8004cdc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ce0:	e09d      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a4a      	ldr	r2, [pc, #296]	@ (8004e10 <UART_SetConfig+0x2d8>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d125      	bne.n	8004d38 <UART_SetConfig+0x200>
 8004cec:	4b45      	ldr	r3, [pc, #276]	@ (8004e04 <UART_SetConfig+0x2cc>)
 8004cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004cf6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004cf8:	d016      	beq.n	8004d28 <UART_SetConfig+0x1f0>
 8004cfa:	2bc0      	cmp	r3, #192	@ 0xc0
 8004cfc:	d818      	bhi.n	8004d30 <UART_SetConfig+0x1f8>
 8004cfe:	2b80      	cmp	r3, #128	@ 0x80
 8004d00:	d00a      	beq.n	8004d18 <UART_SetConfig+0x1e0>
 8004d02:	2b80      	cmp	r3, #128	@ 0x80
 8004d04:	d814      	bhi.n	8004d30 <UART_SetConfig+0x1f8>
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <UART_SetConfig+0x1d8>
 8004d0a:	2b40      	cmp	r3, #64	@ 0x40
 8004d0c:	d008      	beq.n	8004d20 <UART_SetConfig+0x1e8>
 8004d0e:	e00f      	b.n	8004d30 <UART_SetConfig+0x1f8>
 8004d10:	2300      	movs	r3, #0
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d16:	e082      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d1e:	e07e      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004d20:	2304      	movs	r3, #4
 8004d22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d26:	e07a      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004d28:	2308      	movs	r3, #8
 8004d2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d2e:	e076      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004d30:	2310      	movs	r3, #16
 8004d32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d36:	e072      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a35      	ldr	r2, [pc, #212]	@ (8004e14 <UART_SetConfig+0x2dc>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d12a      	bne.n	8004d98 <UART_SetConfig+0x260>
 8004d42:	4b30      	ldr	r3, [pc, #192]	@ (8004e04 <UART_SetConfig+0x2cc>)
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d50:	d01a      	beq.n	8004d88 <UART_SetConfig+0x250>
 8004d52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d56:	d81b      	bhi.n	8004d90 <UART_SetConfig+0x258>
 8004d58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d5c:	d00c      	beq.n	8004d78 <UART_SetConfig+0x240>
 8004d5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d62:	d815      	bhi.n	8004d90 <UART_SetConfig+0x258>
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <UART_SetConfig+0x238>
 8004d68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d6c:	d008      	beq.n	8004d80 <UART_SetConfig+0x248>
 8004d6e:	e00f      	b.n	8004d90 <UART_SetConfig+0x258>
 8004d70:	2300      	movs	r3, #0
 8004d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d76:	e052      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d7e:	e04e      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004d80:	2304      	movs	r3, #4
 8004d82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d86:	e04a      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004d88:	2308      	movs	r3, #8
 8004d8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d8e:	e046      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004d90:	2310      	movs	r3, #16
 8004d92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d96:	e042      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a17      	ldr	r2, [pc, #92]	@ (8004dfc <UART_SetConfig+0x2c4>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d13a      	bne.n	8004e18 <UART_SetConfig+0x2e0>
 8004da2:	4b18      	ldr	r3, [pc, #96]	@ (8004e04 <UART_SetConfig+0x2cc>)
 8004da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004dac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004db0:	d01a      	beq.n	8004de8 <UART_SetConfig+0x2b0>
 8004db2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004db6:	d81b      	bhi.n	8004df0 <UART_SetConfig+0x2b8>
 8004db8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dbc:	d00c      	beq.n	8004dd8 <UART_SetConfig+0x2a0>
 8004dbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dc2:	d815      	bhi.n	8004df0 <UART_SetConfig+0x2b8>
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <UART_SetConfig+0x298>
 8004dc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dcc:	d008      	beq.n	8004de0 <UART_SetConfig+0x2a8>
 8004dce:	e00f      	b.n	8004df0 <UART_SetConfig+0x2b8>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dd6:	e022      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dde:	e01e      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004de0:	2304      	movs	r3, #4
 8004de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004de6:	e01a      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004de8:	2308      	movs	r3, #8
 8004dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dee:	e016      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004df0:	2310      	movs	r3, #16
 8004df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004df6:	e012      	b.n	8004e1e <UART_SetConfig+0x2e6>
 8004df8:	efff69f3 	.word	0xefff69f3
 8004dfc:	40008000 	.word	0x40008000
 8004e00:	40013800 	.word	0x40013800
 8004e04:	40021000 	.word	0x40021000
 8004e08:	40004400 	.word	0x40004400
 8004e0c:	40004800 	.word	0x40004800
 8004e10:	40004c00 	.word	0x40004c00
 8004e14:	40005000 	.word	0x40005000
 8004e18:	2310      	movs	r3, #16
 8004e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a9f      	ldr	r2, [pc, #636]	@ (80050a0 <UART_SetConfig+0x568>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d17a      	bne.n	8004f1e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d824      	bhi.n	8004e7a <UART_SetConfig+0x342>
 8004e30:	a201      	add	r2, pc, #4	@ (adr r2, 8004e38 <UART_SetConfig+0x300>)
 8004e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e36:	bf00      	nop
 8004e38:	08004e5d 	.word	0x08004e5d
 8004e3c:	08004e7b 	.word	0x08004e7b
 8004e40:	08004e65 	.word	0x08004e65
 8004e44:	08004e7b 	.word	0x08004e7b
 8004e48:	08004e6b 	.word	0x08004e6b
 8004e4c:	08004e7b 	.word	0x08004e7b
 8004e50:	08004e7b 	.word	0x08004e7b
 8004e54:	08004e7b 	.word	0x08004e7b
 8004e58:	08004e73 	.word	0x08004e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e5c:	f7ff f82e 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 8004e60:	61f8      	str	r0, [r7, #28]
        break;
 8004e62:	e010      	b.n	8004e86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e64:	4b8f      	ldr	r3, [pc, #572]	@ (80050a4 <UART_SetConfig+0x56c>)
 8004e66:	61fb      	str	r3, [r7, #28]
        break;
 8004e68:	e00d      	b.n	8004e86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e6a:	f7fe ff8f 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8004e6e:	61f8      	str	r0, [r7, #28]
        break;
 8004e70:	e009      	b.n	8004e86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e76:	61fb      	str	r3, [r7, #28]
        break;
 8004e78:	e005      	b.n	8004e86 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 80fb 	beq.w	8005084 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	4613      	mov	r3, r2
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	4413      	add	r3, r2
 8004e98:	69fa      	ldr	r2, [r7, #28]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d305      	bcc.n	8004eaa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ea4:	69fa      	ldr	r2, [r7, #28]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d903      	bls.n	8004eb2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004eb0:	e0e8      	b.n	8005084 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	461c      	mov	r4, r3
 8004eb8:	4615      	mov	r5, r2
 8004eba:	f04f 0200 	mov.w	r2, #0
 8004ebe:	f04f 0300 	mov.w	r3, #0
 8004ec2:	022b      	lsls	r3, r5, #8
 8004ec4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ec8:	0222      	lsls	r2, r4, #8
 8004eca:	68f9      	ldr	r1, [r7, #12]
 8004ecc:	6849      	ldr	r1, [r1, #4]
 8004ece:	0849      	lsrs	r1, r1, #1
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	4688      	mov	r8, r1
 8004ed4:	4681      	mov	r9, r0
 8004ed6:	eb12 0a08 	adds.w	sl, r2, r8
 8004eda:	eb43 0b09 	adc.w	fp, r3, r9
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	603b      	str	r3, [r7, #0]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eec:	4650      	mov	r0, sl
 8004eee:	4659      	mov	r1, fp
 8004ef0:	f7fb feba 	bl	8000c68 <__aeabi_uldivmod>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4613      	mov	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f02:	d308      	bcc.n	8004f16 <UART_SetConfig+0x3de>
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f0a:	d204      	bcs.n	8004f16 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	60da      	str	r2, [r3, #12]
 8004f14:	e0b6      	b.n	8005084 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004f1c:	e0b2      	b.n	8005084 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f26:	d15e      	bne.n	8004fe6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004f28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d828      	bhi.n	8004f82 <UART_SetConfig+0x44a>
 8004f30:	a201      	add	r2, pc, #4	@ (adr r2, 8004f38 <UART_SetConfig+0x400>)
 8004f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f36:	bf00      	nop
 8004f38:	08004f5d 	.word	0x08004f5d
 8004f3c:	08004f65 	.word	0x08004f65
 8004f40:	08004f6d 	.word	0x08004f6d
 8004f44:	08004f83 	.word	0x08004f83
 8004f48:	08004f73 	.word	0x08004f73
 8004f4c:	08004f83 	.word	0x08004f83
 8004f50:	08004f83 	.word	0x08004f83
 8004f54:	08004f83 	.word	0x08004f83
 8004f58:	08004f7b 	.word	0x08004f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f5c:	f7fe ffae 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 8004f60:	61f8      	str	r0, [r7, #28]
        break;
 8004f62:	e014      	b.n	8004f8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f64:	f7fe ffc0 	bl	8003ee8 <HAL_RCC_GetPCLK2Freq>
 8004f68:	61f8      	str	r0, [r7, #28]
        break;
 8004f6a:	e010      	b.n	8004f8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f6c:	4b4d      	ldr	r3, [pc, #308]	@ (80050a4 <UART_SetConfig+0x56c>)
 8004f6e:	61fb      	str	r3, [r7, #28]
        break;
 8004f70:	e00d      	b.n	8004f8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f72:	f7fe ff0b 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8004f76:	61f8      	str	r0, [r7, #28]
        break;
 8004f78:	e009      	b.n	8004f8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f7e:	61fb      	str	r3, [r7, #28]
        break;
 8004f80:	e005      	b.n	8004f8e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d077      	beq.n	8005084 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	005a      	lsls	r2, r3, #1
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	085b      	lsrs	r3, r3, #1
 8004f9e:	441a      	add	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	2b0f      	cmp	r3, #15
 8004fae:	d916      	bls.n	8004fde <UART_SetConfig+0x4a6>
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fb6:	d212      	bcs.n	8004fde <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	f023 030f 	bic.w	r3, r3, #15
 8004fc0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	085b      	lsrs	r3, r3, #1
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	8afb      	ldrh	r3, [r7, #22]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	8afa      	ldrh	r2, [r7, #22]
 8004fda:	60da      	str	r2, [r3, #12]
 8004fdc:	e052      	b.n	8005084 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004fe4:	e04e      	b.n	8005084 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fe6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004fea:	2b08      	cmp	r3, #8
 8004fec:	d827      	bhi.n	800503e <UART_SetConfig+0x506>
 8004fee:	a201      	add	r2, pc, #4	@ (adr r2, 8004ff4 <UART_SetConfig+0x4bc>)
 8004ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff4:	08005019 	.word	0x08005019
 8004ff8:	08005021 	.word	0x08005021
 8004ffc:	08005029 	.word	0x08005029
 8005000:	0800503f 	.word	0x0800503f
 8005004:	0800502f 	.word	0x0800502f
 8005008:	0800503f 	.word	0x0800503f
 800500c:	0800503f 	.word	0x0800503f
 8005010:	0800503f 	.word	0x0800503f
 8005014:	08005037 	.word	0x08005037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005018:	f7fe ff50 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 800501c:	61f8      	str	r0, [r7, #28]
        break;
 800501e:	e014      	b.n	800504a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005020:	f7fe ff62 	bl	8003ee8 <HAL_RCC_GetPCLK2Freq>
 8005024:	61f8      	str	r0, [r7, #28]
        break;
 8005026:	e010      	b.n	800504a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005028:	4b1e      	ldr	r3, [pc, #120]	@ (80050a4 <UART_SetConfig+0x56c>)
 800502a:	61fb      	str	r3, [r7, #28]
        break;
 800502c:	e00d      	b.n	800504a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800502e:	f7fe fead 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8005032:	61f8      	str	r0, [r7, #28]
        break;
 8005034:	e009      	b.n	800504a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005036:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800503a:	61fb      	str	r3, [r7, #28]
        break;
 800503c:	e005      	b.n	800504a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005048:	bf00      	nop
    }

    if (pclk != 0U)
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d019      	beq.n	8005084 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	085a      	lsrs	r2, r3, #1
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	441a      	add	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005062:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	2b0f      	cmp	r3, #15
 8005068:	d909      	bls.n	800507e <UART_SetConfig+0x546>
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005070:	d205      	bcs.n	800507e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	b29a      	uxth	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	60da      	str	r2, [r3, #12]
 800507c:	e002      	b.n	8005084 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005090:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005094:	4618      	mov	r0, r3
 8005096:	3728      	adds	r7, #40	@ 0x28
 8005098:	46bd      	mov	sp, r7
 800509a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800509e:	bf00      	nop
 80050a0:	40008000 	.word	0x40008000
 80050a4:	00f42400 	.word	0x00f42400

080050a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b4:	f003 0308 	and.w	r3, r3, #8
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00a      	beq.n	8005116 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511a:	f003 0304 	and.w	r3, r3, #4
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513c:	f003 0310 	and.w	r3, r3, #16
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00a      	beq.n	800515a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01a      	beq.n	80051be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051a6:	d10a      	bne.n	80051be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	605a      	str	r2, [r3, #4]
  }
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b098      	sub	sp, #96	@ 0x60
 80051f0:	af02      	add	r7, sp, #8
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051fc:	f7fc fe3e 	bl	8001e7c <HAL_GetTick>
 8005200:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0308 	and.w	r3, r3, #8
 800520c:	2b08      	cmp	r3, #8
 800520e:	d12e      	bne.n	800526e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005210:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005218:	2200      	movs	r2, #0
 800521a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f88c 	bl	800533c <UART_WaitOnFlagUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d021      	beq.n	800526e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005232:	e853 3f00 	ldrex	r3, [r3]
 8005236:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800523a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800523e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	461a      	mov	r2, r3
 8005246:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005248:	647b      	str	r3, [r7, #68]	@ 0x44
 800524a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800524e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005250:	e841 2300 	strex	r3, r2, [r1]
 8005254:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1e6      	bne.n	800522a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2220      	movs	r2, #32
 8005260:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e062      	b.n	8005334 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b04      	cmp	r3, #4
 800527a:	d149      	bne.n	8005310 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800527c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005284:	2200      	movs	r2, #0
 8005286:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f856 	bl	800533c <UART_WaitOnFlagUntilTimeout>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d03c      	beq.n	8005310 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529e:	e853 3f00 	ldrex	r3, [r3]
 80052a2:	623b      	str	r3, [r7, #32]
   return(result);
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80052b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e6      	bne.n	8005296 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3308      	adds	r3, #8
 80052ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 0301 	bic.w	r3, r3, #1
 80052de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3308      	adds	r3, #8
 80052e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052e8:	61fa      	str	r2, [r7, #28]
 80052ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ec:	69b9      	ldr	r1, [r7, #24]
 80052ee:	69fa      	ldr	r2, [r7, #28]
 80052f0:	e841 2300 	strex	r3, r2, [r1]
 80052f4:	617b      	str	r3, [r7, #20]
   return(result);
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1e5      	bne.n	80052c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2220      	movs	r2, #32
 8005300:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e011      	b.n	8005334 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2220      	movs	r2, #32
 8005314:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2220      	movs	r2, #32
 800531a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3758      	adds	r7, #88	@ 0x58
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	603b      	str	r3, [r7, #0]
 8005348:	4613      	mov	r3, r2
 800534a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800534c:	e04f      	b.n	80053ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005354:	d04b      	beq.n	80053ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005356:	f7fc fd91 	bl	8001e7c <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	429a      	cmp	r2, r3
 8005364:	d302      	bcc.n	800536c <UART_WaitOnFlagUntilTimeout+0x30>
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e04e      	b.n	800540e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0304 	and.w	r3, r3, #4
 800537a:	2b00      	cmp	r3, #0
 800537c:	d037      	beq.n	80053ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2b80      	cmp	r3, #128	@ 0x80
 8005382:	d034      	beq.n	80053ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2b40      	cmp	r3, #64	@ 0x40
 8005388:	d031      	beq.n	80053ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	f003 0308 	and.w	r3, r3, #8
 8005394:	2b08      	cmp	r3, #8
 8005396:	d110      	bne.n	80053ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2208      	movs	r2, #8
 800539e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 f838 	bl	8005416 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2208      	movs	r2, #8
 80053aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e029      	b.n	800540e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053c8:	d111      	bne.n	80053ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 f81e 	bl	8005416 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2220      	movs	r2, #32
 80053de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e00f      	b.n	800540e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	69da      	ldr	r2, [r3, #28]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	4013      	ands	r3, r2
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	bf0c      	ite	eq
 80053fe:	2301      	moveq	r3, #1
 8005400:	2300      	movne	r3, #0
 8005402:	b2db      	uxtb	r3, r3
 8005404:	461a      	mov	r2, r3
 8005406:	79fb      	ldrb	r3, [r7, #7]
 8005408:	429a      	cmp	r2, r3
 800540a:	d0a0      	beq.n	800534e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005416:	b480      	push	{r7}
 8005418:	b095      	sub	sp, #84	@ 0x54
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005426:	e853 3f00 	ldrex	r3, [r3]
 800542a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800542c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005432:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	461a      	mov	r2, r3
 800543a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800543c:	643b      	str	r3, [r7, #64]	@ 0x40
 800543e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005440:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005442:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005444:	e841 2300 	strex	r3, r2, [r1]
 8005448:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800544a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1e6      	bne.n	800541e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3308      	adds	r3, #8
 8005456:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	e853 3f00 	ldrex	r3, [r3]
 800545e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	f023 0301 	bic.w	r3, r3, #1
 8005466:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3308      	adds	r3, #8
 800546e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005470:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005472:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005474:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005476:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005478:	e841 2300 	strex	r3, r2, [r1]
 800547c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800547e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1e5      	bne.n	8005450 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005488:	2b01      	cmp	r3, #1
 800548a:	d118      	bne.n	80054be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	60bb      	str	r3, [r7, #8]
   return(result);
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f023 0310 	bic.w	r3, r3, #16
 80054a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	461a      	mov	r2, r3
 80054a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054aa:	61bb      	str	r3, [r7, #24]
 80054ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ae:	6979      	ldr	r1, [r7, #20]
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	613b      	str	r3, [r7, #16]
   return(result);
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e6      	bne.n	800548c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80054d2:	bf00      	nop
 80054d4:	3754      	adds	r7, #84	@ 0x54
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054de:	b084      	sub	sp, #16
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	f107 001c 	add.w	r0, r7, #28
 80054ec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fa69 	bl	80059d4 <USB_CoreReset>
 8005502:	4603      	mov	r3, r0
 8005504:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005506:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800550a:	2b00      	cmp	r3, #0
 800550c:	d106      	bne.n	800551c <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005512:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	639a      	str	r2, [r3, #56]	@ 0x38
 800551a:	e005      	b.n	8005528 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005520:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8005528:	7bfb      	ldrb	r3, [r7, #15]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005534:	b004      	add	sp, #16
 8005536:	4770      	bx	lr

08005538 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f023 0201 	bic.w	r2, r3, #1
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b084      	sub	sp, #16
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	460b      	mov	r3, r1
 8005564:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005566:	2300      	movs	r3, #0
 8005568:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005576:	78fb      	ldrb	r3, [r7, #3]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d115      	bne.n	80055a8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005588:	200a      	movs	r0, #10
 800558a:	f7fc fc83 	bl	8001e94 <HAL_Delay>
      ms += 10U;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	330a      	adds	r3, #10
 8005592:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 fa0f 	bl	80059b8 <USB_GetMode>
 800559a:	4603      	mov	r3, r0
 800559c:	2b01      	cmp	r3, #1
 800559e:	d01e      	beq.n	80055de <USB_SetCurrentMode+0x84>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2bc7      	cmp	r3, #199	@ 0xc7
 80055a4:	d9f0      	bls.n	8005588 <USB_SetCurrentMode+0x2e>
 80055a6:	e01a      	b.n	80055de <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055a8:	78fb      	ldrb	r3, [r7, #3]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d115      	bne.n	80055da <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80055ba:	200a      	movs	r0, #10
 80055bc:	f7fc fc6a 	bl	8001e94 <HAL_Delay>
      ms += 10U;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	330a      	adds	r3, #10
 80055c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f9f6 	bl	80059b8 <USB_GetMode>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <USB_SetCurrentMode+0x84>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80055d6:	d9f0      	bls.n	80055ba <USB_SetCurrentMode+0x60>
 80055d8:	e001      	b.n	80055de <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e005      	b.n	80055ea <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2bc8      	cmp	r3, #200	@ 0xc8
 80055e2:	d101      	bne.n	80055e8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e000      	b.n	80055ea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
	...

080055f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055f4:	b084      	sub	sp, #16
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b086      	sub	sp, #24
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005602:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800560e:	2300      	movs	r3, #0
 8005610:	613b      	str	r3, [r7, #16]
 8005612:	e009      	b.n	8005628 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	3340      	adds	r3, #64	@ 0x40
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	2200      	movs	r2, #0
 8005620:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	3301      	adds	r3, #1
 8005626:	613b      	str	r3, [r7, #16]
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	2b0e      	cmp	r3, #14
 800562c:	d9f2      	bls.n	8005614 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800562e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005632:	2b00      	cmp	r3, #0
 8005634:	d11c      	bne.n	8005670 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005644:	f043 0302 	orr.w	r3, r3, #2
 8005648:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800564e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	e005      	b.n	800567c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005674:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005682:	461a      	mov	r2, r3
 8005684:	2300      	movs	r3, #0
 8005686:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005688:	2103      	movs	r1, #3
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f95a 	bl	8005944 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005690:	2110      	movs	r1, #16
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f8f6 	bl	8005884 <USB_FlushTxFifo>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f920 	bl	80058e8 <USB_FlushRxFifo>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056b8:	461a      	mov	r2, r3
 80056ba:	2300      	movs	r3, #0
 80056bc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056c4:	461a      	mov	r2, r3
 80056c6:	2300      	movs	r3, #0
 80056c8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056d0:	461a      	mov	r2, r3
 80056d2:	2300      	movs	r3, #0
 80056d4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056d6:	2300      	movs	r3, #0
 80056d8:	613b      	str	r3, [r7, #16]
 80056da:	e043      	b.n	8005764 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056f2:	d118      	bne.n	8005726 <USB_DevInit+0x132>
    {
      if (i == 0U)
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10a      	bne.n	8005710 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	4413      	add	r3, r2
 8005702:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005706:	461a      	mov	r2, r3
 8005708:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	e013      	b.n	8005738 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800571c:	461a      	mov	r2, r3
 800571e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005722:	6013      	str	r3, [r2, #0]
 8005724:	e008      	b.n	8005738 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005732:	461a      	mov	r2, r3
 8005734:	2300      	movs	r3, #0
 8005736:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005744:	461a      	mov	r2, r3
 8005746:	2300      	movs	r3, #0
 8005748:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4413      	add	r3, r2
 8005752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005756:	461a      	mov	r2, r3
 8005758:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800575c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	3301      	adds	r3, #1
 8005762:	613b      	str	r3, [r7, #16]
 8005764:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005768:	461a      	mov	r2, r3
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	4293      	cmp	r3, r2
 800576e:	d3b5      	bcc.n	80056dc <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005770:	2300      	movs	r3, #0
 8005772:	613b      	str	r3, [r7, #16]
 8005774:	e043      	b.n	80057fe <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4413      	add	r3, r2
 800577e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005788:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800578c:	d118      	bne.n	80057c0 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10a      	bne.n	80057aa <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a0:	461a      	mov	r2, r3
 80057a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80057a6:	6013      	str	r3, [r2, #0]
 80057a8:	e013      	b.n	80057d2 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057b6:	461a      	mov	r2, r3
 80057b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	e008      	b.n	80057d2 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057cc:	461a      	mov	r2, r3
 80057ce:	2300      	movs	r3, #0
 80057d0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057de:	461a      	mov	r2, r3
 80057e0:	2300      	movs	r3, #0
 80057e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057f0:	461a      	mov	r2, r3
 80057f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80057f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	3301      	adds	r3, #1
 80057fc:	613b      	str	r3, [r7, #16]
 80057fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005802:	461a      	mov	r2, r3
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	4293      	cmp	r3, r2
 8005808:	d3b5      	bcc.n	8005776 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005818:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800581c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800582a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	f043 0210 	orr.w	r2, r3, #16
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	699a      	ldr	r2, [r3, #24]
 800583c:	4b10      	ldr	r3, [pc, #64]	@ (8005880 <USB_DevInit+0x28c>)
 800583e:	4313      	orrs	r3, r2
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005844:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005848:	2b00      	cmp	r3, #0
 800584a:	d005      	beq.n	8005858 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	f043 0208 	orr.w	r2, r3, #8
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005858:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800585c:	2b01      	cmp	r3, #1
 800585e:	d107      	bne.n	8005870 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005868:	f043 0304 	orr.w	r3, r3, #4
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005870:	7dfb      	ldrb	r3, [r7, #23]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800587c:	b004      	add	sp, #16
 800587e:	4770      	bx	lr
 8005880:	803c3800 	.word	0x803c3800

08005884 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	3301      	adds	r3, #1
 8005896:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800589e:	d901      	bls.n	80058a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e01b      	b.n	80058dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	daf2      	bge.n	8005892 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	019b      	lsls	r3, r3, #6
 80058b4:	f043 0220 	orr.w	r2, r3, #32
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3301      	adds	r3, #1
 80058c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058c8:	d901      	bls.n	80058ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e006      	b.n	80058dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b20      	cmp	r3, #32
 80058d8:	d0f0      	beq.n	80058bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	3301      	adds	r3, #1
 80058f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005900:	d901      	bls.n	8005906 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e018      	b.n	8005938 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	2b00      	cmp	r3, #0
 800590c:	daf2      	bge.n	80058f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2210      	movs	r2, #16
 8005916:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	3301      	adds	r3, #1
 800591c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005924:	d901      	bls.n	800592a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e006      	b.n	8005938 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f003 0310 	and.w	r3, r3, #16
 8005932:	2b10      	cmp	r3, #16
 8005934:	d0f0      	beq.n	8005918 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	78fb      	ldrb	r3, [r7, #3]
 800595e:	68f9      	ldr	r1, [r7, #12]
 8005960:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005964:	4313      	orrs	r3, r2
 8005966:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005976:	b480      	push	{r7}
 8005978:	b085      	sub	sp, #20
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005990:	f023 0303 	bic.w	r3, r3, #3
 8005994:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059a4:	f043 0302 	orr.w	r3, r3, #2
 80059a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	f003 0301 	and.w	r3, r3, #1
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	3301      	adds	r3, #1
 80059e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059ec:	d901      	bls.n	80059f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e01b      	b.n	8005a2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	daf2      	bge.n	80059e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	f043 0201 	orr.w	r2, r3, #1
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a16:	d901      	bls.n	8005a1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e006      	b.n	8005a2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d0f0      	beq.n	8005a0a <USB_CoreReset+0x36>

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <__cvt>:
 8005a36:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a3a:	ec57 6b10 	vmov	r6, r7, d0
 8005a3e:	2f00      	cmp	r7, #0
 8005a40:	460c      	mov	r4, r1
 8005a42:	4619      	mov	r1, r3
 8005a44:	463b      	mov	r3, r7
 8005a46:	bfbb      	ittet	lt
 8005a48:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005a4c:	461f      	movlt	r7, r3
 8005a4e:	2300      	movge	r3, #0
 8005a50:	232d      	movlt	r3, #45	@ 0x2d
 8005a52:	700b      	strb	r3, [r1, #0]
 8005a54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a56:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005a5a:	4691      	mov	r9, r2
 8005a5c:	f023 0820 	bic.w	r8, r3, #32
 8005a60:	bfbc      	itt	lt
 8005a62:	4632      	movlt	r2, r6
 8005a64:	4616      	movlt	r6, r2
 8005a66:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a6a:	d005      	beq.n	8005a78 <__cvt+0x42>
 8005a6c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005a70:	d100      	bne.n	8005a74 <__cvt+0x3e>
 8005a72:	3401      	adds	r4, #1
 8005a74:	2102      	movs	r1, #2
 8005a76:	e000      	b.n	8005a7a <__cvt+0x44>
 8005a78:	2103      	movs	r1, #3
 8005a7a:	ab03      	add	r3, sp, #12
 8005a7c:	9301      	str	r3, [sp, #4]
 8005a7e:	ab02      	add	r3, sp, #8
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	ec47 6b10 	vmov	d0, r6, r7
 8005a86:	4653      	mov	r3, sl
 8005a88:	4622      	mov	r2, r4
 8005a8a:	f000 fe59 	bl	8006740 <_dtoa_r>
 8005a8e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005a92:	4605      	mov	r5, r0
 8005a94:	d119      	bne.n	8005aca <__cvt+0x94>
 8005a96:	f019 0f01 	tst.w	r9, #1
 8005a9a:	d00e      	beq.n	8005aba <__cvt+0x84>
 8005a9c:	eb00 0904 	add.w	r9, r0, r4
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	4639      	mov	r1, r7
 8005aa8:	f7fb f81e 	bl	8000ae8 <__aeabi_dcmpeq>
 8005aac:	b108      	cbz	r0, 8005ab2 <__cvt+0x7c>
 8005aae:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ab2:	2230      	movs	r2, #48	@ 0x30
 8005ab4:	9b03      	ldr	r3, [sp, #12]
 8005ab6:	454b      	cmp	r3, r9
 8005ab8:	d31e      	bcc.n	8005af8 <__cvt+0xc2>
 8005aba:	9b03      	ldr	r3, [sp, #12]
 8005abc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005abe:	1b5b      	subs	r3, r3, r5
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	6013      	str	r3, [r2, #0]
 8005ac4:	b004      	add	sp, #16
 8005ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aca:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005ace:	eb00 0904 	add.w	r9, r0, r4
 8005ad2:	d1e5      	bne.n	8005aa0 <__cvt+0x6a>
 8005ad4:	7803      	ldrb	r3, [r0, #0]
 8005ad6:	2b30      	cmp	r3, #48	@ 0x30
 8005ad8:	d10a      	bne.n	8005af0 <__cvt+0xba>
 8005ada:	2200      	movs	r2, #0
 8005adc:	2300      	movs	r3, #0
 8005ade:	4630      	mov	r0, r6
 8005ae0:	4639      	mov	r1, r7
 8005ae2:	f7fb f801 	bl	8000ae8 <__aeabi_dcmpeq>
 8005ae6:	b918      	cbnz	r0, 8005af0 <__cvt+0xba>
 8005ae8:	f1c4 0401 	rsb	r4, r4, #1
 8005aec:	f8ca 4000 	str.w	r4, [sl]
 8005af0:	f8da 3000 	ldr.w	r3, [sl]
 8005af4:	4499      	add	r9, r3
 8005af6:	e7d3      	b.n	8005aa0 <__cvt+0x6a>
 8005af8:	1c59      	adds	r1, r3, #1
 8005afa:	9103      	str	r1, [sp, #12]
 8005afc:	701a      	strb	r2, [r3, #0]
 8005afe:	e7d9      	b.n	8005ab4 <__cvt+0x7e>

08005b00 <__exponent>:
 8005b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b02:	2900      	cmp	r1, #0
 8005b04:	bfba      	itte	lt
 8005b06:	4249      	neglt	r1, r1
 8005b08:	232d      	movlt	r3, #45	@ 0x2d
 8005b0a:	232b      	movge	r3, #43	@ 0x2b
 8005b0c:	2909      	cmp	r1, #9
 8005b0e:	7002      	strb	r2, [r0, #0]
 8005b10:	7043      	strb	r3, [r0, #1]
 8005b12:	dd29      	ble.n	8005b68 <__exponent+0x68>
 8005b14:	f10d 0307 	add.w	r3, sp, #7
 8005b18:	461d      	mov	r5, r3
 8005b1a:	270a      	movs	r7, #10
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	fbb1 f6f7 	udiv	r6, r1, r7
 8005b22:	fb07 1416 	mls	r4, r7, r6, r1
 8005b26:	3430      	adds	r4, #48	@ 0x30
 8005b28:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005b2c:	460c      	mov	r4, r1
 8005b2e:	2c63      	cmp	r4, #99	@ 0x63
 8005b30:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b34:	4631      	mov	r1, r6
 8005b36:	dcf1      	bgt.n	8005b1c <__exponent+0x1c>
 8005b38:	3130      	adds	r1, #48	@ 0x30
 8005b3a:	1e94      	subs	r4, r2, #2
 8005b3c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005b40:	1c41      	adds	r1, r0, #1
 8005b42:	4623      	mov	r3, r4
 8005b44:	42ab      	cmp	r3, r5
 8005b46:	d30a      	bcc.n	8005b5e <__exponent+0x5e>
 8005b48:	f10d 0309 	add.w	r3, sp, #9
 8005b4c:	1a9b      	subs	r3, r3, r2
 8005b4e:	42ac      	cmp	r4, r5
 8005b50:	bf88      	it	hi
 8005b52:	2300      	movhi	r3, #0
 8005b54:	3302      	adds	r3, #2
 8005b56:	4403      	add	r3, r0
 8005b58:	1a18      	subs	r0, r3, r0
 8005b5a:	b003      	add	sp, #12
 8005b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b5e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005b62:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005b66:	e7ed      	b.n	8005b44 <__exponent+0x44>
 8005b68:	2330      	movs	r3, #48	@ 0x30
 8005b6a:	3130      	adds	r1, #48	@ 0x30
 8005b6c:	7083      	strb	r3, [r0, #2]
 8005b6e:	70c1      	strb	r1, [r0, #3]
 8005b70:	1d03      	adds	r3, r0, #4
 8005b72:	e7f1      	b.n	8005b58 <__exponent+0x58>

08005b74 <_printf_float>:
 8005b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b78:	b08d      	sub	sp, #52	@ 0x34
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005b80:	4616      	mov	r6, r2
 8005b82:	461f      	mov	r7, r3
 8005b84:	4605      	mov	r5, r0
 8005b86:	f000 fcdb 	bl	8006540 <_localeconv_r>
 8005b8a:	6803      	ldr	r3, [r0, #0]
 8005b8c:	9304      	str	r3, [sp, #16]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fa fb7e 	bl	8000290 <strlen>
 8005b94:	2300      	movs	r3, #0
 8005b96:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b98:	f8d8 3000 	ldr.w	r3, [r8]
 8005b9c:	9005      	str	r0, [sp, #20]
 8005b9e:	3307      	adds	r3, #7
 8005ba0:	f023 0307 	bic.w	r3, r3, #7
 8005ba4:	f103 0208 	add.w	r2, r3, #8
 8005ba8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005bac:	f8d4 b000 	ldr.w	fp, [r4]
 8005bb0:	f8c8 2000 	str.w	r2, [r8]
 8005bb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005bb8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005bbc:	9307      	str	r3, [sp, #28]
 8005bbe:	f8cd 8018 	str.w	r8, [sp, #24]
 8005bc2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005bc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bca:	4b9c      	ldr	r3, [pc, #624]	@ (8005e3c <_printf_float+0x2c8>)
 8005bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd0:	f7fa ffbc 	bl	8000b4c <__aeabi_dcmpun>
 8005bd4:	bb70      	cbnz	r0, 8005c34 <_printf_float+0xc0>
 8005bd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bda:	4b98      	ldr	r3, [pc, #608]	@ (8005e3c <_printf_float+0x2c8>)
 8005bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8005be0:	f7fa ff96 	bl	8000b10 <__aeabi_dcmple>
 8005be4:	bb30      	cbnz	r0, 8005c34 <_printf_float+0xc0>
 8005be6:	2200      	movs	r2, #0
 8005be8:	2300      	movs	r3, #0
 8005bea:	4640      	mov	r0, r8
 8005bec:	4649      	mov	r1, r9
 8005bee:	f7fa ff85 	bl	8000afc <__aeabi_dcmplt>
 8005bf2:	b110      	cbz	r0, 8005bfa <_printf_float+0x86>
 8005bf4:	232d      	movs	r3, #45	@ 0x2d
 8005bf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bfa:	4a91      	ldr	r2, [pc, #580]	@ (8005e40 <_printf_float+0x2cc>)
 8005bfc:	4b91      	ldr	r3, [pc, #580]	@ (8005e44 <_printf_float+0x2d0>)
 8005bfe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005c02:	bf94      	ite	ls
 8005c04:	4690      	movls	r8, r2
 8005c06:	4698      	movhi	r8, r3
 8005c08:	2303      	movs	r3, #3
 8005c0a:	6123      	str	r3, [r4, #16]
 8005c0c:	f02b 0304 	bic.w	r3, fp, #4
 8005c10:	6023      	str	r3, [r4, #0]
 8005c12:	f04f 0900 	mov.w	r9, #0
 8005c16:	9700      	str	r7, [sp, #0]
 8005c18:	4633      	mov	r3, r6
 8005c1a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005c1c:	4621      	mov	r1, r4
 8005c1e:	4628      	mov	r0, r5
 8005c20:	f000 f9d2 	bl	8005fc8 <_printf_common>
 8005c24:	3001      	adds	r0, #1
 8005c26:	f040 808d 	bne.w	8005d44 <_printf_float+0x1d0>
 8005c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c2e:	b00d      	add	sp, #52	@ 0x34
 8005c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c34:	4642      	mov	r2, r8
 8005c36:	464b      	mov	r3, r9
 8005c38:	4640      	mov	r0, r8
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	f7fa ff86 	bl	8000b4c <__aeabi_dcmpun>
 8005c40:	b140      	cbz	r0, 8005c54 <_printf_float+0xe0>
 8005c42:	464b      	mov	r3, r9
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	bfbc      	itt	lt
 8005c48:	232d      	movlt	r3, #45	@ 0x2d
 8005c4a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005c4e:	4a7e      	ldr	r2, [pc, #504]	@ (8005e48 <_printf_float+0x2d4>)
 8005c50:	4b7e      	ldr	r3, [pc, #504]	@ (8005e4c <_printf_float+0x2d8>)
 8005c52:	e7d4      	b.n	8005bfe <_printf_float+0x8a>
 8005c54:	6863      	ldr	r3, [r4, #4]
 8005c56:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005c5a:	9206      	str	r2, [sp, #24]
 8005c5c:	1c5a      	adds	r2, r3, #1
 8005c5e:	d13b      	bne.n	8005cd8 <_printf_float+0x164>
 8005c60:	2306      	movs	r3, #6
 8005c62:	6063      	str	r3, [r4, #4]
 8005c64:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005c68:	2300      	movs	r3, #0
 8005c6a:	6022      	str	r2, [r4, #0]
 8005c6c:	9303      	str	r3, [sp, #12]
 8005c6e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005c70:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005c74:	ab09      	add	r3, sp, #36	@ 0x24
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	6861      	ldr	r1, [r4, #4]
 8005c7a:	ec49 8b10 	vmov	d0, r8, r9
 8005c7e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005c82:	4628      	mov	r0, r5
 8005c84:	f7ff fed7 	bl	8005a36 <__cvt>
 8005c88:	9b06      	ldr	r3, [sp, #24]
 8005c8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005c8c:	2b47      	cmp	r3, #71	@ 0x47
 8005c8e:	4680      	mov	r8, r0
 8005c90:	d129      	bne.n	8005ce6 <_printf_float+0x172>
 8005c92:	1cc8      	adds	r0, r1, #3
 8005c94:	db02      	blt.n	8005c9c <_printf_float+0x128>
 8005c96:	6863      	ldr	r3, [r4, #4]
 8005c98:	4299      	cmp	r1, r3
 8005c9a:	dd41      	ble.n	8005d20 <_printf_float+0x1ac>
 8005c9c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005ca0:	fa5f fa8a 	uxtb.w	sl, sl
 8005ca4:	3901      	subs	r1, #1
 8005ca6:	4652      	mov	r2, sl
 8005ca8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005cac:	9109      	str	r1, [sp, #36]	@ 0x24
 8005cae:	f7ff ff27 	bl	8005b00 <__exponent>
 8005cb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005cb4:	1813      	adds	r3, r2, r0
 8005cb6:	2a01      	cmp	r2, #1
 8005cb8:	4681      	mov	r9, r0
 8005cba:	6123      	str	r3, [r4, #16]
 8005cbc:	dc02      	bgt.n	8005cc4 <_printf_float+0x150>
 8005cbe:	6822      	ldr	r2, [r4, #0]
 8005cc0:	07d2      	lsls	r2, r2, #31
 8005cc2:	d501      	bpl.n	8005cc8 <_printf_float+0x154>
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	6123      	str	r3, [r4, #16]
 8005cc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d0a2      	beq.n	8005c16 <_printf_float+0xa2>
 8005cd0:	232d      	movs	r3, #45	@ 0x2d
 8005cd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cd6:	e79e      	b.n	8005c16 <_printf_float+0xa2>
 8005cd8:	9a06      	ldr	r2, [sp, #24]
 8005cda:	2a47      	cmp	r2, #71	@ 0x47
 8005cdc:	d1c2      	bne.n	8005c64 <_printf_float+0xf0>
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1c0      	bne.n	8005c64 <_printf_float+0xf0>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e7bd      	b.n	8005c62 <_printf_float+0xee>
 8005ce6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005cea:	d9db      	bls.n	8005ca4 <_printf_float+0x130>
 8005cec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005cf0:	d118      	bne.n	8005d24 <_printf_float+0x1b0>
 8005cf2:	2900      	cmp	r1, #0
 8005cf4:	6863      	ldr	r3, [r4, #4]
 8005cf6:	dd0b      	ble.n	8005d10 <_printf_float+0x19c>
 8005cf8:	6121      	str	r1, [r4, #16]
 8005cfa:	b913      	cbnz	r3, 8005d02 <_printf_float+0x18e>
 8005cfc:	6822      	ldr	r2, [r4, #0]
 8005cfe:	07d0      	lsls	r0, r2, #31
 8005d00:	d502      	bpl.n	8005d08 <_printf_float+0x194>
 8005d02:	3301      	adds	r3, #1
 8005d04:	440b      	add	r3, r1
 8005d06:	6123      	str	r3, [r4, #16]
 8005d08:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005d0a:	f04f 0900 	mov.w	r9, #0
 8005d0e:	e7db      	b.n	8005cc8 <_printf_float+0x154>
 8005d10:	b913      	cbnz	r3, 8005d18 <_printf_float+0x1a4>
 8005d12:	6822      	ldr	r2, [r4, #0]
 8005d14:	07d2      	lsls	r2, r2, #31
 8005d16:	d501      	bpl.n	8005d1c <_printf_float+0x1a8>
 8005d18:	3302      	adds	r3, #2
 8005d1a:	e7f4      	b.n	8005d06 <_printf_float+0x192>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e7f2      	b.n	8005d06 <_printf_float+0x192>
 8005d20:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005d24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d26:	4299      	cmp	r1, r3
 8005d28:	db05      	blt.n	8005d36 <_printf_float+0x1c2>
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	6121      	str	r1, [r4, #16]
 8005d2e:	07d8      	lsls	r0, r3, #31
 8005d30:	d5ea      	bpl.n	8005d08 <_printf_float+0x194>
 8005d32:	1c4b      	adds	r3, r1, #1
 8005d34:	e7e7      	b.n	8005d06 <_printf_float+0x192>
 8005d36:	2900      	cmp	r1, #0
 8005d38:	bfd4      	ite	le
 8005d3a:	f1c1 0202 	rsble	r2, r1, #2
 8005d3e:	2201      	movgt	r2, #1
 8005d40:	4413      	add	r3, r2
 8005d42:	e7e0      	b.n	8005d06 <_printf_float+0x192>
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	055a      	lsls	r2, r3, #21
 8005d48:	d407      	bmi.n	8005d5a <_printf_float+0x1e6>
 8005d4a:	6923      	ldr	r3, [r4, #16]
 8005d4c:	4642      	mov	r2, r8
 8005d4e:	4631      	mov	r1, r6
 8005d50:	4628      	mov	r0, r5
 8005d52:	47b8      	blx	r7
 8005d54:	3001      	adds	r0, #1
 8005d56:	d12b      	bne.n	8005db0 <_printf_float+0x23c>
 8005d58:	e767      	b.n	8005c2a <_printf_float+0xb6>
 8005d5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d5e:	f240 80dd 	bls.w	8005f1c <_printf_float+0x3a8>
 8005d62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d66:	2200      	movs	r2, #0
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f7fa febd 	bl	8000ae8 <__aeabi_dcmpeq>
 8005d6e:	2800      	cmp	r0, #0
 8005d70:	d033      	beq.n	8005dda <_printf_float+0x266>
 8005d72:	4a37      	ldr	r2, [pc, #220]	@ (8005e50 <_printf_float+0x2dc>)
 8005d74:	2301      	movs	r3, #1
 8005d76:	4631      	mov	r1, r6
 8005d78:	4628      	mov	r0, r5
 8005d7a:	47b8      	blx	r7
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	f43f af54 	beq.w	8005c2a <_printf_float+0xb6>
 8005d82:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005d86:	4543      	cmp	r3, r8
 8005d88:	db02      	blt.n	8005d90 <_printf_float+0x21c>
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	07d8      	lsls	r0, r3, #31
 8005d8e:	d50f      	bpl.n	8005db0 <_printf_float+0x23c>
 8005d90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d94:	4631      	mov	r1, r6
 8005d96:	4628      	mov	r0, r5
 8005d98:	47b8      	blx	r7
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	f43f af45 	beq.w	8005c2a <_printf_float+0xb6>
 8005da0:	f04f 0900 	mov.w	r9, #0
 8005da4:	f108 38ff 	add.w	r8, r8, #4294967295
 8005da8:	f104 0a1a 	add.w	sl, r4, #26
 8005dac:	45c8      	cmp	r8, r9
 8005dae:	dc09      	bgt.n	8005dc4 <_printf_float+0x250>
 8005db0:	6823      	ldr	r3, [r4, #0]
 8005db2:	079b      	lsls	r3, r3, #30
 8005db4:	f100 8103 	bmi.w	8005fbe <_printf_float+0x44a>
 8005db8:	68e0      	ldr	r0, [r4, #12]
 8005dba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005dbc:	4298      	cmp	r0, r3
 8005dbe:	bfb8      	it	lt
 8005dc0:	4618      	movlt	r0, r3
 8005dc2:	e734      	b.n	8005c2e <_printf_float+0xba>
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	4652      	mov	r2, sl
 8005dc8:	4631      	mov	r1, r6
 8005dca:	4628      	mov	r0, r5
 8005dcc:	47b8      	blx	r7
 8005dce:	3001      	adds	r0, #1
 8005dd0:	f43f af2b 	beq.w	8005c2a <_printf_float+0xb6>
 8005dd4:	f109 0901 	add.w	r9, r9, #1
 8005dd8:	e7e8      	b.n	8005dac <_printf_float+0x238>
 8005dda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	dc39      	bgt.n	8005e54 <_printf_float+0x2e0>
 8005de0:	4a1b      	ldr	r2, [pc, #108]	@ (8005e50 <_printf_float+0x2dc>)
 8005de2:	2301      	movs	r3, #1
 8005de4:	4631      	mov	r1, r6
 8005de6:	4628      	mov	r0, r5
 8005de8:	47b8      	blx	r7
 8005dea:	3001      	adds	r0, #1
 8005dec:	f43f af1d 	beq.w	8005c2a <_printf_float+0xb6>
 8005df0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005df4:	ea59 0303 	orrs.w	r3, r9, r3
 8005df8:	d102      	bne.n	8005e00 <_printf_float+0x28c>
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	07d9      	lsls	r1, r3, #31
 8005dfe:	d5d7      	bpl.n	8005db0 <_printf_float+0x23c>
 8005e00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e04:	4631      	mov	r1, r6
 8005e06:	4628      	mov	r0, r5
 8005e08:	47b8      	blx	r7
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	f43f af0d 	beq.w	8005c2a <_printf_float+0xb6>
 8005e10:	f04f 0a00 	mov.w	sl, #0
 8005e14:	f104 0b1a 	add.w	fp, r4, #26
 8005e18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e1a:	425b      	negs	r3, r3
 8005e1c:	4553      	cmp	r3, sl
 8005e1e:	dc01      	bgt.n	8005e24 <_printf_float+0x2b0>
 8005e20:	464b      	mov	r3, r9
 8005e22:	e793      	b.n	8005d4c <_printf_float+0x1d8>
 8005e24:	2301      	movs	r3, #1
 8005e26:	465a      	mov	r2, fp
 8005e28:	4631      	mov	r1, r6
 8005e2a:	4628      	mov	r0, r5
 8005e2c:	47b8      	blx	r7
 8005e2e:	3001      	adds	r0, #1
 8005e30:	f43f aefb 	beq.w	8005c2a <_printf_float+0xb6>
 8005e34:	f10a 0a01 	add.w	sl, sl, #1
 8005e38:	e7ee      	b.n	8005e18 <_printf_float+0x2a4>
 8005e3a:	bf00      	nop
 8005e3c:	7fefffff 	.word	0x7fefffff
 8005e40:	080087dc 	.word	0x080087dc
 8005e44:	080087e0 	.word	0x080087e0
 8005e48:	080087e4 	.word	0x080087e4
 8005e4c:	080087e8 	.word	0x080087e8
 8005e50:	080087ec 	.word	0x080087ec
 8005e54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e56:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005e5a:	4553      	cmp	r3, sl
 8005e5c:	bfa8      	it	ge
 8005e5e:	4653      	movge	r3, sl
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	4699      	mov	r9, r3
 8005e64:	dc36      	bgt.n	8005ed4 <_printf_float+0x360>
 8005e66:	f04f 0b00 	mov.w	fp, #0
 8005e6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e6e:	f104 021a 	add.w	r2, r4, #26
 8005e72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e74:	9306      	str	r3, [sp, #24]
 8005e76:	eba3 0309 	sub.w	r3, r3, r9
 8005e7a:	455b      	cmp	r3, fp
 8005e7c:	dc31      	bgt.n	8005ee2 <_printf_float+0x36e>
 8005e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e80:	459a      	cmp	sl, r3
 8005e82:	dc3a      	bgt.n	8005efa <_printf_float+0x386>
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	07da      	lsls	r2, r3, #31
 8005e88:	d437      	bmi.n	8005efa <_printf_float+0x386>
 8005e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e8c:	ebaa 0903 	sub.w	r9, sl, r3
 8005e90:	9b06      	ldr	r3, [sp, #24]
 8005e92:	ebaa 0303 	sub.w	r3, sl, r3
 8005e96:	4599      	cmp	r9, r3
 8005e98:	bfa8      	it	ge
 8005e9a:	4699      	movge	r9, r3
 8005e9c:	f1b9 0f00 	cmp.w	r9, #0
 8005ea0:	dc33      	bgt.n	8005f0a <_printf_float+0x396>
 8005ea2:	f04f 0800 	mov.w	r8, #0
 8005ea6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005eaa:	f104 0b1a 	add.w	fp, r4, #26
 8005eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eb0:	ebaa 0303 	sub.w	r3, sl, r3
 8005eb4:	eba3 0309 	sub.w	r3, r3, r9
 8005eb8:	4543      	cmp	r3, r8
 8005eba:	f77f af79 	ble.w	8005db0 <_printf_float+0x23c>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	465a      	mov	r2, fp
 8005ec2:	4631      	mov	r1, r6
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	47b8      	blx	r7
 8005ec8:	3001      	adds	r0, #1
 8005eca:	f43f aeae 	beq.w	8005c2a <_printf_float+0xb6>
 8005ece:	f108 0801 	add.w	r8, r8, #1
 8005ed2:	e7ec      	b.n	8005eae <_printf_float+0x33a>
 8005ed4:	4642      	mov	r2, r8
 8005ed6:	4631      	mov	r1, r6
 8005ed8:	4628      	mov	r0, r5
 8005eda:	47b8      	blx	r7
 8005edc:	3001      	adds	r0, #1
 8005ede:	d1c2      	bne.n	8005e66 <_printf_float+0x2f2>
 8005ee0:	e6a3      	b.n	8005c2a <_printf_float+0xb6>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	4631      	mov	r1, r6
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	9206      	str	r2, [sp, #24]
 8005eea:	47b8      	blx	r7
 8005eec:	3001      	adds	r0, #1
 8005eee:	f43f ae9c 	beq.w	8005c2a <_printf_float+0xb6>
 8005ef2:	9a06      	ldr	r2, [sp, #24]
 8005ef4:	f10b 0b01 	add.w	fp, fp, #1
 8005ef8:	e7bb      	b.n	8005e72 <_printf_float+0x2fe>
 8005efa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005efe:	4631      	mov	r1, r6
 8005f00:	4628      	mov	r0, r5
 8005f02:	47b8      	blx	r7
 8005f04:	3001      	adds	r0, #1
 8005f06:	d1c0      	bne.n	8005e8a <_printf_float+0x316>
 8005f08:	e68f      	b.n	8005c2a <_printf_float+0xb6>
 8005f0a:	9a06      	ldr	r2, [sp, #24]
 8005f0c:	464b      	mov	r3, r9
 8005f0e:	4442      	add	r2, r8
 8005f10:	4631      	mov	r1, r6
 8005f12:	4628      	mov	r0, r5
 8005f14:	47b8      	blx	r7
 8005f16:	3001      	adds	r0, #1
 8005f18:	d1c3      	bne.n	8005ea2 <_printf_float+0x32e>
 8005f1a:	e686      	b.n	8005c2a <_printf_float+0xb6>
 8005f1c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005f20:	f1ba 0f01 	cmp.w	sl, #1
 8005f24:	dc01      	bgt.n	8005f2a <_printf_float+0x3b6>
 8005f26:	07db      	lsls	r3, r3, #31
 8005f28:	d536      	bpl.n	8005f98 <_printf_float+0x424>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	4642      	mov	r2, r8
 8005f2e:	4631      	mov	r1, r6
 8005f30:	4628      	mov	r0, r5
 8005f32:	47b8      	blx	r7
 8005f34:	3001      	adds	r0, #1
 8005f36:	f43f ae78 	beq.w	8005c2a <_printf_float+0xb6>
 8005f3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f3e:	4631      	mov	r1, r6
 8005f40:	4628      	mov	r0, r5
 8005f42:	47b8      	blx	r7
 8005f44:	3001      	adds	r0, #1
 8005f46:	f43f ae70 	beq.w	8005c2a <_printf_float+0xb6>
 8005f4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f4e:	2200      	movs	r2, #0
 8005f50:	2300      	movs	r3, #0
 8005f52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f56:	f7fa fdc7 	bl	8000ae8 <__aeabi_dcmpeq>
 8005f5a:	b9c0      	cbnz	r0, 8005f8e <_printf_float+0x41a>
 8005f5c:	4653      	mov	r3, sl
 8005f5e:	f108 0201 	add.w	r2, r8, #1
 8005f62:	4631      	mov	r1, r6
 8005f64:	4628      	mov	r0, r5
 8005f66:	47b8      	blx	r7
 8005f68:	3001      	adds	r0, #1
 8005f6a:	d10c      	bne.n	8005f86 <_printf_float+0x412>
 8005f6c:	e65d      	b.n	8005c2a <_printf_float+0xb6>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	465a      	mov	r2, fp
 8005f72:	4631      	mov	r1, r6
 8005f74:	4628      	mov	r0, r5
 8005f76:	47b8      	blx	r7
 8005f78:	3001      	adds	r0, #1
 8005f7a:	f43f ae56 	beq.w	8005c2a <_printf_float+0xb6>
 8005f7e:	f108 0801 	add.w	r8, r8, #1
 8005f82:	45d0      	cmp	r8, sl
 8005f84:	dbf3      	blt.n	8005f6e <_printf_float+0x3fa>
 8005f86:	464b      	mov	r3, r9
 8005f88:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005f8c:	e6df      	b.n	8005d4e <_printf_float+0x1da>
 8005f8e:	f04f 0800 	mov.w	r8, #0
 8005f92:	f104 0b1a 	add.w	fp, r4, #26
 8005f96:	e7f4      	b.n	8005f82 <_printf_float+0x40e>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	4642      	mov	r2, r8
 8005f9c:	e7e1      	b.n	8005f62 <_printf_float+0x3ee>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	464a      	mov	r2, r9
 8005fa2:	4631      	mov	r1, r6
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	47b8      	blx	r7
 8005fa8:	3001      	adds	r0, #1
 8005faa:	f43f ae3e 	beq.w	8005c2a <_printf_float+0xb6>
 8005fae:	f108 0801 	add.w	r8, r8, #1
 8005fb2:	68e3      	ldr	r3, [r4, #12]
 8005fb4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005fb6:	1a5b      	subs	r3, r3, r1
 8005fb8:	4543      	cmp	r3, r8
 8005fba:	dcf0      	bgt.n	8005f9e <_printf_float+0x42a>
 8005fbc:	e6fc      	b.n	8005db8 <_printf_float+0x244>
 8005fbe:	f04f 0800 	mov.w	r8, #0
 8005fc2:	f104 0919 	add.w	r9, r4, #25
 8005fc6:	e7f4      	b.n	8005fb2 <_printf_float+0x43e>

08005fc8 <_printf_common>:
 8005fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fcc:	4616      	mov	r6, r2
 8005fce:	4698      	mov	r8, r3
 8005fd0:	688a      	ldr	r2, [r1, #8]
 8005fd2:	690b      	ldr	r3, [r1, #16]
 8005fd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	bfb8      	it	lt
 8005fdc:	4613      	movlt	r3, r2
 8005fde:	6033      	str	r3, [r6, #0]
 8005fe0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fe4:	4607      	mov	r7, r0
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	b10a      	cbz	r2, 8005fee <_printf_common+0x26>
 8005fea:	3301      	adds	r3, #1
 8005fec:	6033      	str	r3, [r6, #0]
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	0699      	lsls	r1, r3, #26
 8005ff2:	bf42      	ittt	mi
 8005ff4:	6833      	ldrmi	r3, [r6, #0]
 8005ff6:	3302      	addmi	r3, #2
 8005ff8:	6033      	strmi	r3, [r6, #0]
 8005ffa:	6825      	ldr	r5, [r4, #0]
 8005ffc:	f015 0506 	ands.w	r5, r5, #6
 8006000:	d106      	bne.n	8006010 <_printf_common+0x48>
 8006002:	f104 0a19 	add.w	sl, r4, #25
 8006006:	68e3      	ldr	r3, [r4, #12]
 8006008:	6832      	ldr	r2, [r6, #0]
 800600a:	1a9b      	subs	r3, r3, r2
 800600c:	42ab      	cmp	r3, r5
 800600e:	dc26      	bgt.n	800605e <_printf_common+0x96>
 8006010:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006014:	6822      	ldr	r2, [r4, #0]
 8006016:	3b00      	subs	r3, #0
 8006018:	bf18      	it	ne
 800601a:	2301      	movne	r3, #1
 800601c:	0692      	lsls	r2, r2, #26
 800601e:	d42b      	bmi.n	8006078 <_printf_common+0xb0>
 8006020:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006024:	4641      	mov	r1, r8
 8006026:	4638      	mov	r0, r7
 8006028:	47c8      	blx	r9
 800602a:	3001      	adds	r0, #1
 800602c:	d01e      	beq.n	800606c <_printf_common+0xa4>
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	6922      	ldr	r2, [r4, #16]
 8006032:	f003 0306 	and.w	r3, r3, #6
 8006036:	2b04      	cmp	r3, #4
 8006038:	bf02      	ittt	eq
 800603a:	68e5      	ldreq	r5, [r4, #12]
 800603c:	6833      	ldreq	r3, [r6, #0]
 800603e:	1aed      	subeq	r5, r5, r3
 8006040:	68a3      	ldr	r3, [r4, #8]
 8006042:	bf0c      	ite	eq
 8006044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006048:	2500      	movne	r5, #0
 800604a:	4293      	cmp	r3, r2
 800604c:	bfc4      	itt	gt
 800604e:	1a9b      	subgt	r3, r3, r2
 8006050:	18ed      	addgt	r5, r5, r3
 8006052:	2600      	movs	r6, #0
 8006054:	341a      	adds	r4, #26
 8006056:	42b5      	cmp	r5, r6
 8006058:	d11a      	bne.n	8006090 <_printf_common+0xc8>
 800605a:	2000      	movs	r0, #0
 800605c:	e008      	b.n	8006070 <_printf_common+0xa8>
 800605e:	2301      	movs	r3, #1
 8006060:	4652      	mov	r2, sl
 8006062:	4641      	mov	r1, r8
 8006064:	4638      	mov	r0, r7
 8006066:	47c8      	blx	r9
 8006068:	3001      	adds	r0, #1
 800606a:	d103      	bne.n	8006074 <_printf_common+0xac>
 800606c:	f04f 30ff 	mov.w	r0, #4294967295
 8006070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006074:	3501      	adds	r5, #1
 8006076:	e7c6      	b.n	8006006 <_printf_common+0x3e>
 8006078:	18e1      	adds	r1, r4, r3
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	2030      	movs	r0, #48	@ 0x30
 800607e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006082:	4422      	add	r2, r4
 8006084:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006088:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800608c:	3302      	adds	r3, #2
 800608e:	e7c7      	b.n	8006020 <_printf_common+0x58>
 8006090:	2301      	movs	r3, #1
 8006092:	4622      	mov	r2, r4
 8006094:	4641      	mov	r1, r8
 8006096:	4638      	mov	r0, r7
 8006098:	47c8      	blx	r9
 800609a:	3001      	adds	r0, #1
 800609c:	d0e6      	beq.n	800606c <_printf_common+0xa4>
 800609e:	3601      	adds	r6, #1
 80060a0:	e7d9      	b.n	8006056 <_printf_common+0x8e>
	...

080060a4 <_printf_i>:
 80060a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060a8:	7e0f      	ldrb	r7, [r1, #24]
 80060aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060ac:	2f78      	cmp	r7, #120	@ 0x78
 80060ae:	4691      	mov	r9, r2
 80060b0:	4680      	mov	r8, r0
 80060b2:	460c      	mov	r4, r1
 80060b4:	469a      	mov	sl, r3
 80060b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060ba:	d807      	bhi.n	80060cc <_printf_i+0x28>
 80060bc:	2f62      	cmp	r7, #98	@ 0x62
 80060be:	d80a      	bhi.n	80060d6 <_printf_i+0x32>
 80060c0:	2f00      	cmp	r7, #0
 80060c2:	f000 80d2 	beq.w	800626a <_printf_i+0x1c6>
 80060c6:	2f58      	cmp	r7, #88	@ 0x58
 80060c8:	f000 80b9 	beq.w	800623e <_printf_i+0x19a>
 80060cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060d4:	e03a      	b.n	800614c <_printf_i+0xa8>
 80060d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060da:	2b15      	cmp	r3, #21
 80060dc:	d8f6      	bhi.n	80060cc <_printf_i+0x28>
 80060de:	a101      	add	r1, pc, #4	@ (adr r1, 80060e4 <_printf_i+0x40>)
 80060e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060e4:	0800613d 	.word	0x0800613d
 80060e8:	08006151 	.word	0x08006151
 80060ec:	080060cd 	.word	0x080060cd
 80060f0:	080060cd 	.word	0x080060cd
 80060f4:	080060cd 	.word	0x080060cd
 80060f8:	080060cd 	.word	0x080060cd
 80060fc:	08006151 	.word	0x08006151
 8006100:	080060cd 	.word	0x080060cd
 8006104:	080060cd 	.word	0x080060cd
 8006108:	080060cd 	.word	0x080060cd
 800610c:	080060cd 	.word	0x080060cd
 8006110:	08006251 	.word	0x08006251
 8006114:	0800617b 	.word	0x0800617b
 8006118:	0800620b 	.word	0x0800620b
 800611c:	080060cd 	.word	0x080060cd
 8006120:	080060cd 	.word	0x080060cd
 8006124:	08006273 	.word	0x08006273
 8006128:	080060cd 	.word	0x080060cd
 800612c:	0800617b 	.word	0x0800617b
 8006130:	080060cd 	.word	0x080060cd
 8006134:	080060cd 	.word	0x080060cd
 8006138:	08006213 	.word	0x08006213
 800613c:	6833      	ldr	r3, [r6, #0]
 800613e:	1d1a      	adds	r2, r3, #4
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6032      	str	r2, [r6, #0]
 8006144:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006148:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800614c:	2301      	movs	r3, #1
 800614e:	e09d      	b.n	800628c <_printf_i+0x1e8>
 8006150:	6833      	ldr	r3, [r6, #0]
 8006152:	6820      	ldr	r0, [r4, #0]
 8006154:	1d19      	adds	r1, r3, #4
 8006156:	6031      	str	r1, [r6, #0]
 8006158:	0606      	lsls	r6, r0, #24
 800615a:	d501      	bpl.n	8006160 <_printf_i+0xbc>
 800615c:	681d      	ldr	r5, [r3, #0]
 800615e:	e003      	b.n	8006168 <_printf_i+0xc4>
 8006160:	0645      	lsls	r5, r0, #25
 8006162:	d5fb      	bpl.n	800615c <_printf_i+0xb8>
 8006164:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006168:	2d00      	cmp	r5, #0
 800616a:	da03      	bge.n	8006174 <_printf_i+0xd0>
 800616c:	232d      	movs	r3, #45	@ 0x2d
 800616e:	426d      	negs	r5, r5
 8006170:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006174:	4859      	ldr	r0, [pc, #356]	@ (80062dc <_printf_i+0x238>)
 8006176:	230a      	movs	r3, #10
 8006178:	e011      	b.n	800619e <_printf_i+0xfa>
 800617a:	6821      	ldr	r1, [r4, #0]
 800617c:	6833      	ldr	r3, [r6, #0]
 800617e:	0608      	lsls	r0, r1, #24
 8006180:	f853 5b04 	ldr.w	r5, [r3], #4
 8006184:	d402      	bmi.n	800618c <_printf_i+0xe8>
 8006186:	0649      	lsls	r1, r1, #25
 8006188:	bf48      	it	mi
 800618a:	b2ad      	uxthmi	r5, r5
 800618c:	2f6f      	cmp	r7, #111	@ 0x6f
 800618e:	4853      	ldr	r0, [pc, #332]	@ (80062dc <_printf_i+0x238>)
 8006190:	6033      	str	r3, [r6, #0]
 8006192:	bf14      	ite	ne
 8006194:	230a      	movne	r3, #10
 8006196:	2308      	moveq	r3, #8
 8006198:	2100      	movs	r1, #0
 800619a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800619e:	6866      	ldr	r6, [r4, #4]
 80061a0:	60a6      	str	r6, [r4, #8]
 80061a2:	2e00      	cmp	r6, #0
 80061a4:	bfa2      	ittt	ge
 80061a6:	6821      	ldrge	r1, [r4, #0]
 80061a8:	f021 0104 	bicge.w	r1, r1, #4
 80061ac:	6021      	strge	r1, [r4, #0]
 80061ae:	b90d      	cbnz	r5, 80061b4 <_printf_i+0x110>
 80061b0:	2e00      	cmp	r6, #0
 80061b2:	d04b      	beq.n	800624c <_printf_i+0x1a8>
 80061b4:	4616      	mov	r6, r2
 80061b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80061ba:	fb03 5711 	mls	r7, r3, r1, r5
 80061be:	5dc7      	ldrb	r7, [r0, r7]
 80061c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061c4:	462f      	mov	r7, r5
 80061c6:	42bb      	cmp	r3, r7
 80061c8:	460d      	mov	r5, r1
 80061ca:	d9f4      	bls.n	80061b6 <_printf_i+0x112>
 80061cc:	2b08      	cmp	r3, #8
 80061ce:	d10b      	bne.n	80061e8 <_printf_i+0x144>
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	07df      	lsls	r7, r3, #31
 80061d4:	d508      	bpl.n	80061e8 <_printf_i+0x144>
 80061d6:	6923      	ldr	r3, [r4, #16]
 80061d8:	6861      	ldr	r1, [r4, #4]
 80061da:	4299      	cmp	r1, r3
 80061dc:	bfde      	ittt	le
 80061de:	2330      	movle	r3, #48	@ 0x30
 80061e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061e8:	1b92      	subs	r2, r2, r6
 80061ea:	6122      	str	r2, [r4, #16]
 80061ec:	f8cd a000 	str.w	sl, [sp]
 80061f0:	464b      	mov	r3, r9
 80061f2:	aa03      	add	r2, sp, #12
 80061f4:	4621      	mov	r1, r4
 80061f6:	4640      	mov	r0, r8
 80061f8:	f7ff fee6 	bl	8005fc8 <_printf_common>
 80061fc:	3001      	adds	r0, #1
 80061fe:	d14a      	bne.n	8006296 <_printf_i+0x1f2>
 8006200:	f04f 30ff 	mov.w	r0, #4294967295
 8006204:	b004      	add	sp, #16
 8006206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	f043 0320 	orr.w	r3, r3, #32
 8006210:	6023      	str	r3, [r4, #0]
 8006212:	4833      	ldr	r0, [pc, #204]	@ (80062e0 <_printf_i+0x23c>)
 8006214:	2778      	movs	r7, #120	@ 0x78
 8006216:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800621a:	6823      	ldr	r3, [r4, #0]
 800621c:	6831      	ldr	r1, [r6, #0]
 800621e:	061f      	lsls	r7, r3, #24
 8006220:	f851 5b04 	ldr.w	r5, [r1], #4
 8006224:	d402      	bmi.n	800622c <_printf_i+0x188>
 8006226:	065f      	lsls	r7, r3, #25
 8006228:	bf48      	it	mi
 800622a:	b2ad      	uxthmi	r5, r5
 800622c:	6031      	str	r1, [r6, #0]
 800622e:	07d9      	lsls	r1, r3, #31
 8006230:	bf44      	itt	mi
 8006232:	f043 0320 	orrmi.w	r3, r3, #32
 8006236:	6023      	strmi	r3, [r4, #0]
 8006238:	b11d      	cbz	r5, 8006242 <_printf_i+0x19e>
 800623a:	2310      	movs	r3, #16
 800623c:	e7ac      	b.n	8006198 <_printf_i+0xf4>
 800623e:	4827      	ldr	r0, [pc, #156]	@ (80062dc <_printf_i+0x238>)
 8006240:	e7e9      	b.n	8006216 <_printf_i+0x172>
 8006242:	6823      	ldr	r3, [r4, #0]
 8006244:	f023 0320 	bic.w	r3, r3, #32
 8006248:	6023      	str	r3, [r4, #0]
 800624a:	e7f6      	b.n	800623a <_printf_i+0x196>
 800624c:	4616      	mov	r6, r2
 800624e:	e7bd      	b.n	80061cc <_printf_i+0x128>
 8006250:	6833      	ldr	r3, [r6, #0]
 8006252:	6825      	ldr	r5, [r4, #0]
 8006254:	6961      	ldr	r1, [r4, #20]
 8006256:	1d18      	adds	r0, r3, #4
 8006258:	6030      	str	r0, [r6, #0]
 800625a:	062e      	lsls	r6, r5, #24
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	d501      	bpl.n	8006264 <_printf_i+0x1c0>
 8006260:	6019      	str	r1, [r3, #0]
 8006262:	e002      	b.n	800626a <_printf_i+0x1c6>
 8006264:	0668      	lsls	r0, r5, #25
 8006266:	d5fb      	bpl.n	8006260 <_printf_i+0x1bc>
 8006268:	8019      	strh	r1, [r3, #0]
 800626a:	2300      	movs	r3, #0
 800626c:	6123      	str	r3, [r4, #16]
 800626e:	4616      	mov	r6, r2
 8006270:	e7bc      	b.n	80061ec <_printf_i+0x148>
 8006272:	6833      	ldr	r3, [r6, #0]
 8006274:	1d1a      	adds	r2, r3, #4
 8006276:	6032      	str	r2, [r6, #0]
 8006278:	681e      	ldr	r6, [r3, #0]
 800627a:	6862      	ldr	r2, [r4, #4]
 800627c:	2100      	movs	r1, #0
 800627e:	4630      	mov	r0, r6
 8006280:	f7f9 ffb6 	bl	80001f0 <memchr>
 8006284:	b108      	cbz	r0, 800628a <_printf_i+0x1e6>
 8006286:	1b80      	subs	r0, r0, r6
 8006288:	6060      	str	r0, [r4, #4]
 800628a:	6863      	ldr	r3, [r4, #4]
 800628c:	6123      	str	r3, [r4, #16]
 800628e:	2300      	movs	r3, #0
 8006290:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006294:	e7aa      	b.n	80061ec <_printf_i+0x148>
 8006296:	6923      	ldr	r3, [r4, #16]
 8006298:	4632      	mov	r2, r6
 800629a:	4649      	mov	r1, r9
 800629c:	4640      	mov	r0, r8
 800629e:	47d0      	blx	sl
 80062a0:	3001      	adds	r0, #1
 80062a2:	d0ad      	beq.n	8006200 <_printf_i+0x15c>
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	079b      	lsls	r3, r3, #30
 80062a8:	d413      	bmi.n	80062d2 <_printf_i+0x22e>
 80062aa:	68e0      	ldr	r0, [r4, #12]
 80062ac:	9b03      	ldr	r3, [sp, #12]
 80062ae:	4298      	cmp	r0, r3
 80062b0:	bfb8      	it	lt
 80062b2:	4618      	movlt	r0, r3
 80062b4:	e7a6      	b.n	8006204 <_printf_i+0x160>
 80062b6:	2301      	movs	r3, #1
 80062b8:	4632      	mov	r2, r6
 80062ba:	4649      	mov	r1, r9
 80062bc:	4640      	mov	r0, r8
 80062be:	47d0      	blx	sl
 80062c0:	3001      	adds	r0, #1
 80062c2:	d09d      	beq.n	8006200 <_printf_i+0x15c>
 80062c4:	3501      	adds	r5, #1
 80062c6:	68e3      	ldr	r3, [r4, #12]
 80062c8:	9903      	ldr	r1, [sp, #12]
 80062ca:	1a5b      	subs	r3, r3, r1
 80062cc:	42ab      	cmp	r3, r5
 80062ce:	dcf2      	bgt.n	80062b6 <_printf_i+0x212>
 80062d0:	e7eb      	b.n	80062aa <_printf_i+0x206>
 80062d2:	2500      	movs	r5, #0
 80062d4:	f104 0619 	add.w	r6, r4, #25
 80062d8:	e7f5      	b.n	80062c6 <_printf_i+0x222>
 80062da:	bf00      	nop
 80062dc:	080087ee 	.word	0x080087ee
 80062e0:	080087ff 	.word	0x080087ff

080062e4 <std>:
 80062e4:	2300      	movs	r3, #0
 80062e6:	b510      	push	{r4, lr}
 80062e8:	4604      	mov	r4, r0
 80062ea:	e9c0 3300 	strd	r3, r3, [r0]
 80062ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062f2:	6083      	str	r3, [r0, #8]
 80062f4:	8181      	strh	r1, [r0, #12]
 80062f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80062f8:	81c2      	strh	r2, [r0, #14]
 80062fa:	6183      	str	r3, [r0, #24]
 80062fc:	4619      	mov	r1, r3
 80062fe:	2208      	movs	r2, #8
 8006300:	305c      	adds	r0, #92	@ 0x5c
 8006302:	f000 f914 	bl	800652e <memset>
 8006306:	4b0d      	ldr	r3, [pc, #52]	@ (800633c <std+0x58>)
 8006308:	6263      	str	r3, [r4, #36]	@ 0x24
 800630a:	4b0d      	ldr	r3, [pc, #52]	@ (8006340 <std+0x5c>)
 800630c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800630e:	4b0d      	ldr	r3, [pc, #52]	@ (8006344 <std+0x60>)
 8006310:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006312:	4b0d      	ldr	r3, [pc, #52]	@ (8006348 <std+0x64>)
 8006314:	6323      	str	r3, [r4, #48]	@ 0x30
 8006316:	4b0d      	ldr	r3, [pc, #52]	@ (800634c <std+0x68>)
 8006318:	6224      	str	r4, [r4, #32]
 800631a:	429c      	cmp	r4, r3
 800631c:	d006      	beq.n	800632c <std+0x48>
 800631e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006322:	4294      	cmp	r4, r2
 8006324:	d002      	beq.n	800632c <std+0x48>
 8006326:	33d0      	adds	r3, #208	@ 0xd0
 8006328:	429c      	cmp	r4, r3
 800632a:	d105      	bne.n	8006338 <std+0x54>
 800632c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006334:	f000 b978 	b.w	8006628 <__retarget_lock_init_recursive>
 8006338:	bd10      	pop	{r4, pc}
 800633a:	bf00      	nop
 800633c:	080064a9 	.word	0x080064a9
 8006340:	080064cb 	.word	0x080064cb
 8006344:	08006503 	.word	0x08006503
 8006348:	08006527 	.word	0x08006527
 800634c:	20000840 	.word	0x20000840

08006350 <stdio_exit_handler>:
 8006350:	4a02      	ldr	r2, [pc, #8]	@ (800635c <stdio_exit_handler+0xc>)
 8006352:	4903      	ldr	r1, [pc, #12]	@ (8006360 <stdio_exit_handler+0x10>)
 8006354:	4803      	ldr	r0, [pc, #12]	@ (8006364 <stdio_exit_handler+0x14>)
 8006356:	f000 b869 	b.w	800642c <_fwalk_sglue>
 800635a:	bf00      	nop
 800635c:	2000000c 	.word	0x2000000c
 8006360:	08007f85 	.word	0x08007f85
 8006364:	2000001c 	.word	0x2000001c

08006368 <cleanup_stdio>:
 8006368:	6841      	ldr	r1, [r0, #4]
 800636a:	4b0c      	ldr	r3, [pc, #48]	@ (800639c <cleanup_stdio+0x34>)
 800636c:	4299      	cmp	r1, r3
 800636e:	b510      	push	{r4, lr}
 8006370:	4604      	mov	r4, r0
 8006372:	d001      	beq.n	8006378 <cleanup_stdio+0x10>
 8006374:	f001 fe06 	bl	8007f84 <_fflush_r>
 8006378:	68a1      	ldr	r1, [r4, #8]
 800637a:	4b09      	ldr	r3, [pc, #36]	@ (80063a0 <cleanup_stdio+0x38>)
 800637c:	4299      	cmp	r1, r3
 800637e:	d002      	beq.n	8006386 <cleanup_stdio+0x1e>
 8006380:	4620      	mov	r0, r4
 8006382:	f001 fdff 	bl	8007f84 <_fflush_r>
 8006386:	68e1      	ldr	r1, [r4, #12]
 8006388:	4b06      	ldr	r3, [pc, #24]	@ (80063a4 <cleanup_stdio+0x3c>)
 800638a:	4299      	cmp	r1, r3
 800638c:	d004      	beq.n	8006398 <cleanup_stdio+0x30>
 800638e:	4620      	mov	r0, r4
 8006390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006394:	f001 bdf6 	b.w	8007f84 <_fflush_r>
 8006398:	bd10      	pop	{r4, pc}
 800639a:	bf00      	nop
 800639c:	20000840 	.word	0x20000840
 80063a0:	200008a8 	.word	0x200008a8
 80063a4:	20000910 	.word	0x20000910

080063a8 <global_stdio_init.part.0>:
 80063a8:	b510      	push	{r4, lr}
 80063aa:	4b0b      	ldr	r3, [pc, #44]	@ (80063d8 <global_stdio_init.part.0+0x30>)
 80063ac:	4c0b      	ldr	r4, [pc, #44]	@ (80063dc <global_stdio_init.part.0+0x34>)
 80063ae:	4a0c      	ldr	r2, [pc, #48]	@ (80063e0 <global_stdio_init.part.0+0x38>)
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	4620      	mov	r0, r4
 80063b4:	2200      	movs	r2, #0
 80063b6:	2104      	movs	r1, #4
 80063b8:	f7ff ff94 	bl	80062e4 <std>
 80063bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80063c0:	2201      	movs	r2, #1
 80063c2:	2109      	movs	r1, #9
 80063c4:	f7ff ff8e 	bl	80062e4 <std>
 80063c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80063cc:	2202      	movs	r2, #2
 80063ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063d2:	2112      	movs	r1, #18
 80063d4:	f7ff bf86 	b.w	80062e4 <std>
 80063d8:	20000978 	.word	0x20000978
 80063dc:	20000840 	.word	0x20000840
 80063e0:	08006351 	.word	0x08006351

080063e4 <__sfp_lock_acquire>:
 80063e4:	4801      	ldr	r0, [pc, #4]	@ (80063ec <__sfp_lock_acquire+0x8>)
 80063e6:	f000 b920 	b.w	800662a <__retarget_lock_acquire_recursive>
 80063ea:	bf00      	nop
 80063ec:	20000981 	.word	0x20000981

080063f0 <__sfp_lock_release>:
 80063f0:	4801      	ldr	r0, [pc, #4]	@ (80063f8 <__sfp_lock_release+0x8>)
 80063f2:	f000 b91b 	b.w	800662c <__retarget_lock_release_recursive>
 80063f6:	bf00      	nop
 80063f8:	20000981 	.word	0x20000981

080063fc <__sinit>:
 80063fc:	b510      	push	{r4, lr}
 80063fe:	4604      	mov	r4, r0
 8006400:	f7ff fff0 	bl	80063e4 <__sfp_lock_acquire>
 8006404:	6a23      	ldr	r3, [r4, #32]
 8006406:	b11b      	cbz	r3, 8006410 <__sinit+0x14>
 8006408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800640c:	f7ff bff0 	b.w	80063f0 <__sfp_lock_release>
 8006410:	4b04      	ldr	r3, [pc, #16]	@ (8006424 <__sinit+0x28>)
 8006412:	6223      	str	r3, [r4, #32]
 8006414:	4b04      	ldr	r3, [pc, #16]	@ (8006428 <__sinit+0x2c>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1f5      	bne.n	8006408 <__sinit+0xc>
 800641c:	f7ff ffc4 	bl	80063a8 <global_stdio_init.part.0>
 8006420:	e7f2      	b.n	8006408 <__sinit+0xc>
 8006422:	bf00      	nop
 8006424:	08006369 	.word	0x08006369
 8006428:	20000978 	.word	0x20000978

0800642c <_fwalk_sglue>:
 800642c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006430:	4607      	mov	r7, r0
 8006432:	4688      	mov	r8, r1
 8006434:	4614      	mov	r4, r2
 8006436:	2600      	movs	r6, #0
 8006438:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800643c:	f1b9 0901 	subs.w	r9, r9, #1
 8006440:	d505      	bpl.n	800644e <_fwalk_sglue+0x22>
 8006442:	6824      	ldr	r4, [r4, #0]
 8006444:	2c00      	cmp	r4, #0
 8006446:	d1f7      	bne.n	8006438 <_fwalk_sglue+0xc>
 8006448:	4630      	mov	r0, r6
 800644a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800644e:	89ab      	ldrh	r3, [r5, #12]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d907      	bls.n	8006464 <_fwalk_sglue+0x38>
 8006454:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006458:	3301      	adds	r3, #1
 800645a:	d003      	beq.n	8006464 <_fwalk_sglue+0x38>
 800645c:	4629      	mov	r1, r5
 800645e:	4638      	mov	r0, r7
 8006460:	47c0      	blx	r8
 8006462:	4306      	orrs	r6, r0
 8006464:	3568      	adds	r5, #104	@ 0x68
 8006466:	e7e9      	b.n	800643c <_fwalk_sglue+0x10>

08006468 <siprintf>:
 8006468:	b40e      	push	{r1, r2, r3}
 800646a:	b500      	push	{lr}
 800646c:	b09c      	sub	sp, #112	@ 0x70
 800646e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006470:	9002      	str	r0, [sp, #8]
 8006472:	9006      	str	r0, [sp, #24]
 8006474:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006478:	4809      	ldr	r0, [pc, #36]	@ (80064a0 <siprintf+0x38>)
 800647a:	9107      	str	r1, [sp, #28]
 800647c:	9104      	str	r1, [sp, #16]
 800647e:	4909      	ldr	r1, [pc, #36]	@ (80064a4 <siprintf+0x3c>)
 8006480:	f853 2b04 	ldr.w	r2, [r3], #4
 8006484:	9105      	str	r1, [sp, #20]
 8006486:	6800      	ldr	r0, [r0, #0]
 8006488:	9301      	str	r3, [sp, #4]
 800648a:	a902      	add	r1, sp, #8
 800648c:	f001 fbfa 	bl	8007c84 <_svfiprintf_r>
 8006490:	9b02      	ldr	r3, [sp, #8]
 8006492:	2200      	movs	r2, #0
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	b01c      	add	sp, #112	@ 0x70
 8006498:	f85d eb04 	ldr.w	lr, [sp], #4
 800649c:	b003      	add	sp, #12
 800649e:	4770      	bx	lr
 80064a0:	20000018 	.word	0x20000018
 80064a4:	ffff0208 	.word	0xffff0208

080064a8 <__sread>:
 80064a8:	b510      	push	{r4, lr}
 80064aa:	460c      	mov	r4, r1
 80064ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b0:	f000 f86c 	bl	800658c <_read_r>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	bfab      	itete	ge
 80064b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80064ba:	89a3      	ldrhlt	r3, [r4, #12]
 80064bc:	181b      	addge	r3, r3, r0
 80064be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80064c2:	bfac      	ite	ge
 80064c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80064c6:	81a3      	strhlt	r3, [r4, #12]
 80064c8:	bd10      	pop	{r4, pc}

080064ca <__swrite>:
 80064ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ce:	461f      	mov	r7, r3
 80064d0:	898b      	ldrh	r3, [r1, #12]
 80064d2:	05db      	lsls	r3, r3, #23
 80064d4:	4605      	mov	r5, r0
 80064d6:	460c      	mov	r4, r1
 80064d8:	4616      	mov	r6, r2
 80064da:	d505      	bpl.n	80064e8 <__swrite+0x1e>
 80064dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064e0:	2302      	movs	r3, #2
 80064e2:	2200      	movs	r2, #0
 80064e4:	f000 f840 	bl	8006568 <_lseek_r>
 80064e8:	89a3      	ldrh	r3, [r4, #12]
 80064ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064f2:	81a3      	strh	r3, [r4, #12]
 80064f4:	4632      	mov	r2, r6
 80064f6:	463b      	mov	r3, r7
 80064f8:	4628      	mov	r0, r5
 80064fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064fe:	f000 b857 	b.w	80065b0 <_write_r>

08006502 <__sseek>:
 8006502:	b510      	push	{r4, lr}
 8006504:	460c      	mov	r4, r1
 8006506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800650a:	f000 f82d 	bl	8006568 <_lseek_r>
 800650e:	1c43      	adds	r3, r0, #1
 8006510:	89a3      	ldrh	r3, [r4, #12]
 8006512:	bf15      	itete	ne
 8006514:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006516:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800651a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800651e:	81a3      	strheq	r3, [r4, #12]
 8006520:	bf18      	it	ne
 8006522:	81a3      	strhne	r3, [r4, #12]
 8006524:	bd10      	pop	{r4, pc}

08006526 <__sclose>:
 8006526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800652a:	f000 b80d 	b.w	8006548 <_close_r>

0800652e <memset>:
 800652e:	4402      	add	r2, r0
 8006530:	4603      	mov	r3, r0
 8006532:	4293      	cmp	r3, r2
 8006534:	d100      	bne.n	8006538 <memset+0xa>
 8006536:	4770      	bx	lr
 8006538:	f803 1b01 	strb.w	r1, [r3], #1
 800653c:	e7f9      	b.n	8006532 <memset+0x4>
	...

08006540 <_localeconv_r>:
 8006540:	4800      	ldr	r0, [pc, #0]	@ (8006544 <_localeconv_r+0x4>)
 8006542:	4770      	bx	lr
 8006544:	20000158 	.word	0x20000158

08006548 <_close_r>:
 8006548:	b538      	push	{r3, r4, r5, lr}
 800654a:	4d06      	ldr	r5, [pc, #24]	@ (8006564 <_close_r+0x1c>)
 800654c:	2300      	movs	r3, #0
 800654e:	4604      	mov	r4, r0
 8006550:	4608      	mov	r0, r1
 8006552:	602b      	str	r3, [r5, #0]
 8006554:	f7fb fb83 	bl	8001c5e <_close>
 8006558:	1c43      	adds	r3, r0, #1
 800655a:	d102      	bne.n	8006562 <_close_r+0x1a>
 800655c:	682b      	ldr	r3, [r5, #0]
 800655e:	b103      	cbz	r3, 8006562 <_close_r+0x1a>
 8006560:	6023      	str	r3, [r4, #0]
 8006562:	bd38      	pop	{r3, r4, r5, pc}
 8006564:	2000097c 	.word	0x2000097c

08006568 <_lseek_r>:
 8006568:	b538      	push	{r3, r4, r5, lr}
 800656a:	4d07      	ldr	r5, [pc, #28]	@ (8006588 <_lseek_r+0x20>)
 800656c:	4604      	mov	r4, r0
 800656e:	4608      	mov	r0, r1
 8006570:	4611      	mov	r1, r2
 8006572:	2200      	movs	r2, #0
 8006574:	602a      	str	r2, [r5, #0]
 8006576:	461a      	mov	r2, r3
 8006578:	f7fb fb98 	bl	8001cac <_lseek>
 800657c:	1c43      	adds	r3, r0, #1
 800657e:	d102      	bne.n	8006586 <_lseek_r+0x1e>
 8006580:	682b      	ldr	r3, [r5, #0]
 8006582:	b103      	cbz	r3, 8006586 <_lseek_r+0x1e>
 8006584:	6023      	str	r3, [r4, #0]
 8006586:	bd38      	pop	{r3, r4, r5, pc}
 8006588:	2000097c 	.word	0x2000097c

0800658c <_read_r>:
 800658c:	b538      	push	{r3, r4, r5, lr}
 800658e:	4d07      	ldr	r5, [pc, #28]	@ (80065ac <_read_r+0x20>)
 8006590:	4604      	mov	r4, r0
 8006592:	4608      	mov	r0, r1
 8006594:	4611      	mov	r1, r2
 8006596:	2200      	movs	r2, #0
 8006598:	602a      	str	r2, [r5, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	f7fb fb26 	bl	8001bec <_read>
 80065a0:	1c43      	adds	r3, r0, #1
 80065a2:	d102      	bne.n	80065aa <_read_r+0x1e>
 80065a4:	682b      	ldr	r3, [r5, #0]
 80065a6:	b103      	cbz	r3, 80065aa <_read_r+0x1e>
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	bd38      	pop	{r3, r4, r5, pc}
 80065ac:	2000097c 	.word	0x2000097c

080065b0 <_write_r>:
 80065b0:	b538      	push	{r3, r4, r5, lr}
 80065b2:	4d07      	ldr	r5, [pc, #28]	@ (80065d0 <_write_r+0x20>)
 80065b4:	4604      	mov	r4, r0
 80065b6:	4608      	mov	r0, r1
 80065b8:	4611      	mov	r1, r2
 80065ba:	2200      	movs	r2, #0
 80065bc:	602a      	str	r2, [r5, #0]
 80065be:	461a      	mov	r2, r3
 80065c0:	f7fb fb31 	bl	8001c26 <_write>
 80065c4:	1c43      	adds	r3, r0, #1
 80065c6:	d102      	bne.n	80065ce <_write_r+0x1e>
 80065c8:	682b      	ldr	r3, [r5, #0]
 80065ca:	b103      	cbz	r3, 80065ce <_write_r+0x1e>
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	bd38      	pop	{r3, r4, r5, pc}
 80065d0:	2000097c 	.word	0x2000097c

080065d4 <__errno>:
 80065d4:	4b01      	ldr	r3, [pc, #4]	@ (80065dc <__errno+0x8>)
 80065d6:	6818      	ldr	r0, [r3, #0]
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	20000018 	.word	0x20000018

080065e0 <__libc_init_array>:
 80065e0:	b570      	push	{r4, r5, r6, lr}
 80065e2:	4d0d      	ldr	r5, [pc, #52]	@ (8006618 <__libc_init_array+0x38>)
 80065e4:	4c0d      	ldr	r4, [pc, #52]	@ (800661c <__libc_init_array+0x3c>)
 80065e6:	1b64      	subs	r4, r4, r5
 80065e8:	10a4      	asrs	r4, r4, #2
 80065ea:	2600      	movs	r6, #0
 80065ec:	42a6      	cmp	r6, r4
 80065ee:	d109      	bne.n	8006604 <__libc_init_array+0x24>
 80065f0:	4d0b      	ldr	r5, [pc, #44]	@ (8006620 <__libc_init_array+0x40>)
 80065f2:	4c0c      	ldr	r4, [pc, #48]	@ (8006624 <__libc_init_array+0x44>)
 80065f4:	f002 f864 	bl	80086c0 <_init>
 80065f8:	1b64      	subs	r4, r4, r5
 80065fa:	10a4      	asrs	r4, r4, #2
 80065fc:	2600      	movs	r6, #0
 80065fe:	42a6      	cmp	r6, r4
 8006600:	d105      	bne.n	800660e <__libc_init_array+0x2e>
 8006602:	bd70      	pop	{r4, r5, r6, pc}
 8006604:	f855 3b04 	ldr.w	r3, [r5], #4
 8006608:	4798      	blx	r3
 800660a:	3601      	adds	r6, #1
 800660c:	e7ee      	b.n	80065ec <__libc_init_array+0xc>
 800660e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006612:	4798      	blx	r3
 8006614:	3601      	adds	r6, #1
 8006616:	e7f2      	b.n	80065fe <__libc_init_array+0x1e>
 8006618:	08008b58 	.word	0x08008b58
 800661c:	08008b58 	.word	0x08008b58
 8006620:	08008b58 	.word	0x08008b58
 8006624:	08008b5c 	.word	0x08008b5c

08006628 <__retarget_lock_init_recursive>:
 8006628:	4770      	bx	lr

0800662a <__retarget_lock_acquire_recursive>:
 800662a:	4770      	bx	lr

0800662c <__retarget_lock_release_recursive>:
 800662c:	4770      	bx	lr

0800662e <quorem>:
 800662e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006632:	6903      	ldr	r3, [r0, #16]
 8006634:	690c      	ldr	r4, [r1, #16]
 8006636:	42a3      	cmp	r3, r4
 8006638:	4607      	mov	r7, r0
 800663a:	db7e      	blt.n	800673a <quorem+0x10c>
 800663c:	3c01      	subs	r4, #1
 800663e:	f101 0814 	add.w	r8, r1, #20
 8006642:	00a3      	lsls	r3, r4, #2
 8006644:	f100 0514 	add.w	r5, r0, #20
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800664e:	9301      	str	r3, [sp, #4]
 8006650:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006654:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006658:	3301      	adds	r3, #1
 800665a:	429a      	cmp	r2, r3
 800665c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006660:	fbb2 f6f3 	udiv	r6, r2, r3
 8006664:	d32e      	bcc.n	80066c4 <quorem+0x96>
 8006666:	f04f 0a00 	mov.w	sl, #0
 800666a:	46c4      	mov	ip, r8
 800666c:	46ae      	mov	lr, r5
 800666e:	46d3      	mov	fp, sl
 8006670:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006674:	b298      	uxth	r0, r3
 8006676:	fb06 a000 	mla	r0, r6, r0, sl
 800667a:	0c02      	lsrs	r2, r0, #16
 800667c:	0c1b      	lsrs	r3, r3, #16
 800667e:	fb06 2303 	mla	r3, r6, r3, r2
 8006682:	f8de 2000 	ldr.w	r2, [lr]
 8006686:	b280      	uxth	r0, r0
 8006688:	b292      	uxth	r2, r2
 800668a:	1a12      	subs	r2, r2, r0
 800668c:	445a      	add	r2, fp
 800668e:	f8de 0000 	ldr.w	r0, [lr]
 8006692:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006696:	b29b      	uxth	r3, r3
 8006698:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800669c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80066a0:	b292      	uxth	r2, r2
 80066a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80066a6:	45e1      	cmp	r9, ip
 80066a8:	f84e 2b04 	str.w	r2, [lr], #4
 80066ac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80066b0:	d2de      	bcs.n	8006670 <quorem+0x42>
 80066b2:	9b00      	ldr	r3, [sp, #0]
 80066b4:	58eb      	ldr	r3, [r5, r3]
 80066b6:	b92b      	cbnz	r3, 80066c4 <quorem+0x96>
 80066b8:	9b01      	ldr	r3, [sp, #4]
 80066ba:	3b04      	subs	r3, #4
 80066bc:	429d      	cmp	r5, r3
 80066be:	461a      	mov	r2, r3
 80066c0:	d32f      	bcc.n	8006722 <quorem+0xf4>
 80066c2:	613c      	str	r4, [r7, #16]
 80066c4:	4638      	mov	r0, r7
 80066c6:	f001 f979 	bl	80079bc <__mcmp>
 80066ca:	2800      	cmp	r0, #0
 80066cc:	db25      	blt.n	800671a <quorem+0xec>
 80066ce:	4629      	mov	r1, r5
 80066d0:	2000      	movs	r0, #0
 80066d2:	f858 2b04 	ldr.w	r2, [r8], #4
 80066d6:	f8d1 c000 	ldr.w	ip, [r1]
 80066da:	fa1f fe82 	uxth.w	lr, r2
 80066de:	fa1f f38c 	uxth.w	r3, ip
 80066e2:	eba3 030e 	sub.w	r3, r3, lr
 80066e6:	4403      	add	r3, r0
 80066e8:	0c12      	lsrs	r2, r2, #16
 80066ea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80066ee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066f8:	45c1      	cmp	r9, r8
 80066fa:	f841 3b04 	str.w	r3, [r1], #4
 80066fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006702:	d2e6      	bcs.n	80066d2 <quorem+0xa4>
 8006704:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006708:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800670c:	b922      	cbnz	r2, 8006718 <quorem+0xea>
 800670e:	3b04      	subs	r3, #4
 8006710:	429d      	cmp	r5, r3
 8006712:	461a      	mov	r2, r3
 8006714:	d30b      	bcc.n	800672e <quorem+0x100>
 8006716:	613c      	str	r4, [r7, #16]
 8006718:	3601      	adds	r6, #1
 800671a:	4630      	mov	r0, r6
 800671c:	b003      	add	sp, #12
 800671e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006722:	6812      	ldr	r2, [r2, #0]
 8006724:	3b04      	subs	r3, #4
 8006726:	2a00      	cmp	r2, #0
 8006728:	d1cb      	bne.n	80066c2 <quorem+0x94>
 800672a:	3c01      	subs	r4, #1
 800672c:	e7c6      	b.n	80066bc <quorem+0x8e>
 800672e:	6812      	ldr	r2, [r2, #0]
 8006730:	3b04      	subs	r3, #4
 8006732:	2a00      	cmp	r2, #0
 8006734:	d1ef      	bne.n	8006716 <quorem+0xe8>
 8006736:	3c01      	subs	r4, #1
 8006738:	e7ea      	b.n	8006710 <quorem+0xe2>
 800673a:	2000      	movs	r0, #0
 800673c:	e7ee      	b.n	800671c <quorem+0xee>
	...

08006740 <_dtoa_r>:
 8006740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006744:	69c7      	ldr	r7, [r0, #28]
 8006746:	b099      	sub	sp, #100	@ 0x64
 8006748:	ed8d 0b02 	vstr	d0, [sp, #8]
 800674c:	ec55 4b10 	vmov	r4, r5, d0
 8006750:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006752:	9109      	str	r1, [sp, #36]	@ 0x24
 8006754:	4683      	mov	fp, r0
 8006756:	920e      	str	r2, [sp, #56]	@ 0x38
 8006758:	9313      	str	r3, [sp, #76]	@ 0x4c
 800675a:	b97f      	cbnz	r7, 800677c <_dtoa_r+0x3c>
 800675c:	2010      	movs	r0, #16
 800675e:	f000 fdfd 	bl	800735c <malloc>
 8006762:	4602      	mov	r2, r0
 8006764:	f8cb 001c 	str.w	r0, [fp, #28]
 8006768:	b920      	cbnz	r0, 8006774 <_dtoa_r+0x34>
 800676a:	4ba7      	ldr	r3, [pc, #668]	@ (8006a08 <_dtoa_r+0x2c8>)
 800676c:	21ef      	movs	r1, #239	@ 0xef
 800676e:	48a7      	ldr	r0, [pc, #668]	@ (8006a0c <_dtoa_r+0x2cc>)
 8006770:	f001 fc68 	bl	8008044 <__assert_func>
 8006774:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006778:	6007      	str	r7, [r0, #0]
 800677a:	60c7      	str	r7, [r0, #12]
 800677c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006780:	6819      	ldr	r1, [r3, #0]
 8006782:	b159      	cbz	r1, 800679c <_dtoa_r+0x5c>
 8006784:	685a      	ldr	r2, [r3, #4]
 8006786:	604a      	str	r2, [r1, #4]
 8006788:	2301      	movs	r3, #1
 800678a:	4093      	lsls	r3, r2
 800678c:	608b      	str	r3, [r1, #8]
 800678e:	4658      	mov	r0, fp
 8006790:	f000 feda 	bl	8007548 <_Bfree>
 8006794:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	1e2b      	subs	r3, r5, #0
 800679e:	bfb9      	ittee	lt
 80067a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80067a4:	9303      	strlt	r3, [sp, #12]
 80067a6:	2300      	movge	r3, #0
 80067a8:	6033      	strge	r3, [r6, #0]
 80067aa:	9f03      	ldr	r7, [sp, #12]
 80067ac:	4b98      	ldr	r3, [pc, #608]	@ (8006a10 <_dtoa_r+0x2d0>)
 80067ae:	bfbc      	itt	lt
 80067b0:	2201      	movlt	r2, #1
 80067b2:	6032      	strlt	r2, [r6, #0]
 80067b4:	43bb      	bics	r3, r7
 80067b6:	d112      	bne.n	80067de <_dtoa_r+0x9e>
 80067b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80067ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80067c4:	4323      	orrs	r3, r4
 80067c6:	f000 854d 	beq.w	8007264 <_dtoa_r+0xb24>
 80067ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80067cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006a24 <_dtoa_r+0x2e4>
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f000 854f 	beq.w	8007274 <_dtoa_r+0xb34>
 80067d6:	f10a 0303 	add.w	r3, sl, #3
 80067da:	f000 bd49 	b.w	8007270 <_dtoa_r+0xb30>
 80067de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067e2:	2200      	movs	r2, #0
 80067e4:	ec51 0b17 	vmov	r0, r1, d7
 80067e8:	2300      	movs	r3, #0
 80067ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80067ee:	f7fa f97b 	bl	8000ae8 <__aeabi_dcmpeq>
 80067f2:	4680      	mov	r8, r0
 80067f4:	b158      	cbz	r0, 800680e <_dtoa_r+0xce>
 80067f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80067f8:	2301      	movs	r3, #1
 80067fa:	6013      	str	r3, [r2, #0]
 80067fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80067fe:	b113      	cbz	r3, 8006806 <_dtoa_r+0xc6>
 8006800:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006802:	4b84      	ldr	r3, [pc, #528]	@ (8006a14 <_dtoa_r+0x2d4>)
 8006804:	6013      	str	r3, [r2, #0]
 8006806:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006a28 <_dtoa_r+0x2e8>
 800680a:	f000 bd33 	b.w	8007274 <_dtoa_r+0xb34>
 800680e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006812:	aa16      	add	r2, sp, #88	@ 0x58
 8006814:	a917      	add	r1, sp, #92	@ 0x5c
 8006816:	4658      	mov	r0, fp
 8006818:	f001 f980 	bl	8007b1c <__d2b>
 800681c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006820:	4681      	mov	r9, r0
 8006822:	2e00      	cmp	r6, #0
 8006824:	d077      	beq.n	8006916 <_dtoa_r+0x1d6>
 8006826:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006828:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800682c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006830:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006834:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006838:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800683c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006840:	4619      	mov	r1, r3
 8006842:	2200      	movs	r2, #0
 8006844:	4b74      	ldr	r3, [pc, #464]	@ (8006a18 <_dtoa_r+0x2d8>)
 8006846:	f7f9 fd2f 	bl	80002a8 <__aeabi_dsub>
 800684a:	a369      	add	r3, pc, #420	@ (adr r3, 80069f0 <_dtoa_r+0x2b0>)
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	f7f9 fee2 	bl	8000618 <__aeabi_dmul>
 8006854:	a368      	add	r3, pc, #416	@ (adr r3, 80069f8 <_dtoa_r+0x2b8>)
 8006856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685a:	f7f9 fd27 	bl	80002ac <__adddf3>
 800685e:	4604      	mov	r4, r0
 8006860:	4630      	mov	r0, r6
 8006862:	460d      	mov	r5, r1
 8006864:	f7f9 fe6e 	bl	8000544 <__aeabi_i2d>
 8006868:	a365      	add	r3, pc, #404	@ (adr r3, 8006a00 <_dtoa_r+0x2c0>)
 800686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686e:	f7f9 fed3 	bl	8000618 <__aeabi_dmul>
 8006872:	4602      	mov	r2, r0
 8006874:	460b      	mov	r3, r1
 8006876:	4620      	mov	r0, r4
 8006878:	4629      	mov	r1, r5
 800687a:	f7f9 fd17 	bl	80002ac <__adddf3>
 800687e:	4604      	mov	r4, r0
 8006880:	460d      	mov	r5, r1
 8006882:	f7fa f979 	bl	8000b78 <__aeabi_d2iz>
 8006886:	2200      	movs	r2, #0
 8006888:	4607      	mov	r7, r0
 800688a:	2300      	movs	r3, #0
 800688c:	4620      	mov	r0, r4
 800688e:	4629      	mov	r1, r5
 8006890:	f7fa f934 	bl	8000afc <__aeabi_dcmplt>
 8006894:	b140      	cbz	r0, 80068a8 <_dtoa_r+0x168>
 8006896:	4638      	mov	r0, r7
 8006898:	f7f9 fe54 	bl	8000544 <__aeabi_i2d>
 800689c:	4622      	mov	r2, r4
 800689e:	462b      	mov	r3, r5
 80068a0:	f7fa f922 	bl	8000ae8 <__aeabi_dcmpeq>
 80068a4:	b900      	cbnz	r0, 80068a8 <_dtoa_r+0x168>
 80068a6:	3f01      	subs	r7, #1
 80068a8:	2f16      	cmp	r7, #22
 80068aa:	d851      	bhi.n	8006950 <_dtoa_r+0x210>
 80068ac:	4b5b      	ldr	r3, [pc, #364]	@ (8006a1c <_dtoa_r+0x2dc>)
 80068ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80068b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068ba:	f7fa f91f 	bl	8000afc <__aeabi_dcmplt>
 80068be:	2800      	cmp	r0, #0
 80068c0:	d048      	beq.n	8006954 <_dtoa_r+0x214>
 80068c2:	3f01      	subs	r7, #1
 80068c4:	2300      	movs	r3, #0
 80068c6:	9312      	str	r3, [sp, #72]	@ 0x48
 80068c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80068ca:	1b9b      	subs	r3, r3, r6
 80068cc:	1e5a      	subs	r2, r3, #1
 80068ce:	bf44      	itt	mi
 80068d0:	f1c3 0801 	rsbmi	r8, r3, #1
 80068d4:	2300      	movmi	r3, #0
 80068d6:	9208      	str	r2, [sp, #32]
 80068d8:	bf54      	ite	pl
 80068da:	f04f 0800 	movpl.w	r8, #0
 80068de:	9308      	strmi	r3, [sp, #32]
 80068e0:	2f00      	cmp	r7, #0
 80068e2:	db39      	blt.n	8006958 <_dtoa_r+0x218>
 80068e4:	9b08      	ldr	r3, [sp, #32]
 80068e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80068e8:	443b      	add	r3, r7
 80068ea:	9308      	str	r3, [sp, #32]
 80068ec:	2300      	movs	r3, #0
 80068ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80068f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068f2:	2b09      	cmp	r3, #9
 80068f4:	d864      	bhi.n	80069c0 <_dtoa_r+0x280>
 80068f6:	2b05      	cmp	r3, #5
 80068f8:	bfc4      	itt	gt
 80068fa:	3b04      	subgt	r3, #4
 80068fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80068fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006900:	f1a3 0302 	sub.w	r3, r3, #2
 8006904:	bfcc      	ite	gt
 8006906:	2400      	movgt	r4, #0
 8006908:	2401      	movle	r4, #1
 800690a:	2b03      	cmp	r3, #3
 800690c:	d863      	bhi.n	80069d6 <_dtoa_r+0x296>
 800690e:	e8df f003 	tbb	[pc, r3]
 8006912:	372a      	.short	0x372a
 8006914:	5535      	.short	0x5535
 8006916:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800691a:	441e      	add	r6, r3
 800691c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006920:	2b20      	cmp	r3, #32
 8006922:	bfc1      	itttt	gt
 8006924:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006928:	409f      	lslgt	r7, r3
 800692a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800692e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006932:	bfd6      	itet	le
 8006934:	f1c3 0320 	rsble	r3, r3, #32
 8006938:	ea47 0003 	orrgt.w	r0, r7, r3
 800693c:	fa04 f003 	lslle.w	r0, r4, r3
 8006940:	f7f9 fdf0 	bl	8000524 <__aeabi_ui2d>
 8006944:	2201      	movs	r2, #1
 8006946:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800694a:	3e01      	subs	r6, #1
 800694c:	9214      	str	r2, [sp, #80]	@ 0x50
 800694e:	e777      	b.n	8006840 <_dtoa_r+0x100>
 8006950:	2301      	movs	r3, #1
 8006952:	e7b8      	b.n	80068c6 <_dtoa_r+0x186>
 8006954:	9012      	str	r0, [sp, #72]	@ 0x48
 8006956:	e7b7      	b.n	80068c8 <_dtoa_r+0x188>
 8006958:	427b      	negs	r3, r7
 800695a:	930a      	str	r3, [sp, #40]	@ 0x28
 800695c:	2300      	movs	r3, #0
 800695e:	eba8 0807 	sub.w	r8, r8, r7
 8006962:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006964:	e7c4      	b.n	80068f0 <_dtoa_r+0x1b0>
 8006966:	2300      	movs	r3, #0
 8006968:	930b      	str	r3, [sp, #44]	@ 0x2c
 800696a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800696c:	2b00      	cmp	r3, #0
 800696e:	dc35      	bgt.n	80069dc <_dtoa_r+0x29c>
 8006970:	2301      	movs	r3, #1
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	9307      	str	r3, [sp, #28]
 8006976:	461a      	mov	r2, r3
 8006978:	920e      	str	r2, [sp, #56]	@ 0x38
 800697a:	e00b      	b.n	8006994 <_dtoa_r+0x254>
 800697c:	2301      	movs	r3, #1
 800697e:	e7f3      	b.n	8006968 <_dtoa_r+0x228>
 8006980:	2300      	movs	r3, #0
 8006982:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006984:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006986:	18fb      	adds	r3, r7, r3
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	3301      	adds	r3, #1
 800698c:	2b01      	cmp	r3, #1
 800698e:	9307      	str	r3, [sp, #28]
 8006990:	bfb8      	it	lt
 8006992:	2301      	movlt	r3, #1
 8006994:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006998:	2100      	movs	r1, #0
 800699a:	2204      	movs	r2, #4
 800699c:	f102 0514 	add.w	r5, r2, #20
 80069a0:	429d      	cmp	r5, r3
 80069a2:	d91f      	bls.n	80069e4 <_dtoa_r+0x2a4>
 80069a4:	6041      	str	r1, [r0, #4]
 80069a6:	4658      	mov	r0, fp
 80069a8:	f000 fd8e 	bl	80074c8 <_Balloc>
 80069ac:	4682      	mov	sl, r0
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d13c      	bne.n	8006a2c <_dtoa_r+0x2ec>
 80069b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006a20 <_dtoa_r+0x2e0>)
 80069b4:	4602      	mov	r2, r0
 80069b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80069ba:	e6d8      	b.n	800676e <_dtoa_r+0x2e>
 80069bc:	2301      	movs	r3, #1
 80069be:	e7e0      	b.n	8006982 <_dtoa_r+0x242>
 80069c0:	2401      	movs	r4, #1
 80069c2:	2300      	movs	r3, #0
 80069c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80069c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80069c8:	f04f 33ff 	mov.w	r3, #4294967295
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	9307      	str	r3, [sp, #28]
 80069d0:	2200      	movs	r2, #0
 80069d2:	2312      	movs	r3, #18
 80069d4:	e7d0      	b.n	8006978 <_dtoa_r+0x238>
 80069d6:	2301      	movs	r3, #1
 80069d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069da:	e7f5      	b.n	80069c8 <_dtoa_r+0x288>
 80069dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	9307      	str	r3, [sp, #28]
 80069e2:	e7d7      	b.n	8006994 <_dtoa_r+0x254>
 80069e4:	3101      	adds	r1, #1
 80069e6:	0052      	lsls	r2, r2, #1
 80069e8:	e7d8      	b.n	800699c <_dtoa_r+0x25c>
 80069ea:	bf00      	nop
 80069ec:	f3af 8000 	nop.w
 80069f0:	636f4361 	.word	0x636f4361
 80069f4:	3fd287a7 	.word	0x3fd287a7
 80069f8:	8b60c8b3 	.word	0x8b60c8b3
 80069fc:	3fc68a28 	.word	0x3fc68a28
 8006a00:	509f79fb 	.word	0x509f79fb
 8006a04:	3fd34413 	.word	0x3fd34413
 8006a08:	0800881d 	.word	0x0800881d
 8006a0c:	08008834 	.word	0x08008834
 8006a10:	7ff00000 	.word	0x7ff00000
 8006a14:	080087ed 	.word	0x080087ed
 8006a18:	3ff80000 	.word	0x3ff80000
 8006a1c:	08008930 	.word	0x08008930
 8006a20:	0800888c 	.word	0x0800888c
 8006a24:	08008819 	.word	0x08008819
 8006a28:	080087ec 	.word	0x080087ec
 8006a2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a30:	6018      	str	r0, [r3, #0]
 8006a32:	9b07      	ldr	r3, [sp, #28]
 8006a34:	2b0e      	cmp	r3, #14
 8006a36:	f200 80a4 	bhi.w	8006b82 <_dtoa_r+0x442>
 8006a3a:	2c00      	cmp	r4, #0
 8006a3c:	f000 80a1 	beq.w	8006b82 <_dtoa_r+0x442>
 8006a40:	2f00      	cmp	r7, #0
 8006a42:	dd33      	ble.n	8006aac <_dtoa_r+0x36c>
 8006a44:	4bad      	ldr	r3, [pc, #692]	@ (8006cfc <_dtoa_r+0x5bc>)
 8006a46:	f007 020f 	and.w	r2, r7, #15
 8006a4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a4e:	ed93 7b00 	vldr	d7, [r3]
 8006a52:	05f8      	lsls	r0, r7, #23
 8006a54:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006a58:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006a5c:	d516      	bpl.n	8006a8c <_dtoa_r+0x34c>
 8006a5e:	4ba8      	ldr	r3, [pc, #672]	@ (8006d00 <_dtoa_r+0x5c0>)
 8006a60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a68:	f7f9 ff00 	bl	800086c <__aeabi_ddiv>
 8006a6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a70:	f004 040f 	and.w	r4, r4, #15
 8006a74:	2603      	movs	r6, #3
 8006a76:	4da2      	ldr	r5, [pc, #648]	@ (8006d00 <_dtoa_r+0x5c0>)
 8006a78:	b954      	cbnz	r4, 8006a90 <_dtoa_r+0x350>
 8006a7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a82:	f7f9 fef3 	bl	800086c <__aeabi_ddiv>
 8006a86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a8a:	e028      	b.n	8006ade <_dtoa_r+0x39e>
 8006a8c:	2602      	movs	r6, #2
 8006a8e:	e7f2      	b.n	8006a76 <_dtoa_r+0x336>
 8006a90:	07e1      	lsls	r1, r4, #31
 8006a92:	d508      	bpl.n	8006aa6 <_dtoa_r+0x366>
 8006a94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a9c:	f7f9 fdbc 	bl	8000618 <__aeabi_dmul>
 8006aa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006aa4:	3601      	adds	r6, #1
 8006aa6:	1064      	asrs	r4, r4, #1
 8006aa8:	3508      	adds	r5, #8
 8006aaa:	e7e5      	b.n	8006a78 <_dtoa_r+0x338>
 8006aac:	f000 80d2 	beq.w	8006c54 <_dtoa_r+0x514>
 8006ab0:	427c      	negs	r4, r7
 8006ab2:	4b92      	ldr	r3, [pc, #584]	@ (8006cfc <_dtoa_r+0x5bc>)
 8006ab4:	4d92      	ldr	r5, [pc, #584]	@ (8006d00 <_dtoa_r+0x5c0>)
 8006ab6:	f004 020f 	and.w	r2, r4, #15
 8006aba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ac6:	f7f9 fda7 	bl	8000618 <__aeabi_dmul>
 8006aca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ace:	1124      	asrs	r4, r4, #4
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	2602      	movs	r6, #2
 8006ad4:	2c00      	cmp	r4, #0
 8006ad6:	f040 80b2 	bne.w	8006c3e <_dtoa_r+0x4fe>
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1d3      	bne.n	8006a86 <_dtoa_r+0x346>
 8006ade:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006ae0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 80b7 	beq.w	8006c58 <_dtoa_r+0x518>
 8006aea:	4b86      	ldr	r3, [pc, #536]	@ (8006d04 <_dtoa_r+0x5c4>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	4620      	mov	r0, r4
 8006af0:	4629      	mov	r1, r5
 8006af2:	f7fa f803 	bl	8000afc <__aeabi_dcmplt>
 8006af6:	2800      	cmp	r0, #0
 8006af8:	f000 80ae 	beq.w	8006c58 <_dtoa_r+0x518>
 8006afc:	9b07      	ldr	r3, [sp, #28]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 80aa 	beq.w	8006c58 <_dtoa_r+0x518>
 8006b04:	9b00      	ldr	r3, [sp, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	dd37      	ble.n	8006b7a <_dtoa_r+0x43a>
 8006b0a:	1e7b      	subs	r3, r7, #1
 8006b0c:	9304      	str	r3, [sp, #16]
 8006b0e:	4620      	mov	r0, r4
 8006b10:	4b7d      	ldr	r3, [pc, #500]	@ (8006d08 <_dtoa_r+0x5c8>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	4629      	mov	r1, r5
 8006b16:	f7f9 fd7f 	bl	8000618 <__aeabi_dmul>
 8006b1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b1e:	9c00      	ldr	r4, [sp, #0]
 8006b20:	3601      	adds	r6, #1
 8006b22:	4630      	mov	r0, r6
 8006b24:	f7f9 fd0e 	bl	8000544 <__aeabi_i2d>
 8006b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b2c:	f7f9 fd74 	bl	8000618 <__aeabi_dmul>
 8006b30:	4b76      	ldr	r3, [pc, #472]	@ (8006d0c <_dtoa_r+0x5cc>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	f7f9 fbba 	bl	80002ac <__adddf3>
 8006b38:	4605      	mov	r5, r0
 8006b3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006b3e:	2c00      	cmp	r4, #0
 8006b40:	f040 808d 	bne.w	8006c5e <_dtoa_r+0x51e>
 8006b44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b48:	4b71      	ldr	r3, [pc, #452]	@ (8006d10 <_dtoa_r+0x5d0>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f7f9 fbac 	bl	80002a8 <__aeabi_dsub>
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b58:	462a      	mov	r2, r5
 8006b5a:	4633      	mov	r3, r6
 8006b5c:	f7f9 ffec 	bl	8000b38 <__aeabi_dcmpgt>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	f040 828b 	bne.w	800707c <_dtoa_r+0x93c>
 8006b66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b6a:	462a      	mov	r2, r5
 8006b6c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006b70:	f7f9 ffc4 	bl	8000afc <__aeabi_dcmplt>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	f040 8128 	bne.w	8006dca <_dtoa_r+0x68a>
 8006b7a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006b7e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006b82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f2c0 815a 	blt.w	8006e3e <_dtoa_r+0x6fe>
 8006b8a:	2f0e      	cmp	r7, #14
 8006b8c:	f300 8157 	bgt.w	8006e3e <_dtoa_r+0x6fe>
 8006b90:	4b5a      	ldr	r3, [pc, #360]	@ (8006cfc <_dtoa_r+0x5bc>)
 8006b92:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b96:	ed93 7b00 	vldr	d7, [r3]
 8006b9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	ed8d 7b00 	vstr	d7, [sp]
 8006ba2:	da03      	bge.n	8006bac <_dtoa_r+0x46c>
 8006ba4:	9b07      	ldr	r3, [sp, #28]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f340 8101 	ble.w	8006dae <_dtoa_r+0x66e>
 8006bac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006bb0:	4656      	mov	r6, sl
 8006bb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	4629      	mov	r1, r5
 8006bba:	f7f9 fe57 	bl	800086c <__aeabi_ddiv>
 8006bbe:	f7f9 ffdb 	bl	8000b78 <__aeabi_d2iz>
 8006bc2:	4680      	mov	r8, r0
 8006bc4:	f7f9 fcbe 	bl	8000544 <__aeabi_i2d>
 8006bc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bcc:	f7f9 fd24 	bl	8000618 <__aeabi_dmul>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	4629      	mov	r1, r5
 8006bd8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006bdc:	f7f9 fb64 	bl	80002a8 <__aeabi_dsub>
 8006be0:	f806 4b01 	strb.w	r4, [r6], #1
 8006be4:	9d07      	ldr	r5, [sp, #28]
 8006be6:	eba6 040a 	sub.w	r4, r6, sl
 8006bea:	42a5      	cmp	r5, r4
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	f040 8117 	bne.w	8006e22 <_dtoa_r+0x6e2>
 8006bf4:	f7f9 fb5a 	bl	80002ac <__adddf3>
 8006bf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bfc:	4604      	mov	r4, r0
 8006bfe:	460d      	mov	r5, r1
 8006c00:	f7f9 ff9a 	bl	8000b38 <__aeabi_dcmpgt>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	f040 80f9 	bne.w	8006dfc <_dtoa_r+0x6bc>
 8006c0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c0e:	4620      	mov	r0, r4
 8006c10:	4629      	mov	r1, r5
 8006c12:	f7f9 ff69 	bl	8000ae8 <__aeabi_dcmpeq>
 8006c16:	b118      	cbz	r0, 8006c20 <_dtoa_r+0x4e0>
 8006c18:	f018 0f01 	tst.w	r8, #1
 8006c1c:	f040 80ee 	bne.w	8006dfc <_dtoa_r+0x6bc>
 8006c20:	4649      	mov	r1, r9
 8006c22:	4658      	mov	r0, fp
 8006c24:	f000 fc90 	bl	8007548 <_Bfree>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	7033      	strb	r3, [r6, #0]
 8006c2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006c2e:	3701      	adds	r7, #1
 8006c30:	601f      	str	r7, [r3, #0]
 8006c32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 831d 	beq.w	8007274 <_dtoa_r+0xb34>
 8006c3a:	601e      	str	r6, [r3, #0]
 8006c3c:	e31a      	b.n	8007274 <_dtoa_r+0xb34>
 8006c3e:	07e2      	lsls	r2, r4, #31
 8006c40:	d505      	bpl.n	8006c4e <_dtoa_r+0x50e>
 8006c42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c46:	f7f9 fce7 	bl	8000618 <__aeabi_dmul>
 8006c4a:	3601      	adds	r6, #1
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	1064      	asrs	r4, r4, #1
 8006c50:	3508      	adds	r5, #8
 8006c52:	e73f      	b.n	8006ad4 <_dtoa_r+0x394>
 8006c54:	2602      	movs	r6, #2
 8006c56:	e742      	b.n	8006ade <_dtoa_r+0x39e>
 8006c58:	9c07      	ldr	r4, [sp, #28]
 8006c5a:	9704      	str	r7, [sp, #16]
 8006c5c:	e761      	b.n	8006b22 <_dtoa_r+0x3e2>
 8006c5e:	4b27      	ldr	r3, [pc, #156]	@ (8006cfc <_dtoa_r+0x5bc>)
 8006c60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c6a:	4454      	add	r4, sl
 8006c6c:	2900      	cmp	r1, #0
 8006c6e:	d053      	beq.n	8006d18 <_dtoa_r+0x5d8>
 8006c70:	4928      	ldr	r1, [pc, #160]	@ (8006d14 <_dtoa_r+0x5d4>)
 8006c72:	2000      	movs	r0, #0
 8006c74:	f7f9 fdfa 	bl	800086c <__aeabi_ddiv>
 8006c78:	4633      	mov	r3, r6
 8006c7a:	462a      	mov	r2, r5
 8006c7c:	f7f9 fb14 	bl	80002a8 <__aeabi_dsub>
 8006c80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c84:	4656      	mov	r6, sl
 8006c86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c8a:	f7f9 ff75 	bl	8000b78 <__aeabi_d2iz>
 8006c8e:	4605      	mov	r5, r0
 8006c90:	f7f9 fc58 	bl	8000544 <__aeabi_i2d>
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c9c:	f7f9 fb04 	bl	80002a8 <__aeabi_dsub>
 8006ca0:	3530      	adds	r5, #48	@ 0x30
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006caa:	f806 5b01 	strb.w	r5, [r6], #1
 8006cae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006cb2:	f7f9 ff23 	bl	8000afc <__aeabi_dcmplt>
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	d171      	bne.n	8006d9e <_dtoa_r+0x65e>
 8006cba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cbe:	4911      	ldr	r1, [pc, #68]	@ (8006d04 <_dtoa_r+0x5c4>)
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	f7f9 faf1 	bl	80002a8 <__aeabi_dsub>
 8006cc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006cca:	f7f9 ff17 	bl	8000afc <__aeabi_dcmplt>
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	f040 8095 	bne.w	8006dfe <_dtoa_r+0x6be>
 8006cd4:	42a6      	cmp	r6, r4
 8006cd6:	f43f af50 	beq.w	8006b7a <_dtoa_r+0x43a>
 8006cda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006cde:	4b0a      	ldr	r3, [pc, #40]	@ (8006d08 <_dtoa_r+0x5c8>)
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f7f9 fc99 	bl	8000618 <__aeabi_dmul>
 8006ce6:	4b08      	ldr	r3, [pc, #32]	@ (8006d08 <_dtoa_r+0x5c8>)
 8006ce8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006cec:	2200      	movs	r2, #0
 8006cee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cf2:	f7f9 fc91 	bl	8000618 <__aeabi_dmul>
 8006cf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cfa:	e7c4      	b.n	8006c86 <_dtoa_r+0x546>
 8006cfc:	08008930 	.word	0x08008930
 8006d00:	08008908 	.word	0x08008908
 8006d04:	3ff00000 	.word	0x3ff00000
 8006d08:	40240000 	.word	0x40240000
 8006d0c:	401c0000 	.word	0x401c0000
 8006d10:	40140000 	.word	0x40140000
 8006d14:	3fe00000 	.word	0x3fe00000
 8006d18:	4631      	mov	r1, r6
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	f7f9 fc7c 	bl	8000618 <__aeabi_dmul>
 8006d20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d24:	9415      	str	r4, [sp, #84]	@ 0x54
 8006d26:	4656      	mov	r6, sl
 8006d28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d2c:	f7f9 ff24 	bl	8000b78 <__aeabi_d2iz>
 8006d30:	4605      	mov	r5, r0
 8006d32:	f7f9 fc07 	bl	8000544 <__aeabi_i2d>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d3e:	f7f9 fab3 	bl	80002a8 <__aeabi_dsub>
 8006d42:	3530      	adds	r5, #48	@ 0x30
 8006d44:	f806 5b01 	strb.w	r5, [r6], #1
 8006d48:	4602      	mov	r2, r0
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	42a6      	cmp	r6, r4
 8006d4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d52:	f04f 0200 	mov.w	r2, #0
 8006d56:	d124      	bne.n	8006da2 <_dtoa_r+0x662>
 8006d58:	4bac      	ldr	r3, [pc, #688]	@ (800700c <_dtoa_r+0x8cc>)
 8006d5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d5e:	f7f9 faa5 	bl	80002ac <__adddf3>
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d6a:	f7f9 fee5 	bl	8000b38 <__aeabi_dcmpgt>
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	d145      	bne.n	8006dfe <_dtoa_r+0x6be>
 8006d72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d76:	49a5      	ldr	r1, [pc, #660]	@ (800700c <_dtoa_r+0x8cc>)
 8006d78:	2000      	movs	r0, #0
 8006d7a:	f7f9 fa95 	bl	80002a8 <__aeabi_dsub>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	460b      	mov	r3, r1
 8006d82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d86:	f7f9 feb9 	bl	8000afc <__aeabi_dcmplt>
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	f43f aef5 	beq.w	8006b7a <_dtoa_r+0x43a>
 8006d90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006d92:	1e73      	subs	r3, r6, #1
 8006d94:	9315      	str	r3, [sp, #84]	@ 0x54
 8006d96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006d9a:	2b30      	cmp	r3, #48	@ 0x30
 8006d9c:	d0f8      	beq.n	8006d90 <_dtoa_r+0x650>
 8006d9e:	9f04      	ldr	r7, [sp, #16]
 8006da0:	e73e      	b.n	8006c20 <_dtoa_r+0x4e0>
 8006da2:	4b9b      	ldr	r3, [pc, #620]	@ (8007010 <_dtoa_r+0x8d0>)
 8006da4:	f7f9 fc38 	bl	8000618 <__aeabi_dmul>
 8006da8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dac:	e7bc      	b.n	8006d28 <_dtoa_r+0x5e8>
 8006dae:	d10c      	bne.n	8006dca <_dtoa_r+0x68a>
 8006db0:	4b98      	ldr	r3, [pc, #608]	@ (8007014 <_dtoa_r+0x8d4>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006db8:	f7f9 fc2e 	bl	8000618 <__aeabi_dmul>
 8006dbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dc0:	f7f9 feb0 	bl	8000b24 <__aeabi_dcmpge>
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	f000 8157 	beq.w	8007078 <_dtoa_r+0x938>
 8006dca:	2400      	movs	r4, #0
 8006dcc:	4625      	mov	r5, r4
 8006dce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dd0:	43db      	mvns	r3, r3
 8006dd2:	9304      	str	r3, [sp, #16]
 8006dd4:	4656      	mov	r6, sl
 8006dd6:	2700      	movs	r7, #0
 8006dd8:	4621      	mov	r1, r4
 8006dda:	4658      	mov	r0, fp
 8006ddc:	f000 fbb4 	bl	8007548 <_Bfree>
 8006de0:	2d00      	cmp	r5, #0
 8006de2:	d0dc      	beq.n	8006d9e <_dtoa_r+0x65e>
 8006de4:	b12f      	cbz	r7, 8006df2 <_dtoa_r+0x6b2>
 8006de6:	42af      	cmp	r7, r5
 8006de8:	d003      	beq.n	8006df2 <_dtoa_r+0x6b2>
 8006dea:	4639      	mov	r1, r7
 8006dec:	4658      	mov	r0, fp
 8006dee:	f000 fbab 	bl	8007548 <_Bfree>
 8006df2:	4629      	mov	r1, r5
 8006df4:	4658      	mov	r0, fp
 8006df6:	f000 fba7 	bl	8007548 <_Bfree>
 8006dfa:	e7d0      	b.n	8006d9e <_dtoa_r+0x65e>
 8006dfc:	9704      	str	r7, [sp, #16]
 8006dfe:	4633      	mov	r3, r6
 8006e00:	461e      	mov	r6, r3
 8006e02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e06:	2a39      	cmp	r2, #57	@ 0x39
 8006e08:	d107      	bne.n	8006e1a <_dtoa_r+0x6da>
 8006e0a:	459a      	cmp	sl, r3
 8006e0c:	d1f8      	bne.n	8006e00 <_dtoa_r+0x6c0>
 8006e0e:	9a04      	ldr	r2, [sp, #16]
 8006e10:	3201      	adds	r2, #1
 8006e12:	9204      	str	r2, [sp, #16]
 8006e14:	2230      	movs	r2, #48	@ 0x30
 8006e16:	f88a 2000 	strb.w	r2, [sl]
 8006e1a:	781a      	ldrb	r2, [r3, #0]
 8006e1c:	3201      	adds	r2, #1
 8006e1e:	701a      	strb	r2, [r3, #0]
 8006e20:	e7bd      	b.n	8006d9e <_dtoa_r+0x65e>
 8006e22:	4b7b      	ldr	r3, [pc, #492]	@ (8007010 <_dtoa_r+0x8d0>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	f7f9 fbf7 	bl	8000618 <__aeabi_dmul>
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	4604      	mov	r4, r0
 8006e30:	460d      	mov	r5, r1
 8006e32:	f7f9 fe59 	bl	8000ae8 <__aeabi_dcmpeq>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	f43f aebb 	beq.w	8006bb2 <_dtoa_r+0x472>
 8006e3c:	e6f0      	b.n	8006c20 <_dtoa_r+0x4e0>
 8006e3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006e40:	2a00      	cmp	r2, #0
 8006e42:	f000 80db 	beq.w	8006ffc <_dtoa_r+0x8bc>
 8006e46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e48:	2a01      	cmp	r2, #1
 8006e4a:	f300 80bf 	bgt.w	8006fcc <_dtoa_r+0x88c>
 8006e4e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006e50:	2a00      	cmp	r2, #0
 8006e52:	f000 80b7 	beq.w	8006fc4 <_dtoa_r+0x884>
 8006e56:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006e5a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006e5c:	4646      	mov	r6, r8
 8006e5e:	9a08      	ldr	r2, [sp, #32]
 8006e60:	2101      	movs	r1, #1
 8006e62:	441a      	add	r2, r3
 8006e64:	4658      	mov	r0, fp
 8006e66:	4498      	add	r8, r3
 8006e68:	9208      	str	r2, [sp, #32]
 8006e6a:	f000 fc21 	bl	80076b0 <__i2b>
 8006e6e:	4605      	mov	r5, r0
 8006e70:	b15e      	cbz	r6, 8006e8a <_dtoa_r+0x74a>
 8006e72:	9b08      	ldr	r3, [sp, #32]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	dd08      	ble.n	8006e8a <_dtoa_r+0x74a>
 8006e78:	42b3      	cmp	r3, r6
 8006e7a:	9a08      	ldr	r2, [sp, #32]
 8006e7c:	bfa8      	it	ge
 8006e7e:	4633      	movge	r3, r6
 8006e80:	eba8 0803 	sub.w	r8, r8, r3
 8006e84:	1af6      	subs	r6, r6, r3
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	9308      	str	r3, [sp, #32]
 8006e8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e8c:	b1f3      	cbz	r3, 8006ecc <_dtoa_r+0x78c>
 8006e8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 80b7 	beq.w	8007004 <_dtoa_r+0x8c4>
 8006e96:	b18c      	cbz	r4, 8006ebc <_dtoa_r+0x77c>
 8006e98:	4629      	mov	r1, r5
 8006e9a:	4622      	mov	r2, r4
 8006e9c:	4658      	mov	r0, fp
 8006e9e:	f000 fcc7 	bl	8007830 <__pow5mult>
 8006ea2:	464a      	mov	r2, r9
 8006ea4:	4601      	mov	r1, r0
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	4658      	mov	r0, fp
 8006eaa:	f000 fc17 	bl	80076dc <__multiply>
 8006eae:	4649      	mov	r1, r9
 8006eb0:	9004      	str	r0, [sp, #16]
 8006eb2:	4658      	mov	r0, fp
 8006eb4:	f000 fb48 	bl	8007548 <_Bfree>
 8006eb8:	9b04      	ldr	r3, [sp, #16]
 8006eba:	4699      	mov	r9, r3
 8006ebc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ebe:	1b1a      	subs	r2, r3, r4
 8006ec0:	d004      	beq.n	8006ecc <_dtoa_r+0x78c>
 8006ec2:	4649      	mov	r1, r9
 8006ec4:	4658      	mov	r0, fp
 8006ec6:	f000 fcb3 	bl	8007830 <__pow5mult>
 8006eca:	4681      	mov	r9, r0
 8006ecc:	2101      	movs	r1, #1
 8006ece:	4658      	mov	r0, fp
 8006ed0:	f000 fbee 	bl	80076b0 <__i2b>
 8006ed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 81cf 	beq.w	800727c <_dtoa_r+0xb3c>
 8006ede:	461a      	mov	r2, r3
 8006ee0:	4601      	mov	r1, r0
 8006ee2:	4658      	mov	r0, fp
 8006ee4:	f000 fca4 	bl	8007830 <__pow5mult>
 8006ee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	4604      	mov	r4, r0
 8006eee:	f300 8095 	bgt.w	800701c <_dtoa_r+0x8dc>
 8006ef2:	9b02      	ldr	r3, [sp, #8]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f040 8087 	bne.w	8007008 <_dtoa_r+0x8c8>
 8006efa:	9b03      	ldr	r3, [sp, #12]
 8006efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f040 8089 	bne.w	8007018 <_dtoa_r+0x8d8>
 8006f06:	9b03      	ldr	r3, [sp, #12]
 8006f08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f0c:	0d1b      	lsrs	r3, r3, #20
 8006f0e:	051b      	lsls	r3, r3, #20
 8006f10:	b12b      	cbz	r3, 8006f1e <_dtoa_r+0x7de>
 8006f12:	9b08      	ldr	r3, [sp, #32]
 8006f14:	3301      	adds	r3, #1
 8006f16:	9308      	str	r3, [sp, #32]
 8006f18:	f108 0801 	add.w	r8, r8, #1
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f000 81b0 	beq.w	8007288 <_dtoa_r+0xb48>
 8006f28:	6923      	ldr	r3, [r4, #16]
 8006f2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f2e:	6918      	ldr	r0, [r3, #16]
 8006f30:	f000 fb72 	bl	8007618 <__hi0bits>
 8006f34:	f1c0 0020 	rsb	r0, r0, #32
 8006f38:	9b08      	ldr	r3, [sp, #32]
 8006f3a:	4418      	add	r0, r3
 8006f3c:	f010 001f 	ands.w	r0, r0, #31
 8006f40:	d077      	beq.n	8007032 <_dtoa_r+0x8f2>
 8006f42:	f1c0 0320 	rsb	r3, r0, #32
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	dd6b      	ble.n	8007022 <_dtoa_r+0x8e2>
 8006f4a:	9b08      	ldr	r3, [sp, #32]
 8006f4c:	f1c0 001c 	rsb	r0, r0, #28
 8006f50:	4403      	add	r3, r0
 8006f52:	4480      	add	r8, r0
 8006f54:	4406      	add	r6, r0
 8006f56:	9308      	str	r3, [sp, #32]
 8006f58:	f1b8 0f00 	cmp.w	r8, #0
 8006f5c:	dd05      	ble.n	8006f6a <_dtoa_r+0x82a>
 8006f5e:	4649      	mov	r1, r9
 8006f60:	4642      	mov	r2, r8
 8006f62:	4658      	mov	r0, fp
 8006f64:	f000 fcbe 	bl	80078e4 <__lshift>
 8006f68:	4681      	mov	r9, r0
 8006f6a:	9b08      	ldr	r3, [sp, #32]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	dd05      	ble.n	8006f7c <_dtoa_r+0x83c>
 8006f70:	4621      	mov	r1, r4
 8006f72:	461a      	mov	r2, r3
 8006f74:	4658      	mov	r0, fp
 8006f76:	f000 fcb5 	bl	80078e4 <__lshift>
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d059      	beq.n	8007036 <_dtoa_r+0x8f6>
 8006f82:	4621      	mov	r1, r4
 8006f84:	4648      	mov	r0, r9
 8006f86:	f000 fd19 	bl	80079bc <__mcmp>
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	da53      	bge.n	8007036 <_dtoa_r+0x8f6>
 8006f8e:	1e7b      	subs	r3, r7, #1
 8006f90:	9304      	str	r3, [sp, #16]
 8006f92:	4649      	mov	r1, r9
 8006f94:	2300      	movs	r3, #0
 8006f96:	220a      	movs	r2, #10
 8006f98:	4658      	mov	r0, fp
 8006f9a:	f000 faf7 	bl	800758c <__multadd>
 8006f9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fa0:	4681      	mov	r9, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f000 8172 	beq.w	800728c <_dtoa_r+0xb4c>
 8006fa8:	2300      	movs	r3, #0
 8006faa:	4629      	mov	r1, r5
 8006fac:	220a      	movs	r2, #10
 8006fae:	4658      	mov	r0, fp
 8006fb0:	f000 faec 	bl	800758c <__multadd>
 8006fb4:	9b00      	ldr	r3, [sp, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	4605      	mov	r5, r0
 8006fba:	dc67      	bgt.n	800708c <_dtoa_r+0x94c>
 8006fbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	dc41      	bgt.n	8007046 <_dtoa_r+0x906>
 8006fc2:	e063      	b.n	800708c <_dtoa_r+0x94c>
 8006fc4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006fc6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006fca:	e746      	b.n	8006e5a <_dtoa_r+0x71a>
 8006fcc:	9b07      	ldr	r3, [sp, #28]
 8006fce:	1e5c      	subs	r4, r3, #1
 8006fd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fd2:	42a3      	cmp	r3, r4
 8006fd4:	bfbf      	itttt	lt
 8006fd6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006fd8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006fda:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006fdc:	1ae3      	sublt	r3, r4, r3
 8006fde:	bfb4      	ite	lt
 8006fe0:	18d2      	addlt	r2, r2, r3
 8006fe2:	1b1c      	subge	r4, r3, r4
 8006fe4:	9b07      	ldr	r3, [sp, #28]
 8006fe6:	bfbc      	itt	lt
 8006fe8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006fea:	2400      	movlt	r4, #0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	bfb5      	itete	lt
 8006ff0:	eba8 0603 	sublt.w	r6, r8, r3
 8006ff4:	9b07      	ldrge	r3, [sp, #28]
 8006ff6:	2300      	movlt	r3, #0
 8006ff8:	4646      	movge	r6, r8
 8006ffa:	e730      	b.n	8006e5e <_dtoa_r+0x71e>
 8006ffc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006ffe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007000:	4646      	mov	r6, r8
 8007002:	e735      	b.n	8006e70 <_dtoa_r+0x730>
 8007004:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007006:	e75c      	b.n	8006ec2 <_dtoa_r+0x782>
 8007008:	2300      	movs	r3, #0
 800700a:	e788      	b.n	8006f1e <_dtoa_r+0x7de>
 800700c:	3fe00000 	.word	0x3fe00000
 8007010:	40240000 	.word	0x40240000
 8007014:	40140000 	.word	0x40140000
 8007018:	9b02      	ldr	r3, [sp, #8]
 800701a:	e780      	b.n	8006f1e <_dtoa_r+0x7de>
 800701c:	2300      	movs	r3, #0
 800701e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007020:	e782      	b.n	8006f28 <_dtoa_r+0x7e8>
 8007022:	d099      	beq.n	8006f58 <_dtoa_r+0x818>
 8007024:	9a08      	ldr	r2, [sp, #32]
 8007026:	331c      	adds	r3, #28
 8007028:	441a      	add	r2, r3
 800702a:	4498      	add	r8, r3
 800702c:	441e      	add	r6, r3
 800702e:	9208      	str	r2, [sp, #32]
 8007030:	e792      	b.n	8006f58 <_dtoa_r+0x818>
 8007032:	4603      	mov	r3, r0
 8007034:	e7f6      	b.n	8007024 <_dtoa_r+0x8e4>
 8007036:	9b07      	ldr	r3, [sp, #28]
 8007038:	9704      	str	r7, [sp, #16]
 800703a:	2b00      	cmp	r3, #0
 800703c:	dc20      	bgt.n	8007080 <_dtoa_r+0x940>
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007042:	2b02      	cmp	r3, #2
 8007044:	dd1e      	ble.n	8007084 <_dtoa_r+0x944>
 8007046:	9b00      	ldr	r3, [sp, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	f47f aec0 	bne.w	8006dce <_dtoa_r+0x68e>
 800704e:	4621      	mov	r1, r4
 8007050:	2205      	movs	r2, #5
 8007052:	4658      	mov	r0, fp
 8007054:	f000 fa9a 	bl	800758c <__multadd>
 8007058:	4601      	mov	r1, r0
 800705a:	4604      	mov	r4, r0
 800705c:	4648      	mov	r0, r9
 800705e:	f000 fcad 	bl	80079bc <__mcmp>
 8007062:	2800      	cmp	r0, #0
 8007064:	f77f aeb3 	ble.w	8006dce <_dtoa_r+0x68e>
 8007068:	4656      	mov	r6, sl
 800706a:	2331      	movs	r3, #49	@ 0x31
 800706c:	f806 3b01 	strb.w	r3, [r6], #1
 8007070:	9b04      	ldr	r3, [sp, #16]
 8007072:	3301      	adds	r3, #1
 8007074:	9304      	str	r3, [sp, #16]
 8007076:	e6ae      	b.n	8006dd6 <_dtoa_r+0x696>
 8007078:	9c07      	ldr	r4, [sp, #28]
 800707a:	9704      	str	r7, [sp, #16]
 800707c:	4625      	mov	r5, r4
 800707e:	e7f3      	b.n	8007068 <_dtoa_r+0x928>
 8007080:	9b07      	ldr	r3, [sp, #28]
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007086:	2b00      	cmp	r3, #0
 8007088:	f000 8104 	beq.w	8007294 <_dtoa_r+0xb54>
 800708c:	2e00      	cmp	r6, #0
 800708e:	dd05      	ble.n	800709c <_dtoa_r+0x95c>
 8007090:	4629      	mov	r1, r5
 8007092:	4632      	mov	r2, r6
 8007094:	4658      	mov	r0, fp
 8007096:	f000 fc25 	bl	80078e4 <__lshift>
 800709a:	4605      	mov	r5, r0
 800709c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d05a      	beq.n	8007158 <_dtoa_r+0xa18>
 80070a2:	6869      	ldr	r1, [r5, #4]
 80070a4:	4658      	mov	r0, fp
 80070a6:	f000 fa0f 	bl	80074c8 <_Balloc>
 80070aa:	4606      	mov	r6, r0
 80070ac:	b928      	cbnz	r0, 80070ba <_dtoa_r+0x97a>
 80070ae:	4b84      	ldr	r3, [pc, #528]	@ (80072c0 <_dtoa_r+0xb80>)
 80070b0:	4602      	mov	r2, r0
 80070b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80070b6:	f7ff bb5a 	b.w	800676e <_dtoa_r+0x2e>
 80070ba:	692a      	ldr	r2, [r5, #16]
 80070bc:	3202      	adds	r2, #2
 80070be:	0092      	lsls	r2, r2, #2
 80070c0:	f105 010c 	add.w	r1, r5, #12
 80070c4:	300c      	adds	r0, #12
 80070c6:	f000 ffaf 	bl	8008028 <memcpy>
 80070ca:	2201      	movs	r2, #1
 80070cc:	4631      	mov	r1, r6
 80070ce:	4658      	mov	r0, fp
 80070d0:	f000 fc08 	bl	80078e4 <__lshift>
 80070d4:	f10a 0301 	add.w	r3, sl, #1
 80070d8:	9307      	str	r3, [sp, #28]
 80070da:	9b00      	ldr	r3, [sp, #0]
 80070dc:	4453      	add	r3, sl
 80070de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070e0:	9b02      	ldr	r3, [sp, #8]
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	462f      	mov	r7, r5
 80070e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80070ea:	4605      	mov	r5, r0
 80070ec:	9b07      	ldr	r3, [sp, #28]
 80070ee:	4621      	mov	r1, r4
 80070f0:	3b01      	subs	r3, #1
 80070f2:	4648      	mov	r0, r9
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	f7ff fa9a 	bl	800662e <quorem>
 80070fa:	4639      	mov	r1, r7
 80070fc:	9002      	str	r0, [sp, #8]
 80070fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007102:	4648      	mov	r0, r9
 8007104:	f000 fc5a 	bl	80079bc <__mcmp>
 8007108:	462a      	mov	r2, r5
 800710a:	9008      	str	r0, [sp, #32]
 800710c:	4621      	mov	r1, r4
 800710e:	4658      	mov	r0, fp
 8007110:	f000 fc70 	bl	80079f4 <__mdiff>
 8007114:	68c2      	ldr	r2, [r0, #12]
 8007116:	4606      	mov	r6, r0
 8007118:	bb02      	cbnz	r2, 800715c <_dtoa_r+0xa1c>
 800711a:	4601      	mov	r1, r0
 800711c:	4648      	mov	r0, r9
 800711e:	f000 fc4d 	bl	80079bc <__mcmp>
 8007122:	4602      	mov	r2, r0
 8007124:	4631      	mov	r1, r6
 8007126:	4658      	mov	r0, fp
 8007128:	920e      	str	r2, [sp, #56]	@ 0x38
 800712a:	f000 fa0d 	bl	8007548 <_Bfree>
 800712e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007130:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007132:	9e07      	ldr	r6, [sp, #28]
 8007134:	ea43 0102 	orr.w	r1, r3, r2
 8007138:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800713a:	4319      	orrs	r1, r3
 800713c:	d110      	bne.n	8007160 <_dtoa_r+0xa20>
 800713e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007142:	d029      	beq.n	8007198 <_dtoa_r+0xa58>
 8007144:	9b08      	ldr	r3, [sp, #32]
 8007146:	2b00      	cmp	r3, #0
 8007148:	dd02      	ble.n	8007150 <_dtoa_r+0xa10>
 800714a:	9b02      	ldr	r3, [sp, #8]
 800714c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007150:	9b00      	ldr	r3, [sp, #0]
 8007152:	f883 8000 	strb.w	r8, [r3]
 8007156:	e63f      	b.n	8006dd8 <_dtoa_r+0x698>
 8007158:	4628      	mov	r0, r5
 800715a:	e7bb      	b.n	80070d4 <_dtoa_r+0x994>
 800715c:	2201      	movs	r2, #1
 800715e:	e7e1      	b.n	8007124 <_dtoa_r+0x9e4>
 8007160:	9b08      	ldr	r3, [sp, #32]
 8007162:	2b00      	cmp	r3, #0
 8007164:	db04      	blt.n	8007170 <_dtoa_r+0xa30>
 8007166:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007168:	430b      	orrs	r3, r1
 800716a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800716c:	430b      	orrs	r3, r1
 800716e:	d120      	bne.n	80071b2 <_dtoa_r+0xa72>
 8007170:	2a00      	cmp	r2, #0
 8007172:	dded      	ble.n	8007150 <_dtoa_r+0xa10>
 8007174:	4649      	mov	r1, r9
 8007176:	2201      	movs	r2, #1
 8007178:	4658      	mov	r0, fp
 800717a:	f000 fbb3 	bl	80078e4 <__lshift>
 800717e:	4621      	mov	r1, r4
 8007180:	4681      	mov	r9, r0
 8007182:	f000 fc1b 	bl	80079bc <__mcmp>
 8007186:	2800      	cmp	r0, #0
 8007188:	dc03      	bgt.n	8007192 <_dtoa_r+0xa52>
 800718a:	d1e1      	bne.n	8007150 <_dtoa_r+0xa10>
 800718c:	f018 0f01 	tst.w	r8, #1
 8007190:	d0de      	beq.n	8007150 <_dtoa_r+0xa10>
 8007192:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007196:	d1d8      	bne.n	800714a <_dtoa_r+0xa0a>
 8007198:	9a00      	ldr	r2, [sp, #0]
 800719a:	2339      	movs	r3, #57	@ 0x39
 800719c:	7013      	strb	r3, [r2, #0]
 800719e:	4633      	mov	r3, r6
 80071a0:	461e      	mov	r6, r3
 80071a2:	3b01      	subs	r3, #1
 80071a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80071a8:	2a39      	cmp	r2, #57	@ 0x39
 80071aa:	d052      	beq.n	8007252 <_dtoa_r+0xb12>
 80071ac:	3201      	adds	r2, #1
 80071ae:	701a      	strb	r2, [r3, #0]
 80071b0:	e612      	b.n	8006dd8 <_dtoa_r+0x698>
 80071b2:	2a00      	cmp	r2, #0
 80071b4:	dd07      	ble.n	80071c6 <_dtoa_r+0xa86>
 80071b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80071ba:	d0ed      	beq.n	8007198 <_dtoa_r+0xa58>
 80071bc:	9a00      	ldr	r2, [sp, #0]
 80071be:	f108 0301 	add.w	r3, r8, #1
 80071c2:	7013      	strb	r3, [r2, #0]
 80071c4:	e608      	b.n	8006dd8 <_dtoa_r+0x698>
 80071c6:	9b07      	ldr	r3, [sp, #28]
 80071c8:	9a07      	ldr	r2, [sp, #28]
 80071ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 80071ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d028      	beq.n	8007226 <_dtoa_r+0xae6>
 80071d4:	4649      	mov	r1, r9
 80071d6:	2300      	movs	r3, #0
 80071d8:	220a      	movs	r2, #10
 80071da:	4658      	mov	r0, fp
 80071dc:	f000 f9d6 	bl	800758c <__multadd>
 80071e0:	42af      	cmp	r7, r5
 80071e2:	4681      	mov	r9, r0
 80071e4:	f04f 0300 	mov.w	r3, #0
 80071e8:	f04f 020a 	mov.w	r2, #10
 80071ec:	4639      	mov	r1, r7
 80071ee:	4658      	mov	r0, fp
 80071f0:	d107      	bne.n	8007202 <_dtoa_r+0xac2>
 80071f2:	f000 f9cb 	bl	800758c <__multadd>
 80071f6:	4607      	mov	r7, r0
 80071f8:	4605      	mov	r5, r0
 80071fa:	9b07      	ldr	r3, [sp, #28]
 80071fc:	3301      	adds	r3, #1
 80071fe:	9307      	str	r3, [sp, #28]
 8007200:	e774      	b.n	80070ec <_dtoa_r+0x9ac>
 8007202:	f000 f9c3 	bl	800758c <__multadd>
 8007206:	4629      	mov	r1, r5
 8007208:	4607      	mov	r7, r0
 800720a:	2300      	movs	r3, #0
 800720c:	220a      	movs	r2, #10
 800720e:	4658      	mov	r0, fp
 8007210:	f000 f9bc 	bl	800758c <__multadd>
 8007214:	4605      	mov	r5, r0
 8007216:	e7f0      	b.n	80071fa <_dtoa_r+0xaba>
 8007218:	9b00      	ldr	r3, [sp, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	bfcc      	ite	gt
 800721e:	461e      	movgt	r6, r3
 8007220:	2601      	movle	r6, #1
 8007222:	4456      	add	r6, sl
 8007224:	2700      	movs	r7, #0
 8007226:	4649      	mov	r1, r9
 8007228:	2201      	movs	r2, #1
 800722a:	4658      	mov	r0, fp
 800722c:	f000 fb5a 	bl	80078e4 <__lshift>
 8007230:	4621      	mov	r1, r4
 8007232:	4681      	mov	r9, r0
 8007234:	f000 fbc2 	bl	80079bc <__mcmp>
 8007238:	2800      	cmp	r0, #0
 800723a:	dcb0      	bgt.n	800719e <_dtoa_r+0xa5e>
 800723c:	d102      	bne.n	8007244 <_dtoa_r+0xb04>
 800723e:	f018 0f01 	tst.w	r8, #1
 8007242:	d1ac      	bne.n	800719e <_dtoa_r+0xa5e>
 8007244:	4633      	mov	r3, r6
 8007246:	461e      	mov	r6, r3
 8007248:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800724c:	2a30      	cmp	r2, #48	@ 0x30
 800724e:	d0fa      	beq.n	8007246 <_dtoa_r+0xb06>
 8007250:	e5c2      	b.n	8006dd8 <_dtoa_r+0x698>
 8007252:	459a      	cmp	sl, r3
 8007254:	d1a4      	bne.n	80071a0 <_dtoa_r+0xa60>
 8007256:	9b04      	ldr	r3, [sp, #16]
 8007258:	3301      	adds	r3, #1
 800725a:	9304      	str	r3, [sp, #16]
 800725c:	2331      	movs	r3, #49	@ 0x31
 800725e:	f88a 3000 	strb.w	r3, [sl]
 8007262:	e5b9      	b.n	8006dd8 <_dtoa_r+0x698>
 8007264:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007266:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80072c4 <_dtoa_r+0xb84>
 800726a:	b11b      	cbz	r3, 8007274 <_dtoa_r+0xb34>
 800726c:	f10a 0308 	add.w	r3, sl, #8
 8007270:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007272:	6013      	str	r3, [r2, #0]
 8007274:	4650      	mov	r0, sl
 8007276:	b019      	add	sp, #100	@ 0x64
 8007278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800727c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800727e:	2b01      	cmp	r3, #1
 8007280:	f77f ae37 	ble.w	8006ef2 <_dtoa_r+0x7b2>
 8007284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007286:	930a      	str	r3, [sp, #40]	@ 0x28
 8007288:	2001      	movs	r0, #1
 800728a:	e655      	b.n	8006f38 <_dtoa_r+0x7f8>
 800728c:	9b00      	ldr	r3, [sp, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	f77f aed6 	ble.w	8007040 <_dtoa_r+0x900>
 8007294:	4656      	mov	r6, sl
 8007296:	4621      	mov	r1, r4
 8007298:	4648      	mov	r0, r9
 800729a:	f7ff f9c8 	bl	800662e <quorem>
 800729e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80072a2:	f806 8b01 	strb.w	r8, [r6], #1
 80072a6:	9b00      	ldr	r3, [sp, #0]
 80072a8:	eba6 020a 	sub.w	r2, r6, sl
 80072ac:	4293      	cmp	r3, r2
 80072ae:	ddb3      	ble.n	8007218 <_dtoa_r+0xad8>
 80072b0:	4649      	mov	r1, r9
 80072b2:	2300      	movs	r3, #0
 80072b4:	220a      	movs	r2, #10
 80072b6:	4658      	mov	r0, fp
 80072b8:	f000 f968 	bl	800758c <__multadd>
 80072bc:	4681      	mov	r9, r0
 80072be:	e7ea      	b.n	8007296 <_dtoa_r+0xb56>
 80072c0:	0800888c 	.word	0x0800888c
 80072c4:	08008810 	.word	0x08008810

080072c8 <_free_r>:
 80072c8:	b538      	push	{r3, r4, r5, lr}
 80072ca:	4605      	mov	r5, r0
 80072cc:	2900      	cmp	r1, #0
 80072ce:	d041      	beq.n	8007354 <_free_r+0x8c>
 80072d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072d4:	1f0c      	subs	r4, r1, #4
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	bfb8      	it	lt
 80072da:	18e4      	addlt	r4, r4, r3
 80072dc:	f000 f8e8 	bl	80074b0 <__malloc_lock>
 80072e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007358 <_free_r+0x90>)
 80072e2:	6813      	ldr	r3, [r2, #0]
 80072e4:	b933      	cbnz	r3, 80072f4 <_free_r+0x2c>
 80072e6:	6063      	str	r3, [r4, #4]
 80072e8:	6014      	str	r4, [r2, #0]
 80072ea:	4628      	mov	r0, r5
 80072ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072f0:	f000 b8e4 	b.w	80074bc <__malloc_unlock>
 80072f4:	42a3      	cmp	r3, r4
 80072f6:	d908      	bls.n	800730a <_free_r+0x42>
 80072f8:	6820      	ldr	r0, [r4, #0]
 80072fa:	1821      	adds	r1, r4, r0
 80072fc:	428b      	cmp	r3, r1
 80072fe:	bf01      	itttt	eq
 8007300:	6819      	ldreq	r1, [r3, #0]
 8007302:	685b      	ldreq	r3, [r3, #4]
 8007304:	1809      	addeq	r1, r1, r0
 8007306:	6021      	streq	r1, [r4, #0]
 8007308:	e7ed      	b.n	80072e6 <_free_r+0x1e>
 800730a:	461a      	mov	r2, r3
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	b10b      	cbz	r3, 8007314 <_free_r+0x4c>
 8007310:	42a3      	cmp	r3, r4
 8007312:	d9fa      	bls.n	800730a <_free_r+0x42>
 8007314:	6811      	ldr	r1, [r2, #0]
 8007316:	1850      	adds	r0, r2, r1
 8007318:	42a0      	cmp	r0, r4
 800731a:	d10b      	bne.n	8007334 <_free_r+0x6c>
 800731c:	6820      	ldr	r0, [r4, #0]
 800731e:	4401      	add	r1, r0
 8007320:	1850      	adds	r0, r2, r1
 8007322:	4283      	cmp	r3, r0
 8007324:	6011      	str	r1, [r2, #0]
 8007326:	d1e0      	bne.n	80072ea <_free_r+0x22>
 8007328:	6818      	ldr	r0, [r3, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	6053      	str	r3, [r2, #4]
 800732e:	4408      	add	r0, r1
 8007330:	6010      	str	r0, [r2, #0]
 8007332:	e7da      	b.n	80072ea <_free_r+0x22>
 8007334:	d902      	bls.n	800733c <_free_r+0x74>
 8007336:	230c      	movs	r3, #12
 8007338:	602b      	str	r3, [r5, #0]
 800733a:	e7d6      	b.n	80072ea <_free_r+0x22>
 800733c:	6820      	ldr	r0, [r4, #0]
 800733e:	1821      	adds	r1, r4, r0
 8007340:	428b      	cmp	r3, r1
 8007342:	bf04      	itt	eq
 8007344:	6819      	ldreq	r1, [r3, #0]
 8007346:	685b      	ldreq	r3, [r3, #4]
 8007348:	6063      	str	r3, [r4, #4]
 800734a:	bf04      	itt	eq
 800734c:	1809      	addeq	r1, r1, r0
 800734e:	6021      	streq	r1, [r4, #0]
 8007350:	6054      	str	r4, [r2, #4]
 8007352:	e7ca      	b.n	80072ea <_free_r+0x22>
 8007354:	bd38      	pop	{r3, r4, r5, pc}
 8007356:	bf00      	nop
 8007358:	20000988 	.word	0x20000988

0800735c <malloc>:
 800735c:	4b02      	ldr	r3, [pc, #8]	@ (8007368 <malloc+0xc>)
 800735e:	4601      	mov	r1, r0
 8007360:	6818      	ldr	r0, [r3, #0]
 8007362:	f000 b825 	b.w	80073b0 <_malloc_r>
 8007366:	bf00      	nop
 8007368:	20000018 	.word	0x20000018

0800736c <sbrk_aligned>:
 800736c:	b570      	push	{r4, r5, r6, lr}
 800736e:	4e0f      	ldr	r6, [pc, #60]	@ (80073ac <sbrk_aligned+0x40>)
 8007370:	460c      	mov	r4, r1
 8007372:	6831      	ldr	r1, [r6, #0]
 8007374:	4605      	mov	r5, r0
 8007376:	b911      	cbnz	r1, 800737e <sbrk_aligned+0x12>
 8007378:	f000 fe46 	bl	8008008 <_sbrk_r>
 800737c:	6030      	str	r0, [r6, #0]
 800737e:	4621      	mov	r1, r4
 8007380:	4628      	mov	r0, r5
 8007382:	f000 fe41 	bl	8008008 <_sbrk_r>
 8007386:	1c43      	adds	r3, r0, #1
 8007388:	d103      	bne.n	8007392 <sbrk_aligned+0x26>
 800738a:	f04f 34ff 	mov.w	r4, #4294967295
 800738e:	4620      	mov	r0, r4
 8007390:	bd70      	pop	{r4, r5, r6, pc}
 8007392:	1cc4      	adds	r4, r0, #3
 8007394:	f024 0403 	bic.w	r4, r4, #3
 8007398:	42a0      	cmp	r0, r4
 800739a:	d0f8      	beq.n	800738e <sbrk_aligned+0x22>
 800739c:	1a21      	subs	r1, r4, r0
 800739e:	4628      	mov	r0, r5
 80073a0:	f000 fe32 	bl	8008008 <_sbrk_r>
 80073a4:	3001      	adds	r0, #1
 80073a6:	d1f2      	bne.n	800738e <sbrk_aligned+0x22>
 80073a8:	e7ef      	b.n	800738a <sbrk_aligned+0x1e>
 80073aa:	bf00      	nop
 80073ac:	20000984 	.word	0x20000984

080073b0 <_malloc_r>:
 80073b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073b4:	1ccd      	adds	r5, r1, #3
 80073b6:	f025 0503 	bic.w	r5, r5, #3
 80073ba:	3508      	adds	r5, #8
 80073bc:	2d0c      	cmp	r5, #12
 80073be:	bf38      	it	cc
 80073c0:	250c      	movcc	r5, #12
 80073c2:	2d00      	cmp	r5, #0
 80073c4:	4606      	mov	r6, r0
 80073c6:	db01      	blt.n	80073cc <_malloc_r+0x1c>
 80073c8:	42a9      	cmp	r1, r5
 80073ca:	d904      	bls.n	80073d6 <_malloc_r+0x26>
 80073cc:	230c      	movs	r3, #12
 80073ce:	6033      	str	r3, [r6, #0]
 80073d0:	2000      	movs	r0, #0
 80073d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074ac <_malloc_r+0xfc>
 80073da:	f000 f869 	bl	80074b0 <__malloc_lock>
 80073de:	f8d8 3000 	ldr.w	r3, [r8]
 80073e2:	461c      	mov	r4, r3
 80073e4:	bb44      	cbnz	r4, 8007438 <_malloc_r+0x88>
 80073e6:	4629      	mov	r1, r5
 80073e8:	4630      	mov	r0, r6
 80073ea:	f7ff ffbf 	bl	800736c <sbrk_aligned>
 80073ee:	1c43      	adds	r3, r0, #1
 80073f0:	4604      	mov	r4, r0
 80073f2:	d158      	bne.n	80074a6 <_malloc_r+0xf6>
 80073f4:	f8d8 4000 	ldr.w	r4, [r8]
 80073f8:	4627      	mov	r7, r4
 80073fa:	2f00      	cmp	r7, #0
 80073fc:	d143      	bne.n	8007486 <_malloc_r+0xd6>
 80073fe:	2c00      	cmp	r4, #0
 8007400:	d04b      	beq.n	800749a <_malloc_r+0xea>
 8007402:	6823      	ldr	r3, [r4, #0]
 8007404:	4639      	mov	r1, r7
 8007406:	4630      	mov	r0, r6
 8007408:	eb04 0903 	add.w	r9, r4, r3
 800740c:	f000 fdfc 	bl	8008008 <_sbrk_r>
 8007410:	4581      	cmp	r9, r0
 8007412:	d142      	bne.n	800749a <_malloc_r+0xea>
 8007414:	6821      	ldr	r1, [r4, #0]
 8007416:	1a6d      	subs	r5, r5, r1
 8007418:	4629      	mov	r1, r5
 800741a:	4630      	mov	r0, r6
 800741c:	f7ff ffa6 	bl	800736c <sbrk_aligned>
 8007420:	3001      	adds	r0, #1
 8007422:	d03a      	beq.n	800749a <_malloc_r+0xea>
 8007424:	6823      	ldr	r3, [r4, #0]
 8007426:	442b      	add	r3, r5
 8007428:	6023      	str	r3, [r4, #0]
 800742a:	f8d8 3000 	ldr.w	r3, [r8]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	bb62      	cbnz	r2, 800748c <_malloc_r+0xdc>
 8007432:	f8c8 7000 	str.w	r7, [r8]
 8007436:	e00f      	b.n	8007458 <_malloc_r+0xa8>
 8007438:	6822      	ldr	r2, [r4, #0]
 800743a:	1b52      	subs	r2, r2, r5
 800743c:	d420      	bmi.n	8007480 <_malloc_r+0xd0>
 800743e:	2a0b      	cmp	r2, #11
 8007440:	d917      	bls.n	8007472 <_malloc_r+0xc2>
 8007442:	1961      	adds	r1, r4, r5
 8007444:	42a3      	cmp	r3, r4
 8007446:	6025      	str	r5, [r4, #0]
 8007448:	bf18      	it	ne
 800744a:	6059      	strne	r1, [r3, #4]
 800744c:	6863      	ldr	r3, [r4, #4]
 800744e:	bf08      	it	eq
 8007450:	f8c8 1000 	streq.w	r1, [r8]
 8007454:	5162      	str	r2, [r4, r5]
 8007456:	604b      	str	r3, [r1, #4]
 8007458:	4630      	mov	r0, r6
 800745a:	f000 f82f 	bl	80074bc <__malloc_unlock>
 800745e:	f104 000b 	add.w	r0, r4, #11
 8007462:	1d23      	adds	r3, r4, #4
 8007464:	f020 0007 	bic.w	r0, r0, #7
 8007468:	1ac2      	subs	r2, r0, r3
 800746a:	bf1c      	itt	ne
 800746c:	1a1b      	subne	r3, r3, r0
 800746e:	50a3      	strne	r3, [r4, r2]
 8007470:	e7af      	b.n	80073d2 <_malloc_r+0x22>
 8007472:	6862      	ldr	r2, [r4, #4]
 8007474:	42a3      	cmp	r3, r4
 8007476:	bf0c      	ite	eq
 8007478:	f8c8 2000 	streq.w	r2, [r8]
 800747c:	605a      	strne	r2, [r3, #4]
 800747e:	e7eb      	b.n	8007458 <_malloc_r+0xa8>
 8007480:	4623      	mov	r3, r4
 8007482:	6864      	ldr	r4, [r4, #4]
 8007484:	e7ae      	b.n	80073e4 <_malloc_r+0x34>
 8007486:	463c      	mov	r4, r7
 8007488:	687f      	ldr	r7, [r7, #4]
 800748a:	e7b6      	b.n	80073fa <_malloc_r+0x4a>
 800748c:	461a      	mov	r2, r3
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	42a3      	cmp	r3, r4
 8007492:	d1fb      	bne.n	800748c <_malloc_r+0xdc>
 8007494:	2300      	movs	r3, #0
 8007496:	6053      	str	r3, [r2, #4]
 8007498:	e7de      	b.n	8007458 <_malloc_r+0xa8>
 800749a:	230c      	movs	r3, #12
 800749c:	6033      	str	r3, [r6, #0]
 800749e:	4630      	mov	r0, r6
 80074a0:	f000 f80c 	bl	80074bc <__malloc_unlock>
 80074a4:	e794      	b.n	80073d0 <_malloc_r+0x20>
 80074a6:	6005      	str	r5, [r0, #0]
 80074a8:	e7d6      	b.n	8007458 <_malloc_r+0xa8>
 80074aa:	bf00      	nop
 80074ac:	20000988 	.word	0x20000988

080074b0 <__malloc_lock>:
 80074b0:	4801      	ldr	r0, [pc, #4]	@ (80074b8 <__malloc_lock+0x8>)
 80074b2:	f7ff b8ba 	b.w	800662a <__retarget_lock_acquire_recursive>
 80074b6:	bf00      	nop
 80074b8:	20000980 	.word	0x20000980

080074bc <__malloc_unlock>:
 80074bc:	4801      	ldr	r0, [pc, #4]	@ (80074c4 <__malloc_unlock+0x8>)
 80074be:	f7ff b8b5 	b.w	800662c <__retarget_lock_release_recursive>
 80074c2:	bf00      	nop
 80074c4:	20000980 	.word	0x20000980

080074c8 <_Balloc>:
 80074c8:	b570      	push	{r4, r5, r6, lr}
 80074ca:	69c6      	ldr	r6, [r0, #28]
 80074cc:	4604      	mov	r4, r0
 80074ce:	460d      	mov	r5, r1
 80074d0:	b976      	cbnz	r6, 80074f0 <_Balloc+0x28>
 80074d2:	2010      	movs	r0, #16
 80074d4:	f7ff ff42 	bl	800735c <malloc>
 80074d8:	4602      	mov	r2, r0
 80074da:	61e0      	str	r0, [r4, #28]
 80074dc:	b920      	cbnz	r0, 80074e8 <_Balloc+0x20>
 80074de:	4b18      	ldr	r3, [pc, #96]	@ (8007540 <_Balloc+0x78>)
 80074e0:	4818      	ldr	r0, [pc, #96]	@ (8007544 <_Balloc+0x7c>)
 80074e2:	216b      	movs	r1, #107	@ 0x6b
 80074e4:	f000 fdae 	bl	8008044 <__assert_func>
 80074e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074ec:	6006      	str	r6, [r0, #0]
 80074ee:	60c6      	str	r6, [r0, #12]
 80074f0:	69e6      	ldr	r6, [r4, #28]
 80074f2:	68f3      	ldr	r3, [r6, #12]
 80074f4:	b183      	cbz	r3, 8007518 <_Balloc+0x50>
 80074f6:	69e3      	ldr	r3, [r4, #28]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80074fe:	b9b8      	cbnz	r0, 8007530 <_Balloc+0x68>
 8007500:	2101      	movs	r1, #1
 8007502:	fa01 f605 	lsl.w	r6, r1, r5
 8007506:	1d72      	adds	r2, r6, #5
 8007508:	0092      	lsls	r2, r2, #2
 800750a:	4620      	mov	r0, r4
 800750c:	f000 fdb8 	bl	8008080 <_calloc_r>
 8007510:	b160      	cbz	r0, 800752c <_Balloc+0x64>
 8007512:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007516:	e00e      	b.n	8007536 <_Balloc+0x6e>
 8007518:	2221      	movs	r2, #33	@ 0x21
 800751a:	2104      	movs	r1, #4
 800751c:	4620      	mov	r0, r4
 800751e:	f000 fdaf 	bl	8008080 <_calloc_r>
 8007522:	69e3      	ldr	r3, [r4, #28]
 8007524:	60f0      	str	r0, [r6, #12]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1e4      	bne.n	80074f6 <_Balloc+0x2e>
 800752c:	2000      	movs	r0, #0
 800752e:	bd70      	pop	{r4, r5, r6, pc}
 8007530:	6802      	ldr	r2, [r0, #0]
 8007532:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007536:	2300      	movs	r3, #0
 8007538:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800753c:	e7f7      	b.n	800752e <_Balloc+0x66>
 800753e:	bf00      	nop
 8007540:	0800881d 	.word	0x0800881d
 8007544:	0800889d 	.word	0x0800889d

08007548 <_Bfree>:
 8007548:	b570      	push	{r4, r5, r6, lr}
 800754a:	69c6      	ldr	r6, [r0, #28]
 800754c:	4605      	mov	r5, r0
 800754e:	460c      	mov	r4, r1
 8007550:	b976      	cbnz	r6, 8007570 <_Bfree+0x28>
 8007552:	2010      	movs	r0, #16
 8007554:	f7ff ff02 	bl	800735c <malloc>
 8007558:	4602      	mov	r2, r0
 800755a:	61e8      	str	r0, [r5, #28]
 800755c:	b920      	cbnz	r0, 8007568 <_Bfree+0x20>
 800755e:	4b09      	ldr	r3, [pc, #36]	@ (8007584 <_Bfree+0x3c>)
 8007560:	4809      	ldr	r0, [pc, #36]	@ (8007588 <_Bfree+0x40>)
 8007562:	218f      	movs	r1, #143	@ 0x8f
 8007564:	f000 fd6e 	bl	8008044 <__assert_func>
 8007568:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800756c:	6006      	str	r6, [r0, #0]
 800756e:	60c6      	str	r6, [r0, #12]
 8007570:	b13c      	cbz	r4, 8007582 <_Bfree+0x3a>
 8007572:	69eb      	ldr	r3, [r5, #28]
 8007574:	6862      	ldr	r2, [r4, #4]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800757c:	6021      	str	r1, [r4, #0]
 800757e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007582:	bd70      	pop	{r4, r5, r6, pc}
 8007584:	0800881d 	.word	0x0800881d
 8007588:	0800889d 	.word	0x0800889d

0800758c <__multadd>:
 800758c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007590:	690d      	ldr	r5, [r1, #16]
 8007592:	4607      	mov	r7, r0
 8007594:	460c      	mov	r4, r1
 8007596:	461e      	mov	r6, r3
 8007598:	f101 0c14 	add.w	ip, r1, #20
 800759c:	2000      	movs	r0, #0
 800759e:	f8dc 3000 	ldr.w	r3, [ip]
 80075a2:	b299      	uxth	r1, r3
 80075a4:	fb02 6101 	mla	r1, r2, r1, r6
 80075a8:	0c1e      	lsrs	r6, r3, #16
 80075aa:	0c0b      	lsrs	r3, r1, #16
 80075ac:	fb02 3306 	mla	r3, r2, r6, r3
 80075b0:	b289      	uxth	r1, r1
 80075b2:	3001      	adds	r0, #1
 80075b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80075b8:	4285      	cmp	r5, r0
 80075ba:	f84c 1b04 	str.w	r1, [ip], #4
 80075be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80075c2:	dcec      	bgt.n	800759e <__multadd+0x12>
 80075c4:	b30e      	cbz	r6, 800760a <__multadd+0x7e>
 80075c6:	68a3      	ldr	r3, [r4, #8]
 80075c8:	42ab      	cmp	r3, r5
 80075ca:	dc19      	bgt.n	8007600 <__multadd+0x74>
 80075cc:	6861      	ldr	r1, [r4, #4]
 80075ce:	4638      	mov	r0, r7
 80075d0:	3101      	adds	r1, #1
 80075d2:	f7ff ff79 	bl	80074c8 <_Balloc>
 80075d6:	4680      	mov	r8, r0
 80075d8:	b928      	cbnz	r0, 80075e6 <__multadd+0x5a>
 80075da:	4602      	mov	r2, r0
 80075dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007610 <__multadd+0x84>)
 80075de:	480d      	ldr	r0, [pc, #52]	@ (8007614 <__multadd+0x88>)
 80075e0:	21ba      	movs	r1, #186	@ 0xba
 80075e2:	f000 fd2f 	bl	8008044 <__assert_func>
 80075e6:	6922      	ldr	r2, [r4, #16]
 80075e8:	3202      	adds	r2, #2
 80075ea:	f104 010c 	add.w	r1, r4, #12
 80075ee:	0092      	lsls	r2, r2, #2
 80075f0:	300c      	adds	r0, #12
 80075f2:	f000 fd19 	bl	8008028 <memcpy>
 80075f6:	4621      	mov	r1, r4
 80075f8:	4638      	mov	r0, r7
 80075fa:	f7ff ffa5 	bl	8007548 <_Bfree>
 80075fe:	4644      	mov	r4, r8
 8007600:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007604:	3501      	adds	r5, #1
 8007606:	615e      	str	r6, [r3, #20]
 8007608:	6125      	str	r5, [r4, #16]
 800760a:	4620      	mov	r0, r4
 800760c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007610:	0800888c 	.word	0x0800888c
 8007614:	0800889d 	.word	0x0800889d

08007618 <__hi0bits>:
 8007618:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800761c:	4603      	mov	r3, r0
 800761e:	bf36      	itet	cc
 8007620:	0403      	lslcc	r3, r0, #16
 8007622:	2000      	movcs	r0, #0
 8007624:	2010      	movcc	r0, #16
 8007626:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800762a:	bf3c      	itt	cc
 800762c:	021b      	lslcc	r3, r3, #8
 800762e:	3008      	addcc	r0, #8
 8007630:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007634:	bf3c      	itt	cc
 8007636:	011b      	lslcc	r3, r3, #4
 8007638:	3004      	addcc	r0, #4
 800763a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800763e:	bf3c      	itt	cc
 8007640:	009b      	lslcc	r3, r3, #2
 8007642:	3002      	addcc	r0, #2
 8007644:	2b00      	cmp	r3, #0
 8007646:	db05      	blt.n	8007654 <__hi0bits+0x3c>
 8007648:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800764c:	f100 0001 	add.w	r0, r0, #1
 8007650:	bf08      	it	eq
 8007652:	2020      	moveq	r0, #32
 8007654:	4770      	bx	lr

08007656 <__lo0bits>:
 8007656:	6803      	ldr	r3, [r0, #0]
 8007658:	4602      	mov	r2, r0
 800765a:	f013 0007 	ands.w	r0, r3, #7
 800765e:	d00b      	beq.n	8007678 <__lo0bits+0x22>
 8007660:	07d9      	lsls	r1, r3, #31
 8007662:	d421      	bmi.n	80076a8 <__lo0bits+0x52>
 8007664:	0798      	lsls	r0, r3, #30
 8007666:	bf49      	itett	mi
 8007668:	085b      	lsrmi	r3, r3, #1
 800766a:	089b      	lsrpl	r3, r3, #2
 800766c:	2001      	movmi	r0, #1
 800766e:	6013      	strmi	r3, [r2, #0]
 8007670:	bf5c      	itt	pl
 8007672:	6013      	strpl	r3, [r2, #0]
 8007674:	2002      	movpl	r0, #2
 8007676:	4770      	bx	lr
 8007678:	b299      	uxth	r1, r3
 800767a:	b909      	cbnz	r1, 8007680 <__lo0bits+0x2a>
 800767c:	0c1b      	lsrs	r3, r3, #16
 800767e:	2010      	movs	r0, #16
 8007680:	b2d9      	uxtb	r1, r3
 8007682:	b909      	cbnz	r1, 8007688 <__lo0bits+0x32>
 8007684:	3008      	adds	r0, #8
 8007686:	0a1b      	lsrs	r3, r3, #8
 8007688:	0719      	lsls	r1, r3, #28
 800768a:	bf04      	itt	eq
 800768c:	091b      	lsreq	r3, r3, #4
 800768e:	3004      	addeq	r0, #4
 8007690:	0799      	lsls	r1, r3, #30
 8007692:	bf04      	itt	eq
 8007694:	089b      	lsreq	r3, r3, #2
 8007696:	3002      	addeq	r0, #2
 8007698:	07d9      	lsls	r1, r3, #31
 800769a:	d403      	bmi.n	80076a4 <__lo0bits+0x4e>
 800769c:	085b      	lsrs	r3, r3, #1
 800769e:	f100 0001 	add.w	r0, r0, #1
 80076a2:	d003      	beq.n	80076ac <__lo0bits+0x56>
 80076a4:	6013      	str	r3, [r2, #0]
 80076a6:	4770      	bx	lr
 80076a8:	2000      	movs	r0, #0
 80076aa:	4770      	bx	lr
 80076ac:	2020      	movs	r0, #32
 80076ae:	4770      	bx	lr

080076b0 <__i2b>:
 80076b0:	b510      	push	{r4, lr}
 80076b2:	460c      	mov	r4, r1
 80076b4:	2101      	movs	r1, #1
 80076b6:	f7ff ff07 	bl	80074c8 <_Balloc>
 80076ba:	4602      	mov	r2, r0
 80076bc:	b928      	cbnz	r0, 80076ca <__i2b+0x1a>
 80076be:	4b05      	ldr	r3, [pc, #20]	@ (80076d4 <__i2b+0x24>)
 80076c0:	4805      	ldr	r0, [pc, #20]	@ (80076d8 <__i2b+0x28>)
 80076c2:	f240 1145 	movw	r1, #325	@ 0x145
 80076c6:	f000 fcbd 	bl	8008044 <__assert_func>
 80076ca:	2301      	movs	r3, #1
 80076cc:	6144      	str	r4, [r0, #20]
 80076ce:	6103      	str	r3, [r0, #16]
 80076d0:	bd10      	pop	{r4, pc}
 80076d2:	bf00      	nop
 80076d4:	0800888c 	.word	0x0800888c
 80076d8:	0800889d 	.word	0x0800889d

080076dc <__multiply>:
 80076dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e0:	4614      	mov	r4, r2
 80076e2:	690a      	ldr	r2, [r1, #16]
 80076e4:	6923      	ldr	r3, [r4, #16]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	bfa8      	it	ge
 80076ea:	4623      	movge	r3, r4
 80076ec:	460f      	mov	r7, r1
 80076ee:	bfa4      	itt	ge
 80076f0:	460c      	movge	r4, r1
 80076f2:	461f      	movge	r7, r3
 80076f4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80076f8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80076fc:	68a3      	ldr	r3, [r4, #8]
 80076fe:	6861      	ldr	r1, [r4, #4]
 8007700:	eb0a 0609 	add.w	r6, sl, r9
 8007704:	42b3      	cmp	r3, r6
 8007706:	b085      	sub	sp, #20
 8007708:	bfb8      	it	lt
 800770a:	3101      	addlt	r1, #1
 800770c:	f7ff fedc 	bl	80074c8 <_Balloc>
 8007710:	b930      	cbnz	r0, 8007720 <__multiply+0x44>
 8007712:	4602      	mov	r2, r0
 8007714:	4b44      	ldr	r3, [pc, #272]	@ (8007828 <__multiply+0x14c>)
 8007716:	4845      	ldr	r0, [pc, #276]	@ (800782c <__multiply+0x150>)
 8007718:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800771c:	f000 fc92 	bl	8008044 <__assert_func>
 8007720:	f100 0514 	add.w	r5, r0, #20
 8007724:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007728:	462b      	mov	r3, r5
 800772a:	2200      	movs	r2, #0
 800772c:	4543      	cmp	r3, r8
 800772e:	d321      	bcc.n	8007774 <__multiply+0x98>
 8007730:	f107 0114 	add.w	r1, r7, #20
 8007734:	f104 0214 	add.w	r2, r4, #20
 8007738:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800773c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007740:	9302      	str	r3, [sp, #8]
 8007742:	1b13      	subs	r3, r2, r4
 8007744:	3b15      	subs	r3, #21
 8007746:	f023 0303 	bic.w	r3, r3, #3
 800774a:	3304      	adds	r3, #4
 800774c:	f104 0715 	add.w	r7, r4, #21
 8007750:	42ba      	cmp	r2, r7
 8007752:	bf38      	it	cc
 8007754:	2304      	movcc	r3, #4
 8007756:	9301      	str	r3, [sp, #4]
 8007758:	9b02      	ldr	r3, [sp, #8]
 800775a:	9103      	str	r1, [sp, #12]
 800775c:	428b      	cmp	r3, r1
 800775e:	d80c      	bhi.n	800777a <__multiply+0x9e>
 8007760:	2e00      	cmp	r6, #0
 8007762:	dd03      	ble.n	800776c <__multiply+0x90>
 8007764:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007768:	2b00      	cmp	r3, #0
 800776a:	d05b      	beq.n	8007824 <__multiply+0x148>
 800776c:	6106      	str	r6, [r0, #16]
 800776e:	b005      	add	sp, #20
 8007770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007774:	f843 2b04 	str.w	r2, [r3], #4
 8007778:	e7d8      	b.n	800772c <__multiply+0x50>
 800777a:	f8b1 a000 	ldrh.w	sl, [r1]
 800777e:	f1ba 0f00 	cmp.w	sl, #0
 8007782:	d024      	beq.n	80077ce <__multiply+0xf2>
 8007784:	f104 0e14 	add.w	lr, r4, #20
 8007788:	46a9      	mov	r9, r5
 800778a:	f04f 0c00 	mov.w	ip, #0
 800778e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007792:	f8d9 3000 	ldr.w	r3, [r9]
 8007796:	fa1f fb87 	uxth.w	fp, r7
 800779a:	b29b      	uxth	r3, r3
 800779c:	fb0a 330b 	mla	r3, sl, fp, r3
 80077a0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80077a4:	f8d9 7000 	ldr.w	r7, [r9]
 80077a8:	4463      	add	r3, ip
 80077aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80077ae:	fb0a c70b 	mla	r7, sl, fp, ip
 80077b2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80077bc:	4572      	cmp	r2, lr
 80077be:	f849 3b04 	str.w	r3, [r9], #4
 80077c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80077c6:	d8e2      	bhi.n	800778e <__multiply+0xb2>
 80077c8:	9b01      	ldr	r3, [sp, #4]
 80077ca:	f845 c003 	str.w	ip, [r5, r3]
 80077ce:	9b03      	ldr	r3, [sp, #12]
 80077d0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80077d4:	3104      	adds	r1, #4
 80077d6:	f1b9 0f00 	cmp.w	r9, #0
 80077da:	d021      	beq.n	8007820 <__multiply+0x144>
 80077dc:	682b      	ldr	r3, [r5, #0]
 80077de:	f104 0c14 	add.w	ip, r4, #20
 80077e2:	46ae      	mov	lr, r5
 80077e4:	f04f 0a00 	mov.w	sl, #0
 80077e8:	f8bc b000 	ldrh.w	fp, [ip]
 80077ec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80077f0:	fb09 770b 	mla	r7, r9, fp, r7
 80077f4:	4457      	add	r7, sl
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80077fc:	f84e 3b04 	str.w	r3, [lr], #4
 8007800:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007804:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007808:	f8be 3000 	ldrh.w	r3, [lr]
 800780c:	fb09 330a 	mla	r3, r9, sl, r3
 8007810:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007814:	4562      	cmp	r2, ip
 8007816:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800781a:	d8e5      	bhi.n	80077e8 <__multiply+0x10c>
 800781c:	9f01      	ldr	r7, [sp, #4]
 800781e:	51eb      	str	r3, [r5, r7]
 8007820:	3504      	adds	r5, #4
 8007822:	e799      	b.n	8007758 <__multiply+0x7c>
 8007824:	3e01      	subs	r6, #1
 8007826:	e79b      	b.n	8007760 <__multiply+0x84>
 8007828:	0800888c 	.word	0x0800888c
 800782c:	0800889d 	.word	0x0800889d

08007830 <__pow5mult>:
 8007830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007834:	4615      	mov	r5, r2
 8007836:	f012 0203 	ands.w	r2, r2, #3
 800783a:	4607      	mov	r7, r0
 800783c:	460e      	mov	r6, r1
 800783e:	d007      	beq.n	8007850 <__pow5mult+0x20>
 8007840:	4c25      	ldr	r4, [pc, #148]	@ (80078d8 <__pow5mult+0xa8>)
 8007842:	3a01      	subs	r2, #1
 8007844:	2300      	movs	r3, #0
 8007846:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800784a:	f7ff fe9f 	bl	800758c <__multadd>
 800784e:	4606      	mov	r6, r0
 8007850:	10ad      	asrs	r5, r5, #2
 8007852:	d03d      	beq.n	80078d0 <__pow5mult+0xa0>
 8007854:	69fc      	ldr	r4, [r7, #28]
 8007856:	b97c      	cbnz	r4, 8007878 <__pow5mult+0x48>
 8007858:	2010      	movs	r0, #16
 800785a:	f7ff fd7f 	bl	800735c <malloc>
 800785e:	4602      	mov	r2, r0
 8007860:	61f8      	str	r0, [r7, #28]
 8007862:	b928      	cbnz	r0, 8007870 <__pow5mult+0x40>
 8007864:	4b1d      	ldr	r3, [pc, #116]	@ (80078dc <__pow5mult+0xac>)
 8007866:	481e      	ldr	r0, [pc, #120]	@ (80078e0 <__pow5mult+0xb0>)
 8007868:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800786c:	f000 fbea 	bl	8008044 <__assert_func>
 8007870:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007874:	6004      	str	r4, [r0, #0]
 8007876:	60c4      	str	r4, [r0, #12]
 8007878:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800787c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007880:	b94c      	cbnz	r4, 8007896 <__pow5mult+0x66>
 8007882:	f240 2171 	movw	r1, #625	@ 0x271
 8007886:	4638      	mov	r0, r7
 8007888:	f7ff ff12 	bl	80076b0 <__i2b>
 800788c:	2300      	movs	r3, #0
 800788e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007892:	4604      	mov	r4, r0
 8007894:	6003      	str	r3, [r0, #0]
 8007896:	f04f 0900 	mov.w	r9, #0
 800789a:	07eb      	lsls	r3, r5, #31
 800789c:	d50a      	bpl.n	80078b4 <__pow5mult+0x84>
 800789e:	4631      	mov	r1, r6
 80078a0:	4622      	mov	r2, r4
 80078a2:	4638      	mov	r0, r7
 80078a4:	f7ff ff1a 	bl	80076dc <__multiply>
 80078a8:	4631      	mov	r1, r6
 80078aa:	4680      	mov	r8, r0
 80078ac:	4638      	mov	r0, r7
 80078ae:	f7ff fe4b 	bl	8007548 <_Bfree>
 80078b2:	4646      	mov	r6, r8
 80078b4:	106d      	asrs	r5, r5, #1
 80078b6:	d00b      	beq.n	80078d0 <__pow5mult+0xa0>
 80078b8:	6820      	ldr	r0, [r4, #0]
 80078ba:	b938      	cbnz	r0, 80078cc <__pow5mult+0x9c>
 80078bc:	4622      	mov	r2, r4
 80078be:	4621      	mov	r1, r4
 80078c0:	4638      	mov	r0, r7
 80078c2:	f7ff ff0b 	bl	80076dc <__multiply>
 80078c6:	6020      	str	r0, [r4, #0]
 80078c8:	f8c0 9000 	str.w	r9, [r0]
 80078cc:	4604      	mov	r4, r0
 80078ce:	e7e4      	b.n	800789a <__pow5mult+0x6a>
 80078d0:	4630      	mov	r0, r6
 80078d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078d6:	bf00      	nop
 80078d8:	080088f8 	.word	0x080088f8
 80078dc:	0800881d 	.word	0x0800881d
 80078e0:	0800889d 	.word	0x0800889d

080078e4 <__lshift>:
 80078e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078e8:	460c      	mov	r4, r1
 80078ea:	6849      	ldr	r1, [r1, #4]
 80078ec:	6923      	ldr	r3, [r4, #16]
 80078ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078f2:	68a3      	ldr	r3, [r4, #8]
 80078f4:	4607      	mov	r7, r0
 80078f6:	4691      	mov	r9, r2
 80078f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078fc:	f108 0601 	add.w	r6, r8, #1
 8007900:	42b3      	cmp	r3, r6
 8007902:	db0b      	blt.n	800791c <__lshift+0x38>
 8007904:	4638      	mov	r0, r7
 8007906:	f7ff fddf 	bl	80074c8 <_Balloc>
 800790a:	4605      	mov	r5, r0
 800790c:	b948      	cbnz	r0, 8007922 <__lshift+0x3e>
 800790e:	4602      	mov	r2, r0
 8007910:	4b28      	ldr	r3, [pc, #160]	@ (80079b4 <__lshift+0xd0>)
 8007912:	4829      	ldr	r0, [pc, #164]	@ (80079b8 <__lshift+0xd4>)
 8007914:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007918:	f000 fb94 	bl	8008044 <__assert_func>
 800791c:	3101      	adds	r1, #1
 800791e:	005b      	lsls	r3, r3, #1
 8007920:	e7ee      	b.n	8007900 <__lshift+0x1c>
 8007922:	2300      	movs	r3, #0
 8007924:	f100 0114 	add.w	r1, r0, #20
 8007928:	f100 0210 	add.w	r2, r0, #16
 800792c:	4618      	mov	r0, r3
 800792e:	4553      	cmp	r3, sl
 8007930:	db33      	blt.n	800799a <__lshift+0xb6>
 8007932:	6920      	ldr	r0, [r4, #16]
 8007934:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007938:	f104 0314 	add.w	r3, r4, #20
 800793c:	f019 091f 	ands.w	r9, r9, #31
 8007940:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007944:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007948:	d02b      	beq.n	80079a2 <__lshift+0xbe>
 800794a:	f1c9 0e20 	rsb	lr, r9, #32
 800794e:	468a      	mov	sl, r1
 8007950:	2200      	movs	r2, #0
 8007952:	6818      	ldr	r0, [r3, #0]
 8007954:	fa00 f009 	lsl.w	r0, r0, r9
 8007958:	4310      	orrs	r0, r2
 800795a:	f84a 0b04 	str.w	r0, [sl], #4
 800795e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007962:	459c      	cmp	ip, r3
 8007964:	fa22 f20e 	lsr.w	r2, r2, lr
 8007968:	d8f3      	bhi.n	8007952 <__lshift+0x6e>
 800796a:	ebac 0304 	sub.w	r3, ip, r4
 800796e:	3b15      	subs	r3, #21
 8007970:	f023 0303 	bic.w	r3, r3, #3
 8007974:	3304      	adds	r3, #4
 8007976:	f104 0015 	add.w	r0, r4, #21
 800797a:	4584      	cmp	ip, r0
 800797c:	bf38      	it	cc
 800797e:	2304      	movcc	r3, #4
 8007980:	50ca      	str	r2, [r1, r3]
 8007982:	b10a      	cbz	r2, 8007988 <__lshift+0xa4>
 8007984:	f108 0602 	add.w	r6, r8, #2
 8007988:	3e01      	subs	r6, #1
 800798a:	4638      	mov	r0, r7
 800798c:	612e      	str	r6, [r5, #16]
 800798e:	4621      	mov	r1, r4
 8007990:	f7ff fdda 	bl	8007548 <_Bfree>
 8007994:	4628      	mov	r0, r5
 8007996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800799a:	f842 0f04 	str.w	r0, [r2, #4]!
 800799e:	3301      	adds	r3, #1
 80079a0:	e7c5      	b.n	800792e <__lshift+0x4a>
 80079a2:	3904      	subs	r1, #4
 80079a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80079a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80079ac:	459c      	cmp	ip, r3
 80079ae:	d8f9      	bhi.n	80079a4 <__lshift+0xc0>
 80079b0:	e7ea      	b.n	8007988 <__lshift+0xa4>
 80079b2:	bf00      	nop
 80079b4:	0800888c 	.word	0x0800888c
 80079b8:	0800889d 	.word	0x0800889d

080079bc <__mcmp>:
 80079bc:	690a      	ldr	r2, [r1, #16]
 80079be:	4603      	mov	r3, r0
 80079c0:	6900      	ldr	r0, [r0, #16]
 80079c2:	1a80      	subs	r0, r0, r2
 80079c4:	b530      	push	{r4, r5, lr}
 80079c6:	d10e      	bne.n	80079e6 <__mcmp+0x2a>
 80079c8:	3314      	adds	r3, #20
 80079ca:	3114      	adds	r1, #20
 80079cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80079d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80079d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80079d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80079dc:	4295      	cmp	r5, r2
 80079de:	d003      	beq.n	80079e8 <__mcmp+0x2c>
 80079e0:	d205      	bcs.n	80079ee <__mcmp+0x32>
 80079e2:	f04f 30ff 	mov.w	r0, #4294967295
 80079e6:	bd30      	pop	{r4, r5, pc}
 80079e8:	42a3      	cmp	r3, r4
 80079ea:	d3f3      	bcc.n	80079d4 <__mcmp+0x18>
 80079ec:	e7fb      	b.n	80079e6 <__mcmp+0x2a>
 80079ee:	2001      	movs	r0, #1
 80079f0:	e7f9      	b.n	80079e6 <__mcmp+0x2a>
	...

080079f4 <__mdiff>:
 80079f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f8:	4689      	mov	r9, r1
 80079fa:	4606      	mov	r6, r0
 80079fc:	4611      	mov	r1, r2
 80079fe:	4648      	mov	r0, r9
 8007a00:	4614      	mov	r4, r2
 8007a02:	f7ff ffdb 	bl	80079bc <__mcmp>
 8007a06:	1e05      	subs	r5, r0, #0
 8007a08:	d112      	bne.n	8007a30 <__mdiff+0x3c>
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	f7ff fd5b 	bl	80074c8 <_Balloc>
 8007a12:	4602      	mov	r2, r0
 8007a14:	b928      	cbnz	r0, 8007a22 <__mdiff+0x2e>
 8007a16:	4b3f      	ldr	r3, [pc, #252]	@ (8007b14 <__mdiff+0x120>)
 8007a18:	f240 2137 	movw	r1, #567	@ 0x237
 8007a1c:	483e      	ldr	r0, [pc, #248]	@ (8007b18 <__mdiff+0x124>)
 8007a1e:	f000 fb11 	bl	8008044 <__assert_func>
 8007a22:	2301      	movs	r3, #1
 8007a24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a28:	4610      	mov	r0, r2
 8007a2a:	b003      	add	sp, #12
 8007a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a30:	bfbc      	itt	lt
 8007a32:	464b      	movlt	r3, r9
 8007a34:	46a1      	movlt	r9, r4
 8007a36:	4630      	mov	r0, r6
 8007a38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007a3c:	bfba      	itte	lt
 8007a3e:	461c      	movlt	r4, r3
 8007a40:	2501      	movlt	r5, #1
 8007a42:	2500      	movge	r5, #0
 8007a44:	f7ff fd40 	bl	80074c8 <_Balloc>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	b918      	cbnz	r0, 8007a54 <__mdiff+0x60>
 8007a4c:	4b31      	ldr	r3, [pc, #196]	@ (8007b14 <__mdiff+0x120>)
 8007a4e:	f240 2145 	movw	r1, #581	@ 0x245
 8007a52:	e7e3      	b.n	8007a1c <__mdiff+0x28>
 8007a54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007a58:	6926      	ldr	r6, [r4, #16]
 8007a5a:	60c5      	str	r5, [r0, #12]
 8007a5c:	f109 0310 	add.w	r3, r9, #16
 8007a60:	f109 0514 	add.w	r5, r9, #20
 8007a64:	f104 0e14 	add.w	lr, r4, #20
 8007a68:	f100 0b14 	add.w	fp, r0, #20
 8007a6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007a70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007a74:	9301      	str	r3, [sp, #4]
 8007a76:	46d9      	mov	r9, fp
 8007a78:	f04f 0c00 	mov.w	ip, #0
 8007a7c:	9b01      	ldr	r3, [sp, #4]
 8007a7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007a82:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007a86:	9301      	str	r3, [sp, #4]
 8007a88:	fa1f f38a 	uxth.w	r3, sl
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	b283      	uxth	r3, r0
 8007a90:	1acb      	subs	r3, r1, r3
 8007a92:	0c00      	lsrs	r0, r0, #16
 8007a94:	4463      	add	r3, ip
 8007a96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007a9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007aa4:	4576      	cmp	r6, lr
 8007aa6:	f849 3b04 	str.w	r3, [r9], #4
 8007aaa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007aae:	d8e5      	bhi.n	8007a7c <__mdiff+0x88>
 8007ab0:	1b33      	subs	r3, r6, r4
 8007ab2:	3b15      	subs	r3, #21
 8007ab4:	f023 0303 	bic.w	r3, r3, #3
 8007ab8:	3415      	adds	r4, #21
 8007aba:	3304      	adds	r3, #4
 8007abc:	42a6      	cmp	r6, r4
 8007abe:	bf38      	it	cc
 8007ac0:	2304      	movcc	r3, #4
 8007ac2:	441d      	add	r5, r3
 8007ac4:	445b      	add	r3, fp
 8007ac6:	461e      	mov	r6, r3
 8007ac8:	462c      	mov	r4, r5
 8007aca:	4544      	cmp	r4, r8
 8007acc:	d30e      	bcc.n	8007aec <__mdiff+0xf8>
 8007ace:	f108 0103 	add.w	r1, r8, #3
 8007ad2:	1b49      	subs	r1, r1, r5
 8007ad4:	f021 0103 	bic.w	r1, r1, #3
 8007ad8:	3d03      	subs	r5, #3
 8007ada:	45a8      	cmp	r8, r5
 8007adc:	bf38      	it	cc
 8007ade:	2100      	movcc	r1, #0
 8007ae0:	440b      	add	r3, r1
 8007ae2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ae6:	b191      	cbz	r1, 8007b0e <__mdiff+0x11a>
 8007ae8:	6117      	str	r7, [r2, #16]
 8007aea:	e79d      	b.n	8007a28 <__mdiff+0x34>
 8007aec:	f854 1b04 	ldr.w	r1, [r4], #4
 8007af0:	46e6      	mov	lr, ip
 8007af2:	0c08      	lsrs	r0, r1, #16
 8007af4:	fa1c fc81 	uxtah	ip, ip, r1
 8007af8:	4471      	add	r1, lr
 8007afa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007afe:	b289      	uxth	r1, r1
 8007b00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007b04:	f846 1b04 	str.w	r1, [r6], #4
 8007b08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b0c:	e7dd      	b.n	8007aca <__mdiff+0xd6>
 8007b0e:	3f01      	subs	r7, #1
 8007b10:	e7e7      	b.n	8007ae2 <__mdiff+0xee>
 8007b12:	bf00      	nop
 8007b14:	0800888c 	.word	0x0800888c
 8007b18:	0800889d 	.word	0x0800889d

08007b1c <__d2b>:
 8007b1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b20:	460f      	mov	r7, r1
 8007b22:	2101      	movs	r1, #1
 8007b24:	ec59 8b10 	vmov	r8, r9, d0
 8007b28:	4616      	mov	r6, r2
 8007b2a:	f7ff fccd 	bl	80074c8 <_Balloc>
 8007b2e:	4604      	mov	r4, r0
 8007b30:	b930      	cbnz	r0, 8007b40 <__d2b+0x24>
 8007b32:	4602      	mov	r2, r0
 8007b34:	4b23      	ldr	r3, [pc, #140]	@ (8007bc4 <__d2b+0xa8>)
 8007b36:	4824      	ldr	r0, [pc, #144]	@ (8007bc8 <__d2b+0xac>)
 8007b38:	f240 310f 	movw	r1, #783	@ 0x30f
 8007b3c:	f000 fa82 	bl	8008044 <__assert_func>
 8007b40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007b44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b48:	b10d      	cbz	r5, 8007b4e <__d2b+0x32>
 8007b4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b4e:	9301      	str	r3, [sp, #4]
 8007b50:	f1b8 0300 	subs.w	r3, r8, #0
 8007b54:	d023      	beq.n	8007b9e <__d2b+0x82>
 8007b56:	4668      	mov	r0, sp
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	f7ff fd7c 	bl	8007656 <__lo0bits>
 8007b5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b62:	b1d0      	cbz	r0, 8007b9a <__d2b+0x7e>
 8007b64:	f1c0 0320 	rsb	r3, r0, #32
 8007b68:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6c:	430b      	orrs	r3, r1
 8007b6e:	40c2      	lsrs	r2, r0
 8007b70:	6163      	str	r3, [r4, #20]
 8007b72:	9201      	str	r2, [sp, #4]
 8007b74:	9b01      	ldr	r3, [sp, #4]
 8007b76:	61a3      	str	r3, [r4, #24]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	bf0c      	ite	eq
 8007b7c:	2201      	moveq	r2, #1
 8007b7e:	2202      	movne	r2, #2
 8007b80:	6122      	str	r2, [r4, #16]
 8007b82:	b1a5      	cbz	r5, 8007bae <__d2b+0x92>
 8007b84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007b88:	4405      	add	r5, r0
 8007b8a:	603d      	str	r5, [r7, #0]
 8007b8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007b90:	6030      	str	r0, [r6, #0]
 8007b92:	4620      	mov	r0, r4
 8007b94:	b003      	add	sp, #12
 8007b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b9a:	6161      	str	r1, [r4, #20]
 8007b9c:	e7ea      	b.n	8007b74 <__d2b+0x58>
 8007b9e:	a801      	add	r0, sp, #4
 8007ba0:	f7ff fd59 	bl	8007656 <__lo0bits>
 8007ba4:	9b01      	ldr	r3, [sp, #4]
 8007ba6:	6163      	str	r3, [r4, #20]
 8007ba8:	3020      	adds	r0, #32
 8007baa:	2201      	movs	r2, #1
 8007bac:	e7e8      	b.n	8007b80 <__d2b+0x64>
 8007bae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007bb2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007bb6:	6038      	str	r0, [r7, #0]
 8007bb8:	6918      	ldr	r0, [r3, #16]
 8007bba:	f7ff fd2d 	bl	8007618 <__hi0bits>
 8007bbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007bc2:	e7e5      	b.n	8007b90 <__d2b+0x74>
 8007bc4:	0800888c 	.word	0x0800888c
 8007bc8:	0800889d 	.word	0x0800889d

08007bcc <__ssputs_r>:
 8007bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bd0:	688e      	ldr	r6, [r1, #8]
 8007bd2:	461f      	mov	r7, r3
 8007bd4:	42be      	cmp	r6, r7
 8007bd6:	680b      	ldr	r3, [r1, #0]
 8007bd8:	4682      	mov	sl, r0
 8007bda:	460c      	mov	r4, r1
 8007bdc:	4690      	mov	r8, r2
 8007bde:	d82d      	bhi.n	8007c3c <__ssputs_r+0x70>
 8007be0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007be4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007be8:	d026      	beq.n	8007c38 <__ssputs_r+0x6c>
 8007bea:	6965      	ldr	r5, [r4, #20]
 8007bec:	6909      	ldr	r1, [r1, #16]
 8007bee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bf2:	eba3 0901 	sub.w	r9, r3, r1
 8007bf6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bfa:	1c7b      	adds	r3, r7, #1
 8007bfc:	444b      	add	r3, r9
 8007bfe:	106d      	asrs	r5, r5, #1
 8007c00:	429d      	cmp	r5, r3
 8007c02:	bf38      	it	cc
 8007c04:	461d      	movcc	r5, r3
 8007c06:	0553      	lsls	r3, r2, #21
 8007c08:	d527      	bpl.n	8007c5a <__ssputs_r+0x8e>
 8007c0a:	4629      	mov	r1, r5
 8007c0c:	f7ff fbd0 	bl	80073b0 <_malloc_r>
 8007c10:	4606      	mov	r6, r0
 8007c12:	b360      	cbz	r0, 8007c6e <__ssputs_r+0xa2>
 8007c14:	6921      	ldr	r1, [r4, #16]
 8007c16:	464a      	mov	r2, r9
 8007c18:	f000 fa06 	bl	8008028 <memcpy>
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007c22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c26:	81a3      	strh	r3, [r4, #12]
 8007c28:	6126      	str	r6, [r4, #16]
 8007c2a:	6165      	str	r5, [r4, #20]
 8007c2c:	444e      	add	r6, r9
 8007c2e:	eba5 0509 	sub.w	r5, r5, r9
 8007c32:	6026      	str	r6, [r4, #0]
 8007c34:	60a5      	str	r5, [r4, #8]
 8007c36:	463e      	mov	r6, r7
 8007c38:	42be      	cmp	r6, r7
 8007c3a:	d900      	bls.n	8007c3e <__ssputs_r+0x72>
 8007c3c:	463e      	mov	r6, r7
 8007c3e:	6820      	ldr	r0, [r4, #0]
 8007c40:	4632      	mov	r2, r6
 8007c42:	4641      	mov	r1, r8
 8007c44:	f000 f9c6 	bl	8007fd4 <memmove>
 8007c48:	68a3      	ldr	r3, [r4, #8]
 8007c4a:	1b9b      	subs	r3, r3, r6
 8007c4c:	60a3      	str	r3, [r4, #8]
 8007c4e:	6823      	ldr	r3, [r4, #0]
 8007c50:	4433      	add	r3, r6
 8007c52:	6023      	str	r3, [r4, #0]
 8007c54:	2000      	movs	r0, #0
 8007c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c5a:	462a      	mov	r2, r5
 8007c5c:	f000 fa36 	bl	80080cc <_realloc_r>
 8007c60:	4606      	mov	r6, r0
 8007c62:	2800      	cmp	r0, #0
 8007c64:	d1e0      	bne.n	8007c28 <__ssputs_r+0x5c>
 8007c66:	6921      	ldr	r1, [r4, #16]
 8007c68:	4650      	mov	r0, sl
 8007c6a:	f7ff fb2d 	bl	80072c8 <_free_r>
 8007c6e:	230c      	movs	r3, #12
 8007c70:	f8ca 3000 	str.w	r3, [sl]
 8007c74:	89a3      	ldrh	r3, [r4, #12]
 8007c76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c7a:	81a3      	strh	r3, [r4, #12]
 8007c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c80:	e7e9      	b.n	8007c56 <__ssputs_r+0x8a>
	...

08007c84 <_svfiprintf_r>:
 8007c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c88:	4698      	mov	r8, r3
 8007c8a:	898b      	ldrh	r3, [r1, #12]
 8007c8c:	061b      	lsls	r3, r3, #24
 8007c8e:	b09d      	sub	sp, #116	@ 0x74
 8007c90:	4607      	mov	r7, r0
 8007c92:	460d      	mov	r5, r1
 8007c94:	4614      	mov	r4, r2
 8007c96:	d510      	bpl.n	8007cba <_svfiprintf_r+0x36>
 8007c98:	690b      	ldr	r3, [r1, #16]
 8007c9a:	b973      	cbnz	r3, 8007cba <_svfiprintf_r+0x36>
 8007c9c:	2140      	movs	r1, #64	@ 0x40
 8007c9e:	f7ff fb87 	bl	80073b0 <_malloc_r>
 8007ca2:	6028      	str	r0, [r5, #0]
 8007ca4:	6128      	str	r0, [r5, #16]
 8007ca6:	b930      	cbnz	r0, 8007cb6 <_svfiprintf_r+0x32>
 8007ca8:	230c      	movs	r3, #12
 8007caa:	603b      	str	r3, [r7, #0]
 8007cac:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb0:	b01d      	add	sp, #116	@ 0x74
 8007cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb6:	2340      	movs	r3, #64	@ 0x40
 8007cb8:	616b      	str	r3, [r5, #20]
 8007cba:	2300      	movs	r3, #0
 8007cbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cbe:	2320      	movs	r3, #32
 8007cc0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007cc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cc8:	2330      	movs	r3, #48	@ 0x30
 8007cca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007e68 <_svfiprintf_r+0x1e4>
 8007cce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007cd2:	f04f 0901 	mov.w	r9, #1
 8007cd6:	4623      	mov	r3, r4
 8007cd8:	469a      	mov	sl, r3
 8007cda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cde:	b10a      	cbz	r2, 8007ce4 <_svfiprintf_r+0x60>
 8007ce0:	2a25      	cmp	r2, #37	@ 0x25
 8007ce2:	d1f9      	bne.n	8007cd8 <_svfiprintf_r+0x54>
 8007ce4:	ebba 0b04 	subs.w	fp, sl, r4
 8007ce8:	d00b      	beq.n	8007d02 <_svfiprintf_r+0x7e>
 8007cea:	465b      	mov	r3, fp
 8007cec:	4622      	mov	r2, r4
 8007cee:	4629      	mov	r1, r5
 8007cf0:	4638      	mov	r0, r7
 8007cf2:	f7ff ff6b 	bl	8007bcc <__ssputs_r>
 8007cf6:	3001      	adds	r0, #1
 8007cf8:	f000 80a7 	beq.w	8007e4a <_svfiprintf_r+0x1c6>
 8007cfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cfe:	445a      	add	r2, fp
 8007d00:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d02:	f89a 3000 	ldrb.w	r3, [sl]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f000 809f 	beq.w	8007e4a <_svfiprintf_r+0x1c6>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d16:	f10a 0a01 	add.w	sl, sl, #1
 8007d1a:	9304      	str	r3, [sp, #16]
 8007d1c:	9307      	str	r3, [sp, #28]
 8007d1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d22:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d24:	4654      	mov	r4, sl
 8007d26:	2205      	movs	r2, #5
 8007d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d2c:	484e      	ldr	r0, [pc, #312]	@ (8007e68 <_svfiprintf_r+0x1e4>)
 8007d2e:	f7f8 fa5f 	bl	80001f0 <memchr>
 8007d32:	9a04      	ldr	r2, [sp, #16]
 8007d34:	b9d8      	cbnz	r0, 8007d6e <_svfiprintf_r+0xea>
 8007d36:	06d0      	lsls	r0, r2, #27
 8007d38:	bf44      	itt	mi
 8007d3a:	2320      	movmi	r3, #32
 8007d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d40:	0711      	lsls	r1, r2, #28
 8007d42:	bf44      	itt	mi
 8007d44:	232b      	movmi	r3, #43	@ 0x2b
 8007d46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d4a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d50:	d015      	beq.n	8007d7e <_svfiprintf_r+0xfa>
 8007d52:	9a07      	ldr	r2, [sp, #28]
 8007d54:	4654      	mov	r4, sl
 8007d56:	2000      	movs	r0, #0
 8007d58:	f04f 0c0a 	mov.w	ip, #10
 8007d5c:	4621      	mov	r1, r4
 8007d5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d62:	3b30      	subs	r3, #48	@ 0x30
 8007d64:	2b09      	cmp	r3, #9
 8007d66:	d94b      	bls.n	8007e00 <_svfiprintf_r+0x17c>
 8007d68:	b1b0      	cbz	r0, 8007d98 <_svfiprintf_r+0x114>
 8007d6a:	9207      	str	r2, [sp, #28]
 8007d6c:	e014      	b.n	8007d98 <_svfiprintf_r+0x114>
 8007d6e:	eba0 0308 	sub.w	r3, r0, r8
 8007d72:	fa09 f303 	lsl.w	r3, r9, r3
 8007d76:	4313      	orrs	r3, r2
 8007d78:	9304      	str	r3, [sp, #16]
 8007d7a:	46a2      	mov	sl, r4
 8007d7c:	e7d2      	b.n	8007d24 <_svfiprintf_r+0xa0>
 8007d7e:	9b03      	ldr	r3, [sp, #12]
 8007d80:	1d19      	adds	r1, r3, #4
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	9103      	str	r1, [sp, #12]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	bfbb      	ittet	lt
 8007d8a:	425b      	neglt	r3, r3
 8007d8c:	f042 0202 	orrlt.w	r2, r2, #2
 8007d90:	9307      	strge	r3, [sp, #28]
 8007d92:	9307      	strlt	r3, [sp, #28]
 8007d94:	bfb8      	it	lt
 8007d96:	9204      	strlt	r2, [sp, #16]
 8007d98:	7823      	ldrb	r3, [r4, #0]
 8007d9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d9c:	d10a      	bne.n	8007db4 <_svfiprintf_r+0x130>
 8007d9e:	7863      	ldrb	r3, [r4, #1]
 8007da0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007da2:	d132      	bne.n	8007e0a <_svfiprintf_r+0x186>
 8007da4:	9b03      	ldr	r3, [sp, #12]
 8007da6:	1d1a      	adds	r2, r3, #4
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	9203      	str	r2, [sp, #12]
 8007dac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007db0:	3402      	adds	r4, #2
 8007db2:	9305      	str	r3, [sp, #20]
 8007db4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007e78 <_svfiprintf_r+0x1f4>
 8007db8:	7821      	ldrb	r1, [r4, #0]
 8007dba:	2203      	movs	r2, #3
 8007dbc:	4650      	mov	r0, sl
 8007dbe:	f7f8 fa17 	bl	80001f0 <memchr>
 8007dc2:	b138      	cbz	r0, 8007dd4 <_svfiprintf_r+0x150>
 8007dc4:	9b04      	ldr	r3, [sp, #16]
 8007dc6:	eba0 000a 	sub.w	r0, r0, sl
 8007dca:	2240      	movs	r2, #64	@ 0x40
 8007dcc:	4082      	lsls	r2, r0
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	3401      	adds	r4, #1
 8007dd2:	9304      	str	r3, [sp, #16]
 8007dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dd8:	4824      	ldr	r0, [pc, #144]	@ (8007e6c <_svfiprintf_r+0x1e8>)
 8007dda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007dde:	2206      	movs	r2, #6
 8007de0:	f7f8 fa06 	bl	80001f0 <memchr>
 8007de4:	2800      	cmp	r0, #0
 8007de6:	d036      	beq.n	8007e56 <_svfiprintf_r+0x1d2>
 8007de8:	4b21      	ldr	r3, [pc, #132]	@ (8007e70 <_svfiprintf_r+0x1ec>)
 8007dea:	bb1b      	cbnz	r3, 8007e34 <_svfiprintf_r+0x1b0>
 8007dec:	9b03      	ldr	r3, [sp, #12]
 8007dee:	3307      	adds	r3, #7
 8007df0:	f023 0307 	bic.w	r3, r3, #7
 8007df4:	3308      	adds	r3, #8
 8007df6:	9303      	str	r3, [sp, #12]
 8007df8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dfa:	4433      	add	r3, r6
 8007dfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dfe:	e76a      	b.n	8007cd6 <_svfiprintf_r+0x52>
 8007e00:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e04:	460c      	mov	r4, r1
 8007e06:	2001      	movs	r0, #1
 8007e08:	e7a8      	b.n	8007d5c <_svfiprintf_r+0xd8>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	3401      	adds	r4, #1
 8007e0e:	9305      	str	r3, [sp, #20]
 8007e10:	4619      	mov	r1, r3
 8007e12:	f04f 0c0a 	mov.w	ip, #10
 8007e16:	4620      	mov	r0, r4
 8007e18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e1c:	3a30      	subs	r2, #48	@ 0x30
 8007e1e:	2a09      	cmp	r2, #9
 8007e20:	d903      	bls.n	8007e2a <_svfiprintf_r+0x1a6>
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d0c6      	beq.n	8007db4 <_svfiprintf_r+0x130>
 8007e26:	9105      	str	r1, [sp, #20]
 8007e28:	e7c4      	b.n	8007db4 <_svfiprintf_r+0x130>
 8007e2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e2e:	4604      	mov	r4, r0
 8007e30:	2301      	movs	r3, #1
 8007e32:	e7f0      	b.n	8007e16 <_svfiprintf_r+0x192>
 8007e34:	ab03      	add	r3, sp, #12
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	462a      	mov	r2, r5
 8007e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8007e74 <_svfiprintf_r+0x1f0>)
 8007e3c:	a904      	add	r1, sp, #16
 8007e3e:	4638      	mov	r0, r7
 8007e40:	f7fd fe98 	bl	8005b74 <_printf_float>
 8007e44:	1c42      	adds	r2, r0, #1
 8007e46:	4606      	mov	r6, r0
 8007e48:	d1d6      	bne.n	8007df8 <_svfiprintf_r+0x174>
 8007e4a:	89ab      	ldrh	r3, [r5, #12]
 8007e4c:	065b      	lsls	r3, r3, #25
 8007e4e:	f53f af2d 	bmi.w	8007cac <_svfiprintf_r+0x28>
 8007e52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e54:	e72c      	b.n	8007cb0 <_svfiprintf_r+0x2c>
 8007e56:	ab03      	add	r3, sp, #12
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	462a      	mov	r2, r5
 8007e5c:	4b05      	ldr	r3, [pc, #20]	@ (8007e74 <_svfiprintf_r+0x1f0>)
 8007e5e:	a904      	add	r1, sp, #16
 8007e60:	4638      	mov	r0, r7
 8007e62:	f7fe f91f 	bl	80060a4 <_printf_i>
 8007e66:	e7ed      	b.n	8007e44 <_svfiprintf_r+0x1c0>
 8007e68:	080089f8 	.word	0x080089f8
 8007e6c:	08008a02 	.word	0x08008a02
 8007e70:	08005b75 	.word	0x08005b75
 8007e74:	08007bcd 	.word	0x08007bcd
 8007e78:	080089fe 	.word	0x080089fe

08007e7c <__sflush_r>:
 8007e7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e84:	0716      	lsls	r6, r2, #28
 8007e86:	4605      	mov	r5, r0
 8007e88:	460c      	mov	r4, r1
 8007e8a:	d454      	bmi.n	8007f36 <__sflush_r+0xba>
 8007e8c:	684b      	ldr	r3, [r1, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	dc02      	bgt.n	8007e98 <__sflush_r+0x1c>
 8007e92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	dd48      	ble.n	8007f2a <__sflush_r+0xae>
 8007e98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e9a:	2e00      	cmp	r6, #0
 8007e9c:	d045      	beq.n	8007f2a <__sflush_r+0xae>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ea4:	682f      	ldr	r7, [r5, #0]
 8007ea6:	6a21      	ldr	r1, [r4, #32]
 8007ea8:	602b      	str	r3, [r5, #0]
 8007eaa:	d030      	beq.n	8007f0e <__sflush_r+0x92>
 8007eac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007eae:	89a3      	ldrh	r3, [r4, #12]
 8007eb0:	0759      	lsls	r1, r3, #29
 8007eb2:	d505      	bpl.n	8007ec0 <__sflush_r+0x44>
 8007eb4:	6863      	ldr	r3, [r4, #4]
 8007eb6:	1ad2      	subs	r2, r2, r3
 8007eb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007eba:	b10b      	cbz	r3, 8007ec0 <__sflush_r+0x44>
 8007ebc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ebe:	1ad2      	subs	r2, r2, r3
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ec4:	6a21      	ldr	r1, [r4, #32]
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	47b0      	blx	r6
 8007eca:	1c43      	adds	r3, r0, #1
 8007ecc:	89a3      	ldrh	r3, [r4, #12]
 8007ece:	d106      	bne.n	8007ede <__sflush_r+0x62>
 8007ed0:	6829      	ldr	r1, [r5, #0]
 8007ed2:	291d      	cmp	r1, #29
 8007ed4:	d82b      	bhi.n	8007f2e <__sflush_r+0xb2>
 8007ed6:	4a2a      	ldr	r2, [pc, #168]	@ (8007f80 <__sflush_r+0x104>)
 8007ed8:	410a      	asrs	r2, r1
 8007eda:	07d6      	lsls	r6, r2, #31
 8007edc:	d427      	bmi.n	8007f2e <__sflush_r+0xb2>
 8007ede:	2200      	movs	r2, #0
 8007ee0:	6062      	str	r2, [r4, #4]
 8007ee2:	04d9      	lsls	r1, r3, #19
 8007ee4:	6922      	ldr	r2, [r4, #16]
 8007ee6:	6022      	str	r2, [r4, #0]
 8007ee8:	d504      	bpl.n	8007ef4 <__sflush_r+0x78>
 8007eea:	1c42      	adds	r2, r0, #1
 8007eec:	d101      	bne.n	8007ef2 <__sflush_r+0x76>
 8007eee:	682b      	ldr	r3, [r5, #0]
 8007ef0:	b903      	cbnz	r3, 8007ef4 <__sflush_r+0x78>
 8007ef2:	6560      	str	r0, [r4, #84]	@ 0x54
 8007ef4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ef6:	602f      	str	r7, [r5, #0]
 8007ef8:	b1b9      	cbz	r1, 8007f2a <__sflush_r+0xae>
 8007efa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007efe:	4299      	cmp	r1, r3
 8007f00:	d002      	beq.n	8007f08 <__sflush_r+0x8c>
 8007f02:	4628      	mov	r0, r5
 8007f04:	f7ff f9e0 	bl	80072c8 <_free_r>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f0c:	e00d      	b.n	8007f2a <__sflush_r+0xae>
 8007f0e:	2301      	movs	r3, #1
 8007f10:	4628      	mov	r0, r5
 8007f12:	47b0      	blx	r6
 8007f14:	4602      	mov	r2, r0
 8007f16:	1c50      	adds	r0, r2, #1
 8007f18:	d1c9      	bne.n	8007eae <__sflush_r+0x32>
 8007f1a:	682b      	ldr	r3, [r5, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d0c6      	beq.n	8007eae <__sflush_r+0x32>
 8007f20:	2b1d      	cmp	r3, #29
 8007f22:	d001      	beq.n	8007f28 <__sflush_r+0xac>
 8007f24:	2b16      	cmp	r3, #22
 8007f26:	d11e      	bne.n	8007f66 <__sflush_r+0xea>
 8007f28:	602f      	str	r7, [r5, #0]
 8007f2a:	2000      	movs	r0, #0
 8007f2c:	e022      	b.n	8007f74 <__sflush_r+0xf8>
 8007f2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f32:	b21b      	sxth	r3, r3
 8007f34:	e01b      	b.n	8007f6e <__sflush_r+0xf2>
 8007f36:	690f      	ldr	r7, [r1, #16]
 8007f38:	2f00      	cmp	r7, #0
 8007f3a:	d0f6      	beq.n	8007f2a <__sflush_r+0xae>
 8007f3c:	0793      	lsls	r3, r2, #30
 8007f3e:	680e      	ldr	r6, [r1, #0]
 8007f40:	bf08      	it	eq
 8007f42:	694b      	ldreq	r3, [r1, #20]
 8007f44:	600f      	str	r7, [r1, #0]
 8007f46:	bf18      	it	ne
 8007f48:	2300      	movne	r3, #0
 8007f4a:	eba6 0807 	sub.w	r8, r6, r7
 8007f4e:	608b      	str	r3, [r1, #8]
 8007f50:	f1b8 0f00 	cmp.w	r8, #0
 8007f54:	dde9      	ble.n	8007f2a <__sflush_r+0xae>
 8007f56:	6a21      	ldr	r1, [r4, #32]
 8007f58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007f5a:	4643      	mov	r3, r8
 8007f5c:	463a      	mov	r2, r7
 8007f5e:	4628      	mov	r0, r5
 8007f60:	47b0      	blx	r6
 8007f62:	2800      	cmp	r0, #0
 8007f64:	dc08      	bgt.n	8007f78 <__sflush_r+0xfc>
 8007f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f6e:	81a3      	strh	r3, [r4, #12]
 8007f70:	f04f 30ff 	mov.w	r0, #4294967295
 8007f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f78:	4407      	add	r7, r0
 8007f7a:	eba8 0800 	sub.w	r8, r8, r0
 8007f7e:	e7e7      	b.n	8007f50 <__sflush_r+0xd4>
 8007f80:	dfbffffe 	.word	0xdfbffffe

08007f84 <_fflush_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	690b      	ldr	r3, [r1, #16]
 8007f88:	4605      	mov	r5, r0
 8007f8a:	460c      	mov	r4, r1
 8007f8c:	b913      	cbnz	r3, 8007f94 <_fflush_r+0x10>
 8007f8e:	2500      	movs	r5, #0
 8007f90:	4628      	mov	r0, r5
 8007f92:	bd38      	pop	{r3, r4, r5, pc}
 8007f94:	b118      	cbz	r0, 8007f9e <_fflush_r+0x1a>
 8007f96:	6a03      	ldr	r3, [r0, #32]
 8007f98:	b90b      	cbnz	r3, 8007f9e <_fflush_r+0x1a>
 8007f9a:	f7fe fa2f 	bl	80063fc <__sinit>
 8007f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d0f3      	beq.n	8007f8e <_fflush_r+0xa>
 8007fa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007fa8:	07d0      	lsls	r0, r2, #31
 8007faa:	d404      	bmi.n	8007fb6 <_fflush_r+0x32>
 8007fac:	0599      	lsls	r1, r3, #22
 8007fae:	d402      	bmi.n	8007fb6 <_fflush_r+0x32>
 8007fb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fb2:	f7fe fb3a 	bl	800662a <__retarget_lock_acquire_recursive>
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	4621      	mov	r1, r4
 8007fba:	f7ff ff5f 	bl	8007e7c <__sflush_r>
 8007fbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007fc0:	07da      	lsls	r2, r3, #31
 8007fc2:	4605      	mov	r5, r0
 8007fc4:	d4e4      	bmi.n	8007f90 <_fflush_r+0xc>
 8007fc6:	89a3      	ldrh	r3, [r4, #12]
 8007fc8:	059b      	lsls	r3, r3, #22
 8007fca:	d4e1      	bmi.n	8007f90 <_fflush_r+0xc>
 8007fcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fce:	f7fe fb2d 	bl	800662c <__retarget_lock_release_recursive>
 8007fd2:	e7dd      	b.n	8007f90 <_fflush_r+0xc>

08007fd4 <memmove>:
 8007fd4:	4288      	cmp	r0, r1
 8007fd6:	b510      	push	{r4, lr}
 8007fd8:	eb01 0402 	add.w	r4, r1, r2
 8007fdc:	d902      	bls.n	8007fe4 <memmove+0x10>
 8007fde:	4284      	cmp	r4, r0
 8007fe0:	4623      	mov	r3, r4
 8007fe2:	d807      	bhi.n	8007ff4 <memmove+0x20>
 8007fe4:	1e43      	subs	r3, r0, #1
 8007fe6:	42a1      	cmp	r1, r4
 8007fe8:	d008      	beq.n	8007ffc <memmove+0x28>
 8007fea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ff2:	e7f8      	b.n	8007fe6 <memmove+0x12>
 8007ff4:	4402      	add	r2, r0
 8007ff6:	4601      	mov	r1, r0
 8007ff8:	428a      	cmp	r2, r1
 8007ffa:	d100      	bne.n	8007ffe <memmove+0x2a>
 8007ffc:	bd10      	pop	{r4, pc}
 8007ffe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008002:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008006:	e7f7      	b.n	8007ff8 <memmove+0x24>

08008008 <_sbrk_r>:
 8008008:	b538      	push	{r3, r4, r5, lr}
 800800a:	4d06      	ldr	r5, [pc, #24]	@ (8008024 <_sbrk_r+0x1c>)
 800800c:	2300      	movs	r3, #0
 800800e:	4604      	mov	r4, r0
 8008010:	4608      	mov	r0, r1
 8008012:	602b      	str	r3, [r5, #0]
 8008014:	f7f9 fe58 	bl	8001cc8 <_sbrk>
 8008018:	1c43      	adds	r3, r0, #1
 800801a:	d102      	bne.n	8008022 <_sbrk_r+0x1a>
 800801c:	682b      	ldr	r3, [r5, #0]
 800801e:	b103      	cbz	r3, 8008022 <_sbrk_r+0x1a>
 8008020:	6023      	str	r3, [r4, #0]
 8008022:	bd38      	pop	{r3, r4, r5, pc}
 8008024:	2000097c 	.word	0x2000097c

08008028 <memcpy>:
 8008028:	440a      	add	r2, r1
 800802a:	4291      	cmp	r1, r2
 800802c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008030:	d100      	bne.n	8008034 <memcpy+0xc>
 8008032:	4770      	bx	lr
 8008034:	b510      	push	{r4, lr}
 8008036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800803a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800803e:	4291      	cmp	r1, r2
 8008040:	d1f9      	bne.n	8008036 <memcpy+0xe>
 8008042:	bd10      	pop	{r4, pc}

08008044 <__assert_func>:
 8008044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008046:	4614      	mov	r4, r2
 8008048:	461a      	mov	r2, r3
 800804a:	4b09      	ldr	r3, [pc, #36]	@ (8008070 <__assert_func+0x2c>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4605      	mov	r5, r0
 8008050:	68d8      	ldr	r0, [r3, #12]
 8008052:	b954      	cbnz	r4, 800806a <__assert_func+0x26>
 8008054:	4b07      	ldr	r3, [pc, #28]	@ (8008074 <__assert_func+0x30>)
 8008056:	461c      	mov	r4, r3
 8008058:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800805c:	9100      	str	r1, [sp, #0]
 800805e:	462b      	mov	r3, r5
 8008060:	4905      	ldr	r1, [pc, #20]	@ (8008078 <__assert_func+0x34>)
 8008062:	f000 f86f 	bl	8008144 <fiprintf>
 8008066:	f000 f87f 	bl	8008168 <abort>
 800806a:	4b04      	ldr	r3, [pc, #16]	@ (800807c <__assert_func+0x38>)
 800806c:	e7f4      	b.n	8008058 <__assert_func+0x14>
 800806e:	bf00      	nop
 8008070:	20000018 	.word	0x20000018
 8008074:	08008a4e 	.word	0x08008a4e
 8008078:	08008a20 	.word	0x08008a20
 800807c:	08008a13 	.word	0x08008a13

08008080 <_calloc_r>:
 8008080:	b570      	push	{r4, r5, r6, lr}
 8008082:	fba1 5402 	umull	r5, r4, r1, r2
 8008086:	b93c      	cbnz	r4, 8008098 <_calloc_r+0x18>
 8008088:	4629      	mov	r1, r5
 800808a:	f7ff f991 	bl	80073b0 <_malloc_r>
 800808e:	4606      	mov	r6, r0
 8008090:	b928      	cbnz	r0, 800809e <_calloc_r+0x1e>
 8008092:	2600      	movs	r6, #0
 8008094:	4630      	mov	r0, r6
 8008096:	bd70      	pop	{r4, r5, r6, pc}
 8008098:	220c      	movs	r2, #12
 800809a:	6002      	str	r2, [r0, #0]
 800809c:	e7f9      	b.n	8008092 <_calloc_r+0x12>
 800809e:	462a      	mov	r2, r5
 80080a0:	4621      	mov	r1, r4
 80080a2:	f7fe fa44 	bl	800652e <memset>
 80080a6:	e7f5      	b.n	8008094 <_calloc_r+0x14>

080080a8 <__ascii_mbtowc>:
 80080a8:	b082      	sub	sp, #8
 80080aa:	b901      	cbnz	r1, 80080ae <__ascii_mbtowc+0x6>
 80080ac:	a901      	add	r1, sp, #4
 80080ae:	b142      	cbz	r2, 80080c2 <__ascii_mbtowc+0x1a>
 80080b0:	b14b      	cbz	r3, 80080c6 <__ascii_mbtowc+0x1e>
 80080b2:	7813      	ldrb	r3, [r2, #0]
 80080b4:	600b      	str	r3, [r1, #0]
 80080b6:	7812      	ldrb	r2, [r2, #0]
 80080b8:	1e10      	subs	r0, r2, #0
 80080ba:	bf18      	it	ne
 80080bc:	2001      	movne	r0, #1
 80080be:	b002      	add	sp, #8
 80080c0:	4770      	bx	lr
 80080c2:	4610      	mov	r0, r2
 80080c4:	e7fb      	b.n	80080be <__ascii_mbtowc+0x16>
 80080c6:	f06f 0001 	mvn.w	r0, #1
 80080ca:	e7f8      	b.n	80080be <__ascii_mbtowc+0x16>

080080cc <_realloc_r>:
 80080cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080d0:	4680      	mov	r8, r0
 80080d2:	4615      	mov	r5, r2
 80080d4:	460c      	mov	r4, r1
 80080d6:	b921      	cbnz	r1, 80080e2 <_realloc_r+0x16>
 80080d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080dc:	4611      	mov	r1, r2
 80080de:	f7ff b967 	b.w	80073b0 <_malloc_r>
 80080e2:	b92a      	cbnz	r2, 80080f0 <_realloc_r+0x24>
 80080e4:	f7ff f8f0 	bl	80072c8 <_free_r>
 80080e8:	2400      	movs	r4, #0
 80080ea:	4620      	mov	r0, r4
 80080ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080f0:	f000 f841 	bl	8008176 <_malloc_usable_size_r>
 80080f4:	4285      	cmp	r5, r0
 80080f6:	4606      	mov	r6, r0
 80080f8:	d802      	bhi.n	8008100 <_realloc_r+0x34>
 80080fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80080fe:	d8f4      	bhi.n	80080ea <_realloc_r+0x1e>
 8008100:	4629      	mov	r1, r5
 8008102:	4640      	mov	r0, r8
 8008104:	f7ff f954 	bl	80073b0 <_malloc_r>
 8008108:	4607      	mov	r7, r0
 800810a:	2800      	cmp	r0, #0
 800810c:	d0ec      	beq.n	80080e8 <_realloc_r+0x1c>
 800810e:	42b5      	cmp	r5, r6
 8008110:	462a      	mov	r2, r5
 8008112:	4621      	mov	r1, r4
 8008114:	bf28      	it	cs
 8008116:	4632      	movcs	r2, r6
 8008118:	f7ff ff86 	bl	8008028 <memcpy>
 800811c:	4621      	mov	r1, r4
 800811e:	4640      	mov	r0, r8
 8008120:	f7ff f8d2 	bl	80072c8 <_free_r>
 8008124:	463c      	mov	r4, r7
 8008126:	e7e0      	b.n	80080ea <_realloc_r+0x1e>

08008128 <__ascii_wctomb>:
 8008128:	4603      	mov	r3, r0
 800812a:	4608      	mov	r0, r1
 800812c:	b141      	cbz	r1, 8008140 <__ascii_wctomb+0x18>
 800812e:	2aff      	cmp	r2, #255	@ 0xff
 8008130:	d904      	bls.n	800813c <__ascii_wctomb+0x14>
 8008132:	228a      	movs	r2, #138	@ 0x8a
 8008134:	601a      	str	r2, [r3, #0]
 8008136:	f04f 30ff 	mov.w	r0, #4294967295
 800813a:	4770      	bx	lr
 800813c:	700a      	strb	r2, [r1, #0]
 800813e:	2001      	movs	r0, #1
 8008140:	4770      	bx	lr
	...

08008144 <fiprintf>:
 8008144:	b40e      	push	{r1, r2, r3}
 8008146:	b503      	push	{r0, r1, lr}
 8008148:	4601      	mov	r1, r0
 800814a:	ab03      	add	r3, sp, #12
 800814c:	4805      	ldr	r0, [pc, #20]	@ (8008164 <fiprintf+0x20>)
 800814e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008152:	6800      	ldr	r0, [r0, #0]
 8008154:	9301      	str	r3, [sp, #4]
 8008156:	f000 f83f 	bl	80081d8 <_vfiprintf_r>
 800815a:	b002      	add	sp, #8
 800815c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008160:	b003      	add	sp, #12
 8008162:	4770      	bx	lr
 8008164:	20000018 	.word	0x20000018

08008168 <abort>:
 8008168:	b508      	push	{r3, lr}
 800816a:	2006      	movs	r0, #6
 800816c:	f000 fa08 	bl	8008580 <raise>
 8008170:	2001      	movs	r0, #1
 8008172:	f7f9 fd30 	bl	8001bd6 <_exit>

08008176 <_malloc_usable_size_r>:
 8008176:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800817a:	1f18      	subs	r0, r3, #4
 800817c:	2b00      	cmp	r3, #0
 800817e:	bfbc      	itt	lt
 8008180:	580b      	ldrlt	r3, [r1, r0]
 8008182:	18c0      	addlt	r0, r0, r3
 8008184:	4770      	bx	lr

08008186 <__sfputc_r>:
 8008186:	6893      	ldr	r3, [r2, #8]
 8008188:	3b01      	subs	r3, #1
 800818a:	2b00      	cmp	r3, #0
 800818c:	b410      	push	{r4}
 800818e:	6093      	str	r3, [r2, #8]
 8008190:	da08      	bge.n	80081a4 <__sfputc_r+0x1e>
 8008192:	6994      	ldr	r4, [r2, #24]
 8008194:	42a3      	cmp	r3, r4
 8008196:	db01      	blt.n	800819c <__sfputc_r+0x16>
 8008198:	290a      	cmp	r1, #10
 800819a:	d103      	bne.n	80081a4 <__sfputc_r+0x1e>
 800819c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081a0:	f000 b932 	b.w	8008408 <__swbuf_r>
 80081a4:	6813      	ldr	r3, [r2, #0]
 80081a6:	1c58      	adds	r0, r3, #1
 80081a8:	6010      	str	r0, [r2, #0]
 80081aa:	7019      	strb	r1, [r3, #0]
 80081ac:	4608      	mov	r0, r1
 80081ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <__sfputs_r>:
 80081b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b6:	4606      	mov	r6, r0
 80081b8:	460f      	mov	r7, r1
 80081ba:	4614      	mov	r4, r2
 80081bc:	18d5      	adds	r5, r2, r3
 80081be:	42ac      	cmp	r4, r5
 80081c0:	d101      	bne.n	80081c6 <__sfputs_r+0x12>
 80081c2:	2000      	movs	r0, #0
 80081c4:	e007      	b.n	80081d6 <__sfputs_r+0x22>
 80081c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ca:	463a      	mov	r2, r7
 80081cc:	4630      	mov	r0, r6
 80081ce:	f7ff ffda 	bl	8008186 <__sfputc_r>
 80081d2:	1c43      	adds	r3, r0, #1
 80081d4:	d1f3      	bne.n	80081be <__sfputs_r+0xa>
 80081d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080081d8 <_vfiprintf_r>:
 80081d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081dc:	460d      	mov	r5, r1
 80081de:	b09d      	sub	sp, #116	@ 0x74
 80081e0:	4614      	mov	r4, r2
 80081e2:	4698      	mov	r8, r3
 80081e4:	4606      	mov	r6, r0
 80081e6:	b118      	cbz	r0, 80081f0 <_vfiprintf_r+0x18>
 80081e8:	6a03      	ldr	r3, [r0, #32]
 80081ea:	b90b      	cbnz	r3, 80081f0 <_vfiprintf_r+0x18>
 80081ec:	f7fe f906 	bl	80063fc <__sinit>
 80081f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081f2:	07d9      	lsls	r1, r3, #31
 80081f4:	d405      	bmi.n	8008202 <_vfiprintf_r+0x2a>
 80081f6:	89ab      	ldrh	r3, [r5, #12]
 80081f8:	059a      	lsls	r2, r3, #22
 80081fa:	d402      	bmi.n	8008202 <_vfiprintf_r+0x2a>
 80081fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081fe:	f7fe fa14 	bl	800662a <__retarget_lock_acquire_recursive>
 8008202:	89ab      	ldrh	r3, [r5, #12]
 8008204:	071b      	lsls	r3, r3, #28
 8008206:	d501      	bpl.n	800820c <_vfiprintf_r+0x34>
 8008208:	692b      	ldr	r3, [r5, #16]
 800820a:	b99b      	cbnz	r3, 8008234 <_vfiprintf_r+0x5c>
 800820c:	4629      	mov	r1, r5
 800820e:	4630      	mov	r0, r6
 8008210:	f000 f938 	bl	8008484 <__swsetup_r>
 8008214:	b170      	cbz	r0, 8008234 <_vfiprintf_r+0x5c>
 8008216:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008218:	07dc      	lsls	r4, r3, #31
 800821a:	d504      	bpl.n	8008226 <_vfiprintf_r+0x4e>
 800821c:	f04f 30ff 	mov.w	r0, #4294967295
 8008220:	b01d      	add	sp, #116	@ 0x74
 8008222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008226:	89ab      	ldrh	r3, [r5, #12]
 8008228:	0598      	lsls	r0, r3, #22
 800822a:	d4f7      	bmi.n	800821c <_vfiprintf_r+0x44>
 800822c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800822e:	f7fe f9fd 	bl	800662c <__retarget_lock_release_recursive>
 8008232:	e7f3      	b.n	800821c <_vfiprintf_r+0x44>
 8008234:	2300      	movs	r3, #0
 8008236:	9309      	str	r3, [sp, #36]	@ 0x24
 8008238:	2320      	movs	r3, #32
 800823a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800823e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008242:	2330      	movs	r3, #48	@ 0x30
 8008244:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80083f4 <_vfiprintf_r+0x21c>
 8008248:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800824c:	f04f 0901 	mov.w	r9, #1
 8008250:	4623      	mov	r3, r4
 8008252:	469a      	mov	sl, r3
 8008254:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008258:	b10a      	cbz	r2, 800825e <_vfiprintf_r+0x86>
 800825a:	2a25      	cmp	r2, #37	@ 0x25
 800825c:	d1f9      	bne.n	8008252 <_vfiprintf_r+0x7a>
 800825e:	ebba 0b04 	subs.w	fp, sl, r4
 8008262:	d00b      	beq.n	800827c <_vfiprintf_r+0xa4>
 8008264:	465b      	mov	r3, fp
 8008266:	4622      	mov	r2, r4
 8008268:	4629      	mov	r1, r5
 800826a:	4630      	mov	r0, r6
 800826c:	f7ff ffa2 	bl	80081b4 <__sfputs_r>
 8008270:	3001      	adds	r0, #1
 8008272:	f000 80a7 	beq.w	80083c4 <_vfiprintf_r+0x1ec>
 8008276:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008278:	445a      	add	r2, fp
 800827a:	9209      	str	r2, [sp, #36]	@ 0x24
 800827c:	f89a 3000 	ldrb.w	r3, [sl]
 8008280:	2b00      	cmp	r3, #0
 8008282:	f000 809f 	beq.w	80083c4 <_vfiprintf_r+0x1ec>
 8008286:	2300      	movs	r3, #0
 8008288:	f04f 32ff 	mov.w	r2, #4294967295
 800828c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008290:	f10a 0a01 	add.w	sl, sl, #1
 8008294:	9304      	str	r3, [sp, #16]
 8008296:	9307      	str	r3, [sp, #28]
 8008298:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800829c:	931a      	str	r3, [sp, #104]	@ 0x68
 800829e:	4654      	mov	r4, sl
 80082a0:	2205      	movs	r2, #5
 80082a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082a6:	4853      	ldr	r0, [pc, #332]	@ (80083f4 <_vfiprintf_r+0x21c>)
 80082a8:	f7f7 ffa2 	bl	80001f0 <memchr>
 80082ac:	9a04      	ldr	r2, [sp, #16]
 80082ae:	b9d8      	cbnz	r0, 80082e8 <_vfiprintf_r+0x110>
 80082b0:	06d1      	lsls	r1, r2, #27
 80082b2:	bf44      	itt	mi
 80082b4:	2320      	movmi	r3, #32
 80082b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082ba:	0713      	lsls	r3, r2, #28
 80082bc:	bf44      	itt	mi
 80082be:	232b      	movmi	r3, #43	@ 0x2b
 80082c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082c4:	f89a 3000 	ldrb.w	r3, [sl]
 80082c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80082ca:	d015      	beq.n	80082f8 <_vfiprintf_r+0x120>
 80082cc:	9a07      	ldr	r2, [sp, #28]
 80082ce:	4654      	mov	r4, sl
 80082d0:	2000      	movs	r0, #0
 80082d2:	f04f 0c0a 	mov.w	ip, #10
 80082d6:	4621      	mov	r1, r4
 80082d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082dc:	3b30      	subs	r3, #48	@ 0x30
 80082de:	2b09      	cmp	r3, #9
 80082e0:	d94b      	bls.n	800837a <_vfiprintf_r+0x1a2>
 80082e2:	b1b0      	cbz	r0, 8008312 <_vfiprintf_r+0x13a>
 80082e4:	9207      	str	r2, [sp, #28]
 80082e6:	e014      	b.n	8008312 <_vfiprintf_r+0x13a>
 80082e8:	eba0 0308 	sub.w	r3, r0, r8
 80082ec:	fa09 f303 	lsl.w	r3, r9, r3
 80082f0:	4313      	orrs	r3, r2
 80082f2:	9304      	str	r3, [sp, #16]
 80082f4:	46a2      	mov	sl, r4
 80082f6:	e7d2      	b.n	800829e <_vfiprintf_r+0xc6>
 80082f8:	9b03      	ldr	r3, [sp, #12]
 80082fa:	1d19      	adds	r1, r3, #4
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	9103      	str	r1, [sp, #12]
 8008300:	2b00      	cmp	r3, #0
 8008302:	bfbb      	ittet	lt
 8008304:	425b      	neglt	r3, r3
 8008306:	f042 0202 	orrlt.w	r2, r2, #2
 800830a:	9307      	strge	r3, [sp, #28]
 800830c:	9307      	strlt	r3, [sp, #28]
 800830e:	bfb8      	it	lt
 8008310:	9204      	strlt	r2, [sp, #16]
 8008312:	7823      	ldrb	r3, [r4, #0]
 8008314:	2b2e      	cmp	r3, #46	@ 0x2e
 8008316:	d10a      	bne.n	800832e <_vfiprintf_r+0x156>
 8008318:	7863      	ldrb	r3, [r4, #1]
 800831a:	2b2a      	cmp	r3, #42	@ 0x2a
 800831c:	d132      	bne.n	8008384 <_vfiprintf_r+0x1ac>
 800831e:	9b03      	ldr	r3, [sp, #12]
 8008320:	1d1a      	adds	r2, r3, #4
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	9203      	str	r2, [sp, #12]
 8008326:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800832a:	3402      	adds	r4, #2
 800832c:	9305      	str	r3, [sp, #20]
 800832e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008404 <_vfiprintf_r+0x22c>
 8008332:	7821      	ldrb	r1, [r4, #0]
 8008334:	2203      	movs	r2, #3
 8008336:	4650      	mov	r0, sl
 8008338:	f7f7 ff5a 	bl	80001f0 <memchr>
 800833c:	b138      	cbz	r0, 800834e <_vfiprintf_r+0x176>
 800833e:	9b04      	ldr	r3, [sp, #16]
 8008340:	eba0 000a 	sub.w	r0, r0, sl
 8008344:	2240      	movs	r2, #64	@ 0x40
 8008346:	4082      	lsls	r2, r0
 8008348:	4313      	orrs	r3, r2
 800834a:	3401      	adds	r4, #1
 800834c:	9304      	str	r3, [sp, #16]
 800834e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008352:	4829      	ldr	r0, [pc, #164]	@ (80083f8 <_vfiprintf_r+0x220>)
 8008354:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008358:	2206      	movs	r2, #6
 800835a:	f7f7 ff49 	bl	80001f0 <memchr>
 800835e:	2800      	cmp	r0, #0
 8008360:	d03f      	beq.n	80083e2 <_vfiprintf_r+0x20a>
 8008362:	4b26      	ldr	r3, [pc, #152]	@ (80083fc <_vfiprintf_r+0x224>)
 8008364:	bb1b      	cbnz	r3, 80083ae <_vfiprintf_r+0x1d6>
 8008366:	9b03      	ldr	r3, [sp, #12]
 8008368:	3307      	adds	r3, #7
 800836a:	f023 0307 	bic.w	r3, r3, #7
 800836e:	3308      	adds	r3, #8
 8008370:	9303      	str	r3, [sp, #12]
 8008372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008374:	443b      	add	r3, r7
 8008376:	9309      	str	r3, [sp, #36]	@ 0x24
 8008378:	e76a      	b.n	8008250 <_vfiprintf_r+0x78>
 800837a:	fb0c 3202 	mla	r2, ip, r2, r3
 800837e:	460c      	mov	r4, r1
 8008380:	2001      	movs	r0, #1
 8008382:	e7a8      	b.n	80082d6 <_vfiprintf_r+0xfe>
 8008384:	2300      	movs	r3, #0
 8008386:	3401      	adds	r4, #1
 8008388:	9305      	str	r3, [sp, #20]
 800838a:	4619      	mov	r1, r3
 800838c:	f04f 0c0a 	mov.w	ip, #10
 8008390:	4620      	mov	r0, r4
 8008392:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008396:	3a30      	subs	r2, #48	@ 0x30
 8008398:	2a09      	cmp	r2, #9
 800839a:	d903      	bls.n	80083a4 <_vfiprintf_r+0x1cc>
 800839c:	2b00      	cmp	r3, #0
 800839e:	d0c6      	beq.n	800832e <_vfiprintf_r+0x156>
 80083a0:	9105      	str	r1, [sp, #20]
 80083a2:	e7c4      	b.n	800832e <_vfiprintf_r+0x156>
 80083a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80083a8:	4604      	mov	r4, r0
 80083aa:	2301      	movs	r3, #1
 80083ac:	e7f0      	b.n	8008390 <_vfiprintf_r+0x1b8>
 80083ae:	ab03      	add	r3, sp, #12
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	462a      	mov	r2, r5
 80083b4:	4b12      	ldr	r3, [pc, #72]	@ (8008400 <_vfiprintf_r+0x228>)
 80083b6:	a904      	add	r1, sp, #16
 80083b8:	4630      	mov	r0, r6
 80083ba:	f7fd fbdb 	bl	8005b74 <_printf_float>
 80083be:	4607      	mov	r7, r0
 80083c0:	1c78      	adds	r0, r7, #1
 80083c2:	d1d6      	bne.n	8008372 <_vfiprintf_r+0x19a>
 80083c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083c6:	07d9      	lsls	r1, r3, #31
 80083c8:	d405      	bmi.n	80083d6 <_vfiprintf_r+0x1fe>
 80083ca:	89ab      	ldrh	r3, [r5, #12]
 80083cc:	059a      	lsls	r2, r3, #22
 80083ce:	d402      	bmi.n	80083d6 <_vfiprintf_r+0x1fe>
 80083d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083d2:	f7fe f92b 	bl	800662c <__retarget_lock_release_recursive>
 80083d6:	89ab      	ldrh	r3, [r5, #12]
 80083d8:	065b      	lsls	r3, r3, #25
 80083da:	f53f af1f 	bmi.w	800821c <_vfiprintf_r+0x44>
 80083de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083e0:	e71e      	b.n	8008220 <_vfiprintf_r+0x48>
 80083e2:	ab03      	add	r3, sp, #12
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	462a      	mov	r2, r5
 80083e8:	4b05      	ldr	r3, [pc, #20]	@ (8008400 <_vfiprintf_r+0x228>)
 80083ea:	a904      	add	r1, sp, #16
 80083ec:	4630      	mov	r0, r6
 80083ee:	f7fd fe59 	bl	80060a4 <_printf_i>
 80083f2:	e7e4      	b.n	80083be <_vfiprintf_r+0x1e6>
 80083f4:	080089f8 	.word	0x080089f8
 80083f8:	08008a02 	.word	0x08008a02
 80083fc:	08005b75 	.word	0x08005b75
 8008400:	080081b5 	.word	0x080081b5
 8008404:	080089fe 	.word	0x080089fe

08008408 <__swbuf_r>:
 8008408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840a:	460e      	mov	r6, r1
 800840c:	4614      	mov	r4, r2
 800840e:	4605      	mov	r5, r0
 8008410:	b118      	cbz	r0, 800841a <__swbuf_r+0x12>
 8008412:	6a03      	ldr	r3, [r0, #32]
 8008414:	b90b      	cbnz	r3, 800841a <__swbuf_r+0x12>
 8008416:	f7fd fff1 	bl	80063fc <__sinit>
 800841a:	69a3      	ldr	r3, [r4, #24]
 800841c:	60a3      	str	r3, [r4, #8]
 800841e:	89a3      	ldrh	r3, [r4, #12]
 8008420:	071a      	lsls	r2, r3, #28
 8008422:	d501      	bpl.n	8008428 <__swbuf_r+0x20>
 8008424:	6923      	ldr	r3, [r4, #16]
 8008426:	b943      	cbnz	r3, 800843a <__swbuf_r+0x32>
 8008428:	4621      	mov	r1, r4
 800842a:	4628      	mov	r0, r5
 800842c:	f000 f82a 	bl	8008484 <__swsetup_r>
 8008430:	b118      	cbz	r0, 800843a <__swbuf_r+0x32>
 8008432:	f04f 37ff 	mov.w	r7, #4294967295
 8008436:	4638      	mov	r0, r7
 8008438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800843a:	6823      	ldr	r3, [r4, #0]
 800843c:	6922      	ldr	r2, [r4, #16]
 800843e:	1a98      	subs	r0, r3, r2
 8008440:	6963      	ldr	r3, [r4, #20]
 8008442:	b2f6      	uxtb	r6, r6
 8008444:	4283      	cmp	r3, r0
 8008446:	4637      	mov	r7, r6
 8008448:	dc05      	bgt.n	8008456 <__swbuf_r+0x4e>
 800844a:	4621      	mov	r1, r4
 800844c:	4628      	mov	r0, r5
 800844e:	f7ff fd99 	bl	8007f84 <_fflush_r>
 8008452:	2800      	cmp	r0, #0
 8008454:	d1ed      	bne.n	8008432 <__swbuf_r+0x2a>
 8008456:	68a3      	ldr	r3, [r4, #8]
 8008458:	3b01      	subs	r3, #1
 800845a:	60a3      	str	r3, [r4, #8]
 800845c:	6823      	ldr	r3, [r4, #0]
 800845e:	1c5a      	adds	r2, r3, #1
 8008460:	6022      	str	r2, [r4, #0]
 8008462:	701e      	strb	r6, [r3, #0]
 8008464:	6962      	ldr	r2, [r4, #20]
 8008466:	1c43      	adds	r3, r0, #1
 8008468:	429a      	cmp	r2, r3
 800846a:	d004      	beq.n	8008476 <__swbuf_r+0x6e>
 800846c:	89a3      	ldrh	r3, [r4, #12]
 800846e:	07db      	lsls	r3, r3, #31
 8008470:	d5e1      	bpl.n	8008436 <__swbuf_r+0x2e>
 8008472:	2e0a      	cmp	r6, #10
 8008474:	d1df      	bne.n	8008436 <__swbuf_r+0x2e>
 8008476:	4621      	mov	r1, r4
 8008478:	4628      	mov	r0, r5
 800847a:	f7ff fd83 	bl	8007f84 <_fflush_r>
 800847e:	2800      	cmp	r0, #0
 8008480:	d0d9      	beq.n	8008436 <__swbuf_r+0x2e>
 8008482:	e7d6      	b.n	8008432 <__swbuf_r+0x2a>

08008484 <__swsetup_r>:
 8008484:	b538      	push	{r3, r4, r5, lr}
 8008486:	4b29      	ldr	r3, [pc, #164]	@ (800852c <__swsetup_r+0xa8>)
 8008488:	4605      	mov	r5, r0
 800848a:	6818      	ldr	r0, [r3, #0]
 800848c:	460c      	mov	r4, r1
 800848e:	b118      	cbz	r0, 8008498 <__swsetup_r+0x14>
 8008490:	6a03      	ldr	r3, [r0, #32]
 8008492:	b90b      	cbnz	r3, 8008498 <__swsetup_r+0x14>
 8008494:	f7fd ffb2 	bl	80063fc <__sinit>
 8008498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800849c:	0719      	lsls	r1, r3, #28
 800849e:	d422      	bmi.n	80084e6 <__swsetup_r+0x62>
 80084a0:	06da      	lsls	r2, r3, #27
 80084a2:	d407      	bmi.n	80084b4 <__swsetup_r+0x30>
 80084a4:	2209      	movs	r2, #9
 80084a6:	602a      	str	r2, [r5, #0]
 80084a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084ac:	81a3      	strh	r3, [r4, #12]
 80084ae:	f04f 30ff 	mov.w	r0, #4294967295
 80084b2:	e033      	b.n	800851c <__swsetup_r+0x98>
 80084b4:	0758      	lsls	r0, r3, #29
 80084b6:	d512      	bpl.n	80084de <__swsetup_r+0x5a>
 80084b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084ba:	b141      	cbz	r1, 80084ce <__swsetup_r+0x4a>
 80084bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084c0:	4299      	cmp	r1, r3
 80084c2:	d002      	beq.n	80084ca <__swsetup_r+0x46>
 80084c4:	4628      	mov	r0, r5
 80084c6:	f7fe feff 	bl	80072c8 <_free_r>
 80084ca:	2300      	movs	r3, #0
 80084cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80084ce:	89a3      	ldrh	r3, [r4, #12]
 80084d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80084d4:	81a3      	strh	r3, [r4, #12]
 80084d6:	2300      	movs	r3, #0
 80084d8:	6063      	str	r3, [r4, #4]
 80084da:	6923      	ldr	r3, [r4, #16]
 80084dc:	6023      	str	r3, [r4, #0]
 80084de:	89a3      	ldrh	r3, [r4, #12]
 80084e0:	f043 0308 	orr.w	r3, r3, #8
 80084e4:	81a3      	strh	r3, [r4, #12]
 80084e6:	6923      	ldr	r3, [r4, #16]
 80084e8:	b94b      	cbnz	r3, 80084fe <__swsetup_r+0x7a>
 80084ea:	89a3      	ldrh	r3, [r4, #12]
 80084ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80084f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084f4:	d003      	beq.n	80084fe <__swsetup_r+0x7a>
 80084f6:	4621      	mov	r1, r4
 80084f8:	4628      	mov	r0, r5
 80084fa:	f000 f883 	bl	8008604 <__smakebuf_r>
 80084fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008502:	f013 0201 	ands.w	r2, r3, #1
 8008506:	d00a      	beq.n	800851e <__swsetup_r+0x9a>
 8008508:	2200      	movs	r2, #0
 800850a:	60a2      	str	r2, [r4, #8]
 800850c:	6962      	ldr	r2, [r4, #20]
 800850e:	4252      	negs	r2, r2
 8008510:	61a2      	str	r2, [r4, #24]
 8008512:	6922      	ldr	r2, [r4, #16]
 8008514:	b942      	cbnz	r2, 8008528 <__swsetup_r+0xa4>
 8008516:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800851a:	d1c5      	bne.n	80084a8 <__swsetup_r+0x24>
 800851c:	bd38      	pop	{r3, r4, r5, pc}
 800851e:	0799      	lsls	r1, r3, #30
 8008520:	bf58      	it	pl
 8008522:	6962      	ldrpl	r2, [r4, #20]
 8008524:	60a2      	str	r2, [r4, #8]
 8008526:	e7f4      	b.n	8008512 <__swsetup_r+0x8e>
 8008528:	2000      	movs	r0, #0
 800852a:	e7f7      	b.n	800851c <__swsetup_r+0x98>
 800852c:	20000018 	.word	0x20000018

08008530 <_raise_r>:
 8008530:	291f      	cmp	r1, #31
 8008532:	b538      	push	{r3, r4, r5, lr}
 8008534:	4605      	mov	r5, r0
 8008536:	460c      	mov	r4, r1
 8008538:	d904      	bls.n	8008544 <_raise_r+0x14>
 800853a:	2316      	movs	r3, #22
 800853c:	6003      	str	r3, [r0, #0]
 800853e:	f04f 30ff 	mov.w	r0, #4294967295
 8008542:	bd38      	pop	{r3, r4, r5, pc}
 8008544:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008546:	b112      	cbz	r2, 800854e <_raise_r+0x1e>
 8008548:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800854c:	b94b      	cbnz	r3, 8008562 <_raise_r+0x32>
 800854e:	4628      	mov	r0, r5
 8008550:	f000 f830 	bl	80085b4 <_getpid_r>
 8008554:	4622      	mov	r2, r4
 8008556:	4601      	mov	r1, r0
 8008558:	4628      	mov	r0, r5
 800855a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800855e:	f000 b817 	b.w	8008590 <_kill_r>
 8008562:	2b01      	cmp	r3, #1
 8008564:	d00a      	beq.n	800857c <_raise_r+0x4c>
 8008566:	1c59      	adds	r1, r3, #1
 8008568:	d103      	bne.n	8008572 <_raise_r+0x42>
 800856a:	2316      	movs	r3, #22
 800856c:	6003      	str	r3, [r0, #0]
 800856e:	2001      	movs	r0, #1
 8008570:	e7e7      	b.n	8008542 <_raise_r+0x12>
 8008572:	2100      	movs	r1, #0
 8008574:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008578:	4620      	mov	r0, r4
 800857a:	4798      	blx	r3
 800857c:	2000      	movs	r0, #0
 800857e:	e7e0      	b.n	8008542 <_raise_r+0x12>

08008580 <raise>:
 8008580:	4b02      	ldr	r3, [pc, #8]	@ (800858c <raise+0xc>)
 8008582:	4601      	mov	r1, r0
 8008584:	6818      	ldr	r0, [r3, #0]
 8008586:	f7ff bfd3 	b.w	8008530 <_raise_r>
 800858a:	bf00      	nop
 800858c:	20000018 	.word	0x20000018

08008590 <_kill_r>:
 8008590:	b538      	push	{r3, r4, r5, lr}
 8008592:	4d07      	ldr	r5, [pc, #28]	@ (80085b0 <_kill_r+0x20>)
 8008594:	2300      	movs	r3, #0
 8008596:	4604      	mov	r4, r0
 8008598:	4608      	mov	r0, r1
 800859a:	4611      	mov	r1, r2
 800859c:	602b      	str	r3, [r5, #0]
 800859e:	f7f9 fb0a 	bl	8001bb6 <_kill>
 80085a2:	1c43      	adds	r3, r0, #1
 80085a4:	d102      	bne.n	80085ac <_kill_r+0x1c>
 80085a6:	682b      	ldr	r3, [r5, #0]
 80085a8:	b103      	cbz	r3, 80085ac <_kill_r+0x1c>
 80085aa:	6023      	str	r3, [r4, #0]
 80085ac:	bd38      	pop	{r3, r4, r5, pc}
 80085ae:	bf00      	nop
 80085b0:	2000097c 	.word	0x2000097c

080085b4 <_getpid_r>:
 80085b4:	f7f9 baf7 	b.w	8001ba6 <_getpid>

080085b8 <__swhatbuf_r>:
 80085b8:	b570      	push	{r4, r5, r6, lr}
 80085ba:	460c      	mov	r4, r1
 80085bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c0:	2900      	cmp	r1, #0
 80085c2:	b096      	sub	sp, #88	@ 0x58
 80085c4:	4615      	mov	r5, r2
 80085c6:	461e      	mov	r6, r3
 80085c8:	da0d      	bge.n	80085e6 <__swhatbuf_r+0x2e>
 80085ca:	89a3      	ldrh	r3, [r4, #12]
 80085cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80085d0:	f04f 0100 	mov.w	r1, #0
 80085d4:	bf14      	ite	ne
 80085d6:	2340      	movne	r3, #64	@ 0x40
 80085d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80085dc:	2000      	movs	r0, #0
 80085de:	6031      	str	r1, [r6, #0]
 80085e0:	602b      	str	r3, [r5, #0]
 80085e2:	b016      	add	sp, #88	@ 0x58
 80085e4:	bd70      	pop	{r4, r5, r6, pc}
 80085e6:	466a      	mov	r2, sp
 80085e8:	f000 f848 	bl	800867c <_fstat_r>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	dbec      	blt.n	80085ca <__swhatbuf_r+0x12>
 80085f0:	9901      	ldr	r1, [sp, #4]
 80085f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80085f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80085fa:	4259      	negs	r1, r3
 80085fc:	4159      	adcs	r1, r3
 80085fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008602:	e7eb      	b.n	80085dc <__swhatbuf_r+0x24>

08008604 <__smakebuf_r>:
 8008604:	898b      	ldrh	r3, [r1, #12]
 8008606:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008608:	079d      	lsls	r5, r3, #30
 800860a:	4606      	mov	r6, r0
 800860c:	460c      	mov	r4, r1
 800860e:	d507      	bpl.n	8008620 <__smakebuf_r+0x1c>
 8008610:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008614:	6023      	str	r3, [r4, #0]
 8008616:	6123      	str	r3, [r4, #16]
 8008618:	2301      	movs	r3, #1
 800861a:	6163      	str	r3, [r4, #20]
 800861c:	b003      	add	sp, #12
 800861e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008620:	ab01      	add	r3, sp, #4
 8008622:	466a      	mov	r2, sp
 8008624:	f7ff ffc8 	bl	80085b8 <__swhatbuf_r>
 8008628:	9f00      	ldr	r7, [sp, #0]
 800862a:	4605      	mov	r5, r0
 800862c:	4639      	mov	r1, r7
 800862e:	4630      	mov	r0, r6
 8008630:	f7fe febe 	bl	80073b0 <_malloc_r>
 8008634:	b948      	cbnz	r0, 800864a <__smakebuf_r+0x46>
 8008636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800863a:	059a      	lsls	r2, r3, #22
 800863c:	d4ee      	bmi.n	800861c <__smakebuf_r+0x18>
 800863e:	f023 0303 	bic.w	r3, r3, #3
 8008642:	f043 0302 	orr.w	r3, r3, #2
 8008646:	81a3      	strh	r3, [r4, #12]
 8008648:	e7e2      	b.n	8008610 <__smakebuf_r+0xc>
 800864a:	89a3      	ldrh	r3, [r4, #12]
 800864c:	6020      	str	r0, [r4, #0]
 800864e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008652:	81a3      	strh	r3, [r4, #12]
 8008654:	9b01      	ldr	r3, [sp, #4]
 8008656:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800865a:	b15b      	cbz	r3, 8008674 <__smakebuf_r+0x70>
 800865c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008660:	4630      	mov	r0, r6
 8008662:	f000 f81d 	bl	80086a0 <_isatty_r>
 8008666:	b128      	cbz	r0, 8008674 <__smakebuf_r+0x70>
 8008668:	89a3      	ldrh	r3, [r4, #12]
 800866a:	f023 0303 	bic.w	r3, r3, #3
 800866e:	f043 0301 	orr.w	r3, r3, #1
 8008672:	81a3      	strh	r3, [r4, #12]
 8008674:	89a3      	ldrh	r3, [r4, #12]
 8008676:	431d      	orrs	r5, r3
 8008678:	81a5      	strh	r5, [r4, #12]
 800867a:	e7cf      	b.n	800861c <__smakebuf_r+0x18>

0800867c <_fstat_r>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	4d07      	ldr	r5, [pc, #28]	@ (800869c <_fstat_r+0x20>)
 8008680:	2300      	movs	r3, #0
 8008682:	4604      	mov	r4, r0
 8008684:	4608      	mov	r0, r1
 8008686:	4611      	mov	r1, r2
 8008688:	602b      	str	r3, [r5, #0]
 800868a:	f7f9 faf4 	bl	8001c76 <_fstat>
 800868e:	1c43      	adds	r3, r0, #1
 8008690:	d102      	bne.n	8008698 <_fstat_r+0x1c>
 8008692:	682b      	ldr	r3, [r5, #0]
 8008694:	b103      	cbz	r3, 8008698 <_fstat_r+0x1c>
 8008696:	6023      	str	r3, [r4, #0]
 8008698:	bd38      	pop	{r3, r4, r5, pc}
 800869a:	bf00      	nop
 800869c:	2000097c 	.word	0x2000097c

080086a0 <_isatty_r>:
 80086a0:	b538      	push	{r3, r4, r5, lr}
 80086a2:	4d06      	ldr	r5, [pc, #24]	@ (80086bc <_isatty_r+0x1c>)
 80086a4:	2300      	movs	r3, #0
 80086a6:	4604      	mov	r4, r0
 80086a8:	4608      	mov	r0, r1
 80086aa:	602b      	str	r3, [r5, #0]
 80086ac:	f7f9 faf3 	bl	8001c96 <_isatty>
 80086b0:	1c43      	adds	r3, r0, #1
 80086b2:	d102      	bne.n	80086ba <_isatty_r+0x1a>
 80086b4:	682b      	ldr	r3, [r5, #0]
 80086b6:	b103      	cbz	r3, 80086ba <_isatty_r+0x1a>
 80086b8:	6023      	str	r3, [r4, #0]
 80086ba:	bd38      	pop	{r3, r4, r5, pc}
 80086bc:	2000097c 	.word	0x2000097c

080086c0 <_init>:
 80086c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c2:	bf00      	nop
 80086c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086c6:	bc08      	pop	{r3}
 80086c8:	469e      	mov	lr, r3
 80086ca:	4770      	bx	lr

080086cc <_fini>:
 80086cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ce:	bf00      	nop
 80086d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086d2:	bc08      	pop	{r3}
 80086d4:	469e      	mov	lr, r3
 80086d6:	4770      	bx	lr
