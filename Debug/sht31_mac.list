
sht31_mac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c58  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005e08  08005e08  00006e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e9c  08005e9c  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e9c  08005e9c  00006e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ea4  08005ea4  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ea4  08005ea4  00006ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ea8  08005ea8  00006ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005eac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b4  2000005c  08005f08  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000810  08005f08  00007810  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012496  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000271a  00000000  00000000  00019522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  0001bc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c52  00000000  00000000  0001cc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029637  00000000  00000000  0001d882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f58  00000000  00000000  00046eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb118  00000000  00000000  0005ae11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00155f29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000490c  00000000  00000000  00155f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0015a878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005df0 	.word	0x08005df0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08005df0 	.word	0x08005df0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295
 8000af0:	f000 b96a 	b.w	8000dc8 <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9d08      	ldr	r5, [sp, #32]
 8000b12:	460c      	mov	r4, r1
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d14e      	bne.n	8000bb6 <__udivmoddi4+0xaa>
 8000b18:	4694      	mov	ip, r2
 8000b1a:	458c      	cmp	ip, r1
 8000b1c:	4686      	mov	lr, r0
 8000b1e:	fab2 f282 	clz	r2, r2
 8000b22:	d962      	bls.n	8000bea <__udivmoddi4+0xde>
 8000b24:	b14a      	cbz	r2, 8000b3a <__udivmoddi4+0x2e>
 8000b26:	f1c2 0320 	rsb	r3, r2, #32
 8000b2a:	4091      	lsls	r1, r2
 8000b2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b34:	4319      	orrs	r1, r3
 8000b36:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b3e:	fa1f f68c 	uxth.w	r6, ip
 8000b42:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b46:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b4a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb04 f106 	mul.w	r1, r4, r6
 8000b56:	4299      	cmp	r1, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x64>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b62:	f080 8112 	bcs.w	8000d8a <__udivmoddi4+0x27e>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 810f 	bls.w	8000d8a <__udivmoddi4+0x27e>
 8000b6c:	3c02      	subs	r4, #2
 8000b6e:	4463      	add	r3, ip
 8000b70:	1a59      	subs	r1, r3, r1
 8000b72:	fa1f f38e 	uxth.w	r3, lr
 8000b76:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b7a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b82:	fb00 f606 	mul.w	r6, r0, r6
 8000b86:	429e      	cmp	r6, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x94>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b92:	f080 80fc 	bcs.w	8000d8e <__udivmoddi4+0x282>
 8000b96:	429e      	cmp	r6, r3
 8000b98:	f240 80f9 	bls.w	8000d8e <__udivmoddi4+0x282>
 8000b9c:	4463      	add	r3, ip
 8000b9e:	3802      	subs	r0, #2
 8000ba0:	1b9b      	subs	r3, r3, r6
 8000ba2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	b11d      	cbz	r5, 8000bb2 <__udivmoddi4+0xa6>
 8000baa:	40d3      	lsrs	r3, r2
 8000bac:	2200      	movs	r2, #0
 8000bae:	e9c5 3200 	strd	r3, r2, [r5]
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d905      	bls.n	8000bc6 <__udivmoddi4+0xba>
 8000bba:	b10d      	cbz	r5, 8000bc0 <__udivmoddi4+0xb4>
 8000bbc:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4608      	mov	r0, r1
 8000bc4:	e7f5      	b.n	8000bb2 <__udivmoddi4+0xa6>
 8000bc6:	fab3 f183 	clz	r1, r3
 8000bca:	2900      	cmp	r1, #0
 8000bcc:	d146      	bne.n	8000c5c <__udivmoddi4+0x150>
 8000bce:	42a3      	cmp	r3, r4
 8000bd0:	d302      	bcc.n	8000bd8 <__udivmoddi4+0xcc>
 8000bd2:	4290      	cmp	r0, r2
 8000bd4:	f0c0 80f0 	bcc.w	8000db8 <__udivmoddi4+0x2ac>
 8000bd8:	1a86      	subs	r6, r0, r2
 8000bda:	eb64 0303 	sbc.w	r3, r4, r3
 8000bde:	2001      	movs	r0, #1
 8000be0:	2d00      	cmp	r5, #0
 8000be2:	d0e6      	beq.n	8000bb2 <__udivmoddi4+0xa6>
 8000be4:	e9c5 6300 	strd	r6, r3, [r5]
 8000be8:	e7e3      	b.n	8000bb2 <__udivmoddi4+0xa6>
 8000bea:	2a00      	cmp	r2, #0
 8000bec:	f040 8090 	bne.w	8000d10 <__udivmoddi4+0x204>
 8000bf0:	eba1 040c 	sub.w	r4, r1, ip
 8000bf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf8:	fa1f f78c 	uxth.w	r7, ip
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c06:	fb08 4416 	mls	r4, r8, r6, r4
 8000c0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0e:	fb07 f006 	mul.w	r0, r7, r6
 8000c12:	4298      	cmp	r0, r3
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0x11c>
 8000c16:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x11a>
 8000c20:	4298      	cmp	r0, r3
 8000c22:	f200 80cd 	bhi.w	8000dc0 <__udivmoddi4+0x2b4>
 8000c26:	4626      	mov	r6, r4
 8000c28:	1a1c      	subs	r4, r3, r0
 8000c2a:	fa1f f38e 	uxth.w	r3, lr
 8000c2e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c32:	fb08 4410 	mls	r4, r8, r0, r4
 8000c36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c3a:	fb00 f707 	mul.w	r7, r0, r7
 8000c3e:	429f      	cmp	r7, r3
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x148>
 8000c42:	eb1c 0303 	adds.w	r3, ip, r3
 8000c46:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x146>
 8000c4c:	429f      	cmp	r7, r3
 8000c4e:	f200 80b0 	bhi.w	8000db2 <__udivmoddi4+0x2a6>
 8000c52:	4620      	mov	r0, r4
 8000c54:	1bdb      	subs	r3, r3, r7
 8000c56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c5a:	e7a5      	b.n	8000ba8 <__udivmoddi4+0x9c>
 8000c5c:	f1c1 0620 	rsb	r6, r1, #32
 8000c60:	408b      	lsls	r3, r1
 8000c62:	fa22 f706 	lsr.w	r7, r2, r6
 8000c66:	431f      	orrs	r7, r3
 8000c68:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c6c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c70:	ea43 030c 	orr.w	r3, r3, ip
 8000c74:	40f4      	lsrs	r4, r6
 8000c76:	fa00 f801 	lsl.w	r8, r0, r1
 8000c7a:	0c38      	lsrs	r0, r7, #16
 8000c7c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c80:	fbb4 fef0 	udiv	lr, r4, r0
 8000c84:	fa1f fc87 	uxth.w	ip, r7
 8000c88:	fb00 441e 	mls	r4, r0, lr, r4
 8000c8c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c90:	fb0e f90c 	mul.w	r9, lr, ip
 8000c94:	45a1      	cmp	r9, r4
 8000c96:	fa02 f201 	lsl.w	r2, r2, r1
 8000c9a:	d90a      	bls.n	8000cb2 <__udivmoddi4+0x1a6>
 8000c9c:	193c      	adds	r4, r7, r4
 8000c9e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ca2:	f080 8084 	bcs.w	8000dae <__udivmoddi4+0x2a2>
 8000ca6:	45a1      	cmp	r9, r4
 8000ca8:	f240 8081 	bls.w	8000dae <__udivmoddi4+0x2a2>
 8000cac:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cb0:	443c      	add	r4, r7
 8000cb2:	eba4 0409 	sub.w	r4, r4, r9
 8000cb6:	fa1f f983 	uxth.w	r9, r3
 8000cba:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cbe:	fb00 4413 	mls	r4, r0, r3, r4
 8000cc2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cc6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cca:	45a4      	cmp	ip, r4
 8000ccc:	d907      	bls.n	8000cde <__udivmoddi4+0x1d2>
 8000cce:	193c      	adds	r4, r7, r4
 8000cd0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cd4:	d267      	bcs.n	8000da6 <__udivmoddi4+0x29a>
 8000cd6:	45a4      	cmp	ip, r4
 8000cd8:	d965      	bls.n	8000da6 <__udivmoddi4+0x29a>
 8000cda:	3b02      	subs	r3, #2
 8000cdc:	443c      	add	r4, r7
 8000cde:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ce2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ce6:	eba4 040c 	sub.w	r4, r4, ip
 8000cea:	429c      	cmp	r4, r3
 8000cec:	46ce      	mov	lr, r9
 8000cee:	469c      	mov	ip, r3
 8000cf0:	d351      	bcc.n	8000d96 <__udivmoddi4+0x28a>
 8000cf2:	d04e      	beq.n	8000d92 <__udivmoddi4+0x286>
 8000cf4:	b155      	cbz	r5, 8000d0c <__udivmoddi4+0x200>
 8000cf6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cfa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cfe:	fa04 f606 	lsl.w	r6, r4, r6
 8000d02:	40cb      	lsrs	r3, r1
 8000d04:	431e      	orrs	r6, r3
 8000d06:	40cc      	lsrs	r4, r1
 8000d08:	e9c5 6400 	strd	r6, r4, [r5]
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	e750      	b.n	8000bb2 <__udivmoddi4+0xa6>
 8000d10:	f1c2 0320 	rsb	r3, r2, #32
 8000d14:	fa20 f103 	lsr.w	r1, r0, r3
 8000d18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d1c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d20:	4094      	lsls	r4, r2
 8000d22:	430c      	orrs	r4, r1
 8000d24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d28:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d2c:	fa1f f78c 	uxth.w	r7, ip
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3110 	mls	r1, r8, r0, r3
 8000d38:	0c23      	lsrs	r3, r4, #16
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f107 	mul.w	r1, r0, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x24c>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d4e:	d22c      	bcs.n	8000daa <__udivmoddi4+0x29e>
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d92a      	bls.n	8000daa <__udivmoddi4+0x29e>
 8000d54:	3802      	subs	r0, #2
 8000d56:	4463      	add	r3, ip
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d60:	fb08 3311 	mls	r3, r8, r1, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb01 f307 	mul.w	r3, r1, r7
 8000d6c:	42a3      	cmp	r3, r4
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x276>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d78:	d213      	bcs.n	8000da2 <__udivmoddi4+0x296>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d911      	bls.n	8000da2 <__udivmoddi4+0x296>
 8000d7e:	3902      	subs	r1, #2
 8000d80:	4464      	add	r4, ip
 8000d82:	1ae4      	subs	r4, r4, r3
 8000d84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d88:	e739      	b.n	8000bfe <__udivmoddi4+0xf2>
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	e6f0      	b.n	8000b70 <__udivmoddi4+0x64>
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e706      	b.n	8000ba0 <__udivmoddi4+0x94>
 8000d92:	45c8      	cmp	r8, r9
 8000d94:	d2ae      	bcs.n	8000cf4 <__udivmoddi4+0x1e8>
 8000d96:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d9a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d9e:	3801      	subs	r0, #1
 8000da0:	e7a8      	b.n	8000cf4 <__udivmoddi4+0x1e8>
 8000da2:	4631      	mov	r1, r6
 8000da4:	e7ed      	b.n	8000d82 <__udivmoddi4+0x276>
 8000da6:	4603      	mov	r3, r0
 8000da8:	e799      	b.n	8000cde <__udivmoddi4+0x1d2>
 8000daa:	4630      	mov	r0, r6
 8000dac:	e7d4      	b.n	8000d58 <__udivmoddi4+0x24c>
 8000dae:	46d6      	mov	lr, sl
 8000db0:	e77f      	b.n	8000cb2 <__udivmoddi4+0x1a6>
 8000db2:	4463      	add	r3, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	e74d      	b.n	8000c54 <__udivmoddi4+0x148>
 8000db8:	4606      	mov	r6, r0
 8000dba:	4623      	mov	r3, r4
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	e70f      	b.n	8000be0 <__udivmoddi4+0xd4>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	4463      	add	r3, ip
 8000dc4:	e730      	b.n	8000c28 <__udivmoddi4+0x11c>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_idiv0>:
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	0000      	movs	r0, r0
	...

08000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd0:	b5b0      	push	{r4, r5, r7, lr}
 8000dd2:	b094      	sub	sp, #80	@ 0x50
 8000dd4:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	//uint8_t Test[12];
	uint16_t command_Sht31	= 0X240B;
 8000dd6:	f242 430b 	movw	r3, #9227	@ 0x240b
 8000dda:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	uint8_t buffer_SHT31_I2C_OUT[2] = {command_Sht31 >> 8,(command_Sht31 & 0xFF)};
 8000dde:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000de2:	0a1b      	lsrs	r3, r3, #8
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000dec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	uint8_t buffer_SHT31_I2C_IN[6];			         //0x2721 -- 0x240B;	// SINGE SHOT // NON STRETCH // MEDIUM REPEABILITY												//0x2721    // PERIODIC MEASUREMENT 10mps MEDIUM
    uint8_t addressSht31	= 0x44;					// Address de I2C
 8000df6:	2344      	movs	r3, #68	@ 0x44
 8000df8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dfc:	f000 fd11 	bl	8001822 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e00:	f000 f8dc 	bl	8000fbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e04:	f000 fa0a 	bl	800121c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000e08:	f000 f97c 	bl	8001104 <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e0c:	f000 f9d8 	bl	80011c0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000e10:	f000 f938 	bl	8001084 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000e14:	f000 f9a4 	bl	8001160 <MX_USART3_UART_Init>
	  //SHT31_TransmitI2C();

	  	// Copia segundo byte del comando
	  	//HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(sht31.hi2c, sht31.address<<1, buffer, 2, HAL_MAX_DELAY);
	  //HAL_I2C_Master_Transmit(&hi2c1, addressSht31<<1, buffer_SHT31_I2C_OUT, 2);
	  HAL_I2C_Master_Transmit(&hi2c1, addressSht31<<1, buffer_SHT31_I2C_OUT, 2, HAL_MAX_DELAY);
 8000e18:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	b299      	uxth	r1, r3
 8000e22:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	485c      	ldr	r0, [pc, #368]	@ (8000fa0 <main+0x1d0>)
 8000e30:	f001 f8bc 	bl	8001fac <HAL_I2C_Master_Transmit>
	  HAL_Delay(6);
 8000e34:	2006      	movs	r0, #6
 8000e36:	f000 fd69 	bl	800190c <HAL_Delay>
	  HAL_I2C_Master_Receive(&hi2c1, addressSht31<<1, buffer_SHT31_I2C_IN, 6, HAL_MAX_DELAY);
 8000e3a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	b299      	uxth	r1, r3
 8000e44:	f107 0220 	add.w	r2, r7, #32
 8000e48:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	2306      	movs	r3, #6
 8000e50:	4853      	ldr	r0, [pc, #332]	@ (8000fa0 <main+0x1d0>)
 8000e52:	f001 f9c3 	bl	80021dc <HAL_I2C_Master_Receive>

	  temperature_raw=(buffer_SHT31_I2C_IN[0] << 8) + buffer_SHT31_I2C_IN[1];	// Une valores del bus para temperatura
 8000e56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e5a:	021b      	lsls	r3, r3, #8
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8000e62:	4413      	add	r3, r2
 8000e64:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	  temperature= 175.0*temperature_raw/65535 - 45;								// Escala sugerida
 8000e68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fb69 	bl	8000544 <__aeabi_i2d>
 8000e72:	a347      	add	r3, pc, #284	@ (adr r3, 8000f90 <main+0x1c0>)
 8000e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e78:	f7ff fbce 	bl	8000618 <__aeabi_dmul>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	460b      	mov	r3, r1
 8000e80:	4610      	mov	r0, r2
 8000e82:	4619      	mov	r1, r3
 8000e84:	a344      	add	r3, pc, #272	@ (adr r3, 8000f98 <main+0x1c8>)
 8000e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8a:	f7ff fcef 	bl	800086c <__aeabi_ddiv>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	460b      	mov	r3, r1
 8000e92:	4610      	mov	r0, r2
 8000e94:	4619      	mov	r1, r3
 8000e96:	f04f 0200 	mov.w	r2, #0
 8000e9a:	4b42      	ldr	r3, [pc, #264]	@ (8000fa4 <main+0x1d4>)
 8000e9c:	f7ff fa04 	bl	80002a8 <__aeabi_dsub>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f7ff fdc8 	bl	8000a3c <__aeabi_d2f>
 8000eac:	4603      	mov	r3, r0
 8000eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  humidity_raw= (buffer_SHT31_I2C_IN[3] << 8) + buffer_SHT31_I2C_IN[4];	// Une los valores del bus para humedad
 8000eb0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000eb4:	021b      	lsls	r3, r3, #8
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000ebc:	4413      	add	r3, r2
 8000ebe:	877b      	strh	r3, [r7, #58]	@ 0x3a
	  humidity	= 100.0*humidity_raw/65535;
 8000ec0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fb3e 	bl	8000544 <__aeabi_i2d>
 8000ec8:	f04f 0200 	mov.w	r2, #0
 8000ecc:	4b36      	ldr	r3, [pc, #216]	@ (8000fa8 <main+0x1d8>)
 8000ece:	f7ff fba3 	bl	8000618 <__aeabi_dmul>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	4610      	mov	r0, r2
 8000ed8:	4619      	mov	r1, r3
 8000eda:	a32f      	add	r3, pc, #188	@ (adr r3, 8000f98 <main+0x1c8>)
 8000edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee0:	f7ff fcc4 	bl	800086c <__aeabi_ddiv>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	4610      	mov	r0, r2
 8000eea:	4619      	mov	r1, r3
 8000eec:	f7ff fda6 	bl	8000a3c <__aeabi_d2f>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	637b      	str	r3, [r7, #52]	@ 0x34

	  uint8_t buf[32];
	  unsigned int temp_int = (unsigned int)(temperature * 100);
 8000ef4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000ef8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000fac <main+0x1dc>
 8000efc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f04:	ee17 3a90 	vmov	r3, s15
 8000f08:	633b      	str	r3, [r7, #48]	@ 0x30
	  unsigned int hum_int = (unsigned int)(humidity * 100);
 8000f0a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000f0e:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8000fac <main+0x1dc>
 8000f12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f1a:	ee17 3a90 	vmov	r3, s15
 8000f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	  sprintf((char*)buf, "t=%u.%02u, h=%u.%02u\r\n",
 8000f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f22:	4a23      	ldr	r2, [pc, #140]	@ (8000fb0 <main+0x1e0>)
 8000f24:	fba2 2303 	umull	r2, r3, r2, r3
 8000f28:	095d      	lsrs	r5, r3, #5
 8000f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f2c:	4a20      	ldr	r2, [pc, #128]	@ (8000fb0 <main+0x1e0>)
 8000f2e:	fba2 1203 	umull	r1, r2, r2, r3
 8000f32:	0952      	lsrs	r2, r2, #5
 8000f34:	2164      	movs	r1, #100	@ 0x64
 8000f36:	fb01 f202 	mul.w	r2, r1, r2
 8000f3a:	1a9a      	subs	r2, r3, r2
 8000f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f3e:	491c      	ldr	r1, [pc, #112]	@ (8000fb0 <main+0x1e0>)
 8000f40:	fba1 1303 	umull	r1, r3, r1, r3
 8000f44:	0958      	lsrs	r0, r3, #5
 8000f46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000f48:	4b19      	ldr	r3, [pc, #100]	@ (8000fb0 <main+0x1e0>)
 8000f4a:	fba3 4301 	umull	r4, r3, r3, r1
 8000f4e:	095b      	lsrs	r3, r3, #5
 8000f50:	2464      	movs	r4, #100	@ 0x64
 8000f52:	fb04 f303 	mul.w	r3, r4, r3
 8000f56:	1acb      	subs	r3, r1, r3
 8000f58:	463c      	mov	r4, r7
 8000f5a:	9301      	str	r3, [sp, #4]
 8000f5c:	9000      	str	r0, [sp, #0]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	462a      	mov	r2, r5
 8000f62:	4914      	ldr	r1, [pc, #80]	@ (8000fb4 <main+0x1e4>)
 8000f64:	4620      	mov	r0, r4
 8000f66:	f004 faa3 	bl	80054b0 <siprintf>
	          temp_int / 100, temp_int % 100,
	          hum_int / 100, hum_int % 100);
	  HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff f93f 	bl	80001f0 <strlen>
 8000f72:	4603      	mov	r3, r0
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	4639      	mov	r1, r7
 8000f78:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7c:	480e      	ldr	r0, [pc, #56]	@ (8000fb8 <main+0x1e8>)
 8000f7e:	f003 fa8d 	bl	800449c <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000f82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f86:	f000 fcc1 	bl	800190c <HAL_Delay>
  {
 8000f8a:	bf00      	nop
 8000f8c:	e744      	b.n	8000e18 <main+0x48>
 8000f8e:	bf00      	nop
 8000f90:	00000000 	.word	0x00000000
 8000f94:	4065e000 	.word	0x4065e000
 8000f98:	00000000 	.word	0x00000000
 8000f9c:	40efffe0 	.word	0x40efffe0
 8000fa0:	20000078 	.word	0x20000078
 8000fa4:	40468000 	.word	0x40468000
 8000fa8:	40590000 	.word	0x40590000
 8000fac:	42c80000 	.word	0x42c80000
 8000fb0:	51eb851f 	.word	0x51eb851f
 8000fb4:	08005e08 	.word	0x08005e08
 8000fb8:	20000154 	.word	0x20000154

08000fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b096      	sub	sp, #88	@ 0x58
 8000fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	2244      	movs	r2, #68	@ 0x44
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f004 fa90 	bl	80054f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fde:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fe2:	f001 fe7f 	bl	8002ce4 <HAL_PWREx_ControlVoltageScaling>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fec:	f000 f9ae 	bl	800134c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ff0:	f001 fe5a 	bl	8002ca8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ff4:	4b22      	ldr	r3, [pc, #136]	@ (8001080 <SystemClock_Config+0xc4>)
 8000ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000ffa:	4a21      	ldr	r2, [pc, #132]	@ (8001080 <SystemClock_Config+0xc4>)
 8000ffc:	f023 0318 	bic.w	r3, r3, #24
 8001000:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001004:	2314      	movs	r3, #20
 8001006:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001008:	2301      	movs	r3, #1
 800100a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800100c:	2301      	movs	r3, #1
 800100e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001014:	2360      	movs	r3, #96	@ 0x60
 8001016:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001018:	2302      	movs	r3, #2
 800101a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800101c:	2301      	movs	r3, #1
 800101e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001020:	2301      	movs	r3, #1
 8001022:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 8001024:	2347      	movs	r3, #71	@ 0x47
 8001026:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001028:	2302      	movs	r3, #2
 800102a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800102c:	2302      	movs	r3, #2
 800102e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8001030:	2306      	movs	r3, #6
 8001032:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4618      	mov	r0, r3
 800103a:	f001 fec9 	bl	8002dd0 <HAL_RCC_OscConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001044:	f000 f982 	bl	800134c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001048:	230f      	movs	r3, #15
 800104a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104c:	2303      	movs	r3, #3
 800104e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001054:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001058:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800105e:	463b      	mov	r3, r7
 8001060:	2102      	movs	r1, #2
 8001062:	4618      	mov	r0, r3
 8001064:	f002 face 	bl	8003604 <HAL_RCC_ClockConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800106e:	f000 f96d 	bl	800134c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001072:	f002 ffe7 	bl	8004044 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001076:	bf00      	nop
 8001078:	3758      	adds	r7, #88	@ 0x58
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000

08001084 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001088:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <MX_I2C1_Init+0x74>)
 800108a:	4a1c      	ldr	r2, [pc, #112]	@ (80010fc <MX_I2C1_Init+0x78>)
 800108c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00505B89;
 800108e:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <MX_I2C1_Init+0x74>)
 8001090:	4a1b      	ldr	r2, [pc, #108]	@ (8001100 <MX_I2C1_Init+0x7c>)
 8001092:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001094:	4b18      	ldr	r3, [pc, #96]	@ (80010f8 <MX_I2C1_Init+0x74>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800109a:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <MX_I2C1_Init+0x74>)
 800109c:	2201      	movs	r2, #1
 800109e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a0:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <MX_I2C1_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010a6:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <MX_I2C1_Init+0x74>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010ac:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <MX_I2C1_Init+0x74>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b2:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <MX_I2C1_Init+0x74>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b8:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <MX_I2C1_Init+0x74>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010be:	480e      	ldr	r0, [pc, #56]	@ (80010f8 <MX_I2C1_Init+0x74>)
 80010c0:	f000 fed8 	bl	8001e74 <HAL_I2C_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010ca:	f000 f93f 	bl	800134c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ce:	2100      	movs	r1, #0
 80010d0:	4809      	ldr	r0, [pc, #36]	@ (80010f8 <MX_I2C1_Init+0x74>)
 80010d2:	f001 fc1f 	bl	8002914 <HAL_I2CEx_ConfigAnalogFilter>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010dc:	f000 f936 	bl	800134c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010e0:	2100      	movs	r1, #0
 80010e2:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <MX_I2C1_Init+0x74>)
 80010e4:	f001 fc61 	bl	80029aa <HAL_I2CEx_ConfigDigitalFilter>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010ee:	f000 f92d 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000078 	.word	0x20000078
 80010fc:	40005400 	.word	0x40005400
 8001100:	00505b89 	.word	0x00505b89

08001104 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <MX_LPUART1_UART_Init+0x50>)
 800110a:	4a13      	ldr	r2, [pc, #76]	@ (8001158 <MX_LPUART1_UART_Init+0x54>)
 800110c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800110e:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <MX_LPUART1_UART_Init+0x50>)
 8001110:	4a12      	ldr	r2, [pc, #72]	@ (800115c <MX_LPUART1_UART_Init+0x58>)
 8001112:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001114:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MX_LPUART1_UART_Init+0x50>)
 8001116:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800111a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800111c:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <MX_LPUART1_UART_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001122:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <MX_LPUART1_UART_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001128:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <MX_LPUART1_UART_Init+0x50>)
 800112a:	220c      	movs	r2, #12
 800112c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112e:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <MX_LPUART1_UART_Init+0x50>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001134:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <MX_LPUART1_UART_Init+0x50>)
 8001136:	2200      	movs	r2, #0
 8001138:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <MX_LPUART1_UART_Init+0x50>)
 800113c:	2200      	movs	r2, #0
 800113e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	@ (8001154 <MX_LPUART1_UART_Init+0x50>)
 8001142:	f003 f95d 	bl	8004400 <HAL_UART_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800114c:	f000 f8fe 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200000cc 	.word	0x200000cc
 8001158:	40008000 	.word	0x40008000
 800115c:	00033324 	.word	0x00033324

08001160 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001164:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <MX_USART3_UART_Init+0x58>)
 8001166:	4a15      	ldr	r2, [pc, #84]	@ (80011bc <MX_USART3_UART_Init+0x5c>)
 8001168:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800116a:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <MX_USART3_UART_Init+0x58>)
 800116c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001170:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <MX_USART3_UART_Init+0x58>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <MX_USART3_UART_Init+0x58>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800117e:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <MX_USART3_UART_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <MX_USART3_UART_Init+0x58>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <MX_USART3_UART_Init+0x58>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <MX_USART3_UART_Init+0x58>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001196:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <MX_USART3_UART_Init+0x58>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <MX_USART3_UART_Init+0x58>)
 800119e:	2200      	movs	r2, #0
 80011a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011a2:	4805      	ldr	r0, [pc, #20]	@ (80011b8 <MX_USART3_UART_Init+0x58>)
 80011a4:	f003 f92c 	bl	8004400 <HAL_UART_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80011ae:	f000 f8cd 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000154 	.word	0x20000154
 80011bc:	40004800 	.word	0x40004800

080011c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011c4:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011c6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80011ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ce:	2206      	movs	r2, #6
 80011d0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011d4:	2202      	movs	r2, #2
 80011d6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011da:	2202      	movs	r2, #2
 80011dc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80011f0:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011f6:	4b08      	ldr	r3, [pc, #32]	@ (8001218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011fe:	2201      	movs	r2, #1
 8001200:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001202:	4805      	ldr	r0, [pc, #20]	@ (8001218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001204:	f001 fc1d 	bl	8002a42 <HAL_PCD_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800120e:	f000 f89d 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200001dc 	.word	0x200001dc

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	@ 0x28
 8001220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	4b42      	ldr	r3, [pc, #264]	@ (800133c <MX_GPIO_Init+0x120>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001236:	4a41      	ldr	r2, [pc, #260]	@ (800133c <MX_GPIO_Init+0x120>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800123e:	4b3f      	ldr	r3, [pc, #252]	@ (800133c <MX_GPIO_Init+0x120>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124a:	4b3c      	ldr	r3, [pc, #240]	@ (800133c <MX_GPIO_Init+0x120>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124e:	4a3b      	ldr	r2, [pc, #236]	@ (800133c <MX_GPIO_Init+0x120>)
 8001250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001254:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001256:	4b39      	ldr	r3, [pc, #228]	@ (800133c <MX_GPIO_Init+0x120>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	4b36      	ldr	r3, [pc, #216]	@ (800133c <MX_GPIO_Init+0x120>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001266:	4a35      	ldr	r2, [pc, #212]	@ (800133c <MX_GPIO_Init+0x120>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126e:	4b33      	ldr	r3, [pc, #204]	@ (800133c <MX_GPIO_Init+0x120>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800127a:	4b30      	ldr	r3, [pc, #192]	@ (800133c <MX_GPIO_Init+0x120>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127e:	4a2f      	ldr	r2, [pc, #188]	@ (800133c <MX_GPIO_Init+0x120>)
 8001280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001284:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001286:	4b2d      	ldr	r3, [pc, #180]	@ (800133c <MX_GPIO_Init+0x120>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001292:	f001 fd8d 	bl	8002db0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b29      	ldr	r3, [pc, #164]	@ (800133c <MX_GPIO_Init+0x120>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	4a28      	ldr	r2, [pc, #160]	@ (800133c <MX_GPIO_Init+0x120>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a2:	4b26      	ldr	r3, [pc, #152]	@ (800133c <MX_GPIO_Init+0x120>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80012b4:	4822      	ldr	r0, [pc, #136]	@ (8001340 <MX_GPIO_Init+0x124>)
 80012b6:	f000 fdc5 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2140      	movs	r1, #64	@ 0x40
 80012be:	4821      	ldr	r0, [pc, #132]	@ (8001344 <MX_GPIO_Init+0x128>)
 80012c0:	f000 fdc0 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	481b      	ldr	r0, [pc, #108]	@ (8001348 <MX_GPIO_Init+0x12c>)
 80012dc:	f000 fc20 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80012e0:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80012e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	4811      	ldr	r0, [pc, #68]	@ (8001340 <MX_GPIO_Init+0x124>)
 80012fa:	f000 fc11 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012fe:	2320      	movs	r3, #32
 8001300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001302:	2300      	movs	r3, #0
 8001304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	480c      	ldr	r0, [pc, #48]	@ (8001344 <MX_GPIO_Init+0x128>)
 8001312:	f000 fc05 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001316:	2340      	movs	r3, #64	@ 0x40
 8001318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	@ (8001344 <MX_GPIO_Init+0x128>)
 800132e:	f000 fbf7 	bl	8001b20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001332:	bf00      	nop
 8001334:	3728      	adds	r7, #40	@ 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000
 8001340:	48000400 	.word	0x48000400
 8001344:	48001800 	.word	0x48001800
 8001348:	48000800 	.word	0x48000800

0800134c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001350:	b672      	cpsid	i
}
 8001352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <Error_Handler+0x8>

08001358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <HAL_MspInit+0x44>)
 8001360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001362:	4a0e      	ldr	r2, [pc, #56]	@ (800139c <HAL_MspInit+0x44>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6613      	str	r3, [r2, #96]	@ 0x60
 800136a:	4b0c      	ldr	r3, [pc, #48]	@ (800139c <HAL_MspInit+0x44>)
 800136c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	4b09      	ldr	r3, [pc, #36]	@ (800139c <HAL_MspInit+0x44>)
 8001378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137a:	4a08      	ldr	r2, [pc, #32]	@ (800139c <HAL_MspInit+0x44>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001380:	6593      	str	r3, [r2, #88]	@ 0x58
 8001382:	4b06      	ldr	r3, [pc, #24]	@ (800139c <HAL_MspInit+0x44>)
 8001384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40021000 	.word	0x40021000

080013a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b0ac      	sub	sp, #176	@ 0xb0
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	228c      	movs	r2, #140	@ 0x8c
 80013be:	2100      	movs	r1, #0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f004 f895 	bl	80054f0 <memset>
  if(hi2c->Instance==I2C1)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a21      	ldr	r2, [pc, #132]	@ (8001450 <HAL_I2C_MspInit+0xb0>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d13b      	bne.n	8001448 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013d0:	2340      	movs	r3, #64	@ 0x40
 80013d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	4618      	mov	r0, r3
 80013de:	f002 fb35 	bl	8003a4c <HAL_RCCEx_PeriphCLKConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80013e8:	f7ff ffb0 	bl	800134c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ec:	4b19      	ldr	r3, [pc, #100]	@ (8001454 <HAL_I2C_MspInit+0xb4>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f0:	4a18      	ldr	r2, [pc, #96]	@ (8001454 <HAL_I2C_MspInit+0xb4>)
 80013f2:	f043 0302 	orr.w	r3, r3, #2
 80013f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f8:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <HAL_I2C_MspInit+0xb4>)
 80013fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001404:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001408:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800140c:	2312      	movs	r3, #18
 800140e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001418:	2303      	movs	r3, #3
 800141a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800141e:	2304      	movs	r3, #4
 8001420:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001424:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001428:	4619      	mov	r1, r3
 800142a:	480b      	ldr	r0, [pc, #44]	@ (8001458 <HAL_I2C_MspInit+0xb8>)
 800142c:	f000 fb78 	bl	8001b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001430:	4b08      	ldr	r3, [pc, #32]	@ (8001454 <HAL_I2C_MspInit+0xb4>)
 8001432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001434:	4a07      	ldr	r2, [pc, #28]	@ (8001454 <HAL_I2C_MspInit+0xb4>)
 8001436:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800143a:	6593      	str	r3, [r2, #88]	@ 0x58
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <HAL_I2C_MspInit+0xb4>)
 800143e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001440:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001448:	bf00      	nop
 800144a:	37b0      	adds	r7, #176	@ 0xb0
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40005400 	.word	0x40005400
 8001454:	40021000 	.word	0x40021000
 8001458:	48000400 	.word	0x48000400

0800145c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b0ae      	sub	sp, #184	@ 0xb8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001474:	f107 0318 	add.w	r3, r7, #24
 8001478:	228c      	movs	r2, #140	@ 0x8c
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f004 f837 	bl	80054f0 <memset>
  if(huart->Instance==LPUART1)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a43      	ldr	r2, [pc, #268]	@ (8001594 <HAL_UART_MspInit+0x138>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d13e      	bne.n	800150a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800148c:	2320      	movs	r3, #32
 800148e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001490:	2300      	movs	r3, #0
 8001492:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001494:	f107 0318 	add.w	r3, r7, #24
 8001498:	4618      	mov	r0, r3
 800149a:	f002 fad7 	bl	8003a4c <HAL_RCCEx_PeriphCLKConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014a4:	f7ff ff52 	bl	800134c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80014a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001598 <HAL_UART_MspInit+0x13c>)
 80014aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014ac:	4a3a      	ldr	r2, [pc, #232]	@ (8001598 <HAL_UART_MspInit+0x13c>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80014b4:	4b38      	ldr	r3, [pc, #224]	@ (8001598 <HAL_UART_MspInit+0x13c>)
 80014b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014c0:	4b35      	ldr	r3, [pc, #212]	@ (8001598 <HAL_UART_MspInit+0x13c>)
 80014c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c4:	4a34      	ldr	r2, [pc, #208]	@ (8001598 <HAL_UART_MspInit+0x13c>)
 80014c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014cc:	4b32      	ldr	r3, [pc, #200]	@ (8001598 <HAL_UART_MspInit+0x13c>)
 80014ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80014d8:	f001 fc6a 	bl	8002db0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014dc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80014e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80014f6:	2308      	movs	r3, #8
 80014f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014fc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001500:	4619      	mov	r1, r3
 8001502:	4826      	ldr	r0, [pc, #152]	@ (800159c <HAL_UART_MspInit+0x140>)
 8001504:	f000 fb0c 	bl	8001b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001508:	e03f      	b.n	800158a <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART3)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a24      	ldr	r2, [pc, #144]	@ (80015a0 <HAL_UART_MspInit+0x144>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d13a      	bne.n	800158a <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001514:	2304      	movs	r3, #4
 8001516:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001518:	2300      	movs	r3, #0
 800151a:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800151c:	f107 0318 	add.w	r3, r7, #24
 8001520:	4618      	mov	r0, r3
 8001522:	f002 fa93 	bl	8003a4c <HAL_RCCEx_PeriphCLKConfig>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800152c:	f7ff ff0e 	bl	800134c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001530:	4b19      	ldr	r3, [pc, #100]	@ (8001598 <HAL_UART_MspInit+0x13c>)
 8001532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001534:	4a18      	ldr	r2, [pc, #96]	@ (8001598 <HAL_UART_MspInit+0x13c>)
 8001536:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800153a:	6593      	str	r3, [r2, #88]	@ 0x58
 800153c:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <HAL_UART_MspInit+0x13c>)
 800153e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001540:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001548:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <HAL_UART_MspInit+0x13c>)
 800154a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154c:	4a12      	ldr	r2, [pc, #72]	@ (8001598 <HAL_UART_MspInit+0x13c>)
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001554:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <HAL_UART_MspInit+0x13c>)
 8001556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001560:	2330      	movs	r3, #48	@ 0x30
 8001562:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001572:	2303      	movs	r3, #3
 8001574:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001578:	2307      	movs	r3, #7
 800157a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001582:	4619      	mov	r1, r3
 8001584:	4807      	ldr	r0, [pc, #28]	@ (80015a4 <HAL_UART_MspInit+0x148>)
 8001586:	f000 facb 	bl	8001b20 <HAL_GPIO_Init>
}
 800158a:	bf00      	nop
 800158c:	37b8      	adds	r7, #184	@ 0xb8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40008000 	.word	0x40008000
 8001598:	40021000 	.word	0x40021000
 800159c:	48001800 	.word	0x48001800
 80015a0:	40004800 	.word	0x40004800
 80015a4:	48000800 	.word	0x48000800

080015a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b0ae      	sub	sp, #184	@ 0xb8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015c0:	f107 0318 	add.w	r3, r7, #24
 80015c4:	228c      	movs	r2, #140	@ 0x8c
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f003 ff91 	bl	80054f0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015d6:	d17c      	bne.n	80016d2 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80015d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80015de:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80015e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80015e6:	2301      	movs	r3, #1
 80015e8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80015ea:	2301      	movs	r3, #1
 80015ec:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80015ee:	2318      	movs	r3, #24
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80015f2:	2302      	movs	r3, #2
 80015f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80015f6:	2302      	movs	r3, #2
 80015f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80015fa:	2302      	movs	r3, #2
 80015fc:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80015fe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001602:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001604:	f107 0318 	add.w	r3, r7, #24
 8001608:	4618      	mov	r0, r3
 800160a:	f002 fa1f 	bl	8003a4c <HAL_RCCEx_PeriphCLKConfig>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001614:	f7ff fe9a 	bl	800134c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001618:	4b30      	ldr	r3, [pc, #192]	@ (80016dc <HAL_PCD_MspInit+0x134>)
 800161a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161c:	4a2f      	ldr	r2, [pc, #188]	@ (80016dc <HAL_PCD_MspInit+0x134>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001624:	4b2d      	ldr	r3, [pc, #180]	@ (80016dc <HAL_PCD_MspInit+0x134>)
 8001626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001630:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001634:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800164a:	230a      	movs	r3, #10
 800164c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001654:	4619      	mov	r1, r3
 8001656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800165a:	f000 fa61 	bl	8001b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800165e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001662:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001666:	2300      	movs	r3, #0
 8001668:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001672:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001676:	4619      	mov	r1, r3
 8001678:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800167c:	f000 fa50 	bl	8001b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001680:	4b16      	ldr	r3, [pc, #88]	@ (80016dc <HAL_PCD_MspInit+0x134>)
 8001682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001684:	4a15      	ldr	r2, [pc, #84]	@ (80016dc <HAL_PCD_MspInit+0x134>)
 8001686:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800168a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800168c:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <HAL_PCD_MspInit+0x134>)
 800168e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001690:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001698:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <HAL_PCD_MspInit+0x134>)
 800169a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d114      	bne.n	80016ce <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a4:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <HAL_PCD_MspInit+0x134>)
 80016a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a8:	4a0c      	ldr	r2, [pc, #48]	@ (80016dc <HAL_PCD_MspInit+0x134>)
 80016aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80016b0:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <HAL_PCD_MspInit+0x134>)
 80016b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80016bc:	f001 fb68 	bl	8002d90 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_PCD_MspInit+0x134>)
 80016c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c4:	4a05      	ldr	r2, [pc, #20]	@ (80016dc <HAL_PCD_MspInit+0x134>)
 80016c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016ca:	6593      	str	r3, [r2, #88]	@ 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80016cc:	e001      	b.n	80016d2 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80016ce:	f001 fb5f 	bl	8002d90 <HAL_PWREx_EnableVddUSB>
}
 80016d2:	bf00      	nop
 80016d4:	37b8      	adds	r7, #184	@ 0xb8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000

080016e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <NMI_Handler+0x4>

080016e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <HardFault_Handler+0x4>

080016f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <MemManage_Handler+0x4>

080016f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <BusFault_Handler+0x4>

08001700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <UsageFault_Handler+0x4>

08001708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001736:	f000 f8c9 	bl	80018cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001748:	4a14      	ldr	r2, [pc, #80]	@ (800179c <_sbrk+0x5c>)
 800174a:	4b15      	ldr	r3, [pc, #84]	@ (80017a0 <_sbrk+0x60>)
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001754:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <_sbrk+0x64>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d102      	bne.n	8001762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800175c:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <_sbrk+0x64>)
 800175e:	4a12      	ldr	r2, [pc, #72]	@ (80017a8 <_sbrk+0x68>)
 8001760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001762:	4b10      	ldr	r3, [pc, #64]	@ (80017a4 <_sbrk+0x64>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	429a      	cmp	r2, r3
 800176e:	d207      	bcs.n	8001780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001770:	f003 fec6 	bl	8005500 <__errno>
 8001774:	4603      	mov	r3, r0
 8001776:	220c      	movs	r2, #12
 8001778:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
 800177e:	e009      	b.n	8001794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001780:	4b08      	ldr	r3, [pc, #32]	@ (80017a4 <_sbrk+0x64>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001786:	4b07      	ldr	r3, [pc, #28]	@ (80017a4 <_sbrk+0x64>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	4a05      	ldr	r2, [pc, #20]	@ (80017a4 <_sbrk+0x64>)
 8001790:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001792:	68fb      	ldr	r3, [r7, #12]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20050000 	.word	0x20050000
 80017a0:	00000400 	.word	0x00000400
 80017a4:	200006c0 	.word	0x200006c0
 80017a8:	20000810 	.word	0x20000810

080017ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017b0:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <SystemInit+0x20>)
 80017b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017b6:	4a05      	ldr	r2, [pc, #20]	@ (80017cc <SystemInit+0x20>)
 80017b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001808 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017d4:	f7ff ffea 	bl	80017ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017d8:	480c      	ldr	r0, [pc, #48]	@ (800180c <LoopForever+0x6>)
  ldr r1, =_edata
 80017da:	490d      	ldr	r1, [pc, #52]	@ (8001810 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001814 <LoopForever+0xe>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e0:	e002      	b.n	80017e8 <LoopCopyDataInit>

080017e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e6:	3304      	adds	r3, #4

080017e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ec:	d3f9      	bcc.n	80017e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001818 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017f0:	4c0a      	ldr	r4, [pc, #40]	@ (800181c <LoopForever+0x16>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f4:	e001      	b.n	80017fa <LoopFillZerobss>

080017f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f8:	3204      	adds	r2, #4

080017fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017fc:	d3fb      	bcc.n	80017f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017fe:	f003 fe85 	bl	800550c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001802:	f7ff fae5 	bl	8000dd0 <main>

08001806 <LoopForever>:

LoopForever:
    b LoopForever
 8001806:	e7fe      	b.n	8001806 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001808:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800180c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001810:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001814:	08005eac 	.word	0x08005eac
  ldr r2, =_sbss
 8001818:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800181c:	20000810 	.word	0x20000810

08001820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001820:	e7fe      	b.n	8001820 <ADC1_2_IRQHandler>

08001822 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001828:	2300      	movs	r3, #0
 800182a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800182c:	2003      	movs	r0, #3
 800182e:	f000 f943 	bl	8001ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001832:	2000      	movs	r0, #0
 8001834:	f000 f80e 	bl	8001854 <HAL_InitTick>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d002      	beq.n	8001844 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	71fb      	strb	r3, [r7, #7]
 8001842:	e001      	b.n	8001848 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001844:	f7ff fd88 	bl	8001358 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001848:	79fb      	ldrb	r3, [r7, #7]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800185c:	2300      	movs	r3, #0
 800185e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001860:	4b17      	ldr	r3, [pc, #92]	@ (80018c0 <HAL_InitTick+0x6c>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d023      	beq.n	80018b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001868:	4b16      	ldr	r3, [pc, #88]	@ (80018c4 <HAL_InitTick+0x70>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b14      	ldr	r3, [pc, #80]	@ (80018c0 <HAL_InitTick+0x6c>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001876:	fbb3 f3f1 	udiv	r3, r3, r1
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f941 	bl	8001b06 <HAL_SYSTICK_Config>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10f      	bne.n	80018aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b0f      	cmp	r3, #15
 800188e:	d809      	bhi.n	80018a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001890:	2200      	movs	r2, #0
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	f000 f919 	bl	8001ace <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800189c:	4a0a      	ldr	r2, [pc, #40]	@ (80018c8 <HAL_InitTick+0x74>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e007      	b.n	80018b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	73fb      	strb	r3, [r7, #15]
 80018a8:	e004      	b.n	80018b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	73fb      	strb	r3, [r7, #15]
 80018ae:	e001      	b.n	80018b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000008 	.word	0x20000008
 80018c4:	20000000 	.word	0x20000000
 80018c8:	20000004 	.word	0x20000004

080018cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018d0:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <HAL_IncTick+0x20>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <HAL_IncTick+0x24>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4413      	add	r3, r2
 80018dc:	4a04      	ldr	r2, [pc, #16]	@ (80018f0 <HAL_IncTick+0x24>)
 80018de:	6013      	str	r3, [r2, #0]
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	20000008 	.word	0x20000008
 80018f0:	200006c4 	.word	0x200006c4

080018f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return uwTick;
 80018f8:	4b03      	ldr	r3, [pc, #12]	@ (8001908 <HAL_GetTick+0x14>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	200006c4 	.word	0x200006c4

0800190c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001914:	f7ff ffee 	bl	80018f4 <HAL_GetTick>
 8001918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001924:	d005      	beq.n	8001932 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001926:	4b0a      	ldr	r3, [pc, #40]	@ (8001950 <HAL_Delay+0x44>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001932:	bf00      	nop
 8001934:	f7ff ffde 	bl	80018f4 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	429a      	cmp	r2, r3
 8001942:	d8f7      	bhi.n	8001934 <HAL_Delay+0x28>
  {
  }
}
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000008 	.word	0x20000008

08001954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001964:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <__NVIC_SetPriorityGrouping+0x44>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001970:	4013      	ands	r3, r2
 8001972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800197c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001980:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001986:	4a04      	ldr	r2, [pc, #16]	@ (8001998 <__NVIC_SetPriorityGrouping+0x44>)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	60d3      	str	r3, [r2, #12]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a0:	4b04      	ldr	r3, [pc, #16]	@ (80019b4 <__NVIC_GetPriorityGrouping+0x18>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	f003 0307 	and.w	r3, r3, #7
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	6039      	str	r1, [r7, #0]
 80019c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	db0a      	blt.n	80019e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	490c      	ldr	r1, [pc, #48]	@ (8001a04 <__NVIC_SetPriority+0x4c>)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	0112      	lsls	r2, r2, #4
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	440b      	add	r3, r1
 80019dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e0:	e00a      	b.n	80019f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	4908      	ldr	r1, [pc, #32]	@ (8001a08 <__NVIC_SetPriority+0x50>)
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	3b04      	subs	r3, #4
 80019f0:	0112      	lsls	r2, r2, #4
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	440b      	add	r3, r1
 80019f6:	761a      	strb	r2, [r3, #24]
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000e100 	.word	0xe000e100
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b089      	sub	sp, #36	@ 0x24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f1c3 0307 	rsb	r3, r3, #7
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	bf28      	it	cs
 8001a2a:	2304      	movcs	r3, #4
 8001a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3304      	adds	r3, #4
 8001a32:	2b06      	cmp	r3, #6
 8001a34:	d902      	bls.n	8001a3c <NVIC_EncodePriority+0x30>
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3b03      	subs	r3, #3
 8001a3a:	e000      	b.n	8001a3e <NVIC_EncodePriority+0x32>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	f04f 32ff 	mov.w	r2, #4294967295
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43da      	mvns	r2, r3
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	401a      	ands	r2, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a54:	f04f 31ff 	mov.w	r1, #4294967295
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5e:	43d9      	mvns	r1, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	4313      	orrs	r3, r2
         );
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3724      	adds	r7, #36	@ 0x24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
	...

08001a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a84:	d301      	bcc.n	8001a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a86:	2301      	movs	r3, #1
 8001a88:	e00f      	b.n	8001aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab4 <SysTick_Config+0x40>)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a92:	210f      	movs	r1, #15
 8001a94:	f04f 30ff 	mov.w	r0, #4294967295
 8001a98:	f7ff ff8e 	bl	80019b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a9c:	4b05      	ldr	r3, [pc, #20]	@ (8001ab4 <SysTick_Config+0x40>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aa2:	4b04      	ldr	r3, [pc, #16]	@ (8001ab4 <SysTick_Config+0x40>)
 8001aa4:	2207      	movs	r2, #7
 8001aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	e000e010 	.word	0xe000e010

08001ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff ff47 	bl	8001954 <__NVIC_SetPriorityGrouping>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b086      	sub	sp, #24
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
 8001ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae0:	f7ff ff5c 	bl	800199c <__NVIC_GetPriorityGrouping>
 8001ae4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	68b9      	ldr	r1, [r7, #8]
 8001aea:	6978      	ldr	r0, [r7, #20]
 8001aec:	f7ff ff8e 	bl	8001a0c <NVIC_EncodePriority>
 8001af0:	4602      	mov	r2, r0
 8001af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af6:	4611      	mov	r1, r2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff5d 	bl	80019b8 <__NVIC_SetPriority>
}
 8001afe:	bf00      	nop
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ffb0 	bl	8001a74 <SysTick_Config>
 8001b14:	4603      	mov	r3, r0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2e:	e166      	b.n	8001dfe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	2101      	movs	r1, #1
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 8158 	beq.w	8001df8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d005      	beq.n	8001b60 <HAL_GPIO_Init+0x40>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d130      	bne.n	8001bc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b96:	2201      	movs	r2, #1
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	091b      	lsrs	r3, r3, #4
 8001bac:	f003 0201 	and.w	r2, r3, #1
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	d017      	beq.n	8001bfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	2203      	movs	r2, #3
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d123      	bne.n	8001c52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	08da      	lsrs	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3208      	adds	r2, #8
 8001c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	220f      	movs	r2, #15
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	08da      	lsrs	r2, r3, #3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3208      	adds	r2, #8
 8001c4c:	6939      	ldr	r1, [r7, #16]
 8001c4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 0203 	and.w	r2, r3, #3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 80b2 	beq.w	8001df8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c94:	4b61      	ldr	r3, [pc, #388]	@ (8001e1c <HAL_GPIO_Init+0x2fc>)
 8001c96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c98:	4a60      	ldr	r2, [pc, #384]	@ (8001e1c <HAL_GPIO_Init+0x2fc>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8001e1c <HAL_GPIO_Init+0x2fc>)
 8001ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cac:	4a5c      	ldr	r2, [pc, #368]	@ (8001e20 <HAL_GPIO_Init+0x300>)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	089b      	lsrs	r3, r3, #2
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	220f      	movs	r2, #15
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001cd6:	d02b      	beq.n	8001d30 <HAL_GPIO_Init+0x210>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a52      	ldr	r2, [pc, #328]	@ (8001e24 <HAL_GPIO_Init+0x304>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d025      	beq.n	8001d2c <HAL_GPIO_Init+0x20c>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a51      	ldr	r2, [pc, #324]	@ (8001e28 <HAL_GPIO_Init+0x308>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d01f      	beq.n	8001d28 <HAL_GPIO_Init+0x208>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a50      	ldr	r2, [pc, #320]	@ (8001e2c <HAL_GPIO_Init+0x30c>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d019      	beq.n	8001d24 <HAL_GPIO_Init+0x204>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a4f      	ldr	r2, [pc, #316]	@ (8001e30 <HAL_GPIO_Init+0x310>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d013      	beq.n	8001d20 <HAL_GPIO_Init+0x200>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a4e      	ldr	r2, [pc, #312]	@ (8001e34 <HAL_GPIO_Init+0x314>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d00d      	beq.n	8001d1c <HAL_GPIO_Init+0x1fc>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a4d      	ldr	r2, [pc, #308]	@ (8001e38 <HAL_GPIO_Init+0x318>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d007      	beq.n	8001d18 <HAL_GPIO_Init+0x1f8>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a4c      	ldr	r2, [pc, #304]	@ (8001e3c <HAL_GPIO_Init+0x31c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d101      	bne.n	8001d14 <HAL_GPIO_Init+0x1f4>
 8001d10:	2307      	movs	r3, #7
 8001d12:	e00e      	b.n	8001d32 <HAL_GPIO_Init+0x212>
 8001d14:	2308      	movs	r3, #8
 8001d16:	e00c      	b.n	8001d32 <HAL_GPIO_Init+0x212>
 8001d18:	2306      	movs	r3, #6
 8001d1a:	e00a      	b.n	8001d32 <HAL_GPIO_Init+0x212>
 8001d1c:	2305      	movs	r3, #5
 8001d1e:	e008      	b.n	8001d32 <HAL_GPIO_Init+0x212>
 8001d20:	2304      	movs	r3, #4
 8001d22:	e006      	b.n	8001d32 <HAL_GPIO_Init+0x212>
 8001d24:	2303      	movs	r3, #3
 8001d26:	e004      	b.n	8001d32 <HAL_GPIO_Init+0x212>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e002      	b.n	8001d32 <HAL_GPIO_Init+0x212>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <HAL_GPIO_Init+0x212>
 8001d30:	2300      	movs	r3, #0
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	f002 0203 	and.w	r2, r2, #3
 8001d38:	0092      	lsls	r2, r2, #2
 8001d3a:	4093      	lsls	r3, r2
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d42:	4937      	ldr	r1, [pc, #220]	@ (8001e20 <HAL_GPIO_Init+0x300>)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	089b      	lsrs	r3, r3, #2
 8001d48:	3302      	adds	r3, #2
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d50:	4b3b      	ldr	r3, [pc, #236]	@ (8001e40 <HAL_GPIO_Init+0x320>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d74:	4a32      	ldr	r2, [pc, #200]	@ (8001e40 <HAL_GPIO_Init+0x320>)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d7a:	4b31      	ldr	r3, [pc, #196]	@ (8001e40 <HAL_GPIO_Init+0x320>)
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d9e:	4a28      	ldr	r2, [pc, #160]	@ (8001e40 <HAL_GPIO_Init+0x320>)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001da4:	4b26      	ldr	r3, [pc, #152]	@ (8001e40 <HAL_GPIO_Init+0x320>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4013      	ands	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8001e40 <HAL_GPIO_Init+0x320>)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001dce:	4b1c      	ldr	r3, [pc, #112]	@ (8001e40 <HAL_GPIO_Init+0x320>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001df2:	4a13      	ldr	r2, [pc, #76]	@ (8001e40 <HAL_GPIO_Init+0x320>)
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f47f ae91 	bne.w	8001b30 <HAL_GPIO_Init+0x10>
  }
}
 8001e0e:	bf00      	nop
 8001e10:	bf00      	nop
 8001e12:	371c      	adds	r7, #28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40010000 	.word	0x40010000
 8001e24:	48000400 	.word	0x48000400
 8001e28:	48000800 	.word	0x48000800
 8001e2c:	48000c00 	.word	0x48000c00
 8001e30:	48001000 	.word	0x48001000
 8001e34:	48001400 	.word	0x48001400
 8001e38:	48001800 	.word	0x48001800
 8001e3c:	48001c00 	.word	0x48001c00
 8001e40:	40010400 	.word	0x40010400

08001e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]
 8001e50:	4613      	mov	r3, r2
 8001e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e54:	787b      	ldrb	r3, [r7, #1]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e60:	e002      	b.n	8001e68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e62:	887a      	ldrh	r2, [r7, #2]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e08d      	b.n	8001fa2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d106      	bne.n	8001ea0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff fa80 	bl	80013a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2224      	movs	r2, #36	@ 0x24
 8001ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0201 	bic.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ec4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ed4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d107      	bne.n	8001eee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	e006      	b.n	8001efc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001efa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d108      	bne.n	8001f16 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	e007      	b.n	8001f26 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691a      	ldr	r2, [r3, #16]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69d9      	ldr	r1, [r3, #28]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1a      	ldr	r2, [r3, #32]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af02      	add	r7, sp, #8
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	460b      	mov	r3, r1
 8001fba:	817b      	strh	r3, [r7, #10]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b20      	cmp	r3, #32
 8001fca:	f040 80fd 	bne.w	80021c8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_I2C_Master_Transmit+0x30>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e0f6      	b.n	80021ca <HAL_I2C_Master_Transmit+0x21e>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fe4:	f7ff fc86 	bl	80018f4 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	2319      	movs	r3, #25
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 fa0a 	bl	8002410 <I2C_WaitOnFlagUntilTimeout>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e0e1      	b.n	80021ca <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2221      	movs	r2, #33	@ 0x21
 800200a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2210      	movs	r2, #16
 8002012:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	893a      	ldrh	r2, [r7, #8]
 8002026:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002032:	b29b      	uxth	r3, r3
 8002034:	2bff      	cmp	r3, #255	@ 0xff
 8002036:	d906      	bls.n	8002046 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	22ff      	movs	r2, #255	@ 0xff
 800203c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800203e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	e007      	b.n	8002056 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800204a:	b29a      	uxth	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002050:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002054:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800205a:	2b00      	cmp	r3, #0
 800205c:	d024      	beq.n	80020a8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002062:	781a      	ldrb	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002078:	b29b      	uxth	r3, r3
 800207a:	3b01      	subs	r3, #1
 800207c:	b29a      	uxth	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002086:	3b01      	subs	r3, #1
 8002088:	b29a      	uxth	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002092:	b2db      	uxtb	r3, r3
 8002094:	3301      	adds	r3, #1
 8002096:	b2da      	uxtb	r2, r3
 8002098:	8979      	ldrh	r1, [r7, #10]
 800209a:	4b4e      	ldr	r3, [pc, #312]	@ (80021d4 <HAL_I2C_Master_Transmit+0x228>)
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 fc05 	bl	80028b0 <I2C_TransferConfig>
 80020a6:	e066      	b.n	8002176 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	8979      	ldrh	r1, [r7, #10]
 80020b0:	4b48      	ldr	r3, [pc, #288]	@ (80021d4 <HAL_I2C_Master_Transmit+0x228>)
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 fbfa 	bl	80028b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80020bc:	e05b      	b.n	8002176 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	6a39      	ldr	r1, [r7, #32]
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 f9fd 	bl	80024c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e07b      	b.n	80021ca <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d6:	781a      	ldrb	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002106:	b29b      	uxth	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d034      	beq.n	8002176 <HAL_I2C_Master_Transmit+0x1ca>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002110:	2b00      	cmp	r3, #0
 8002112:	d130      	bne.n	8002176 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	2200      	movs	r2, #0
 800211c:	2180      	movs	r1, #128	@ 0x80
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 f976 	bl	8002410 <I2C_WaitOnFlagUntilTimeout>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e04d      	b.n	80021ca <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002132:	b29b      	uxth	r3, r3
 8002134:	2bff      	cmp	r3, #255	@ 0xff
 8002136:	d90e      	bls.n	8002156 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	22ff      	movs	r2, #255	@ 0xff
 800213c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002142:	b2da      	uxtb	r2, r3
 8002144:	8979      	ldrh	r1, [r7, #10]
 8002146:	2300      	movs	r3, #0
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 fbae 	bl	80028b0 <I2C_TransferConfig>
 8002154:	e00f      	b.n	8002176 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002164:	b2da      	uxtb	r2, r3
 8002166:	8979      	ldrh	r1, [r7, #10]
 8002168:	2300      	movs	r3, #0
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 fb9d 	bl	80028b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800217a:	b29b      	uxth	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d19e      	bne.n	80020be <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	6a39      	ldr	r1, [r7, #32]
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 f9e3 	bl	8002550 <I2C_WaitOnSTOPFlagUntilTimeout>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e01a      	b.n	80021ca <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2220      	movs	r2, #32
 800219a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6859      	ldr	r1, [r3, #4]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	4b0c      	ldr	r3, [pc, #48]	@ (80021d8 <HAL_I2C_Master_Transmit+0x22c>)
 80021a8:	400b      	ands	r3, r1
 80021aa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	e000      	b.n	80021ca <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80021c8:	2302      	movs	r3, #2
  }
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	80002000 	.word	0x80002000
 80021d8:	fe00e800 	.word	0xfe00e800

080021dc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	607a      	str	r2, [r7, #4]
 80021e6:	461a      	mov	r2, r3
 80021e8:	460b      	mov	r3, r1
 80021ea:	817b      	strh	r3, [r7, #10]
 80021ec:	4613      	mov	r3, r2
 80021ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b20      	cmp	r3, #32
 80021fa:	f040 80db 	bne.w	80023b4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_I2C_Master_Receive+0x30>
 8002208:	2302      	movs	r3, #2
 800220a:	e0d4      	b.n	80023b6 <HAL_I2C_Master_Receive+0x1da>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002214:	f7ff fb6e 	bl	80018f4 <HAL_GetTick>
 8002218:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	2319      	movs	r3, #25
 8002220:	2201      	movs	r2, #1
 8002222:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f000 f8f2 	bl	8002410 <I2C_WaitOnFlagUntilTimeout>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e0bf      	b.n	80023b6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2222      	movs	r2, #34	@ 0x22
 800223a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2210      	movs	r2, #16
 8002242:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	893a      	ldrh	r2, [r7, #8]
 8002256:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002262:	b29b      	uxth	r3, r3
 8002264:	2bff      	cmp	r3, #255	@ 0xff
 8002266:	d90e      	bls.n	8002286 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2201      	movs	r2, #1
 800226c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002272:	b2da      	uxtb	r2, r3
 8002274:	8979      	ldrh	r1, [r7, #10]
 8002276:	4b52      	ldr	r3, [pc, #328]	@ (80023c0 <HAL_I2C_Master_Receive+0x1e4>)
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 fb16 	bl	80028b0 <I2C_TransferConfig>
 8002284:	e06d      	b.n	8002362 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002294:	b2da      	uxtb	r2, r3
 8002296:	8979      	ldrh	r1, [r7, #10]
 8002298:	4b49      	ldr	r3, [pc, #292]	@ (80023c0 <HAL_I2C_Master_Receive+0x1e4>)
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 fb05 	bl	80028b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80022a6:	e05c      	b.n	8002362 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	6a39      	ldr	r1, [r7, #32]
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 f993 	bl	80025d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e07c      	b.n	80023b6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	3b01      	subs	r3, #1
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d034      	beq.n	8002362 <HAL_I2C_Master_Receive+0x186>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d130      	bne.n	8002362 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	2200      	movs	r2, #0
 8002308:	2180      	movs	r1, #128	@ 0x80
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f880 	bl	8002410 <I2C_WaitOnFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e04d      	b.n	80023b6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800231e:	b29b      	uxth	r3, r3
 8002320:	2bff      	cmp	r3, #255	@ 0xff
 8002322:	d90e      	bls.n	8002342 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	22ff      	movs	r2, #255	@ 0xff
 8002328:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800232e:	b2da      	uxtb	r2, r3
 8002330:	8979      	ldrh	r1, [r7, #10]
 8002332:	2300      	movs	r3, #0
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 fab8 	bl	80028b0 <I2C_TransferConfig>
 8002340:	e00f      	b.n	8002362 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002346:	b29a      	uxth	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002350:	b2da      	uxtb	r2, r3
 8002352:	8979      	ldrh	r1, [r7, #10]
 8002354:	2300      	movs	r3, #0
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f000 faa7 	bl	80028b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002366:	b29b      	uxth	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d19d      	bne.n	80022a8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	6a39      	ldr	r1, [r7, #32]
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 f8ed 	bl	8002550 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e01a      	b.n	80023b6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2220      	movs	r2, #32
 8002386:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6859      	ldr	r1, [r3, #4]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	4b0c      	ldr	r3, [pc, #48]	@ (80023c4 <HAL_I2C_Master_Receive+0x1e8>)
 8002394:	400b      	ands	r3, r1
 8002396:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2220      	movs	r2, #32
 800239c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	e000      	b.n	80023b6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80023b4:	2302      	movs	r3, #2
  }
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	80002400 	.word	0x80002400
 80023c4:	fe00e800 	.word	0xfe00e800

080023c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d103      	bne.n	80023e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2200      	movs	r2, #0
 80023e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d007      	beq.n	8002404 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699a      	ldr	r2, [r3, #24]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	619a      	str	r2, [r3, #24]
  }
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	4613      	mov	r3, r2
 800241e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002420:	e03b      	b.n	800249a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	6839      	ldr	r1, [r7, #0]
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 f962 	bl	80026f0 <I2C_IsErrorOccurred>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e041      	b.n	80024ba <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243c:	d02d      	beq.n	800249a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800243e:	f7ff fa59 	bl	80018f4 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d302      	bcc.n	8002454 <I2C_WaitOnFlagUntilTimeout+0x44>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d122      	bne.n	800249a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699a      	ldr	r2, [r3, #24]
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	4013      	ands	r3, r2
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	429a      	cmp	r2, r3
 8002462:	bf0c      	ite	eq
 8002464:	2301      	moveq	r3, #1
 8002466:	2300      	movne	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	461a      	mov	r2, r3
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	429a      	cmp	r2, r3
 8002470:	d113      	bne.n	800249a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002476:	f043 0220 	orr.w	r2, r3, #32
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2220      	movs	r2, #32
 8002482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e00f      	b.n	80024ba <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699a      	ldr	r2, [r3, #24]
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	4013      	ands	r3, r2
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	bf0c      	ite	eq
 80024aa:	2301      	moveq	r3, #1
 80024ac:	2300      	movne	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d0b4      	beq.n	8002422 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b084      	sub	sp, #16
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024ce:	e033      	b.n	8002538 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	68b9      	ldr	r1, [r7, #8]
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 f90b 	bl	80026f0 <I2C_IsErrorOccurred>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e031      	b.n	8002548 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ea:	d025      	beq.n	8002538 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ec:	f7ff fa02 	bl	80018f4 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d302      	bcc.n	8002502 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d11a      	bne.n	8002538 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b02      	cmp	r3, #2
 800250e:	d013      	beq.n	8002538 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002514:	f043 0220 	orr.w	r2, r3, #32
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2220      	movs	r2, #32
 8002520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e007      	b.n	8002548 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b02      	cmp	r3, #2
 8002544:	d1c4      	bne.n	80024d0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800255c:	e02f      	b.n	80025be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 f8c4 	bl	80026f0 <I2C_IsErrorOccurred>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e02d      	b.n	80025ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002572:	f7ff f9bf 	bl	80018f4 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	429a      	cmp	r2, r3
 8002580:	d302      	bcc.n	8002588 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d11a      	bne.n	80025be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f003 0320 	and.w	r3, r3, #32
 8002592:	2b20      	cmp	r3, #32
 8002594:	d013      	beq.n	80025be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259a:	f043 0220 	orr.w	r2, r3, #32
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2220      	movs	r2, #32
 80025a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e007      	b.n	80025ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	f003 0320 	and.w	r3, r3, #32
 80025c8:	2b20      	cmp	r3, #32
 80025ca:	d1c8      	bne.n	800255e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80025e8:	e071      	b.n	80026ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f87e 	bl	80026f0 <I2C_IsErrorOccurred>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b20      	cmp	r3, #32
 800260a:	d13b      	bne.n	8002684 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800260c:	7dfb      	ldrb	r3, [r7, #23]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d138      	bne.n	8002684 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b04      	cmp	r3, #4
 800261e:	d105      	bne.n	800262c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	2b10      	cmp	r3, #16
 8002638:	d121      	bne.n	800267e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2210      	movs	r2, #16
 8002640:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2204      	movs	r2, #4
 8002646:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2220      	movs	r2, #32
 800264e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6859      	ldr	r1, [r3, #4]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	4b24      	ldr	r3, [pc, #144]	@ (80026ec <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800265c:	400b      	ands	r3, r1
 800265e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	75fb      	strb	r3, [r7, #23]
 800267c:	e002      	b.n	8002684 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002684:	f7ff f936 	bl	80018f4 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	429a      	cmp	r2, r3
 8002692:	d302      	bcc.n	800269a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d119      	bne.n	80026ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800269a:	7dfb      	ldrb	r3, [r7, #23]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d116      	bne.n	80026ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d00f      	beq.n	80026ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b2:	f043 0220 	orr.w	r2, r3, #32
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2220      	movs	r2, #32
 80026be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d002      	beq.n	80026e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80026dc:	7dfb      	ldrb	r3, [r7, #23]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d083      	beq.n	80025ea <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80026e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	fe00e800 	.word	0xfe00e800

080026f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	@ 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800270a:	2300      	movs	r3, #0
 800270c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	2b00      	cmp	r3, #0
 800271a:	d068      	beq.n	80027ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2210      	movs	r2, #16
 8002722:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002724:	e049      	b.n	80027ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d045      	beq.n	80027ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800272e:	f7ff f8e1 	bl	80018f4 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	429a      	cmp	r2, r3
 800273c:	d302      	bcc.n	8002744 <I2C_IsErrorOccurred+0x54>
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d13a      	bne.n	80027ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800274e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002756:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002762:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002766:	d121      	bne.n	80027ac <I2C_IsErrorOccurred+0xbc>
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800276e:	d01d      	beq.n	80027ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002770:	7cfb      	ldrb	r3, [r7, #19]
 8002772:	2b20      	cmp	r3, #32
 8002774:	d01a      	beq.n	80027ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002784:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002786:	f7ff f8b5 	bl	80018f4 <HAL_GetTick>
 800278a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800278c:	e00e      	b.n	80027ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800278e:	f7ff f8b1 	bl	80018f4 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b19      	cmp	r3, #25
 800279a:	d907      	bls.n	80027ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	f043 0320 	orr.w	r3, r3, #32
 80027a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80027aa:	e006      	b.n	80027ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	f003 0320 	and.w	r3, r3, #32
 80027b6:	2b20      	cmp	r3, #32
 80027b8:	d1e9      	bne.n	800278e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	f003 0320 	and.w	r3, r3, #32
 80027c4:	2b20      	cmp	r3, #32
 80027c6:	d003      	beq.n	80027d0 <I2C_IsErrorOccurred+0xe0>
 80027c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0aa      	beq.n	8002726 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80027d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d103      	bne.n	80027e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2220      	movs	r2, #32
 80027de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	f043 0304 	orr.w	r3, r3, #4
 80027e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00b      	beq.n	8002818 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002810:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00b      	beq.n	800283a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	f043 0308 	orr.w	r3, r3, #8
 8002828:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002832:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00b      	beq.n	800285c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	f043 0302 	orr.w	r3, r3, #2
 800284a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002854:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800285c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002860:	2b00      	cmp	r3, #0
 8002862:	d01c      	beq.n	800289e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f7ff fdaf 	bl	80023c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6859      	ldr	r1, [r3, #4]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4b0d      	ldr	r3, [pc, #52]	@ (80028ac <I2C_IsErrorOccurred+0x1bc>)
 8002876:	400b      	ands	r3, r1
 8002878:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	431a      	orrs	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2220      	movs	r2, #32
 800288a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800289e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3728      	adds	r7, #40	@ 0x28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	fe00e800 	.word	0xfe00e800

080028b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	607b      	str	r3, [r7, #4]
 80028ba:	460b      	mov	r3, r1
 80028bc:	817b      	strh	r3, [r7, #10]
 80028be:	4613      	mov	r3, r2
 80028c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028c2:	897b      	ldrh	r3, [r7, #10]
 80028c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028c8:	7a7b      	ldrb	r3, [r7, #9]
 80028ca:	041b      	lsls	r3, r3, #16
 80028cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	4313      	orrs	r3, r2
 80028da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	0d5b      	lsrs	r3, r3, #21
 80028ea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80028ee:	4b08      	ldr	r3, [pc, #32]	@ (8002910 <I2C_TransferConfig+0x60>)
 80028f0:	430b      	orrs	r3, r1
 80028f2:	43db      	mvns	r3, r3
 80028f4:	ea02 0103 	and.w	r1, r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	430a      	orrs	r2, r1
 8002900:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002902:	bf00      	nop
 8002904:	371c      	adds	r7, #28
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	03ff63ff 	.word	0x03ff63ff

08002914 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b20      	cmp	r3, #32
 8002928:	d138      	bne.n	800299c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002934:	2302      	movs	r3, #2
 8002936:	e032      	b.n	800299e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2224      	movs	r2, #36	@ 0x24
 8002944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002966:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6819      	ldr	r1, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002998:	2300      	movs	r3, #0
 800299a:	e000      	b.n	800299e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800299c:	2302      	movs	r3, #2
  }
}
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b085      	sub	sp, #20
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b20      	cmp	r3, #32
 80029be:	d139      	bne.n	8002a34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029ca:	2302      	movs	r3, #2
 80029cc:	e033      	b.n	8002a36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2224      	movs	r2, #36	@ 0x24
 80029da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0201 	bic.w	r2, r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80029fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	021b      	lsls	r3, r3, #8
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	e000      	b.n	8002a36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a34:	2302      	movs	r3, #2
  }
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b086      	sub	sp, #24
 8002a46:	af02      	add	r7, sp, #8
 8002a48:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e101      	b.n	8002c58 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d106      	bne.n	8002a6e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7fe fd9d 	bl	80015a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2203      	movs	r2, #3
 8002a72:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f002 fa95 	bl	8004fb0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	7c1a      	ldrb	r2, [r3, #16]
 8002a8e:	f88d 2000 	strb.w	r2, [sp]
 8002a92:	3304      	adds	r3, #4
 8002a94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a96:	f002 fa5e 	bl	8004f56 <USB_CoreInit>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0d5      	b.n	8002c58 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f002 fa8d 	bl	8004fd2 <USB_SetCurrentMode>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d005      	beq.n	8002aca <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e0c6      	b.n	8002c58 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aca:	2300      	movs	r3, #0
 8002acc:	73fb      	strb	r3, [r7, #15]
 8002ace:	e04a      	b.n	8002b66 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4413      	add	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	3315      	adds	r3, #21
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ae4:	7bfa      	ldrb	r2, [r7, #15]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	3314      	adds	r3, #20
 8002af4:	7bfa      	ldrb	r2, [r7, #15]
 8002af6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002af8:	7bfa      	ldrb	r2, [r7, #15]
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	b298      	uxth	r0, r3
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	332e      	adds	r3, #46	@ 0x2e
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	3318      	adds	r3, #24
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	331c      	adds	r3, #28
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4413      	add	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	3320      	adds	r3, #32
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b4c:	7bfa      	ldrb	r2, [r7, #15]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	3324      	adds	r3, #36	@ 0x24
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	3301      	adds	r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	791b      	ldrb	r3, [r3, #4]
 8002b6a:	7bfa      	ldrb	r2, [r7, #15]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d3af      	bcc.n	8002ad0 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b70:	2300      	movs	r3, #0
 8002b72:	73fb      	strb	r3, [r7, #15]
 8002b74:	e044      	b.n	8002c00 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b76:	7bfa      	ldrb	r2, [r7, #15]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4413      	add	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002b88:	2200      	movs	r2, #0
 8002b8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002b9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ba0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bb8:	7bfa      	ldrb	r2, [r7, #15]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bce:	7bfa      	ldrb	r2, [r7, #15]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002be4:	7bfa      	ldrb	r2, [r7, #15]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	791b      	ldrb	r3, [r3, #4]
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d3b5      	bcc.n	8002b76 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	7c1a      	ldrb	r2, [r3, #16]
 8002c12:	f88d 2000 	strb.w	r2, [sp]
 8002c16:	3304      	adds	r3, #4
 8002c18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c1a:	f002 fa27 	bl	800506c <USB_DevInit>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e013      	b.n	8002c58 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	7b1b      	ldrb	r3, [r3, #12]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d102      	bne.n	8002c4c <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f80a 	bl	8002c60 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f002 fbcc 	bl	80053ee <USB_DevDisconnect>

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c92:	f043 0303 	orr.w	r3, r3, #3
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cac:	4b05      	ldr	r3, [pc, #20]	@ (8002cc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a04      	ldr	r2, [pc, #16]	@ (8002cc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb6:	6013      	str	r3, [r2, #0]
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40007000 	.word	0x40007000

08002cc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ccc:	4b04      	ldr	r3, [pc, #16]	@ (8002ce0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40007000 	.word	0x40007000

08002ce4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cf2:	d130      	bne.n	8002d56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cf4:	4b23      	ldr	r3, [pc, #140]	@ (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d00:	d038      	beq.n	8002d74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d02:	4b20      	ldr	r3, [pc, #128]	@ (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d12:	4b1d      	ldr	r3, [pc, #116]	@ (8002d88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2232      	movs	r2, #50	@ 0x32
 8002d18:	fb02 f303 	mul.w	r3, r2, r3
 8002d1c:	4a1b      	ldr	r2, [pc, #108]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	0c9b      	lsrs	r3, r3, #18
 8002d24:	3301      	adds	r3, #1
 8002d26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d28:	e002      	b.n	8002d30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d30:	4b14      	ldr	r3, [pc, #80]	@ (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d3c:	d102      	bne.n	8002d44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1f2      	bne.n	8002d2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d44:	4b0f      	ldr	r3, [pc, #60]	@ (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d50:	d110      	bne.n	8002d74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e00f      	b.n	8002d76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d56:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d62:	d007      	beq.n	8002d74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d64:	4b07      	ldr	r3, [pc, #28]	@ (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d6c:	4a05      	ldr	r2, [pc, #20]	@ (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40007000 	.word	0x40007000
 8002d88:	20000000 	.word	0x20000000
 8002d8c:	431bde83 	.word	0x431bde83

08002d90 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002d94:	4b05      	ldr	r3, [pc, #20]	@ (8002dac <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	4a04      	ldr	r2, [pc, #16]	@ (8002dac <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d9e:	6053      	str	r3, [r2, #4]
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40007000 	.word	0x40007000

08002db0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002db4:	4b05      	ldr	r3, [pc, #20]	@ (8002dcc <HAL_PWREx_EnableVddIO2+0x1c>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	4a04      	ldr	r2, [pc, #16]	@ (8002dcc <HAL_PWREx_EnableVddIO2+0x1c>)
 8002dba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dbe:	6053      	str	r3, [r2, #4]
}
 8002dc0:	bf00      	nop
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40007000 	.word	0x40007000

08002dd0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b088      	sub	sp, #32
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d102      	bne.n	8002de4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	f000 bc08 	b.w	80035f4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002de4:	4b96      	ldr	r3, [pc, #600]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 030c 	and.w	r3, r3, #12
 8002dec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dee:	4b94      	ldr	r3, [pc, #592]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80e4 	beq.w	8002fce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d007      	beq.n	8002e1c <HAL_RCC_OscConfig+0x4c>
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	2b0c      	cmp	r3, #12
 8002e10:	f040 808b 	bne.w	8002f2a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	f040 8087 	bne.w	8002f2a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e1c:	4b88      	ldr	r3, [pc, #544]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_RCC_OscConfig+0x64>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e3df      	b.n	80035f4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1a      	ldr	r2, [r3, #32]
 8002e38:	4b81      	ldr	r3, [pc, #516]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d004      	beq.n	8002e4e <HAL_RCC_OscConfig+0x7e>
 8002e44:	4b7e      	ldr	r3, [pc, #504]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e4c:	e005      	b.n	8002e5a <HAL_RCC_OscConfig+0x8a>
 8002e4e:	4b7c      	ldr	r3, [pc, #496]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d223      	bcs.n	8002ea6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fd92 	bl	800398c <RCC_SetFlashLatencyFromMSIRange>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e3c0      	b.n	80035f4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e72:	4b73      	ldr	r3, [pc, #460]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a72      	ldr	r2, [pc, #456]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002e78:	f043 0308 	orr.w	r3, r3, #8
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	4b70      	ldr	r3, [pc, #448]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	496d      	ldr	r1, [pc, #436]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e90:	4b6b      	ldr	r3, [pc, #428]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	021b      	lsls	r3, r3, #8
 8002e9e:	4968      	ldr	r1, [pc, #416]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
 8002ea4:	e025      	b.n	8002ef2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ea6:	4b66      	ldr	r3, [pc, #408]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a65      	ldr	r2, [pc, #404]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002eac:	f043 0308 	orr.w	r3, r3, #8
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	4b63      	ldr	r3, [pc, #396]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	4960      	ldr	r1, [pc, #384]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ec4:	4b5e      	ldr	r3, [pc, #376]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	021b      	lsls	r3, r3, #8
 8002ed2:	495b      	ldr	r1, [pc, #364]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d109      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 fd52 	bl	800398c <RCC_SetFlashLatencyFromMSIRange>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e380      	b.n	80035f4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ef2:	f000 fc87 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	4b51      	ldr	r3, [pc, #324]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	091b      	lsrs	r3, r3, #4
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	4950      	ldr	r1, [pc, #320]	@ (8003044 <HAL_RCC_OscConfig+0x274>)
 8002f04:	5ccb      	ldrb	r3, [r1, r3]
 8002f06:	f003 031f 	and.w	r3, r3, #31
 8002f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0e:	4a4e      	ldr	r2, [pc, #312]	@ (8003048 <HAL_RCC_OscConfig+0x278>)
 8002f10:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f12:	4b4e      	ldr	r3, [pc, #312]	@ (800304c <HAL_RCC_OscConfig+0x27c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fe fc9c 	bl	8001854 <HAL_InitTick>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d052      	beq.n	8002fcc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	e364      	b.n	80035f4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d032      	beq.n	8002f98 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f32:	4b43      	ldr	r3, [pc, #268]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a42      	ldr	r2, [pc, #264]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f3e:	f7fe fcd9 	bl	80018f4 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f46:	f7fe fcd5 	bl	80018f4 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e34d      	b.n	80035f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f58:	4b39      	ldr	r3, [pc, #228]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0f0      	beq.n	8002f46 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f64:	4b36      	ldr	r3, [pc, #216]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a35      	ldr	r2, [pc, #212]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002f6a:	f043 0308 	orr.w	r3, r3, #8
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	4b33      	ldr	r3, [pc, #204]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	4930      	ldr	r1, [pc, #192]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f82:	4b2f      	ldr	r3, [pc, #188]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	021b      	lsls	r3, r3, #8
 8002f90:	492b      	ldr	r1, [pc, #172]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	604b      	str	r3, [r1, #4]
 8002f96:	e01a      	b.n	8002fce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f98:	4b29      	ldr	r3, [pc, #164]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a28      	ldr	r2, [pc, #160]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fa4:	f7fe fca6 	bl	80018f4 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fac:	f7fe fca2 	bl	80018f4 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e31a      	b.n	80035f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fbe:	4b20      	ldr	r3, [pc, #128]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x1dc>
 8002fca:	e000      	b.n	8002fce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fcc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d073      	beq.n	80030c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d005      	beq.n	8002fec <HAL_RCC_OscConfig+0x21c>
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	2b0c      	cmp	r3, #12
 8002fe4:	d10e      	bne.n	8003004 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d10b      	bne.n	8003004 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fec:	4b14      	ldr	r3, [pc, #80]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d063      	beq.n	80030c0 <HAL_RCC_OscConfig+0x2f0>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d15f      	bne.n	80030c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e2f7      	b.n	80035f4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800300c:	d106      	bne.n	800301c <HAL_RCC_OscConfig+0x24c>
 800300e:	4b0c      	ldr	r3, [pc, #48]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a0b      	ldr	r2, [pc, #44]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8003014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	e025      	b.n	8003068 <HAL_RCC_OscConfig+0x298>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003024:	d114      	bne.n	8003050 <HAL_RCC_OscConfig+0x280>
 8003026:	4b06      	ldr	r3, [pc, #24]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a05      	ldr	r2, [pc, #20]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 800302c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	4b03      	ldr	r3, [pc, #12]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a02      	ldr	r2, [pc, #8]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8003038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	e013      	b.n	8003068 <HAL_RCC_OscConfig+0x298>
 8003040:	40021000 	.word	0x40021000
 8003044:	08005e20 	.word	0x08005e20
 8003048:	20000000 	.word	0x20000000
 800304c:	20000004 	.word	0x20000004
 8003050:	4ba0      	ldr	r3, [pc, #640]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a9f      	ldr	r2, [pc, #636]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 8003056:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	4b9d      	ldr	r3, [pc, #628]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a9c      	ldr	r2, [pc, #624]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 8003062:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d013      	beq.n	8003098 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7fe fc40 	bl	80018f4 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003078:	f7fe fc3c 	bl	80018f4 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b64      	cmp	r3, #100	@ 0x64
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e2b4      	b.n	80035f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800308a:	4b92      	ldr	r3, [pc, #584]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0f0      	beq.n	8003078 <HAL_RCC_OscConfig+0x2a8>
 8003096:	e014      	b.n	80030c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fe fc2c 	bl	80018f4 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a0:	f7fe fc28 	bl	80018f4 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	@ 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e2a0      	b.n	80035f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030b2:	4b88      	ldr	r3, [pc, #544]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x2d0>
 80030be:	e000      	b.n	80030c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d060      	beq.n	8003190 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d005      	beq.n	80030e0 <HAL_RCC_OscConfig+0x310>
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2b0c      	cmp	r3, #12
 80030d8:	d119      	bne.n	800310e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d116      	bne.n	800310e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030e0:	4b7c      	ldr	r3, [pc, #496]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <HAL_RCC_OscConfig+0x328>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e27d      	b.n	80035f4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f8:	4b76      	ldr	r3, [pc, #472]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	061b      	lsls	r3, r3, #24
 8003106:	4973      	ldr	r1, [pc, #460]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 8003108:	4313      	orrs	r3, r2
 800310a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800310c:	e040      	b.n	8003190 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d023      	beq.n	800315e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003116:	4b6f      	ldr	r3, [pc, #444]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a6e      	ldr	r2, [pc, #440]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 800311c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003122:	f7fe fbe7 	bl	80018f4 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800312a:	f7fe fbe3 	bl	80018f4 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e25b      	b.n	80035f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800313c:	4b65      	ldr	r3, [pc, #404]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0f0      	beq.n	800312a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003148:	4b62      	ldr	r3, [pc, #392]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	061b      	lsls	r3, r3, #24
 8003156:	495f      	ldr	r1, [pc, #380]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 8003158:	4313      	orrs	r3, r2
 800315a:	604b      	str	r3, [r1, #4]
 800315c:	e018      	b.n	8003190 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800315e:	4b5d      	ldr	r3, [pc, #372]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a5c      	ldr	r2, [pc, #368]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 8003164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316a:	f7fe fbc3 	bl	80018f4 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003172:	f7fe fbbf 	bl	80018f4 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e237      	b.n	80035f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003184:	4b53      	ldr	r3, [pc, #332]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1f0      	bne.n	8003172 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d03c      	beq.n	8003216 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d01c      	beq.n	80031de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031a4:	4b4b      	ldr	r3, [pc, #300]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 80031a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031aa:	4a4a      	ldr	r2, [pc, #296]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b4:	f7fe fb9e 	bl	80018f4 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031bc:	f7fe fb9a 	bl	80018f4 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e212      	b.n	80035f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031ce:	4b41      	ldr	r3, [pc, #260]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 80031d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0ef      	beq.n	80031bc <HAL_RCC_OscConfig+0x3ec>
 80031dc:	e01b      	b.n	8003216 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031de:	4b3d      	ldr	r3, [pc, #244]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 80031e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031e4:	4a3b      	ldr	r2, [pc, #236]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 80031e6:	f023 0301 	bic.w	r3, r3, #1
 80031ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ee:	f7fe fb81 	bl	80018f4 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f6:	f7fe fb7d 	bl	80018f4 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e1f5      	b.n	80035f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003208:	4b32      	ldr	r3, [pc, #200]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 800320a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1ef      	bne.n	80031f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 80a6 	beq.w	8003370 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003224:	2300      	movs	r3, #0
 8003226:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003228:	4b2a      	ldr	r3, [pc, #168]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 800322a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10d      	bne.n	8003250 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003234:	4b27      	ldr	r3, [pc, #156]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 8003236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003238:	4a26      	ldr	r2, [pc, #152]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 800323a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800323e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003240:	4b24      	ldr	r3, [pc, #144]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 8003242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003244:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003248:	60bb      	str	r3, [r7, #8]
 800324a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800324c:	2301      	movs	r3, #1
 800324e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003250:	4b21      	ldr	r3, [pc, #132]	@ (80032d8 <HAL_RCC_OscConfig+0x508>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003258:	2b00      	cmp	r3, #0
 800325a:	d118      	bne.n	800328e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800325c:	4b1e      	ldr	r3, [pc, #120]	@ (80032d8 <HAL_RCC_OscConfig+0x508>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a1d      	ldr	r2, [pc, #116]	@ (80032d8 <HAL_RCC_OscConfig+0x508>)
 8003262:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003266:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003268:	f7fe fb44 	bl	80018f4 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003270:	f7fe fb40 	bl	80018f4 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e1b8      	b.n	80035f4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003282:	4b15      	ldr	r3, [pc, #84]	@ (80032d8 <HAL_RCC_OscConfig+0x508>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0f0      	beq.n	8003270 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d108      	bne.n	80032a8 <HAL_RCC_OscConfig+0x4d8>
 8003296:	4b0f      	ldr	r3, [pc, #60]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 8003298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800329c:	4a0d      	ldr	r2, [pc, #52]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 800329e:	f043 0301 	orr.w	r3, r3, #1
 80032a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032a6:	e029      	b.n	80032fc <HAL_RCC_OscConfig+0x52c>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b05      	cmp	r3, #5
 80032ae:	d115      	bne.n	80032dc <HAL_RCC_OscConfig+0x50c>
 80032b0:	4b08      	ldr	r3, [pc, #32]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 80032b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b6:	4a07      	ldr	r2, [pc, #28]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 80032b8:	f043 0304 	orr.w	r3, r3, #4
 80032bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032c0:	4b04      	ldr	r3, [pc, #16]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c6:	4a03      	ldr	r2, [pc, #12]	@ (80032d4 <HAL_RCC_OscConfig+0x504>)
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032d0:	e014      	b.n	80032fc <HAL_RCC_OscConfig+0x52c>
 80032d2:	bf00      	nop
 80032d4:	40021000 	.word	0x40021000
 80032d8:	40007000 	.word	0x40007000
 80032dc:	4b9d      	ldr	r3, [pc, #628]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e2:	4a9c      	ldr	r2, [pc, #624]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 80032e4:	f023 0301 	bic.w	r3, r3, #1
 80032e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032ec:	4b99      	ldr	r3, [pc, #612]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f2:	4a98      	ldr	r2, [pc, #608]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 80032f4:	f023 0304 	bic.w	r3, r3, #4
 80032f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d016      	beq.n	8003332 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003304:	f7fe faf6 	bl	80018f4 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800330a:	e00a      	b.n	8003322 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800330c:	f7fe faf2 	bl	80018f4 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800331a:	4293      	cmp	r3, r2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e168      	b.n	80035f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003322:	4b8c      	ldr	r3, [pc, #560]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 8003324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0ed      	beq.n	800330c <HAL_RCC_OscConfig+0x53c>
 8003330:	e015      	b.n	800335e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003332:	f7fe fadf 	bl	80018f4 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003338:	e00a      	b.n	8003350 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333a:	f7fe fadb 	bl	80018f4 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003348:	4293      	cmp	r3, r2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e151      	b.n	80035f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003350:	4b80      	ldr	r3, [pc, #512]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 8003352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1ed      	bne.n	800333a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800335e:	7ffb      	ldrb	r3, [r7, #31]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d105      	bne.n	8003370 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003364:	4b7b      	ldr	r3, [pc, #492]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 8003366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003368:	4a7a      	ldr	r2, [pc, #488]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 800336a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800336e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b00      	cmp	r3, #0
 800337a:	d03c      	beq.n	80033f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01c      	beq.n	80033be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003384:	4b73      	ldr	r3, [pc, #460]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 8003386:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800338a:	4a72      	ldr	r2, [pc, #456]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003394:	f7fe faae 	bl	80018f4 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800339c:	f7fe faaa 	bl	80018f4 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e122      	b.n	80035f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033ae:	4b69      	ldr	r3, [pc, #420]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 80033b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0ef      	beq.n	800339c <HAL_RCC_OscConfig+0x5cc>
 80033bc:	e01b      	b.n	80033f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033be:	4b65      	ldr	r3, [pc, #404]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 80033c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033c4:	4a63      	ldr	r2, [pc, #396]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 80033c6:	f023 0301 	bic.w	r3, r3, #1
 80033ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ce:	f7fe fa91 	bl	80018f4 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033d6:	f7fe fa8d 	bl	80018f4 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e105      	b.n	80035f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033e8:	4b5a      	ldr	r3, [pc, #360]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 80033ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1ef      	bne.n	80033d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 80f9 	beq.w	80035f2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003404:	2b02      	cmp	r3, #2
 8003406:	f040 80cf 	bne.w	80035a8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800340a:	4b52      	ldr	r3, [pc, #328]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f003 0203 	and.w	r2, r3, #3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341a:	429a      	cmp	r2, r3
 800341c:	d12c      	bne.n	8003478 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003428:	3b01      	subs	r3, #1
 800342a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800342c:	429a      	cmp	r2, r3
 800342e:	d123      	bne.n	8003478 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800343a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800343c:	429a      	cmp	r2, r3
 800343e:	d11b      	bne.n	8003478 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800344c:	429a      	cmp	r2, r3
 800344e:	d113      	bne.n	8003478 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800345a:	085b      	lsrs	r3, r3, #1
 800345c:	3b01      	subs	r3, #1
 800345e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003460:	429a      	cmp	r2, r3
 8003462:	d109      	bne.n	8003478 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	3b01      	subs	r3, #1
 8003472:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003474:	429a      	cmp	r2, r3
 8003476:	d071      	beq.n	800355c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	2b0c      	cmp	r3, #12
 800347c:	d068      	beq.n	8003550 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800347e:	4b35      	ldr	r3, [pc, #212]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d105      	bne.n	8003496 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800348a:	4b32      	ldr	r3, [pc, #200]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e0ac      	b.n	80035f4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800349a:	4b2e      	ldr	r3, [pc, #184]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a2d      	ldr	r2, [pc, #180]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 80034a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034a6:	f7fe fa25 	bl	80018f4 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ae:	f7fe fa21 	bl	80018f4 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e099      	b.n	80035f4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c0:	4b24      	ldr	r3, [pc, #144]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1f0      	bne.n	80034ae <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034cc:	4b21      	ldr	r3, [pc, #132]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	4b21      	ldr	r3, [pc, #132]	@ (8003558 <HAL_RCC_OscConfig+0x788>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80034dc:	3a01      	subs	r2, #1
 80034de:	0112      	lsls	r2, r2, #4
 80034e0:	4311      	orrs	r1, r2
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80034e6:	0212      	lsls	r2, r2, #8
 80034e8:	4311      	orrs	r1, r2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80034ee:	0852      	lsrs	r2, r2, #1
 80034f0:	3a01      	subs	r2, #1
 80034f2:	0552      	lsls	r2, r2, #21
 80034f4:	4311      	orrs	r1, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80034fa:	0852      	lsrs	r2, r2, #1
 80034fc:	3a01      	subs	r2, #1
 80034fe:	0652      	lsls	r2, r2, #25
 8003500:	4311      	orrs	r1, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003506:	06d2      	lsls	r2, r2, #27
 8003508:	430a      	orrs	r2, r1
 800350a:	4912      	ldr	r1, [pc, #72]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 800350c:	4313      	orrs	r3, r2
 800350e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003510:	4b10      	ldr	r3, [pc, #64]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a0f      	ldr	r2, [pc, #60]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 8003516:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800351a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800351c:	4b0d      	ldr	r3, [pc, #52]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4a0c      	ldr	r2, [pc, #48]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 8003522:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003526:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003528:	f7fe f9e4 	bl	80018f4 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003530:	f7fe f9e0 	bl	80018f4 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e058      	b.n	80035f4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003542:	4b04      	ldr	r3, [pc, #16]	@ (8003554 <HAL_RCC_OscConfig+0x784>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0f0      	beq.n	8003530 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800354e:	e050      	b.n	80035f2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e04f      	b.n	80035f4 <HAL_RCC_OscConfig+0x824>
 8003554:	40021000 	.word	0x40021000
 8003558:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800355c:	4b27      	ldr	r3, [pc, #156]	@ (80035fc <HAL_RCC_OscConfig+0x82c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d144      	bne.n	80035f2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003568:	4b24      	ldr	r3, [pc, #144]	@ (80035fc <HAL_RCC_OscConfig+0x82c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a23      	ldr	r2, [pc, #140]	@ (80035fc <HAL_RCC_OscConfig+0x82c>)
 800356e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003572:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003574:	4b21      	ldr	r3, [pc, #132]	@ (80035fc <HAL_RCC_OscConfig+0x82c>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	4a20      	ldr	r2, [pc, #128]	@ (80035fc <HAL_RCC_OscConfig+0x82c>)
 800357a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800357e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003580:	f7fe f9b8 	bl	80018f4 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003588:	f7fe f9b4 	bl	80018f4 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e02c      	b.n	80035f4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800359a:	4b18      	ldr	r3, [pc, #96]	@ (80035fc <HAL_RCC_OscConfig+0x82c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCC_OscConfig+0x7b8>
 80035a6:	e024      	b.n	80035f2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	2b0c      	cmp	r3, #12
 80035ac:	d01f      	beq.n	80035ee <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ae:	4b13      	ldr	r3, [pc, #76]	@ (80035fc <HAL_RCC_OscConfig+0x82c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a12      	ldr	r2, [pc, #72]	@ (80035fc <HAL_RCC_OscConfig+0x82c>)
 80035b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ba:	f7fe f99b 	bl	80018f4 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c2:	f7fe f997 	bl	80018f4 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e00f      	b.n	80035f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035d4:	4b09      	ldr	r3, [pc, #36]	@ (80035fc <HAL_RCC_OscConfig+0x82c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1f0      	bne.n	80035c2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80035e0:	4b06      	ldr	r3, [pc, #24]	@ (80035fc <HAL_RCC_OscConfig+0x82c>)
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	4905      	ldr	r1, [pc, #20]	@ (80035fc <HAL_RCC_OscConfig+0x82c>)
 80035e6:	4b06      	ldr	r3, [pc, #24]	@ (8003600 <HAL_RCC_OscConfig+0x830>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	60cb      	str	r3, [r1, #12]
 80035ec:	e001      	b.n	80035f2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3720      	adds	r7, #32
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40021000 	.word	0x40021000
 8003600:	feeefffc 	.word	0xfeeefffc

08003604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0e7      	b.n	80037e8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003618:	4b75      	ldr	r3, [pc, #468]	@ (80037f0 <HAL_RCC_ClockConfig+0x1ec>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d910      	bls.n	8003648 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003626:	4b72      	ldr	r3, [pc, #456]	@ (80037f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 0207 	bic.w	r2, r3, #7
 800362e:	4970      	ldr	r1, [pc, #448]	@ (80037f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	4313      	orrs	r3, r2
 8003634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003636:	4b6e      	ldr	r3, [pc, #440]	@ (80037f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d001      	beq.n	8003648 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0cf      	b.n	80037e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d010      	beq.n	8003676 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	4b66      	ldr	r3, [pc, #408]	@ (80037f4 <HAL_RCC_ClockConfig+0x1f0>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003660:	429a      	cmp	r2, r3
 8003662:	d908      	bls.n	8003676 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003664:	4b63      	ldr	r3, [pc, #396]	@ (80037f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	4960      	ldr	r1, [pc, #384]	@ (80037f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003672:	4313      	orrs	r3, r2
 8003674:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d04c      	beq.n	800371c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b03      	cmp	r3, #3
 8003688:	d107      	bne.n	800369a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800368a:	4b5a      	ldr	r3, [pc, #360]	@ (80037f4 <HAL_RCC_ClockConfig+0x1f0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d121      	bne.n	80036da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e0a6      	b.n	80037e8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d107      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036a2:	4b54      	ldr	r3, [pc, #336]	@ (80037f4 <HAL_RCC_ClockConfig+0x1f0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d115      	bne.n	80036da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e09a      	b.n	80037e8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d107      	bne.n	80036ca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036ba:	4b4e      	ldr	r3, [pc, #312]	@ (80037f4 <HAL_RCC_ClockConfig+0x1f0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d109      	bne.n	80036da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e08e      	b.n	80037e8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036ca:	4b4a      	ldr	r3, [pc, #296]	@ (80037f4 <HAL_RCC_ClockConfig+0x1f0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e086      	b.n	80037e8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036da:	4b46      	ldr	r3, [pc, #280]	@ (80037f4 <HAL_RCC_ClockConfig+0x1f0>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f023 0203 	bic.w	r2, r3, #3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	4943      	ldr	r1, [pc, #268]	@ (80037f4 <HAL_RCC_ClockConfig+0x1f0>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ec:	f7fe f902 	bl	80018f4 <HAL_GetTick>
 80036f0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f2:	e00a      	b.n	800370a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f4:	f7fe f8fe 	bl	80018f4 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003702:	4293      	cmp	r3, r2
 8003704:	d901      	bls.n	800370a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e06e      	b.n	80037e8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370a:	4b3a      	ldr	r3, [pc, #232]	@ (80037f4 <HAL_RCC_ClockConfig+0x1f0>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 020c 	and.w	r2, r3, #12
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	429a      	cmp	r2, r3
 800371a:	d1eb      	bne.n	80036f4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d010      	beq.n	800374a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	4b31      	ldr	r3, [pc, #196]	@ (80037f4 <HAL_RCC_ClockConfig+0x1f0>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003734:	429a      	cmp	r2, r3
 8003736:	d208      	bcs.n	800374a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003738:	4b2e      	ldr	r3, [pc, #184]	@ (80037f4 <HAL_RCC_ClockConfig+0x1f0>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	492b      	ldr	r1, [pc, #172]	@ (80037f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003746:	4313      	orrs	r3, r2
 8003748:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800374a:	4b29      	ldr	r3, [pc, #164]	@ (80037f0 <HAL_RCC_ClockConfig+0x1ec>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d210      	bcs.n	800377a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003758:	4b25      	ldr	r3, [pc, #148]	@ (80037f0 <HAL_RCC_ClockConfig+0x1ec>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f023 0207 	bic.w	r2, r3, #7
 8003760:	4923      	ldr	r1, [pc, #140]	@ (80037f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	4313      	orrs	r3, r2
 8003766:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003768:	4b21      	ldr	r3, [pc, #132]	@ (80037f0 <HAL_RCC_ClockConfig+0x1ec>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d001      	beq.n	800377a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e036      	b.n	80037e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0304 	and.w	r3, r3, #4
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003786:	4b1b      	ldr	r3, [pc, #108]	@ (80037f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	4918      	ldr	r1, [pc, #96]	@ (80037f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003794:	4313      	orrs	r3, r2
 8003796:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d009      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037a4:	4b13      	ldr	r3, [pc, #76]	@ (80037f4 <HAL_RCC_ClockConfig+0x1f0>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	4910      	ldr	r1, [pc, #64]	@ (80037f4 <HAL_RCC_ClockConfig+0x1f0>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037b8:	f000 f824 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 80037bc:	4602      	mov	r2, r0
 80037be:	4b0d      	ldr	r3, [pc, #52]	@ (80037f4 <HAL_RCC_ClockConfig+0x1f0>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	091b      	lsrs	r3, r3, #4
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	490b      	ldr	r1, [pc, #44]	@ (80037f8 <HAL_RCC_ClockConfig+0x1f4>)
 80037ca:	5ccb      	ldrb	r3, [r1, r3]
 80037cc:	f003 031f 	and.w	r3, r3, #31
 80037d0:	fa22 f303 	lsr.w	r3, r2, r3
 80037d4:	4a09      	ldr	r2, [pc, #36]	@ (80037fc <HAL_RCC_ClockConfig+0x1f8>)
 80037d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037d8:	4b09      	ldr	r3, [pc, #36]	@ (8003800 <HAL_RCC_ClockConfig+0x1fc>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fe f839 	bl	8001854 <HAL_InitTick>
 80037e2:	4603      	mov	r3, r0
 80037e4:	72fb      	strb	r3, [r7, #11]

  return status;
 80037e6:	7afb      	ldrb	r3, [r7, #11]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40022000 	.word	0x40022000
 80037f4:	40021000 	.word	0x40021000
 80037f8:	08005e20 	.word	0x08005e20
 80037fc:	20000000 	.word	0x20000000
 8003800:	20000004 	.word	0x20000004

08003804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003804:	b480      	push	{r7}
 8003806:	b089      	sub	sp, #36	@ 0x24
 8003808:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	61fb      	str	r3, [r7, #28]
 800380e:	2300      	movs	r3, #0
 8003810:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003812:	4b3e      	ldr	r3, [pc, #248]	@ (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 030c 	and.w	r3, r3, #12
 800381a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800381c:	4b3b      	ldr	r3, [pc, #236]	@ (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0303 	and.w	r3, r3, #3
 8003824:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0x34>
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	2b0c      	cmp	r3, #12
 8003830:	d121      	bne.n	8003876 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d11e      	bne.n	8003876 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003838:	4b34      	ldr	r3, [pc, #208]	@ (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	2b00      	cmp	r3, #0
 8003842:	d107      	bne.n	8003854 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003844:	4b31      	ldr	r3, [pc, #196]	@ (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 8003846:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800384a:	0a1b      	lsrs	r3, r3, #8
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	61fb      	str	r3, [r7, #28]
 8003852:	e005      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003854:	4b2d      	ldr	r3, [pc, #180]	@ (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	091b      	lsrs	r3, r3, #4
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003860:	4a2b      	ldr	r2, [pc, #172]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003868:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10d      	bne.n	800388c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003874:	e00a      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	2b04      	cmp	r3, #4
 800387a:	d102      	bne.n	8003882 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800387c:	4b25      	ldr	r3, [pc, #148]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x110>)
 800387e:	61bb      	str	r3, [r7, #24]
 8003880:	e004      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	2b08      	cmp	r3, #8
 8003886:	d101      	bne.n	800388c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003888:	4b23      	ldr	r3, [pc, #140]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x114>)
 800388a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	2b0c      	cmp	r3, #12
 8003890:	d134      	bne.n	80038fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003892:	4b1e      	ldr	r3, [pc, #120]	@ (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d003      	beq.n	80038aa <HAL_RCC_GetSysClockFreq+0xa6>
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b03      	cmp	r3, #3
 80038a6:	d003      	beq.n	80038b0 <HAL_RCC_GetSysClockFreq+0xac>
 80038a8:	e005      	b.n	80038b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x110>)
 80038ac:	617b      	str	r3, [r7, #20]
      break;
 80038ae:	e005      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038b0:	4b19      	ldr	r3, [pc, #100]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x114>)
 80038b2:	617b      	str	r3, [r7, #20]
      break;
 80038b4:	e002      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	617b      	str	r3, [r7, #20]
      break;
 80038ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038bc:	4b13      	ldr	r3, [pc, #76]	@ (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	091b      	lsrs	r3, r3, #4
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	3301      	adds	r3, #1
 80038c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038ca:	4b10      	ldr	r3, [pc, #64]	@ (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	0a1b      	lsrs	r3, r3, #8
 80038d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	fb03 f202 	mul.w	r2, r3, r2
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038e2:	4b0a      	ldr	r3, [pc, #40]	@ (800390c <HAL_RCC_GetSysClockFreq+0x108>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	0e5b      	lsrs	r3, r3, #25
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	3301      	adds	r3, #1
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038fc:	69bb      	ldr	r3, [r7, #24]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3724      	adds	r7, #36	@ 0x24
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40021000 	.word	0x40021000
 8003910:	08005e38 	.word	0x08005e38
 8003914:	00f42400 	.word	0x00f42400
 8003918:	007a1200 	.word	0x007a1200

0800391c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003920:	4b03      	ldr	r3, [pc, #12]	@ (8003930 <HAL_RCC_GetHCLKFreq+0x14>)
 8003922:	681b      	ldr	r3, [r3, #0]
}
 8003924:	4618      	mov	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	20000000 	.word	0x20000000

08003934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003938:	f7ff fff0 	bl	800391c <HAL_RCC_GetHCLKFreq>
 800393c:	4602      	mov	r2, r0
 800393e:	4b06      	ldr	r3, [pc, #24]	@ (8003958 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	0a1b      	lsrs	r3, r3, #8
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	4904      	ldr	r1, [pc, #16]	@ (800395c <HAL_RCC_GetPCLK1Freq+0x28>)
 800394a:	5ccb      	ldrb	r3, [r1, r3]
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000
 800395c:	08005e30 	.word	0x08005e30

08003960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003964:	f7ff ffda 	bl	800391c <HAL_RCC_GetHCLKFreq>
 8003968:	4602      	mov	r2, r0
 800396a:	4b06      	ldr	r3, [pc, #24]	@ (8003984 <HAL_RCC_GetPCLK2Freq+0x24>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	0adb      	lsrs	r3, r3, #11
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	4904      	ldr	r1, [pc, #16]	@ (8003988 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003976:	5ccb      	ldrb	r3, [r1, r3]
 8003978:	f003 031f 	and.w	r3, r3, #31
 800397c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003980:	4618      	mov	r0, r3
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40021000 	.word	0x40021000
 8003988:	08005e30 	.word	0x08005e30

0800398c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003994:	2300      	movs	r3, #0
 8003996:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003998:	4b2a      	ldr	r3, [pc, #168]	@ (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800399a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800399c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039a4:	f7ff f990 	bl	8002cc8 <HAL_PWREx_GetVoltageRange>
 80039a8:	6178      	str	r0, [r7, #20]
 80039aa:	e014      	b.n	80039d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039ac:	4b25      	ldr	r3, [pc, #148]	@ (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b0:	4a24      	ldr	r2, [pc, #144]	@ (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80039b8:	4b22      	ldr	r3, [pc, #136]	@ (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039c4:	f7ff f980 	bl	8002cc8 <HAL_PWREx_GetVoltageRange>
 80039c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003a44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039dc:	d10b      	bne.n	80039f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b80      	cmp	r3, #128	@ 0x80
 80039e2:	d919      	bls.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2ba0      	cmp	r3, #160	@ 0xa0
 80039e8:	d902      	bls.n	80039f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039ea:	2302      	movs	r3, #2
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	e013      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039f0:	2301      	movs	r3, #1
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	e010      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b80      	cmp	r3, #128	@ 0x80
 80039fa:	d902      	bls.n	8003a02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80039fc:	2303      	movs	r3, #3
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	e00a      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b80      	cmp	r3, #128	@ 0x80
 8003a06:	d102      	bne.n	8003a0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a08:	2302      	movs	r3, #2
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	e004      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b70      	cmp	r3, #112	@ 0x70
 8003a12:	d101      	bne.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a14:	2301      	movs	r3, #1
 8003a16:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a18:	4b0b      	ldr	r3, [pc, #44]	@ (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f023 0207 	bic.w	r2, r3, #7
 8003a20:	4909      	ldr	r1, [pc, #36]	@ (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a28:	4b07      	ldr	r3, [pc, #28]	@ (8003a48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d001      	beq.n	8003a3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40022000 	.word	0x40022000

08003a4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a54:	2300      	movs	r3, #0
 8003a56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a58:	2300      	movs	r3, #0
 8003a5a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d041      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a6c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003a70:	d02a      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003a72:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003a76:	d824      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a78:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a7c:	d008      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a7e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a82:	d81e      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00a      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003a88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a8c:	d010      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a8e:	e018      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a90:	4b86      	ldr	r3, [pc, #536]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	4a85      	ldr	r2, [pc, #532]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a9a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a9c:	e015      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 fadd 	bl	8004064 <RCCEx_PLLSAI1_Config>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003aae:	e00c      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3320      	adds	r3, #32
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fbc6 	bl	8004248 <RCCEx_PLLSAI2_Config>
 8003abc:	4603      	mov	r3, r0
 8003abe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ac0:	e003      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	74fb      	strb	r3, [r7, #19]
      break;
 8003ac6:	e000      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ac8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aca:	7cfb      	ldrb	r3, [r7, #19]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10b      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ad0:	4b76      	ldr	r3, [pc, #472]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ad6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ade:	4973      	ldr	r1, [pc, #460]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003ae6:	e001      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae8:	7cfb      	ldrb	r3, [r7, #19]
 8003aea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d041      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003afc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b00:	d02a      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003b02:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b06:	d824      	bhi.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b0c:	d008      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b12:	d81e      	bhi.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003b18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b1c:	d010      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b1e:	e018      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b20:	4b62      	ldr	r3, [pc, #392]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	4a61      	ldr	r2, [pc, #388]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b2a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b2c:	e015      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3304      	adds	r3, #4
 8003b32:	2100      	movs	r1, #0
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fa95 	bl	8004064 <RCCEx_PLLSAI1_Config>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b3e:	e00c      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3320      	adds	r3, #32
 8003b44:	2100      	movs	r1, #0
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 fb7e 	bl	8004248 <RCCEx_PLLSAI2_Config>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b50:	e003      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	74fb      	strb	r3, [r7, #19]
      break;
 8003b56:	e000      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003b58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b5a:	7cfb      	ldrb	r3, [r7, #19]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10b      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b60:	4b52      	ldr	r3, [pc, #328]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b66:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b6e:	494f      	ldr	r1, [pc, #316]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003b76:	e001      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b78:	7cfb      	ldrb	r3, [r7, #19]
 8003b7a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80a0 	beq.w	8003cca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b8e:	4b47      	ldr	r3, [pc, #284]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00d      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba4:	4b41      	ldr	r3, [pc, #260]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba8:	4a40      	ldr	r2, [pc, #256]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003baa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bae:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bb0:	4b3e      	ldr	r3, [pc, #248]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bb8:	60bb      	str	r3, [r7, #8]
 8003bba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bc0:	4b3b      	ldr	r3, [pc, #236]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a3a      	ldr	r2, [pc, #232]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bcc:	f7fd fe92 	bl	80018f4 <HAL_GetTick>
 8003bd0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bd2:	e009      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd4:	f7fd fe8e 	bl	80018f4 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d902      	bls.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	74fb      	strb	r3, [r7, #19]
        break;
 8003be6:	e005      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003be8:	4b31      	ldr	r3, [pc, #196]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0ef      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003bf4:	7cfb      	ldrb	r3, [r7, #19]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d15c      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bfa:	4b2c      	ldr	r3, [pc, #176]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c04:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01f      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d019      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c18:	4b24      	ldr	r3, [pc, #144]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c24:	4b21      	ldr	r3, [pc, #132]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c2a:	4a20      	ldr	r2, [pc, #128]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c34:	4b1d      	ldr	r3, [pc, #116]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c44:	4a19      	ldr	r2, [pc, #100]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d016      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c56:	f7fd fe4d 	bl	80018f4 <HAL_GetTick>
 8003c5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c5c:	e00b      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5e:	f7fd fe49 	bl	80018f4 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d902      	bls.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	74fb      	strb	r3, [r7, #19]
            break;
 8003c74:	e006      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c76:	4b0d      	ldr	r3, [pc, #52]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0ec      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003c84:	7cfb      	ldrb	r3, [r7, #19]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10c      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c8a:	4b08      	ldr	r3, [pc, #32]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9a:	4904      	ldr	r1, [pc, #16]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003ca2:	e009      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ca4:	7cfb      	ldrb	r3, [r7, #19]
 8003ca6:	74bb      	strb	r3, [r7, #18]
 8003ca8:	e006      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003caa:	bf00      	nop
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb4:	7cfb      	ldrb	r3, [r7, #19]
 8003cb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cb8:	7c7b      	ldrb	r3, [r7, #17]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d105      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cbe:	4ba6      	ldr	r3, [pc, #664]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc2:	4aa5      	ldr	r2, [pc, #660]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cc8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cd6:	4ba0      	ldr	r3, [pc, #640]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cdc:	f023 0203 	bic.w	r2, r3, #3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce4:	499c      	ldr	r1, [pc, #624]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cf8:	4b97      	ldr	r3, [pc, #604]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cfe:	f023 020c 	bic.w	r2, r3, #12
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d06:	4994      	ldr	r1, [pc, #592]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d1a:	4b8f      	ldr	r3, [pc, #572]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d20:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d28:	498b      	ldr	r1, [pc, #556]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d3c:	4b86      	ldr	r3, [pc, #536]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d42:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4a:	4983      	ldr	r1, [pc, #524]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d5e:	4b7e      	ldr	r3, [pc, #504]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d6c:	497a      	ldr	r1, [pc, #488]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0320 	and.w	r3, r3, #32
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d80:	4b75      	ldr	r3, [pc, #468]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d86:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d8e:	4972      	ldr	r1, [pc, #456]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003da2:	4b6d      	ldr	r3, [pc, #436]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db0:	4969      	ldr	r1, [pc, #420]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dc4:	4b64      	ldr	r3, [pc, #400]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dd2:	4961      	ldr	r1, [pc, #388]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003de6:	4b5c      	ldr	r3, [pc, #368]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003df4:	4958      	ldr	r1, [pc, #352]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00a      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e08:	4b53      	ldr	r3, [pc, #332]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e16:	4950      	ldr	r1, [pc, #320]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e2a:	4b4b      	ldr	r3, [pc, #300]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e38:	4947      	ldr	r1, [pc, #284]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e4c:	4b42      	ldr	r3, [pc, #264]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e52:	f023 0203 	bic.w	r2, r3, #3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e5a:	493f      	ldr	r1, [pc, #252]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d028      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e6e:	4b3a      	ldr	r3, [pc, #232]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e74:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e7c:	4936      	ldr	r1, [pc, #216]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e8c:	d106      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e8e:	4b32      	ldr	r3, [pc, #200]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	4a31      	ldr	r2, [pc, #196]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e98:	60d3      	str	r3, [r2, #12]
 8003e9a:	e011      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ea4:	d10c      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	2101      	movs	r1, #1
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 f8d9 	bl	8004064 <RCCEx_PLLSAI1_Config>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003eb6:	7cfb      	ldrb	r3, [r7, #19]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003ebc:	7cfb      	ldrb	r3, [r7, #19]
 8003ebe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d028      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ecc:	4b22      	ldr	r3, [pc, #136]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eda:	491f      	ldr	r1, [pc, #124]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ee6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003eea:	d106      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eec:	4b1a      	ldr	r3, [pc, #104]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	4a19      	ldr	r2, [pc, #100]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ef2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ef6:	60d3      	str	r3, [r2, #12]
 8003ef8:	e011      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003efe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f02:	d10c      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3304      	adds	r3, #4
 8003f08:	2101      	movs	r1, #1
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 f8aa 	bl	8004064 <RCCEx_PLLSAI1_Config>
 8003f10:	4603      	mov	r3, r0
 8003f12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f14:	7cfb      	ldrb	r3, [r7, #19]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003f1a:	7cfb      	ldrb	r3, [r7, #19]
 8003f1c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d02a      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f30:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f38:	4907      	ldr	r1, [pc, #28]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f48:	d108      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f4a:	4b03      	ldr	r3, [pc, #12]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	4a02      	ldr	r2, [pc, #8]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f54:	60d3      	str	r3, [r2, #12]
 8003f56:	e013      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003f58:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f64:	d10c      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 f879 	bl	8004064 <RCCEx_PLLSAI1_Config>
 8003f72:	4603      	mov	r3, r0
 8003f74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f76:	7cfb      	ldrb	r3, [r7, #19]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003f7c:	7cfb      	ldrb	r3, [r7, #19]
 8003f7e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d02f      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f8c:	4b2c      	ldr	r3, [pc, #176]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f92:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f9a:	4929      	ldr	r1, [pc, #164]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003faa:	d10d      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	2102      	movs	r1, #2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 f856 	bl	8004064 <RCCEx_PLLSAI1_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fbc:	7cfb      	ldrb	r3, [r7, #19]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d014      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003fc2:	7cfb      	ldrb	r3, [r7, #19]
 8003fc4:	74bb      	strb	r3, [r7, #18]
 8003fc6:	e011      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fd0:	d10c      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3320      	adds	r3, #32
 8003fd6:	2102      	movs	r1, #2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 f935 	bl	8004248 <RCCEx_PLLSAI2_Config>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fe2:	7cfb      	ldrb	r3, [r7, #19]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003fe8:	7cfb      	ldrb	r3, [r7, #19]
 8003fea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00b      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ff8:	4b11      	ldr	r3, [pc, #68]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffe:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004008:	490d      	ldr	r1, [pc, #52]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00b      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800401c:	4b08      	ldr	r3, [pc, #32]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004022:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800402c:	4904      	ldr	r1, [pc, #16]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800402e:	4313      	orrs	r3, r2
 8004030:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004034:	7cbb      	ldrb	r3, [r7, #18]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40021000 	.word	0x40021000

08004044 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004048:	4b05      	ldr	r3, [pc, #20]	@ (8004060 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a04      	ldr	r2, [pc, #16]	@ (8004060 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800404e:	f043 0304 	orr.w	r3, r3, #4
 8004052:	6013      	str	r3, [r2, #0]
}
 8004054:	bf00      	nop
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40021000 	.word	0x40021000

08004064 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004072:	4b74      	ldr	r3, [pc, #464]	@ (8004244 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f003 0303 	and.w	r3, r3, #3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d018      	beq.n	80040b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800407e:	4b71      	ldr	r3, [pc, #452]	@ (8004244 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f003 0203 	and.w	r2, r3, #3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d10d      	bne.n	80040aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
       ||
 8004092:	2b00      	cmp	r3, #0
 8004094:	d009      	beq.n	80040aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004096:	4b6b      	ldr	r3, [pc, #428]	@ (8004244 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	091b      	lsrs	r3, r3, #4
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
       ||
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d047      	beq.n	800413a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	73fb      	strb	r3, [r7, #15]
 80040ae:	e044      	b.n	800413a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d018      	beq.n	80040ea <RCCEx_PLLSAI1_Config+0x86>
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d825      	bhi.n	8004108 <RCCEx_PLLSAI1_Config+0xa4>
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d002      	beq.n	80040c6 <RCCEx_PLLSAI1_Config+0x62>
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d009      	beq.n	80040d8 <RCCEx_PLLSAI1_Config+0x74>
 80040c4:	e020      	b.n	8004108 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040c6:	4b5f      	ldr	r3, [pc, #380]	@ (8004244 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d11d      	bne.n	800410e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040d6:	e01a      	b.n	800410e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040d8:	4b5a      	ldr	r3, [pc, #360]	@ (8004244 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d116      	bne.n	8004112 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040e8:	e013      	b.n	8004112 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040ea:	4b56      	ldr	r3, [pc, #344]	@ (8004244 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10f      	bne.n	8004116 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040f6:	4b53      	ldr	r3, [pc, #332]	@ (8004244 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d109      	bne.n	8004116 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004106:	e006      	b.n	8004116 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	73fb      	strb	r3, [r7, #15]
      break;
 800410c:	e004      	b.n	8004118 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800410e:	bf00      	nop
 8004110:	e002      	b.n	8004118 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004112:	bf00      	nop
 8004114:	e000      	b.n	8004118 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004116:	bf00      	nop
    }

    if(status == HAL_OK)
 8004118:	7bfb      	ldrb	r3, [r7, #15]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10d      	bne.n	800413a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800411e:	4b49      	ldr	r3, [pc, #292]	@ (8004244 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6819      	ldr	r1, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	3b01      	subs	r3, #1
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	430b      	orrs	r3, r1
 8004134:	4943      	ldr	r1, [pc, #268]	@ (8004244 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004136:	4313      	orrs	r3, r2
 8004138:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800413a:	7bfb      	ldrb	r3, [r7, #15]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d17c      	bne.n	800423a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004140:	4b40      	ldr	r3, [pc, #256]	@ (8004244 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a3f      	ldr	r2, [pc, #252]	@ (8004244 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004146:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800414a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800414c:	f7fd fbd2 	bl	80018f4 <HAL_GetTick>
 8004150:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004152:	e009      	b.n	8004168 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004154:	f7fd fbce 	bl	80018f4 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d902      	bls.n	8004168 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	73fb      	strb	r3, [r7, #15]
        break;
 8004166:	e005      	b.n	8004174 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004168:	4b36      	ldr	r3, [pc, #216]	@ (8004244 <RCCEx_PLLSAI1_Config+0x1e0>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1ef      	bne.n	8004154 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004174:	7bfb      	ldrb	r3, [r7, #15]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d15f      	bne.n	800423a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d110      	bne.n	80041a2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004180:	4b30      	ldr	r3, [pc, #192]	@ (8004244 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004188:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6892      	ldr	r2, [r2, #8]
 8004190:	0211      	lsls	r1, r2, #8
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	68d2      	ldr	r2, [r2, #12]
 8004196:	06d2      	lsls	r2, r2, #27
 8004198:	430a      	orrs	r2, r1
 800419a:	492a      	ldr	r1, [pc, #168]	@ (8004244 <RCCEx_PLLSAI1_Config+0x1e0>)
 800419c:	4313      	orrs	r3, r2
 800419e:	610b      	str	r3, [r1, #16]
 80041a0:	e027      	b.n	80041f2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d112      	bne.n	80041ce <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041a8:	4b26      	ldr	r3, [pc, #152]	@ (8004244 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80041b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6892      	ldr	r2, [r2, #8]
 80041b8:	0211      	lsls	r1, r2, #8
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	6912      	ldr	r2, [r2, #16]
 80041be:	0852      	lsrs	r2, r2, #1
 80041c0:	3a01      	subs	r2, #1
 80041c2:	0552      	lsls	r2, r2, #21
 80041c4:	430a      	orrs	r2, r1
 80041c6:	491f      	ldr	r1, [pc, #124]	@ (8004244 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	610b      	str	r3, [r1, #16]
 80041cc:	e011      	b.n	80041f2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004244 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80041d6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6892      	ldr	r2, [r2, #8]
 80041de:	0211      	lsls	r1, r2, #8
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6952      	ldr	r2, [r2, #20]
 80041e4:	0852      	lsrs	r2, r2, #1
 80041e6:	3a01      	subs	r2, #1
 80041e8:	0652      	lsls	r2, r2, #25
 80041ea:	430a      	orrs	r2, r1
 80041ec:	4915      	ldr	r1, [pc, #84]	@ (8004244 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041f2:	4b14      	ldr	r3, [pc, #80]	@ (8004244 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a13      	ldr	r2, [pc, #76]	@ (8004244 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80041fc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fe:	f7fd fb79 	bl	80018f4 <HAL_GetTick>
 8004202:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004204:	e009      	b.n	800421a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004206:	f7fd fb75 	bl	80018f4 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d902      	bls.n	800421a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	73fb      	strb	r3, [r7, #15]
          break;
 8004218:	e005      	b.n	8004226 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800421a:	4b0a      	ldr	r3, [pc, #40]	@ (8004244 <RCCEx_PLLSAI1_Config+0x1e0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0ef      	beq.n	8004206 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d106      	bne.n	800423a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800422c:	4b05      	ldr	r3, [pc, #20]	@ (8004244 <RCCEx_PLLSAI1_Config+0x1e0>)
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	4903      	ldr	r1, [pc, #12]	@ (8004244 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004236:	4313      	orrs	r3, r2
 8004238:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800423a:	7bfb      	ldrb	r3, [r7, #15]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40021000 	.word	0x40021000

08004248 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004256:	4b69      	ldr	r3, [pc, #420]	@ (80043fc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d018      	beq.n	8004294 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004262:	4b66      	ldr	r3, [pc, #408]	@ (80043fc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f003 0203 	and.w	r2, r3, #3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d10d      	bne.n	800428e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
       ||
 8004276:	2b00      	cmp	r3, #0
 8004278:	d009      	beq.n	800428e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800427a:	4b60      	ldr	r3, [pc, #384]	@ (80043fc <RCCEx_PLLSAI2_Config+0x1b4>)
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	091b      	lsrs	r3, r3, #4
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
       ||
 800428a:	429a      	cmp	r2, r3
 800428c:	d047      	beq.n	800431e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	73fb      	strb	r3, [r7, #15]
 8004292:	e044      	b.n	800431e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b03      	cmp	r3, #3
 800429a:	d018      	beq.n	80042ce <RCCEx_PLLSAI2_Config+0x86>
 800429c:	2b03      	cmp	r3, #3
 800429e:	d825      	bhi.n	80042ec <RCCEx_PLLSAI2_Config+0xa4>
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d002      	beq.n	80042aa <RCCEx_PLLSAI2_Config+0x62>
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d009      	beq.n	80042bc <RCCEx_PLLSAI2_Config+0x74>
 80042a8:	e020      	b.n	80042ec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042aa:	4b54      	ldr	r3, [pc, #336]	@ (80043fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d11d      	bne.n	80042f2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042ba:	e01a      	b.n	80042f2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042bc:	4b4f      	ldr	r3, [pc, #316]	@ (80043fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d116      	bne.n	80042f6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042cc:	e013      	b.n	80042f6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042ce:	4b4b      	ldr	r3, [pc, #300]	@ (80043fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10f      	bne.n	80042fa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042da:	4b48      	ldr	r3, [pc, #288]	@ (80043fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d109      	bne.n	80042fa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042ea:	e006      	b.n	80042fa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	73fb      	strb	r3, [r7, #15]
      break;
 80042f0:	e004      	b.n	80042fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042f2:	bf00      	nop
 80042f4:	e002      	b.n	80042fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042f6:	bf00      	nop
 80042f8:	e000      	b.n	80042fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10d      	bne.n	800431e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004302:	4b3e      	ldr	r3, [pc, #248]	@ (80043fc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6819      	ldr	r1, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	3b01      	subs	r3, #1
 8004314:	011b      	lsls	r3, r3, #4
 8004316:	430b      	orrs	r3, r1
 8004318:	4938      	ldr	r1, [pc, #224]	@ (80043fc <RCCEx_PLLSAI2_Config+0x1b4>)
 800431a:	4313      	orrs	r3, r2
 800431c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800431e:	7bfb      	ldrb	r3, [r7, #15]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d166      	bne.n	80043f2 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004324:	4b35      	ldr	r3, [pc, #212]	@ (80043fc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a34      	ldr	r2, [pc, #208]	@ (80043fc <RCCEx_PLLSAI2_Config+0x1b4>)
 800432a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800432e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004330:	f7fd fae0 	bl	80018f4 <HAL_GetTick>
 8004334:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004336:	e009      	b.n	800434c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004338:	f7fd fadc 	bl	80018f4 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d902      	bls.n	800434c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	73fb      	strb	r3, [r7, #15]
        break;
 800434a:	e005      	b.n	8004358 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800434c:	4b2b      	ldr	r3, [pc, #172]	@ (80043fc <RCCEx_PLLSAI2_Config+0x1b4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1ef      	bne.n	8004338 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004358:	7bfb      	ldrb	r3, [r7, #15]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d149      	bne.n	80043f2 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d110      	bne.n	8004386 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004364:	4b25      	ldr	r3, [pc, #148]	@ (80043fc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800436c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6892      	ldr	r2, [r2, #8]
 8004374:	0211      	lsls	r1, r2, #8
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	68d2      	ldr	r2, [r2, #12]
 800437a:	06d2      	lsls	r2, r2, #27
 800437c:	430a      	orrs	r2, r1
 800437e:	491f      	ldr	r1, [pc, #124]	@ (80043fc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004380:	4313      	orrs	r3, r2
 8004382:	614b      	str	r3, [r1, #20]
 8004384:	e011      	b.n	80043aa <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004386:	4b1d      	ldr	r3, [pc, #116]	@ (80043fc <RCCEx_PLLSAI2_Config+0x1b4>)
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800438e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6892      	ldr	r2, [r2, #8]
 8004396:	0211      	lsls	r1, r2, #8
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6912      	ldr	r2, [r2, #16]
 800439c:	0852      	lsrs	r2, r2, #1
 800439e:	3a01      	subs	r2, #1
 80043a0:	0652      	lsls	r2, r2, #25
 80043a2:	430a      	orrs	r2, r1
 80043a4:	4915      	ldr	r1, [pc, #84]	@ (80043fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80043aa:	4b14      	ldr	r3, [pc, #80]	@ (80043fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a13      	ldr	r2, [pc, #76]	@ (80043fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80043b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043b4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b6:	f7fd fa9d 	bl	80018f4 <HAL_GetTick>
 80043ba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043bc:	e009      	b.n	80043d2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043be:	f7fd fa99 	bl	80018f4 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d902      	bls.n	80043d2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	73fb      	strb	r3, [r7, #15]
          break;
 80043d0:	e005      	b.n	80043de <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043d2:	4b0a      	ldr	r3, [pc, #40]	@ (80043fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0ef      	beq.n	80043be <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80043de:	7bfb      	ldrb	r3, [r7, #15]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d106      	bne.n	80043f2 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80043e4:	4b05      	ldr	r3, [pc, #20]	@ (80043fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80043e6:	695a      	ldr	r2, [r3, #20]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	4903      	ldr	r1, [pc, #12]	@ (80043fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40021000 	.word	0x40021000

08004400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e040      	b.n	8004494 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7fd f81a 	bl	800145c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2224      	movs	r2, #36	@ 0x24
 800442c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0201 	bic.w	r2, r2, #1
 800443c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fb6a 	bl	8004b20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f8af 	bl	80045b0 <UART_SetConfig>
 8004452:	4603      	mov	r3, r0
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e01b      	b.n	8004494 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800446a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800447a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0201 	orr.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 fbe9 	bl	8004c64 <UART_CheckIdleState>
 8004492:	4603      	mov	r3, r0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08a      	sub	sp, #40	@ 0x28
 80044a0:	af02      	add	r7, sp, #8
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	4613      	mov	r3, r2
 80044aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	d177      	bne.n	80045a4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <HAL_UART_Transmit+0x24>
 80044ba:	88fb      	ldrh	r3, [r7, #6]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e070      	b.n	80045a6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2221      	movs	r2, #33	@ 0x21
 80044d0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044d2:	f7fd fa0f 	bl	80018f4 <HAL_GetTick>
 80044d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	88fa      	ldrh	r2, [r7, #6]
 80044dc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	88fa      	ldrh	r2, [r7, #6]
 80044e4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044f0:	d108      	bne.n	8004504 <HAL_UART_Transmit+0x68>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d104      	bne.n	8004504 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	61bb      	str	r3, [r7, #24]
 8004502:	e003      	b.n	800450c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004508:	2300      	movs	r3, #0
 800450a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800450c:	e02f      	b.n	800456e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2200      	movs	r2, #0
 8004516:	2180      	movs	r1, #128	@ 0x80
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 fc4b 	bl	8004db4 <UART_WaitOnFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d004      	beq.n	800452e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2220      	movs	r2, #32
 8004528:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e03b      	b.n	80045a6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10b      	bne.n	800454c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	881a      	ldrh	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004540:	b292      	uxth	r2, r2
 8004542:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	3302      	adds	r3, #2
 8004548:	61bb      	str	r3, [r7, #24]
 800454a:	e007      	b.n	800455c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	781a      	ldrb	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	3301      	adds	r3, #1
 800455a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004562:	b29b      	uxth	r3, r3
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1c9      	bne.n	800450e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2200      	movs	r2, #0
 8004582:	2140      	movs	r1, #64	@ 0x40
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 fc15 	bl	8004db4 <UART_WaitOnFlagUntilTimeout>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d004      	beq.n	800459a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2220      	movs	r2, #32
 8004594:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e005      	b.n	80045a6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2220      	movs	r2, #32
 800459e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	e000      	b.n	80045a6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80045a4:	2302      	movs	r3, #2
  }
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3720      	adds	r7, #32
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045b4:	b08a      	sub	sp, #40	@ 0x28
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	431a      	orrs	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	4ba4      	ldr	r3, [pc, #656]	@ (8004870 <UART_SetConfig+0x2c0>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	6812      	ldr	r2, [r2, #0]
 80045e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045e8:	430b      	orrs	r3, r1
 80045ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a99      	ldr	r2, [pc, #612]	@ (8004874 <UART_SetConfig+0x2c4>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d004      	beq.n	800461c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004618:	4313      	orrs	r3, r2
 800461a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800462c:	430a      	orrs	r2, r1
 800462e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a90      	ldr	r2, [pc, #576]	@ (8004878 <UART_SetConfig+0x2c8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d126      	bne.n	8004688 <UART_SetConfig+0xd8>
 800463a:	4b90      	ldr	r3, [pc, #576]	@ (800487c <UART_SetConfig+0x2cc>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004640:	f003 0303 	and.w	r3, r3, #3
 8004644:	2b03      	cmp	r3, #3
 8004646:	d81b      	bhi.n	8004680 <UART_SetConfig+0xd0>
 8004648:	a201      	add	r2, pc, #4	@ (adr r2, 8004650 <UART_SetConfig+0xa0>)
 800464a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464e:	bf00      	nop
 8004650:	08004661 	.word	0x08004661
 8004654:	08004671 	.word	0x08004671
 8004658:	08004669 	.word	0x08004669
 800465c:	08004679 	.word	0x08004679
 8004660:	2301      	movs	r3, #1
 8004662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004666:	e116      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004668:	2302      	movs	r3, #2
 800466a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800466e:	e112      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004670:	2304      	movs	r3, #4
 8004672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004676:	e10e      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004678:	2308      	movs	r3, #8
 800467a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800467e:	e10a      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004680:	2310      	movs	r3, #16
 8004682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004686:	e106      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a7c      	ldr	r2, [pc, #496]	@ (8004880 <UART_SetConfig+0x2d0>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d138      	bne.n	8004704 <UART_SetConfig+0x154>
 8004692:	4b7a      	ldr	r3, [pc, #488]	@ (800487c <UART_SetConfig+0x2cc>)
 8004694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004698:	f003 030c 	and.w	r3, r3, #12
 800469c:	2b0c      	cmp	r3, #12
 800469e:	d82d      	bhi.n	80046fc <UART_SetConfig+0x14c>
 80046a0:	a201      	add	r2, pc, #4	@ (adr r2, 80046a8 <UART_SetConfig+0xf8>)
 80046a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a6:	bf00      	nop
 80046a8:	080046dd 	.word	0x080046dd
 80046ac:	080046fd 	.word	0x080046fd
 80046b0:	080046fd 	.word	0x080046fd
 80046b4:	080046fd 	.word	0x080046fd
 80046b8:	080046ed 	.word	0x080046ed
 80046bc:	080046fd 	.word	0x080046fd
 80046c0:	080046fd 	.word	0x080046fd
 80046c4:	080046fd 	.word	0x080046fd
 80046c8:	080046e5 	.word	0x080046e5
 80046cc:	080046fd 	.word	0x080046fd
 80046d0:	080046fd 	.word	0x080046fd
 80046d4:	080046fd 	.word	0x080046fd
 80046d8:	080046f5 	.word	0x080046f5
 80046dc:	2300      	movs	r3, #0
 80046de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046e2:	e0d8      	b.n	8004896 <UART_SetConfig+0x2e6>
 80046e4:	2302      	movs	r3, #2
 80046e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ea:	e0d4      	b.n	8004896 <UART_SetConfig+0x2e6>
 80046ec:	2304      	movs	r3, #4
 80046ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046f2:	e0d0      	b.n	8004896 <UART_SetConfig+0x2e6>
 80046f4:	2308      	movs	r3, #8
 80046f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046fa:	e0cc      	b.n	8004896 <UART_SetConfig+0x2e6>
 80046fc:	2310      	movs	r3, #16
 80046fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004702:	e0c8      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a5e      	ldr	r2, [pc, #376]	@ (8004884 <UART_SetConfig+0x2d4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d125      	bne.n	800475a <UART_SetConfig+0x1aa>
 800470e:	4b5b      	ldr	r3, [pc, #364]	@ (800487c <UART_SetConfig+0x2cc>)
 8004710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004714:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004718:	2b30      	cmp	r3, #48	@ 0x30
 800471a:	d016      	beq.n	800474a <UART_SetConfig+0x19a>
 800471c:	2b30      	cmp	r3, #48	@ 0x30
 800471e:	d818      	bhi.n	8004752 <UART_SetConfig+0x1a2>
 8004720:	2b20      	cmp	r3, #32
 8004722:	d00a      	beq.n	800473a <UART_SetConfig+0x18a>
 8004724:	2b20      	cmp	r3, #32
 8004726:	d814      	bhi.n	8004752 <UART_SetConfig+0x1a2>
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <UART_SetConfig+0x182>
 800472c:	2b10      	cmp	r3, #16
 800472e:	d008      	beq.n	8004742 <UART_SetConfig+0x192>
 8004730:	e00f      	b.n	8004752 <UART_SetConfig+0x1a2>
 8004732:	2300      	movs	r3, #0
 8004734:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004738:	e0ad      	b.n	8004896 <UART_SetConfig+0x2e6>
 800473a:	2302      	movs	r3, #2
 800473c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004740:	e0a9      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004742:	2304      	movs	r3, #4
 8004744:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004748:	e0a5      	b.n	8004896 <UART_SetConfig+0x2e6>
 800474a:	2308      	movs	r3, #8
 800474c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004750:	e0a1      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004752:	2310      	movs	r3, #16
 8004754:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004758:	e09d      	b.n	8004896 <UART_SetConfig+0x2e6>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a4a      	ldr	r2, [pc, #296]	@ (8004888 <UART_SetConfig+0x2d8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d125      	bne.n	80047b0 <UART_SetConfig+0x200>
 8004764:	4b45      	ldr	r3, [pc, #276]	@ (800487c <UART_SetConfig+0x2cc>)
 8004766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800476e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004770:	d016      	beq.n	80047a0 <UART_SetConfig+0x1f0>
 8004772:	2bc0      	cmp	r3, #192	@ 0xc0
 8004774:	d818      	bhi.n	80047a8 <UART_SetConfig+0x1f8>
 8004776:	2b80      	cmp	r3, #128	@ 0x80
 8004778:	d00a      	beq.n	8004790 <UART_SetConfig+0x1e0>
 800477a:	2b80      	cmp	r3, #128	@ 0x80
 800477c:	d814      	bhi.n	80047a8 <UART_SetConfig+0x1f8>
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <UART_SetConfig+0x1d8>
 8004782:	2b40      	cmp	r3, #64	@ 0x40
 8004784:	d008      	beq.n	8004798 <UART_SetConfig+0x1e8>
 8004786:	e00f      	b.n	80047a8 <UART_SetConfig+0x1f8>
 8004788:	2300      	movs	r3, #0
 800478a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800478e:	e082      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004790:	2302      	movs	r3, #2
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004796:	e07e      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004798:	2304      	movs	r3, #4
 800479a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800479e:	e07a      	b.n	8004896 <UART_SetConfig+0x2e6>
 80047a0:	2308      	movs	r3, #8
 80047a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047a6:	e076      	b.n	8004896 <UART_SetConfig+0x2e6>
 80047a8:	2310      	movs	r3, #16
 80047aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ae:	e072      	b.n	8004896 <UART_SetConfig+0x2e6>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a35      	ldr	r2, [pc, #212]	@ (800488c <UART_SetConfig+0x2dc>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d12a      	bne.n	8004810 <UART_SetConfig+0x260>
 80047ba:	4b30      	ldr	r3, [pc, #192]	@ (800487c <UART_SetConfig+0x2cc>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047c8:	d01a      	beq.n	8004800 <UART_SetConfig+0x250>
 80047ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047ce:	d81b      	bhi.n	8004808 <UART_SetConfig+0x258>
 80047d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047d4:	d00c      	beq.n	80047f0 <UART_SetConfig+0x240>
 80047d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047da:	d815      	bhi.n	8004808 <UART_SetConfig+0x258>
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <UART_SetConfig+0x238>
 80047e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047e4:	d008      	beq.n	80047f8 <UART_SetConfig+0x248>
 80047e6:	e00f      	b.n	8004808 <UART_SetConfig+0x258>
 80047e8:	2300      	movs	r3, #0
 80047ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ee:	e052      	b.n	8004896 <UART_SetConfig+0x2e6>
 80047f0:	2302      	movs	r3, #2
 80047f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047f6:	e04e      	b.n	8004896 <UART_SetConfig+0x2e6>
 80047f8:	2304      	movs	r3, #4
 80047fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047fe:	e04a      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004800:	2308      	movs	r3, #8
 8004802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004806:	e046      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004808:	2310      	movs	r3, #16
 800480a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800480e:	e042      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a17      	ldr	r2, [pc, #92]	@ (8004874 <UART_SetConfig+0x2c4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d13a      	bne.n	8004890 <UART_SetConfig+0x2e0>
 800481a:	4b18      	ldr	r3, [pc, #96]	@ (800487c <UART_SetConfig+0x2cc>)
 800481c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004820:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004824:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004828:	d01a      	beq.n	8004860 <UART_SetConfig+0x2b0>
 800482a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800482e:	d81b      	bhi.n	8004868 <UART_SetConfig+0x2b8>
 8004830:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004834:	d00c      	beq.n	8004850 <UART_SetConfig+0x2a0>
 8004836:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800483a:	d815      	bhi.n	8004868 <UART_SetConfig+0x2b8>
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <UART_SetConfig+0x298>
 8004840:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004844:	d008      	beq.n	8004858 <UART_SetConfig+0x2a8>
 8004846:	e00f      	b.n	8004868 <UART_SetConfig+0x2b8>
 8004848:	2300      	movs	r3, #0
 800484a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800484e:	e022      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004850:	2302      	movs	r3, #2
 8004852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004856:	e01e      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004858:	2304      	movs	r3, #4
 800485a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800485e:	e01a      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004860:	2308      	movs	r3, #8
 8004862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004866:	e016      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004868:	2310      	movs	r3, #16
 800486a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800486e:	e012      	b.n	8004896 <UART_SetConfig+0x2e6>
 8004870:	efff69f3 	.word	0xefff69f3
 8004874:	40008000 	.word	0x40008000
 8004878:	40013800 	.word	0x40013800
 800487c:	40021000 	.word	0x40021000
 8004880:	40004400 	.word	0x40004400
 8004884:	40004800 	.word	0x40004800
 8004888:	40004c00 	.word	0x40004c00
 800488c:	40005000 	.word	0x40005000
 8004890:	2310      	movs	r3, #16
 8004892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a9f      	ldr	r2, [pc, #636]	@ (8004b18 <UART_SetConfig+0x568>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d17a      	bne.n	8004996 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d824      	bhi.n	80048f2 <UART_SetConfig+0x342>
 80048a8:	a201      	add	r2, pc, #4	@ (adr r2, 80048b0 <UART_SetConfig+0x300>)
 80048aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ae:	bf00      	nop
 80048b0:	080048d5 	.word	0x080048d5
 80048b4:	080048f3 	.word	0x080048f3
 80048b8:	080048dd 	.word	0x080048dd
 80048bc:	080048f3 	.word	0x080048f3
 80048c0:	080048e3 	.word	0x080048e3
 80048c4:	080048f3 	.word	0x080048f3
 80048c8:	080048f3 	.word	0x080048f3
 80048cc:	080048f3 	.word	0x080048f3
 80048d0:	080048eb 	.word	0x080048eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048d4:	f7ff f82e 	bl	8003934 <HAL_RCC_GetPCLK1Freq>
 80048d8:	61f8      	str	r0, [r7, #28]
        break;
 80048da:	e010      	b.n	80048fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048dc:	4b8f      	ldr	r3, [pc, #572]	@ (8004b1c <UART_SetConfig+0x56c>)
 80048de:	61fb      	str	r3, [r7, #28]
        break;
 80048e0:	e00d      	b.n	80048fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048e2:	f7fe ff8f 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 80048e6:	61f8      	str	r0, [r7, #28]
        break;
 80048e8:	e009      	b.n	80048fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048ee:	61fb      	str	r3, [r7, #28]
        break;
 80048f0:	e005      	b.n	80048fe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80048fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 80fb 	beq.w	8004afc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	4613      	mov	r3, r2
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	4413      	add	r3, r2
 8004910:	69fa      	ldr	r2, [r7, #28]
 8004912:	429a      	cmp	r2, r3
 8004914:	d305      	bcc.n	8004922 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800491c:	69fa      	ldr	r2, [r7, #28]
 800491e:	429a      	cmp	r2, r3
 8004920:	d903      	bls.n	800492a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004928:	e0e8      	b.n	8004afc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	2200      	movs	r2, #0
 800492e:	461c      	mov	r4, r3
 8004930:	4615      	mov	r5, r2
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	f04f 0300 	mov.w	r3, #0
 800493a:	022b      	lsls	r3, r5, #8
 800493c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004940:	0222      	lsls	r2, r4, #8
 8004942:	68f9      	ldr	r1, [r7, #12]
 8004944:	6849      	ldr	r1, [r1, #4]
 8004946:	0849      	lsrs	r1, r1, #1
 8004948:	2000      	movs	r0, #0
 800494a:	4688      	mov	r8, r1
 800494c:	4681      	mov	r9, r0
 800494e:	eb12 0a08 	adds.w	sl, r2, r8
 8004952:	eb43 0b09 	adc.w	fp, r3, r9
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	603b      	str	r3, [r7, #0]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004964:	4650      	mov	r0, sl
 8004966:	4659      	mov	r1, fp
 8004968:	f7fc f8b8 	bl	8000adc <__aeabi_uldivmod>
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	4613      	mov	r3, r2
 8004972:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800497a:	d308      	bcc.n	800498e <UART_SetConfig+0x3de>
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004982:	d204      	bcs.n	800498e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	60da      	str	r2, [r3, #12]
 800498c:	e0b6      	b.n	8004afc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004994:	e0b2      	b.n	8004afc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800499e:	d15e      	bne.n	8004a5e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80049a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d828      	bhi.n	80049fa <UART_SetConfig+0x44a>
 80049a8:	a201      	add	r2, pc, #4	@ (adr r2, 80049b0 <UART_SetConfig+0x400>)
 80049aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ae:	bf00      	nop
 80049b0:	080049d5 	.word	0x080049d5
 80049b4:	080049dd 	.word	0x080049dd
 80049b8:	080049e5 	.word	0x080049e5
 80049bc:	080049fb 	.word	0x080049fb
 80049c0:	080049eb 	.word	0x080049eb
 80049c4:	080049fb 	.word	0x080049fb
 80049c8:	080049fb 	.word	0x080049fb
 80049cc:	080049fb 	.word	0x080049fb
 80049d0:	080049f3 	.word	0x080049f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049d4:	f7fe ffae 	bl	8003934 <HAL_RCC_GetPCLK1Freq>
 80049d8:	61f8      	str	r0, [r7, #28]
        break;
 80049da:	e014      	b.n	8004a06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049dc:	f7fe ffc0 	bl	8003960 <HAL_RCC_GetPCLK2Freq>
 80049e0:	61f8      	str	r0, [r7, #28]
        break;
 80049e2:	e010      	b.n	8004a06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049e4:	4b4d      	ldr	r3, [pc, #308]	@ (8004b1c <UART_SetConfig+0x56c>)
 80049e6:	61fb      	str	r3, [r7, #28]
        break;
 80049e8:	e00d      	b.n	8004a06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ea:	f7fe ff0b 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 80049ee:	61f8      	str	r0, [r7, #28]
        break;
 80049f0:	e009      	b.n	8004a06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049f6:	61fb      	str	r3, [r7, #28]
        break;
 80049f8:	e005      	b.n	8004a06 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d077      	beq.n	8004afc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	005a      	lsls	r2, r3, #1
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	085b      	lsrs	r3, r3, #1
 8004a16:	441a      	add	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a20:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2b0f      	cmp	r3, #15
 8004a26:	d916      	bls.n	8004a56 <UART_SetConfig+0x4a6>
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a2e:	d212      	bcs.n	8004a56 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	f023 030f 	bic.w	r3, r3, #15
 8004a38:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	085b      	lsrs	r3, r3, #1
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	8afb      	ldrh	r3, [r7, #22]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	8afa      	ldrh	r2, [r7, #22]
 8004a52:	60da      	str	r2, [r3, #12]
 8004a54:	e052      	b.n	8004afc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a5c:	e04e      	b.n	8004afc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d827      	bhi.n	8004ab6 <UART_SetConfig+0x506>
 8004a66:	a201      	add	r2, pc, #4	@ (adr r2, 8004a6c <UART_SetConfig+0x4bc>)
 8004a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6c:	08004a91 	.word	0x08004a91
 8004a70:	08004a99 	.word	0x08004a99
 8004a74:	08004aa1 	.word	0x08004aa1
 8004a78:	08004ab7 	.word	0x08004ab7
 8004a7c:	08004aa7 	.word	0x08004aa7
 8004a80:	08004ab7 	.word	0x08004ab7
 8004a84:	08004ab7 	.word	0x08004ab7
 8004a88:	08004ab7 	.word	0x08004ab7
 8004a8c:	08004aaf 	.word	0x08004aaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a90:	f7fe ff50 	bl	8003934 <HAL_RCC_GetPCLK1Freq>
 8004a94:	61f8      	str	r0, [r7, #28]
        break;
 8004a96:	e014      	b.n	8004ac2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a98:	f7fe ff62 	bl	8003960 <HAL_RCC_GetPCLK2Freq>
 8004a9c:	61f8      	str	r0, [r7, #28]
        break;
 8004a9e:	e010      	b.n	8004ac2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8004b1c <UART_SetConfig+0x56c>)
 8004aa2:	61fb      	str	r3, [r7, #28]
        break;
 8004aa4:	e00d      	b.n	8004ac2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aa6:	f7fe fead 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 8004aaa:	61f8      	str	r0, [r7, #28]
        break;
 8004aac:	e009      	b.n	8004ac2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ab2:	61fb      	str	r3, [r7, #28]
        break;
 8004ab4:	e005      	b.n	8004ac2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ac0:	bf00      	nop
    }

    if (pclk != 0U)
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d019      	beq.n	8004afc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	085a      	lsrs	r2, r3, #1
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	441a      	add	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ada:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	2b0f      	cmp	r3, #15
 8004ae0:	d909      	bls.n	8004af6 <UART_SetConfig+0x546>
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ae8:	d205      	bcs.n	8004af6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	60da      	str	r2, [r3, #12]
 8004af4:	e002      	b.n	8004afc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004b08:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3728      	adds	r7, #40	@ 0x28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b16:	bf00      	nop
 8004b18:	40008000 	.word	0x40008000
 8004b1c:	00f42400 	.word	0x00f42400

08004b20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2c:	f003 0308 	and.w	r3, r3, #8
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00a      	beq.n	8004b4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00a      	beq.n	8004b8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00a      	beq.n	8004bb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00a      	beq.n	8004bd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd6:	f003 0320 	and.w	r3, r3, #32
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d01a      	beq.n	8004c36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c1e:	d10a      	bne.n	8004c36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	605a      	str	r2, [r3, #4]
  }
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b098      	sub	sp, #96	@ 0x60
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c74:	f7fc fe3e 	bl	80018f4 <HAL_GetTick>
 8004c78:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d12e      	bne.n	8004ce6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c90:	2200      	movs	r2, #0
 8004c92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f88c 	bl	8004db4 <UART_WaitOnFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d021      	beq.n	8004ce6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004caa:	e853 3f00 	ldrex	r3, [r3]
 8004cae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cc2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cc8:	e841 2300 	strex	r3, r2, [r1]
 8004ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1e6      	bne.n	8004ca2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e062      	b.n	8004dac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	d149      	bne.n	8004d88 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cf4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f856 	bl	8004db4 <UART_WaitOnFlagUntilTimeout>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d03c      	beq.n	8004d88 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d16:	e853 3f00 	ldrex	r3, [r3]
 8004d1a:	623b      	str	r3, [r7, #32]
   return(result);
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e6      	bne.n	8004d0e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3308      	adds	r3, #8
 8004d46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	e853 3f00 	ldrex	r3, [r3]
 8004d4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0301 	bic.w	r3, r3, #1
 8004d56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3308      	adds	r3, #8
 8004d5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d60:	61fa      	str	r2, [r7, #28]
 8004d62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d64:	69b9      	ldr	r1, [r7, #24]
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	e841 2300 	strex	r3, r2, [r1]
 8004d6c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1e5      	bne.n	8004d40 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e011      	b.n	8004dac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3758      	adds	r7, #88	@ 0x58
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	603b      	str	r3, [r7, #0]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc4:	e04f      	b.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dcc:	d04b      	beq.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dce:	f7fc fd91 	bl	80018f4 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d302      	bcc.n	8004de4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e04e      	b.n	8004e86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d037      	beq.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2b80      	cmp	r3, #128	@ 0x80
 8004dfa:	d034      	beq.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b40      	cmp	r3, #64	@ 0x40
 8004e00:	d031      	beq.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	f003 0308 	and.w	r3, r3, #8
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d110      	bne.n	8004e32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2208      	movs	r2, #8
 8004e16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f000 f838 	bl	8004e8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2208      	movs	r2, #8
 8004e22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e029      	b.n	8004e86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e40:	d111      	bne.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f81e 	bl	8004e8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e00f      	b.n	8004e86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69da      	ldr	r2, [r3, #28]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	bf0c      	ite	eq
 8004e76:	2301      	moveq	r3, #1
 8004e78:	2300      	movne	r3, #0
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	79fb      	ldrb	r3, [r7, #7]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d0a0      	beq.n	8004dc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b095      	sub	sp, #84	@ 0x54
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e9e:	e853 3f00 	ldrex	r3, [r3]
 8004ea2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004eb6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004eba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ebc:	e841 2300 	strex	r3, r2, [r1]
 8004ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1e6      	bne.n	8004e96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3308      	adds	r3, #8
 8004ece:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	e853 3f00 	ldrex	r3, [r3]
 8004ed6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	f023 0301 	bic.w	r3, r3, #1
 8004ede:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3308      	adds	r3, #8
 8004ee6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ee8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004eea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ef0:	e841 2300 	strex	r3, r2, [r1]
 8004ef4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e5      	bne.n	8004ec8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d118      	bne.n	8004f36 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	e853 3f00 	ldrex	r3, [r3]
 8004f10:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	f023 0310 	bic.w	r3, r3, #16
 8004f18:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f22:	61bb      	str	r3, [r7, #24]
 8004f24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f26:	6979      	ldr	r1, [r7, #20]
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	e841 2300 	strex	r3, r2, [r1]
 8004f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1e6      	bne.n	8004f04 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f4a:	bf00      	nop
 8004f4c:	3754      	adds	r7, #84	@ 0x54
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f56:	b084      	sub	sp, #16
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	f107 001c 	add.w	r0, r7, #28
 8004f64:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 fa69 	bl	800544c <USB_CoreReset>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004f7e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f92:	e005      	b.n	8004fa0 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f98:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fac:	b004      	add	sp, #16
 8004fae:	4770      	bx	lr

08004fb0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f023 0201 	bic.w	r2, r3, #1
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b084      	sub	sp, #16
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	460b      	mov	r3, r1
 8004fdc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fee:	78fb      	ldrb	r3, [r7, #3]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d115      	bne.n	8005020 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005000:	200a      	movs	r0, #10
 8005002:	f7fc fc83 	bl	800190c <HAL_Delay>
      ms += 10U;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	330a      	adds	r3, #10
 800500a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 fa0f 	bl	8005430 <USB_GetMode>
 8005012:	4603      	mov	r3, r0
 8005014:	2b01      	cmp	r3, #1
 8005016:	d01e      	beq.n	8005056 <USB_SetCurrentMode+0x84>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2bc7      	cmp	r3, #199	@ 0xc7
 800501c:	d9f0      	bls.n	8005000 <USB_SetCurrentMode+0x2e>
 800501e:	e01a      	b.n	8005056 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005020:	78fb      	ldrb	r3, [r7, #3]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d115      	bne.n	8005052 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005032:	200a      	movs	r0, #10
 8005034:	f7fc fc6a 	bl	800190c <HAL_Delay>
      ms += 10U;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	330a      	adds	r3, #10
 800503c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f9f6 	bl	8005430 <USB_GetMode>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d005      	beq.n	8005056 <USB_SetCurrentMode+0x84>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2bc7      	cmp	r3, #199	@ 0xc7
 800504e:	d9f0      	bls.n	8005032 <USB_SetCurrentMode+0x60>
 8005050:	e001      	b.n	8005056 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e005      	b.n	8005062 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2bc8      	cmp	r3, #200	@ 0xc8
 800505a:	d101      	bne.n	8005060 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e000      	b.n	8005062 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800506c:	b084      	sub	sp, #16
 800506e:	b580      	push	{r7, lr}
 8005070:	b086      	sub	sp, #24
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800507a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005086:	2300      	movs	r3, #0
 8005088:	613b      	str	r3, [r7, #16]
 800508a:	e009      	b.n	80050a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	3340      	adds	r3, #64	@ 0x40
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	2200      	movs	r2, #0
 8005098:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	3301      	adds	r3, #1
 800509e:	613b      	str	r3, [r7, #16]
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	2b0e      	cmp	r3, #14
 80050a4:	d9f2      	bls.n	800508c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80050a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d11c      	bne.n	80050e8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050bc:	f043 0302 	orr.w	r3, r3, #2
 80050c0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	e005      	b.n	80050f4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80050fa:	461a      	mov	r2, r3
 80050fc:	2300      	movs	r3, #0
 80050fe:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005100:	2103      	movs	r1, #3
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f95a 	bl	80053bc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005108:	2110      	movs	r1, #16
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f8f6 	bl	80052fc <USB_FlushTxFifo>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f920 	bl	8005360 <USB_FlushRxFifo>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005130:	461a      	mov	r2, r3
 8005132:	2300      	movs	r3, #0
 8005134:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800513c:	461a      	mov	r2, r3
 800513e:	2300      	movs	r3, #0
 8005140:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005148:	461a      	mov	r2, r3
 800514a:	2300      	movs	r3, #0
 800514c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800514e:	2300      	movs	r3, #0
 8005150:	613b      	str	r3, [r7, #16]
 8005152:	e043      	b.n	80051dc <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005166:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800516a:	d118      	bne.n	800519e <USB_DevInit+0x132>
    {
      if (i == 0U)
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10a      	bne.n	8005188 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800517e:	461a      	mov	r2, r3
 8005180:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	e013      	b.n	80051b0 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005194:	461a      	mov	r2, r3
 8005196:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800519a:	6013      	str	r3, [r2, #0]
 800519c:	e008      	b.n	80051b0 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051aa:	461a      	mov	r2, r3
 80051ac:	2300      	movs	r3, #0
 80051ae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051bc:	461a      	mov	r2, r3
 80051be:	2300      	movs	r3, #0
 80051c0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051ce:	461a      	mov	r2, r3
 80051d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80051d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	3301      	adds	r3, #1
 80051da:	613b      	str	r3, [r7, #16]
 80051dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80051e0:	461a      	mov	r2, r3
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d3b5      	bcc.n	8005154 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051e8:	2300      	movs	r3, #0
 80051ea:	613b      	str	r3, [r7, #16]
 80051ec:	e043      	b.n	8005276 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005200:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005204:	d118      	bne.n	8005238 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10a      	bne.n	8005222 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005218:	461a      	mov	r2, r3
 800521a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800521e:	6013      	str	r3, [r2, #0]
 8005220:	e013      	b.n	800524a <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	4413      	add	r3, r2
 800522a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800522e:	461a      	mov	r2, r3
 8005230:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	e008      	b.n	800524a <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005244:	461a      	mov	r2, r3
 8005246:	2300      	movs	r3, #0
 8005248:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005256:	461a      	mov	r2, r3
 8005258:	2300      	movs	r3, #0
 800525a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005268:	461a      	mov	r2, r3
 800526a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800526e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	3301      	adds	r3, #1
 8005274:	613b      	str	r3, [r7, #16]
 8005276:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800527a:	461a      	mov	r2, r3
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	4293      	cmp	r3, r2
 8005280:	d3b5      	bcc.n	80051ee <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005294:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80052a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	f043 0210 	orr.w	r2, r3, #16
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	699a      	ldr	r2, [r3, #24]
 80052b4:	4b10      	ldr	r3, [pc, #64]	@ (80052f8 <USB_DevInit+0x28c>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d005      	beq.n	80052d0 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	f043 0208 	orr.w	r2, r3, #8
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052d0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d107      	bne.n	80052e8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052e0:	f043 0304 	orr.w	r3, r3, #4
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052f4:	b004      	add	sp, #16
 80052f6:	4770      	bx	lr
 80052f8:	803c3800 	.word	0x803c3800

080052fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	3301      	adds	r3, #1
 800530e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005316:	d901      	bls.n	800531c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e01b      	b.n	8005354 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	2b00      	cmp	r3, #0
 8005322:	daf2      	bge.n	800530a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	019b      	lsls	r3, r3, #6
 800532c:	f043 0220 	orr.w	r2, r3, #32
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	3301      	adds	r3, #1
 8005338:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005340:	d901      	bls.n	8005346 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e006      	b.n	8005354 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b20      	cmp	r3, #32
 8005350:	d0f0      	beq.n	8005334 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	3301      	adds	r3, #1
 8005370:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005378:	d901      	bls.n	800537e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e018      	b.n	80053b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	daf2      	bge.n	800536c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2210      	movs	r2, #16
 800538e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	3301      	adds	r3, #1
 8005394:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800539c:	d901      	bls.n	80053a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e006      	b.n	80053b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	f003 0310 	and.w	r3, r3, #16
 80053aa:	2b10      	cmp	r3, #16
 80053ac:	d0f0      	beq.n	8005390 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	460b      	mov	r3, r1
 80053c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	68f9      	ldr	r1, [r7, #12]
 80053d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053dc:	4313      	orrs	r3, r2
 80053de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b085      	sub	sp, #20
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005408:	f023 0303 	bic.w	r3, r3, #3
 800540c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800541c:	f043 0302 	orr.w	r3, r3, #2
 8005420:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	f003 0301 	and.w	r3, r3, #1
}
 8005440:	4618      	mov	r0, r3
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	3301      	adds	r3, #1
 800545c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005464:	d901      	bls.n	800546a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e01b      	b.n	80054a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	2b00      	cmp	r3, #0
 8005470:	daf2      	bge.n	8005458 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005472:	2300      	movs	r3, #0
 8005474:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f043 0201 	orr.w	r2, r3, #1
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	3301      	adds	r3, #1
 8005486:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800548e:	d901      	bls.n	8005494 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e006      	b.n	80054a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b01      	cmp	r3, #1
 800549e:	d0f0      	beq.n	8005482 <USB_CoreReset+0x36>

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
	...

080054b0 <siprintf>:
 80054b0:	b40e      	push	{r1, r2, r3}
 80054b2:	b500      	push	{lr}
 80054b4:	b09c      	sub	sp, #112	@ 0x70
 80054b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80054b8:	9002      	str	r0, [sp, #8]
 80054ba:	9006      	str	r0, [sp, #24]
 80054bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80054c0:	4809      	ldr	r0, [pc, #36]	@ (80054e8 <siprintf+0x38>)
 80054c2:	9107      	str	r1, [sp, #28]
 80054c4:	9104      	str	r1, [sp, #16]
 80054c6:	4909      	ldr	r1, [pc, #36]	@ (80054ec <siprintf+0x3c>)
 80054c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80054cc:	9105      	str	r1, [sp, #20]
 80054ce:	6800      	ldr	r0, [r0, #0]
 80054d0:	9301      	str	r3, [sp, #4]
 80054d2:	a902      	add	r1, sp, #8
 80054d4:	f000 f994 	bl	8005800 <_svfiprintf_r>
 80054d8:	9b02      	ldr	r3, [sp, #8]
 80054da:	2200      	movs	r2, #0
 80054dc:	701a      	strb	r2, [r3, #0]
 80054de:	b01c      	add	sp, #112	@ 0x70
 80054e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80054e4:	b003      	add	sp, #12
 80054e6:	4770      	bx	lr
 80054e8:	2000000c 	.word	0x2000000c
 80054ec:	ffff0208 	.word	0xffff0208

080054f0 <memset>:
 80054f0:	4402      	add	r2, r0
 80054f2:	4603      	mov	r3, r0
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d100      	bne.n	80054fa <memset+0xa>
 80054f8:	4770      	bx	lr
 80054fa:	f803 1b01 	strb.w	r1, [r3], #1
 80054fe:	e7f9      	b.n	80054f4 <memset+0x4>

08005500 <__errno>:
 8005500:	4b01      	ldr	r3, [pc, #4]	@ (8005508 <__errno+0x8>)
 8005502:	6818      	ldr	r0, [r3, #0]
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	2000000c 	.word	0x2000000c

0800550c <__libc_init_array>:
 800550c:	b570      	push	{r4, r5, r6, lr}
 800550e:	4d0d      	ldr	r5, [pc, #52]	@ (8005544 <__libc_init_array+0x38>)
 8005510:	4c0d      	ldr	r4, [pc, #52]	@ (8005548 <__libc_init_array+0x3c>)
 8005512:	1b64      	subs	r4, r4, r5
 8005514:	10a4      	asrs	r4, r4, #2
 8005516:	2600      	movs	r6, #0
 8005518:	42a6      	cmp	r6, r4
 800551a:	d109      	bne.n	8005530 <__libc_init_array+0x24>
 800551c:	4d0b      	ldr	r5, [pc, #44]	@ (800554c <__libc_init_array+0x40>)
 800551e:	4c0c      	ldr	r4, [pc, #48]	@ (8005550 <__libc_init_array+0x44>)
 8005520:	f000 fc66 	bl	8005df0 <_init>
 8005524:	1b64      	subs	r4, r4, r5
 8005526:	10a4      	asrs	r4, r4, #2
 8005528:	2600      	movs	r6, #0
 800552a:	42a6      	cmp	r6, r4
 800552c:	d105      	bne.n	800553a <__libc_init_array+0x2e>
 800552e:	bd70      	pop	{r4, r5, r6, pc}
 8005530:	f855 3b04 	ldr.w	r3, [r5], #4
 8005534:	4798      	blx	r3
 8005536:	3601      	adds	r6, #1
 8005538:	e7ee      	b.n	8005518 <__libc_init_array+0xc>
 800553a:	f855 3b04 	ldr.w	r3, [r5], #4
 800553e:	4798      	blx	r3
 8005540:	3601      	adds	r6, #1
 8005542:	e7f2      	b.n	800552a <__libc_init_array+0x1e>
 8005544:	08005ea4 	.word	0x08005ea4
 8005548:	08005ea4 	.word	0x08005ea4
 800554c:	08005ea4 	.word	0x08005ea4
 8005550:	08005ea8 	.word	0x08005ea8

08005554 <__retarget_lock_acquire_recursive>:
 8005554:	4770      	bx	lr

08005556 <__retarget_lock_release_recursive>:
 8005556:	4770      	bx	lr

08005558 <_free_r>:
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	4605      	mov	r5, r0
 800555c:	2900      	cmp	r1, #0
 800555e:	d041      	beq.n	80055e4 <_free_r+0x8c>
 8005560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005564:	1f0c      	subs	r4, r1, #4
 8005566:	2b00      	cmp	r3, #0
 8005568:	bfb8      	it	lt
 800556a:	18e4      	addlt	r4, r4, r3
 800556c:	f000 f8e0 	bl	8005730 <__malloc_lock>
 8005570:	4a1d      	ldr	r2, [pc, #116]	@ (80055e8 <_free_r+0x90>)
 8005572:	6813      	ldr	r3, [r2, #0]
 8005574:	b933      	cbnz	r3, 8005584 <_free_r+0x2c>
 8005576:	6063      	str	r3, [r4, #4]
 8005578:	6014      	str	r4, [r2, #0]
 800557a:	4628      	mov	r0, r5
 800557c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005580:	f000 b8dc 	b.w	800573c <__malloc_unlock>
 8005584:	42a3      	cmp	r3, r4
 8005586:	d908      	bls.n	800559a <_free_r+0x42>
 8005588:	6820      	ldr	r0, [r4, #0]
 800558a:	1821      	adds	r1, r4, r0
 800558c:	428b      	cmp	r3, r1
 800558e:	bf01      	itttt	eq
 8005590:	6819      	ldreq	r1, [r3, #0]
 8005592:	685b      	ldreq	r3, [r3, #4]
 8005594:	1809      	addeq	r1, r1, r0
 8005596:	6021      	streq	r1, [r4, #0]
 8005598:	e7ed      	b.n	8005576 <_free_r+0x1e>
 800559a:	461a      	mov	r2, r3
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	b10b      	cbz	r3, 80055a4 <_free_r+0x4c>
 80055a0:	42a3      	cmp	r3, r4
 80055a2:	d9fa      	bls.n	800559a <_free_r+0x42>
 80055a4:	6811      	ldr	r1, [r2, #0]
 80055a6:	1850      	adds	r0, r2, r1
 80055a8:	42a0      	cmp	r0, r4
 80055aa:	d10b      	bne.n	80055c4 <_free_r+0x6c>
 80055ac:	6820      	ldr	r0, [r4, #0]
 80055ae:	4401      	add	r1, r0
 80055b0:	1850      	adds	r0, r2, r1
 80055b2:	4283      	cmp	r3, r0
 80055b4:	6011      	str	r1, [r2, #0]
 80055b6:	d1e0      	bne.n	800557a <_free_r+0x22>
 80055b8:	6818      	ldr	r0, [r3, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	6053      	str	r3, [r2, #4]
 80055be:	4408      	add	r0, r1
 80055c0:	6010      	str	r0, [r2, #0]
 80055c2:	e7da      	b.n	800557a <_free_r+0x22>
 80055c4:	d902      	bls.n	80055cc <_free_r+0x74>
 80055c6:	230c      	movs	r3, #12
 80055c8:	602b      	str	r3, [r5, #0]
 80055ca:	e7d6      	b.n	800557a <_free_r+0x22>
 80055cc:	6820      	ldr	r0, [r4, #0]
 80055ce:	1821      	adds	r1, r4, r0
 80055d0:	428b      	cmp	r3, r1
 80055d2:	bf04      	itt	eq
 80055d4:	6819      	ldreq	r1, [r3, #0]
 80055d6:	685b      	ldreq	r3, [r3, #4]
 80055d8:	6063      	str	r3, [r4, #4]
 80055da:	bf04      	itt	eq
 80055dc:	1809      	addeq	r1, r1, r0
 80055de:	6021      	streq	r1, [r4, #0]
 80055e0:	6054      	str	r4, [r2, #4]
 80055e2:	e7ca      	b.n	800557a <_free_r+0x22>
 80055e4:	bd38      	pop	{r3, r4, r5, pc}
 80055e6:	bf00      	nop
 80055e8:	2000080c 	.word	0x2000080c

080055ec <sbrk_aligned>:
 80055ec:	b570      	push	{r4, r5, r6, lr}
 80055ee:	4e0f      	ldr	r6, [pc, #60]	@ (800562c <sbrk_aligned+0x40>)
 80055f0:	460c      	mov	r4, r1
 80055f2:	6831      	ldr	r1, [r6, #0]
 80055f4:	4605      	mov	r5, r0
 80055f6:	b911      	cbnz	r1, 80055fe <sbrk_aligned+0x12>
 80055f8:	f000 fba6 	bl	8005d48 <_sbrk_r>
 80055fc:	6030      	str	r0, [r6, #0]
 80055fe:	4621      	mov	r1, r4
 8005600:	4628      	mov	r0, r5
 8005602:	f000 fba1 	bl	8005d48 <_sbrk_r>
 8005606:	1c43      	adds	r3, r0, #1
 8005608:	d103      	bne.n	8005612 <sbrk_aligned+0x26>
 800560a:	f04f 34ff 	mov.w	r4, #4294967295
 800560e:	4620      	mov	r0, r4
 8005610:	bd70      	pop	{r4, r5, r6, pc}
 8005612:	1cc4      	adds	r4, r0, #3
 8005614:	f024 0403 	bic.w	r4, r4, #3
 8005618:	42a0      	cmp	r0, r4
 800561a:	d0f8      	beq.n	800560e <sbrk_aligned+0x22>
 800561c:	1a21      	subs	r1, r4, r0
 800561e:	4628      	mov	r0, r5
 8005620:	f000 fb92 	bl	8005d48 <_sbrk_r>
 8005624:	3001      	adds	r0, #1
 8005626:	d1f2      	bne.n	800560e <sbrk_aligned+0x22>
 8005628:	e7ef      	b.n	800560a <sbrk_aligned+0x1e>
 800562a:	bf00      	nop
 800562c:	20000808 	.word	0x20000808

08005630 <_malloc_r>:
 8005630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005634:	1ccd      	adds	r5, r1, #3
 8005636:	f025 0503 	bic.w	r5, r5, #3
 800563a:	3508      	adds	r5, #8
 800563c:	2d0c      	cmp	r5, #12
 800563e:	bf38      	it	cc
 8005640:	250c      	movcc	r5, #12
 8005642:	2d00      	cmp	r5, #0
 8005644:	4606      	mov	r6, r0
 8005646:	db01      	blt.n	800564c <_malloc_r+0x1c>
 8005648:	42a9      	cmp	r1, r5
 800564a:	d904      	bls.n	8005656 <_malloc_r+0x26>
 800564c:	230c      	movs	r3, #12
 800564e:	6033      	str	r3, [r6, #0]
 8005650:	2000      	movs	r0, #0
 8005652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005656:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800572c <_malloc_r+0xfc>
 800565a:	f000 f869 	bl	8005730 <__malloc_lock>
 800565e:	f8d8 3000 	ldr.w	r3, [r8]
 8005662:	461c      	mov	r4, r3
 8005664:	bb44      	cbnz	r4, 80056b8 <_malloc_r+0x88>
 8005666:	4629      	mov	r1, r5
 8005668:	4630      	mov	r0, r6
 800566a:	f7ff ffbf 	bl	80055ec <sbrk_aligned>
 800566e:	1c43      	adds	r3, r0, #1
 8005670:	4604      	mov	r4, r0
 8005672:	d158      	bne.n	8005726 <_malloc_r+0xf6>
 8005674:	f8d8 4000 	ldr.w	r4, [r8]
 8005678:	4627      	mov	r7, r4
 800567a:	2f00      	cmp	r7, #0
 800567c:	d143      	bne.n	8005706 <_malloc_r+0xd6>
 800567e:	2c00      	cmp	r4, #0
 8005680:	d04b      	beq.n	800571a <_malloc_r+0xea>
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	4639      	mov	r1, r7
 8005686:	4630      	mov	r0, r6
 8005688:	eb04 0903 	add.w	r9, r4, r3
 800568c:	f000 fb5c 	bl	8005d48 <_sbrk_r>
 8005690:	4581      	cmp	r9, r0
 8005692:	d142      	bne.n	800571a <_malloc_r+0xea>
 8005694:	6821      	ldr	r1, [r4, #0]
 8005696:	1a6d      	subs	r5, r5, r1
 8005698:	4629      	mov	r1, r5
 800569a:	4630      	mov	r0, r6
 800569c:	f7ff ffa6 	bl	80055ec <sbrk_aligned>
 80056a0:	3001      	adds	r0, #1
 80056a2:	d03a      	beq.n	800571a <_malloc_r+0xea>
 80056a4:	6823      	ldr	r3, [r4, #0]
 80056a6:	442b      	add	r3, r5
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	f8d8 3000 	ldr.w	r3, [r8]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	bb62      	cbnz	r2, 800570c <_malloc_r+0xdc>
 80056b2:	f8c8 7000 	str.w	r7, [r8]
 80056b6:	e00f      	b.n	80056d8 <_malloc_r+0xa8>
 80056b8:	6822      	ldr	r2, [r4, #0]
 80056ba:	1b52      	subs	r2, r2, r5
 80056bc:	d420      	bmi.n	8005700 <_malloc_r+0xd0>
 80056be:	2a0b      	cmp	r2, #11
 80056c0:	d917      	bls.n	80056f2 <_malloc_r+0xc2>
 80056c2:	1961      	adds	r1, r4, r5
 80056c4:	42a3      	cmp	r3, r4
 80056c6:	6025      	str	r5, [r4, #0]
 80056c8:	bf18      	it	ne
 80056ca:	6059      	strne	r1, [r3, #4]
 80056cc:	6863      	ldr	r3, [r4, #4]
 80056ce:	bf08      	it	eq
 80056d0:	f8c8 1000 	streq.w	r1, [r8]
 80056d4:	5162      	str	r2, [r4, r5]
 80056d6:	604b      	str	r3, [r1, #4]
 80056d8:	4630      	mov	r0, r6
 80056da:	f000 f82f 	bl	800573c <__malloc_unlock>
 80056de:	f104 000b 	add.w	r0, r4, #11
 80056e2:	1d23      	adds	r3, r4, #4
 80056e4:	f020 0007 	bic.w	r0, r0, #7
 80056e8:	1ac2      	subs	r2, r0, r3
 80056ea:	bf1c      	itt	ne
 80056ec:	1a1b      	subne	r3, r3, r0
 80056ee:	50a3      	strne	r3, [r4, r2]
 80056f0:	e7af      	b.n	8005652 <_malloc_r+0x22>
 80056f2:	6862      	ldr	r2, [r4, #4]
 80056f4:	42a3      	cmp	r3, r4
 80056f6:	bf0c      	ite	eq
 80056f8:	f8c8 2000 	streq.w	r2, [r8]
 80056fc:	605a      	strne	r2, [r3, #4]
 80056fe:	e7eb      	b.n	80056d8 <_malloc_r+0xa8>
 8005700:	4623      	mov	r3, r4
 8005702:	6864      	ldr	r4, [r4, #4]
 8005704:	e7ae      	b.n	8005664 <_malloc_r+0x34>
 8005706:	463c      	mov	r4, r7
 8005708:	687f      	ldr	r7, [r7, #4]
 800570a:	e7b6      	b.n	800567a <_malloc_r+0x4a>
 800570c:	461a      	mov	r2, r3
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	42a3      	cmp	r3, r4
 8005712:	d1fb      	bne.n	800570c <_malloc_r+0xdc>
 8005714:	2300      	movs	r3, #0
 8005716:	6053      	str	r3, [r2, #4]
 8005718:	e7de      	b.n	80056d8 <_malloc_r+0xa8>
 800571a:	230c      	movs	r3, #12
 800571c:	6033      	str	r3, [r6, #0]
 800571e:	4630      	mov	r0, r6
 8005720:	f000 f80c 	bl	800573c <__malloc_unlock>
 8005724:	e794      	b.n	8005650 <_malloc_r+0x20>
 8005726:	6005      	str	r5, [r0, #0]
 8005728:	e7d6      	b.n	80056d8 <_malloc_r+0xa8>
 800572a:	bf00      	nop
 800572c:	2000080c 	.word	0x2000080c

08005730 <__malloc_lock>:
 8005730:	4801      	ldr	r0, [pc, #4]	@ (8005738 <__malloc_lock+0x8>)
 8005732:	f7ff bf0f 	b.w	8005554 <__retarget_lock_acquire_recursive>
 8005736:	bf00      	nop
 8005738:	20000804 	.word	0x20000804

0800573c <__malloc_unlock>:
 800573c:	4801      	ldr	r0, [pc, #4]	@ (8005744 <__malloc_unlock+0x8>)
 800573e:	f7ff bf0a 	b.w	8005556 <__retarget_lock_release_recursive>
 8005742:	bf00      	nop
 8005744:	20000804 	.word	0x20000804

08005748 <__ssputs_r>:
 8005748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800574c:	688e      	ldr	r6, [r1, #8]
 800574e:	461f      	mov	r7, r3
 8005750:	42be      	cmp	r6, r7
 8005752:	680b      	ldr	r3, [r1, #0]
 8005754:	4682      	mov	sl, r0
 8005756:	460c      	mov	r4, r1
 8005758:	4690      	mov	r8, r2
 800575a:	d82d      	bhi.n	80057b8 <__ssputs_r+0x70>
 800575c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005760:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005764:	d026      	beq.n	80057b4 <__ssputs_r+0x6c>
 8005766:	6965      	ldr	r5, [r4, #20]
 8005768:	6909      	ldr	r1, [r1, #16]
 800576a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800576e:	eba3 0901 	sub.w	r9, r3, r1
 8005772:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005776:	1c7b      	adds	r3, r7, #1
 8005778:	444b      	add	r3, r9
 800577a:	106d      	asrs	r5, r5, #1
 800577c:	429d      	cmp	r5, r3
 800577e:	bf38      	it	cc
 8005780:	461d      	movcc	r5, r3
 8005782:	0553      	lsls	r3, r2, #21
 8005784:	d527      	bpl.n	80057d6 <__ssputs_r+0x8e>
 8005786:	4629      	mov	r1, r5
 8005788:	f7ff ff52 	bl	8005630 <_malloc_r>
 800578c:	4606      	mov	r6, r0
 800578e:	b360      	cbz	r0, 80057ea <__ssputs_r+0xa2>
 8005790:	6921      	ldr	r1, [r4, #16]
 8005792:	464a      	mov	r2, r9
 8005794:	f000 fae8 	bl	8005d68 <memcpy>
 8005798:	89a3      	ldrh	r3, [r4, #12]
 800579a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800579e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057a2:	81a3      	strh	r3, [r4, #12]
 80057a4:	6126      	str	r6, [r4, #16]
 80057a6:	6165      	str	r5, [r4, #20]
 80057a8:	444e      	add	r6, r9
 80057aa:	eba5 0509 	sub.w	r5, r5, r9
 80057ae:	6026      	str	r6, [r4, #0]
 80057b0:	60a5      	str	r5, [r4, #8]
 80057b2:	463e      	mov	r6, r7
 80057b4:	42be      	cmp	r6, r7
 80057b6:	d900      	bls.n	80057ba <__ssputs_r+0x72>
 80057b8:	463e      	mov	r6, r7
 80057ba:	6820      	ldr	r0, [r4, #0]
 80057bc:	4632      	mov	r2, r6
 80057be:	4641      	mov	r1, r8
 80057c0:	f000 faa8 	bl	8005d14 <memmove>
 80057c4:	68a3      	ldr	r3, [r4, #8]
 80057c6:	1b9b      	subs	r3, r3, r6
 80057c8:	60a3      	str	r3, [r4, #8]
 80057ca:	6823      	ldr	r3, [r4, #0]
 80057cc:	4433      	add	r3, r6
 80057ce:	6023      	str	r3, [r4, #0]
 80057d0:	2000      	movs	r0, #0
 80057d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d6:	462a      	mov	r2, r5
 80057d8:	f000 fad4 	bl	8005d84 <_realloc_r>
 80057dc:	4606      	mov	r6, r0
 80057de:	2800      	cmp	r0, #0
 80057e0:	d1e0      	bne.n	80057a4 <__ssputs_r+0x5c>
 80057e2:	6921      	ldr	r1, [r4, #16]
 80057e4:	4650      	mov	r0, sl
 80057e6:	f7ff feb7 	bl	8005558 <_free_r>
 80057ea:	230c      	movs	r3, #12
 80057ec:	f8ca 3000 	str.w	r3, [sl]
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057f6:	81a3      	strh	r3, [r4, #12]
 80057f8:	f04f 30ff 	mov.w	r0, #4294967295
 80057fc:	e7e9      	b.n	80057d2 <__ssputs_r+0x8a>
	...

08005800 <_svfiprintf_r>:
 8005800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005804:	4698      	mov	r8, r3
 8005806:	898b      	ldrh	r3, [r1, #12]
 8005808:	061b      	lsls	r3, r3, #24
 800580a:	b09d      	sub	sp, #116	@ 0x74
 800580c:	4607      	mov	r7, r0
 800580e:	460d      	mov	r5, r1
 8005810:	4614      	mov	r4, r2
 8005812:	d510      	bpl.n	8005836 <_svfiprintf_r+0x36>
 8005814:	690b      	ldr	r3, [r1, #16]
 8005816:	b973      	cbnz	r3, 8005836 <_svfiprintf_r+0x36>
 8005818:	2140      	movs	r1, #64	@ 0x40
 800581a:	f7ff ff09 	bl	8005630 <_malloc_r>
 800581e:	6028      	str	r0, [r5, #0]
 8005820:	6128      	str	r0, [r5, #16]
 8005822:	b930      	cbnz	r0, 8005832 <_svfiprintf_r+0x32>
 8005824:	230c      	movs	r3, #12
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	f04f 30ff 	mov.w	r0, #4294967295
 800582c:	b01d      	add	sp, #116	@ 0x74
 800582e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005832:	2340      	movs	r3, #64	@ 0x40
 8005834:	616b      	str	r3, [r5, #20]
 8005836:	2300      	movs	r3, #0
 8005838:	9309      	str	r3, [sp, #36]	@ 0x24
 800583a:	2320      	movs	r3, #32
 800583c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005840:	f8cd 800c 	str.w	r8, [sp, #12]
 8005844:	2330      	movs	r3, #48	@ 0x30
 8005846:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80059e4 <_svfiprintf_r+0x1e4>
 800584a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800584e:	f04f 0901 	mov.w	r9, #1
 8005852:	4623      	mov	r3, r4
 8005854:	469a      	mov	sl, r3
 8005856:	f813 2b01 	ldrb.w	r2, [r3], #1
 800585a:	b10a      	cbz	r2, 8005860 <_svfiprintf_r+0x60>
 800585c:	2a25      	cmp	r2, #37	@ 0x25
 800585e:	d1f9      	bne.n	8005854 <_svfiprintf_r+0x54>
 8005860:	ebba 0b04 	subs.w	fp, sl, r4
 8005864:	d00b      	beq.n	800587e <_svfiprintf_r+0x7e>
 8005866:	465b      	mov	r3, fp
 8005868:	4622      	mov	r2, r4
 800586a:	4629      	mov	r1, r5
 800586c:	4638      	mov	r0, r7
 800586e:	f7ff ff6b 	bl	8005748 <__ssputs_r>
 8005872:	3001      	adds	r0, #1
 8005874:	f000 80a7 	beq.w	80059c6 <_svfiprintf_r+0x1c6>
 8005878:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800587a:	445a      	add	r2, fp
 800587c:	9209      	str	r2, [sp, #36]	@ 0x24
 800587e:	f89a 3000 	ldrb.w	r3, [sl]
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 809f 	beq.w	80059c6 <_svfiprintf_r+0x1c6>
 8005888:	2300      	movs	r3, #0
 800588a:	f04f 32ff 	mov.w	r2, #4294967295
 800588e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005892:	f10a 0a01 	add.w	sl, sl, #1
 8005896:	9304      	str	r3, [sp, #16]
 8005898:	9307      	str	r3, [sp, #28]
 800589a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800589e:	931a      	str	r3, [sp, #104]	@ 0x68
 80058a0:	4654      	mov	r4, sl
 80058a2:	2205      	movs	r2, #5
 80058a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058a8:	484e      	ldr	r0, [pc, #312]	@ (80059e4 <_svfiprintf_r+0x1e4>)
 80058aa:	f7fa fca9 	bl	8000200 <memchr>
 80058ae:	9a04      	ldr	r2, [sp, #16]
 80058b0:	b9d8      	cbnz	r0, 80058ea <_svfiprintf_r+0xea>
 80058b2:	06d0      	lsls	r0, r2, #27
 80058b4:	bf44      	itt	mi
 80058b6:	2320      	movmi	r3, #32
 80058b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058bc:	0711      	lsls	r1, r2, #28
 80058be:	bf44      	itt	mi
 80058c0:	232b      	movmi	r3, #43	@ 0x2b
 80058c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058c6:	f89a 3000 	ldrb.w	r3, [sl]
 80058ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80058cc:	d015      	beq.n	80058fa <_svfiprintf_r+0xfa>
 80058ce:	9a07      	ldr	r2, [sp, #28]
 80058d0:	4654      	mov	r4, sl
 80058d2:	2000      	movs	r0, #0
 80058d4:	f04f 0c0a 	mov.w	ip, #10
 80058d8:	4621      	mov	r1, r4
 80058da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058de:	3b30      	subs	r3, #48	@ 0x30
 80058e0:	2b09      	cmp	r3, #9
 80058e2:	d94b      	bls.n	800597c <_svfiprintf_r+0x17c>
 80058e4:	b1b0      	cbz	r0, 8005914 <_svfiprintf_r+0x114>
 80058e6:	9207      	str	r2, [sp, #28]
 80058e8:	e014      	b.n	8005914 <_svfiprintf_r+0x114>
 80058ea:	eba0 0308 	sub.w	r3, r0, r8
 80058ee:	fa09 f303 	lsl.w	r3, r9, r3
 80058f2:	4313      	orrs	r3, r2
 80058f4:	9304      	str	r3, [sp, #16]
 80058f6:	46a2      	mov	sl, r4
 80058f8:	e7d2      	b.n	80058a0 <_svfiprintf_r+0xa0>
 80058fa:	9b03      	ldr	r3, [sp, #12]
 80058fc:	1d19      	adds	r1, r3, #4
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	9103      	str	r1, [sp, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	bfbb      	ittet	lt
 8005906:	425b      	neglt	r3, r3
 8005908:	f042 0202 	orrlt.w	r2, r2, #2
 800590c:	9307      	strge	r3, [sp, #28]
 800590e:	9307      	strlt	r3, [sp, #28]
 8005910:	bfb8      	it	lt
 8005912:	9204      	strlt	r2, [sp, #16]
 8005914:	7823      	ldrb	r3, [r4, #0]
 8005916:	2b2e      	cmp	r3, #46	@ 0x2e
 8005918:	d10a      	bne.n	8005930 <_svfiprintf_r+0x130>
 800591a:	7863      	ldrb	r3, [r4, #1]
 800591c:	2b2a      	cmp	r3, #42	@ 0x2a
 800591e:	d132      	bne.n	8005986 <_svfiprintf_r+0x186>
 8005920:	9b03      	ldr	r3, [sp, #12]
 8005922:	1d1a      	adds	r2, r3, #4
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	9203      	str	r2, [sp, #12]
 8005928:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800592c:	3402      	adds	r4, #2
 800592e:	9305      	str	r3, [sp, #20]
 8005930:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80059f4 <_svfiprintf_r+0x1f4>
 8005934:	7821      	ldrb	r1, [r4, #0]
 8005936:	2203      	movs	r2, #3
 8005938:	4650      	mov	r0, sl
 800593a:	f7fa fc61 	bl	8000200 <memchr>
 800593e:	b138      	cbz	r0, 8005950 <_svfiprintf_r+0x150>
 8005940:	9b04      	ldr	r3, [sp, #16]
 8005942:	eba0 000a 	sub.w	r0, r0, sl
 8005946:	2240      	movs	r2, #64	@ 0x40
 8005948:	4082      	lsls	r2, r0
 800594a:	4313      	orrs	r3, r2
 800594c:	3401      	adds	r4, #1
 800594e:	9304      	str	r3, [sp, #16]
 8005950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005954:	4824      	ldr	r0, [pc, #144]	@ (80059e8 <_svfiprintf_r+0x1e8>)
 8005956:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800595a:	2206      	movs	r2, #6
 800595c:	f7fa fc50 	bl	8000200 <memchr>
 8005960:	2800      	cmp	r0, #0
 8005962:	d036      	beq.n	80059d2 <_svfiprintf_r+0x1d2>
 8005964:	4b21      	ldr	r3, [pc, #132]	@ (80059ec <_svfiprintf_r+0x1ec>)
 8005966:	bb1b      	cbnz	r3, 80059b0 <_svfiprintf_r+0x1b0>
 8005968:	9b03      	ldr	r3, [sp, #12]
 800596a:	3307      	adds	r3, #7
 800596c:	f023 0307 	bic.w	r3, r3, #7
 8005970:	3308      	adds	r3, #8
 8005972:	9303      	str	r3, [sp, #12]
 8005974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005976:	4433      	add	r3, r6
 8005978:	9309      	str	r3, [sp, #36]	@ 0x24
 800597a:	e76a      	b.n	8005852 <_svfiprintf_r+0x52>
 800597c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005980:	460c      	mov	r4, r1
 8005982:	2001      	movs	r0, #1
 8005984:	e7a8      	b.n	80058d8 <_svfiprintf_r+0xd8>
 8005986:	2300      	movs	r3, #0
 8005988:	3401      	adds	r4, #1
 800598a:	9305      	str	r3, [sp, #20]
 800598c:	4619      	mov	r1, r3
 800598e:	f04f 0c0a 	mov.w	ip, #10
 8005992:	4620      	mov	r0, r4
 8005994:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005998:	3a30      	subs	r2, #48	@ 0x30
 800599a:	2a09      	cmp	r2, #9
 800599c:	d903      	bls.n	80059a6 <_svfiprintf_r+0x1a6>
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0c6      	beq.n	8005930 <_svfiprintf_r+0x130>
 80059a2:	9105      	str	r1, [sp, #20]
 80059a4:	e7c4      	b.n	8005930 <_svfiprintf_r+0x130>
 80059a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80059aa:	4604      	mov	r4, r0
 80059ac:	2301      	movs	r3, #1
 80059ae:	e7f0      	b.n	8005992 <_svfiprintf_r+0x192>
 80059b0:	ab03      	add	r3, sp, #12
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	462a      	mov	r2, r5
 80059b6:	4b0e      	ldr	r3, [pc, #56]	@ (80059f0 <_svfiprintf_r+0x1f0>)
 80059b8:	a904      	add	r1, sp, #16
 80059ba:	4638      	mov	r0, r7
 80059bc:	f3af 8000 	nop.w
 80059c0:	1c42      	adds	r2, r0, #1
 80059c2:	4606      	mov	r6, r0
 80059c4:	d1d6      	bne.n	8005974 <_svfiprintf_r+0x174>
 80059c6:	89ab      	ldrh	r3, [r5, #12]
 80059c8:	065b      	lsls	r3, r3, #25
 80059ca:	f53f af2d 	bmi.w	8005828 <_svfiprintf_r+0x28>
 80059ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80059d0:	e72c      	b.n	800582c <_svfiprintf_r+0x2c>
 80059d2:	ab03      	add	r3, sp, #12
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	462a      	mov	r2, r5
 80059d8:	4b05      	ldr	r3, [pc, #20]	@ (80059f0 <_svfiprintf_r+0x1f0>)
 80059da:	a904      	add	r1, sp, #16
 80059dc:	4638      	mov	r0, r7
 80059de:	f000 f879 	bl	8005ad4 <_printf_i>
 80059e2:	e7ed      	b.n	80059c0 <_svfiprintf_r+0x1c0>
 80059e4:	08005e68 	.word	0x08005e68
 80059e8:	08005e72 	.word	0x08005e72
 80059ec:	00000000 	.word	0x00000000
 80059f0:	08005749 	.word	0x08005749
 80059f4:	08005e6e 	.word	0x08005e6e

080059f8 <_printf_common>:
 80059f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059fc:	4616      	mov	r6, r2
 80059fe:	4698      	mov	r8, r3
 8005a00:	688a      	ldr	r2, [r1, #8]
 8005a02:	690b      	ldr	r3, [r1, #16]
 8005a04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	bfb8      	it	lt
 8005a0c:	4613      	movlt	r3, r2
 8005a0e:	6033      	str	r3, [r6, #0]
 8005a10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a14:	4607      	mov	r7, r0
 8005a16:	460c      	mov	r4, r1
 8005a18:	b10a      	cbz	r2, 8005a1e <_printf_common+0x26>
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	6033      	str	r3, [r6, #0]
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	0699      	lsls	r1, r3, #26
 8005a22:	bf42      	ittt	mi
 8005a24:	6833      	ldrmi	r3, [r6, #0]
 8005a26:	3302      	addmi	r3, #2
 8005a28:	6033      	strmi	r3, [r6, #0]
 8005a2a:	6825      	ldr	r5, [r4, #0]
 8005a2c:	f015 0506 	ands.w	r5, r5, #6
 8005a30:	d106      	bne.n	8005a40 <_printf_common+0x48>
 8005a32:	f104 0a19 	add.w	sl, r4, #25
 8005a36:	68e3      	ldr	r3, [r4, #12]
 8005a38:	6832      	ldr	r2, [r6, #0]
 8005a3a:	1a9b      	subs	r3, r3, r2
 8005a3c:	42ab      	cmp	r3, r5
 8005a3e:	dc26      	bgt.n	8005a8e <_printf_common+0x96>
 8005a40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a44:	6822      	ldr	r2, [r4, #0]
 8005a46:	3b00      	subs	r3, #0
 8005a48:	bf18      	it	ne
 8005a4a:	2301      	movne	r3, #1
 8005a4c:	0692      	lsls	r2, r2, #26
 8005a4e:	d42b      	bmi.n	8005aa8 <_printf_common+0xb0>
 8005a50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a54:	4641      	mov	r1, r8
 8005a56:	4638      	mov	r0, r7
 8005a58:	47c8      	blx	r9
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	d01e      	beq.n	8005a9c <_printf_common+0xa4>
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	6922      	ldr	r2, [r4, #16]
 8005a62:	f003 0306 	and.w	r3, r3, #6
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	bf02      	ittt	eq
 8005a6a:	68e5      	ldreq	r5, [r4, #12]
 8005a6c:	6833      	ldreq	r3, [r6, #0]
 8005a6e:	1aed      	subeq	r5, r5, r3
 8005a70:	68a3      	ldr	r3, [r4, #8]
 8005a72:	bf0c      	ite	eq
 8005a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a78:	2500      	movne	r5, #0
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	bfc4      	itt	gt
 8005a7e:	1a9b      	subgt	r3, r3, r2
 8005a80:	18ed      	addgt	r5, r5, r3
 8005a82:	2600      	movs	r6, #0
 8005a84:	341a      	adds	r4, #26
 8005a86:	42b5      	cmp	r5, r6
 8005a88:	d11a      	bne.n	8005ac0 <_printf_common+0xc8>
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	e008      	b.n	8005aa0 <_printf_common+0xa8>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	4652      	mov	r2, sl
 8005a92:	4641      	mov	r1, r8
 8005a94:	4638      	mov	r0, r7
 8005a96:	47c8      	blx	r9
 8005a98:	3001      	adds	r0, #1
 8005a9a:	d103      	bne.n	8005aa4 <_printf_common+0xac>
 8005a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa4:	3501      	adds	r5, #1
 8005aa6:	e7c6      	b.n	8005a36 <_printf_common+0x3e>
 8005aa8:	18e1      	adds	r1, r4, r3
 8005aaa:	1c5a      	adds	r2, r3, #1
 8005aac:	2030      	movs	r0, #48	@ 0x30
 8005aae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ab2:	4422      	add	r2, r4
 8005ab4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ab8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005abc:	3302      	adds	r3, #2
 8005abe:	e7c7      	b.n	8005a50 <_printf_common+0x58>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	4622      	mov	r2, r4
 8005ac4:	4641      	mov	r1, r8
 8005ac6:	4638      	mov	r0, r7
 8005ac8:	47c8      	blx	r9
 8005aca:	3001      	adds	r0, #1
 8005acc:	d0e6      	beq.n	8005a9c <_printf_common+0xa4>
 8005ace:	3601      	adds	r6, #1
 8005ad0:	e7d9      	b.n	8005a86 <_printf_common+0x8e>
	...

08005ad4 <_printf_i>:
 8005ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad8:	7e0f      	ldrb	r7, [r1, #24]
 8005ada:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005adc:	2f78      	cmp	r7, #120	@ 0x78
 8005ade:	4691      	mov	r9, r2
 8005ae0:	4680      	mov	r8, r0
 8005ae2:	460c      	mov	r4, r1
 8005ae4:	469a      	mov	sl, r3
 8005ae6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005aea:	d807      	bhi.n	8005afc <_printf_i+0x28>
 8005aec:	2f62      	cmp	r7, #98	@ 0x62
 8005aee:	d80a      	bhi.n	8005b06 <_printf_i+0x32>
 8005af0:	2f00      	cmp	r7, #0
 8005af2:	f000 80d2 	beq.w	8005c9a <_printf_i+0x1c6>
 8005af6:	2f58      	cmp	r7, #88	@ 0x58
 8005af8:	f000 80b9 	beq.w	8005c6e <_printf_i+0x19a>
 8005afc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b04:	e03a      	b.n	8005b7c <_printf_i+0xa8>
 8005b06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b0a:	2b15      	cmp	r3, #21
 8005b0c:	d8f6      	bhi.n	8005afc <_printf_i+0x28>
 8005b0e:	a101      	add	r1, pc, #4	@ (adr r1, 8005b14 <_printf_i+0x40>)
 8005b10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b14:	08005b6d 	.word	0x08005b6d
 8005b18:	08005b81 	.word	0x08005b81
 8005b1c:	08005afd 	.word	0x08005afd
 8005b20:	08005afd 	.word	0x08005afd
 8005b24:	08005afd 	.word	0x08005afd
 8005b28:	08005afd 	.word	0x08005afd
 8005b2c:	08005b81 	.word	0x08005b81
 8005b30:	08005afd 	.word	0x08005afd
 8005b34:	08005afd 	.word	0x08005afd
 8005b38:	08005afd 	.word	0x08005afd
 8005b3c:	08005afd 	.word	0x08005afd
 8005b40:	08005c81 	.word	0x08005c81
 8005b44:	08005bab 	.word	0x08005bab
 8005b48:	08005c3b 	.word	0x08005c3b
 8005b4c:	08005afd 	.word	0x08005afd
 8005b50:	08005afd 	.word	0x08005afd
 8005b54:	08005ca3 	.word	0x08005ca3
 8005b58:	08005afd 	.word	0x08005afd
 8005b5c:	08005bab 	.word	0x08005bab
 8005b60:	08005afd 	.word	0x08005afd
 8005b64:	08005afd 	.word	0x08005afd
 8005b68:	08005c43 	.word	0x08005c43
 8005b6c:	6833      	ldr	r3, [r6, #0]
 8005b6e:	1d1a      	adds	r2, r3, #4
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6032      	str	r2, [r6, #0]
 8005b74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e09d      	b.n	8005cbc <_printf_i+0x1e8>
 8005b80:	6833      	ldr	r3, [r6, #0]
 8005b82:	6820      	ldr	r0, [r4, #0]
 8005b84:	1d19      	adds	r1, r3, #4
 8005b86:	6031      	str	r1, [r6, #0]
 8005b88:	0606      	lsls	r6, r0, #24
 8005b8a:	d501      	bpl.n	8005b90 <_printf_i+0xbc>
 8005b8c:	681d      	ldr	r5, [r3, #0]
 8005b8e:	e003      	b.n	8005b98 <_printf_i+0xc4>
 8005b90:	0645      	lsls	r5, r0, #25
 8005b92:	d5fb      	bpl.n	8005b8c <_printf_i+0xb8>
 8005b94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b98:	2d00      	cmp	r5, #0
 8005b9a:	da03      	bge.n	8005ba4 <_printf_i+0xd0>
 8005b9c:	232d      	movs	r3, #45	@ 0x2d
 8005b9e:	426d      	negs	r5, r5
 8005ba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ba4:	4859      	ldr	r0, [pc, #356]	@ (8005d0c <_printf_i+0x238>)
 8005ba6:	230a      	movs	r3, #10
 8005ba8:	e011      	b.n	8005bce <_printf_i+0xfa>
 8005baa:	6821      	ldr	r1, [r4, #0]
 8005bac:	6833      	ldr	r3, [r6, #0]
 8005bae:	0608      	lsls	r0, r1, #24
 8005bb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005bb4:	d402      	bmi.n	8005bbc <_printf_i+0xe8>
 8005bb6:	0649      	lsls	r1, r1, #25
 8005bb8:	bf48      	it	mi
 8005bba:	b2ad      	uxthmi	r5, r5
 8005bbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005bbe:	4853      	ldr	r0, [pc, #332]	@ (8005d0c <_printf_i+0x238>)
 8005bc0:	6033      	str	r3, [r6, #0]
 8005bc2:	bf14      	ite	ne
 8005bc4:	230a      	movne	r3, #10
 8005bc6:	2308      	moveq	r3, #8
 8005bc8:	2100      	movs	r1, #0
 8005bca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005bce:	6866      	ldr	r6, [r4, #4]
 8005bd0:	60a6      	str	r6, [r4, #8]
 8005bd2:	2e00      	cmp	r6, #0
 8005bd4:	bfa2      	ittt	ge
 8005bd6:	6821      	ldrge	r1, [r4, #0]
 8005bd8:	f021 0104 	bicge.w	r1, r1, #4
 8005bdc:	6021      	strge	r1, [r4, #0]
 8005bde:	b90d      	cbnz	r5, 8005be4 <_printf_i+0x110>
 8005be0:	2e00      	cmp	r6, #0
 8005be2:	d04b      	beq.n	8005c7c <_printf_i+0x1a8>
 8005be4:	4616      	mov	r6, r2
 8005be6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bea:	fb03 5711 	mls	r7, r3, r1, r5
 8005bee:	5dc7      	ldrb	r7, [r0, r7]
 8005bf0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bf4:	462f      	mov	r7, r5
 8005bf6:	42bb      	cmp	r3, r7
 8005bf8:	460d      	mov	r5, r1
 8005bfa:	d9f4      	bls.n	8005be6 <_printf_i+0x112>
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d10b      	bne.n	8005c18 <_printf_i+0x144>
 8005c00:	6823      	ldr	r3, [r4, #0]
 8005c02:	07df      	lsls	r7, r3, #31
 8005c04:	d508      	bpl.n	8005c18 <_printf_i+0x144>
 8005c06:	6923      	ldr	r3, [r4, #16]
 8005c08:	6861      	ldr	r1, [r4, #4]
 8005c0a:	4299      	cmp	r1, r3
 8005c0c:	bfde      	ittt	le
 8005c0e:	2330      	movle	r3, #48	@ 0x30
 8005c10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c14:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c18:	1b92      	subs	r2, r2, r6
 8005c1a:	6122      	str	r2, [r4, #16]
 8005c1c:	f8cd a000 	str.w	sl, [sp]
 8005c20:	464b      	mov	r3, r9
 8005c22:	aa03      	add	r2, sp, #12
 8005c24:	4621      	mov	r1, r4
 8005c26:	4640      	mov	r0, r8
 8005c28:	f7ff fee6 	bl	80059f8 <_printf_common>
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	d14a      	bne.n	8005cc6 <_printf_i+0x1f2>
 8005c30:	f04f 30ff 	mov.w	r0, #4294967295
 8005c34:	b004      	add	sp, #16
 8005c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	f043 0320 	orr.w	r3, r3, #32
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	4833      	ldr	r0, [pc, #204]	@ (8005d10 <_printf_i+0x23c>)
 8005c44:	2778      	movs	r7, #120	@ 0x78
 8005c46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	6831      	ldr	r1, [r6, #0]
 8005c4e:	061f      	lsls	r7, r3, #24
 8005c50:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c54:	d402      	bmi.n	8005c5c <_printf_i+0x188>
 8005c56:	065f      	lsls	r7, r3, #25
 8005c58:	bf48      	it	mi
 8005c5a:	b2ad      	uxthmi	r5, r5
 8005c5c:	6031      	str	r1, [r6, #0]
 8005c5e:	07d9      	lsls	r1, r3, #31
 8005c60:	bf44      	itt	mi
 8005c62:	f043 0320 	orrmi.w	r3, r3, #32
 8005c66:	6023      	strmi	r3, [r4, #0]
 8005c68:	b11d      	cbz	r5, 8005c72 <_printf_i+0x19e>
 8005c6a:	2310      	movs	r3, #16
 8005c6c:	e7ac      	b.n	8005bc8 <_printf_i+0xf4>
 8005c6e:	4827      	ldr	r0, [pc, #156]	@ (8005d0c <_printf_i+0x238>)
 8005c70:	e7e9      	b.n	8005c46 <_printf_i+0x172>
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	f023 0320 	bic.w	r3, r3, #32
 8005c78:	6023      	str	r3, [r4, #0]
 8005c7a:	e7f6      	b.n	8005c6a <_printf_i+0x196>
 8005c7c:	4616      	mov	r6, r2
 8005c7e:	e7bd      	b.n	8005bfc <_printf_i+0x128>
 8005c80:	6833      	ldr	r3, [r6, #0]
 8005c82:	6825      	ldr	r5, [r4, #0]
 8005c84:	6961      	ldr	r1, [r4, #20]
 8005c86:	1d18      	adds	r0, r3, #4
 8005c88:	6030      	str	r0, [r6, #0]
 8005c8a:	062e      	lsls	r6, r5, #24
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	d501      	bpl.n	8005c94 <_printf_i+0x1c0>
 8005c90:	6019      	str	r1, [r3, #0]
 8005c92:	e002      	b.n	8005c9a <_printf_i+0x1c6>
 8005c94:	0668      	lsls	r0, r5, #25
 8005c96:	d5fb      	bpl.n	8005c90 <_printf_i+0x1bc>
 8005c98:	8019      	strh	r1, [r3, #0]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	6123      	str	r3, [r4, #16]
 8005c9e:	4616      	mov	r6, r2
 8005ca0:	e7bc      	b.n	8005c1c <_printf_i+0x148>
 8005ca2:	6833      	ldr	r3, [r6, #0]
 8005ca4:	1d1a      	adds	r2, r3, #4
 8005ca6:	6032      	str	r2, [r6, #0]
 8005ca8:	681e      	ldr	r6, [r3, #0]
 8005caa:	6862      	ldr	r2, [r4, #4]
 8005cac:	2100      	movs	r1, #0
 8005cae:	4630      	mov	r0, r6
 8005cb0:	f7fa faa6 	bl	8000200 <memchr>
 8005cb4:	b108      	cbz	r0, 8005cba <_printf_i+0x1e6>
 8005cb6:	1b80      	subs	r0, r0, r6
 8005cb8:	6060      	str	r0, [r4, #4]
 8005cba:	6863      	ldr	r3, [r4, #4]
 8005cbc:	6123      	str	r3, [r4, #16]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cc4:	e7aa      	b.n	8005c1c <_printf_i+0x148>
 8005cc6:	6923      	ldr	r3, [r4, #16]
 8005cc8:	4632      	mov	r2, r6
 8005cca:	4649      	mov	r1, r9
 8005ccc:	4640      	mov	r0, r8
 8005cce:	47d0      	blx	sl
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	d0ad      	beq.n	8005c30 <_printf_i+0x15c>
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	079b      	lsls	r3, r3, #30
 8005cd8:	d413      	bmi.n	8005d02 <_printf_i+0x22e>
 8005cda:	68e0      	ldr	r0, [r4, #12]
 8005cdc:	9b03      	ldr	r3, [sp, #12]
 8005cde:	4298      	cmp	r0, r3
 8005ce0:	bfb8      	it	lt
 8005ce2:	4618      	movlt	r0, r3
 8005ce4:	e7a6      	b.n	8005c34 <_printf_i+0x160>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	4632      	mov	r2, r6
 8005cea:	4649      	mov	r1, r9
 8005cec:	4640      	mov	r0, r8
 8005cee:	47d0      	blx	sl
 8005cf0:	3001      	adds	r0, #1
 8005cf2:	d09d      	beq.n	8005c30 <_printf_i+0x15c>
 8005cf4:	3501      	adds	r5, #1
 8005cf6:	68e3      	ldr	r3, [r4, #12]
 8005cf8:	9903      	ldr	r1, [sp, #12]
 8005cfa:	1a5b      	subs	r3, r3, r1
 8005cfc:	42ab      	cmp	r3, r5
 8005cfe:	dcf2      	bgt.n	8005ce6 <_printf_i+0x212>
 8005d00:	e7eb      	b.n	8005cda <_printf_i+0x206>
 8005d02:	2500      	movs	r5, #0
 8005d04:	f104 0619 	add.w	r6, r4, #25
 8005d08:	e7f5      	b.n	8005cf6 <_printf_i+0x222>
 8005d0a:	bf00      	nop
 8005d0c:	08005e79 	.word	0x08005e79
 8005d10:	08005e8a 	.word	0x08005e8a

08005d14 <memmove>:
 8005d14:	4288      	cmp	r0, r1
 8005d16:	b510      	push	{r4, lr}
 8005d18:	eb01 0402 	add.w	r4, r1, r2
 8005d1c:	d902      	bls.n	8005d24 <memmove+0x10>
 8005d1e:	4284      	cmp	r4, r0
 8005d20:	4623      	mov	r3, r4
 8005d22:	d807      	bhi.n	8005d34 <memmove+0x20>
 8005d24:	1e43      	subs	r3, r0, #1
 8005d26:	42a1      	cmp	r1, r4
 8005d28:	d008      	beq.n	8005d3c <memmove+0x28>
 8005d2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d32:	e7f8      	b.n	8005d26 <memmove+0x12>
 8005d34:	4402      	add	r2, r0
 8005d36:	4601      	mov	r1, r0
 8005d38:	428a      	cmp	r2, r1
 8005d3a:	d100      	bne.n	8005d3e <memmove+0x2a>
 8005d3c:	bd10      	pop	{r4, pc}
 8005d3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d46:	e7f7      	b.n	8005d38 <memmove+0x24>

08005d48 <_sbrk_r>:
 8005d48:	b538      	push	{r3, r4, r5, lr}
 8005d4a:	4d06      	ldr	r5, [pc, #24]	@ (8005d64 <_sbrk_r+0x1c>)
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	4604      	mov	r4, r0
 8005d50:	4608      	mov	r0, r1
 8005d52:	602b      	str	r3, [r5, #0]
 8005d54:	f7fb fcf4 	bl	8001740 <_sbrk>
 8005d58:	1c43      	adds	r3, r0, #1
 8005d5a:	d102      	bne.n	8005d62 <_sbrk_r+0x1a>
 8005d5c:	682b      	ldr	r3, [r5, #0]
 8005d5e:	b103      	cbz	r3, 8005d62 <_sbrk_r+0x1a>
 8005d60:	6023      	str	r3, [r4, #0]
 8005d62:	bd38      	pop	{r3, r4, r5, pc}
 8005d64:	20000800 	.word	0x20000800

08005d68 <memcpy>:
 8005d68:	440a      	add	r2, r1
 8005d6a:	4291      	cmp	r1, r2
 8005d6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d70:	d100      	bne.n	8005d74 <memcpy+0xc>
 8005d72:	4770      	bx	lr
 8005d74:	b510      	push	{r4, lr}
 8005d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d7e:	4291      	cmp	r1, r2
 8005d80:	d1f9      	bne.n	8005d76 <memcpy+0xe>
 8005d82:	bd10      	pop	{r4, pc}

08005d84 <_realloc_r>:
 8005d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d88:	4680      	mov	r8, r0
 8005d8a:	4615      	mov	r5, r2
 8005d8c:	460c      	mov	r4, r1
 8005d8e:	b921      	cbnz	r1, 8005d9a <_realloc_r+0x16>
 8005d90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d94:	4611      	mov	r1, r2
 8005d96:	f7ff bc4b 	b.w	8005630 <_malloc_r>
 8005d9a:	b92a      	cbnz	r2, 8005da8 <_realloc_r+0x24>
 8005d9c:	f7ff fbdc 	bl	8005558 <_free_r>
 8005da0:	2400      	movs	r4, #0
 8005da2:	4620      	mov	r0, r4
 8005da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005da8:	f000 f81a 	bl	8005de0 <_malloc_usable_size_r>
 8005dac:	4285      	cmp	r5, r0
 8005dae:	4606      	mov	r6, r0
 8005db0:	d802      	bhi.n	8005db8 <_realloc_r+0x34>
 8005db2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005db6:	d8f4      	bhi.n	8005da2 <_realloc_r+0x1e>
 8005db8:	4629      	mov	r1, r5
 8005dba:	4640      	mov	r0, r8
 8005dbc:	f7ff fc38 	bl	8005630 <_malloc_r>
 8005dc0:	4607      	mov	r7, r0
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	d0ec      	beq.n	8005da0 <_realloc_r+0x1c>
 8005dc6:	42b5      	cmp	r5, r6
 8005dc8:	462a      	mov	r2, r5
 8005dca:	4621      	mov	r1, r4
 8005dcc:	bf28      	it	cs
 8005dce:	4632      	movcs	r2, r6
 8005dd0:	f7ff ffca 	bl	8005d68 <memcpy>
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	4640      	mov	r0, r8
 8005dd8:	f7ff fbbe 	bl	8005558 <_free_r>
 8005ddc:	463c      	mov	r4, r7
 8005dde:	e7e0      	b.n	8005da2 <_realloc_r+0x1e>

08005de0 <_malloc_usable_size_r>:
 8005de0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005de4:	1f18      	subs	r0, r3, #4
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	bfbc      	itt	lt
 8005dea:	580b      	ldrlt	r3, [r1, r0]
 8005dec:	18c0      	addlt	r0, r0, r3
 8005dee:	4770      	bx	lr

08005df0 <_init>:
 8005df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df2:	bf00      	nop
 8005df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005df6:	bc08      	pop	{r3}
 8005df8:	469e      	mov	lr, r3
 8005dfa:	4770      	bx	lr

08005dfc <_fini>:
 8005dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfe:	bf00      	nop
 8005e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e02:	bc08      	pop	{r3}
 8005e04:	469e      	mov	lr, r3
 8005e06:	4770      	bx	lr
