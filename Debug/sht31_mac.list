
sht31_mac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005470  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08005620  08005620  00006620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005708  08005708  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005708  08005708  00006708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005710  08005710  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005710  08005710  00006710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005714  08005714  00006714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005718  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c8  2000005c  08005774  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000824  08005774  00007824  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131b3  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002935  00000000  00000000  0001a23f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  0001cb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c91  00000000  00000000  0001dbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b62  00000000  00000000  0001e851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a0a  00000000  00000000  000483b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbbfb  00000000  00000000  0005cdbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001589b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004918  00000000  00000000  001589fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0015d314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005608 	.word	0x08005608

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08005608 	.word	0x08005608

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b5b0      	push	{r4, r5, r7, lr}
 8000592:	b098      	sub	sp, #96	@ 0x60
 8000594:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	uint8_t sensor_address = SHT31_ADDRESS_A;
 8000596:	2344      	movs	r3, #68	@ 0x44
 8000598:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 fd4d 	bl	800103a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f85a 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 f988 	bl	80008b8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005a8:	f000 f8fa 	bl	80007a0 <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ac:	f000 f956 	bl	800085c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80005b0:	f000 f8b6 	bl	8000720 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80005b4:	f000 f922 	bl	80007fc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  SHT31_Init(&hi2c1, SHT31_ADDRESS_A, 0x0C, SHT31_MEASUREMENT_NOSTRETCH_MEDIUM, &huart3);
 80005b8:	4b23      	ldr	r3, [pc, #140]	@ (8000648 <main+0xb8>)
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	f242 430b 	movw	r3, #9227	@ 0x240b
 80005c0:	220c      	movs	r2, #12
 80005c2:	2144      	movs	r1, #68	@ 0x44
 80005c4:	4821      	ldr	r0, [pc, #132]	@ (800064c <main+0xbc>)
 80005c6:	f000 fa6b 	bl	8000aa0 <SHT31_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t sensor_id;
  SHT31_Status status = SHT31_GetID(&sensor_id);
 80005ca:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fa38 	bl	8000a44 <SHT31_GetID>
 80005d4:	4603      	mov	r3, r0
 80005d6:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  if (status == SHT31_OK) {
 80005da:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d114      	bne.n	800060c <main+0x7c>
      char id_msg[50];
      sprintf(id_msg, "Sensor ID: 0x%02X\n", sensor_id);
 80005e2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80005e6:	461a      	mov	r2, r3
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	4919      	ldr	r1, [pc, #100]	@ (8000650 <main+0xc0>)
 80005ec:	4618      	mov	r0, r3
 80005ee:	f004 fb6b 	bl	8004cc8 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)id_msg, strlen(id_msg), HAL_MAX_DELAY);
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff fdfb 	bl	80001f0 <strlen>
 80005fa:	4603      	mov	r3, r0
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	1d39      	adds	r1, r7, #4
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	4810      	ldr	r0, [pc, #64]	@ (8000648 <main+0xb8>)
 8000606:	f003 fb55 	bl	8003cb4 <HAL_UART_Transmit>
 800060a:	e01c      	b.n	8000646 <main+0xb6>
  } else {
      char id_fail_msg[] = "Failed to read Sensor ID!\n";
 800060c:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <main+0xc4>)
 800060e:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	c403      	stmia	r4!, {r0, r1}
 800061e:	8022      	strh	r2, [r4, #0]
 8000620:	3402      	adds	r4, #2
 8000622:	0c13      	lsrs	r3, r2, #16
 8000624:	7023      	strb	r3, [r4, #0]
      HAL_UART_Transmit(&huart3, (uint8_t*)id_fail_msg, strlen(id_fail_msg), HAL_MAX_DELAY);
 8000626:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fde0 	bl	80001f0 <strlen>
 8000630:	4603      	mov	r3, r0
 8000632:	b29a      	uxth	r2, r3
 8000634:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	4802      	ldr	r0, [pc, #8]	@ (8000648 <main+0xb8>)
 800063e:	f003 fb39 	bl	8003cb4 <HAL_UART_Transmit>
      while (1); // Stay here in case of failure
 8000642:	bf00      	nop
 8000644:	e7fd      	b.n	8000642 <main+0xb2>
  }


  while (1)
 8000646:	e7fe      	b.n	8000646 <main+0xb6>
 8000648:	20000154 	.word	0x20000154
 800064c:	20000078 	.word	0x20000078
 8000650:	08005620 	.word	0x08005620
 8000654:	08005634 	.word	0x08005634

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b096      	sub	sp, #88	@ 0x58
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	2244      	movs	r2, #68	@ 0x44
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f004 fb4e 	bl	8004d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	463b      	mov	r3, r7
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800067a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800067e:	f001 ff3d 	bl	80024fc <HAL_PWREx_ControlVoltageScaling>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000688:	f000 f9ae 	bl	80009e8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800068c:	f001 ff18 	bl	80024c0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000690:	4b22      	ldr	r3, [pc, #136]	@ (800071c <SystemClock_Config+0xc4>)
 8000692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000696:	4a21      	ldr	r2, [pc, #132]	@ (800071c <SystemClock_Config+0xc4>)
 8000698:	f023 0318 	bic.w	r3, r3, #24
 800069c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006a0:	2314      	movs	r3, #20
 80006a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006b0:	2360      	movs	r3, #96	@ 0x60
 80006b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006b8:	2301      	movs	r3, #1
 80006ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006bc:	2301      	movs	r3, #1
 80006be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 80006c0:	2347      	movs	r3, #71	@ 0x47
 80006c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80006cc:	2306      	movs	r3, #6
 80006ce:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 ff87 	bl	80025e8 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006e0:	f000 f982 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2303      	movs	r3, #3
 80006ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fa:	463b      	mov	r3, r7
 80006fc:	2102      	movs	r1, #2
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 fb8c 	bl	8002e1c <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800070a:	f000 f96d 	bl	80009e8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800070e:	f003 f8a5 	bl	800385c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000712:	bf00      	nop
 8000714:	3758      	adds	r7, #88	@ 0x58
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40021000 	.word	0x40021000

08000720 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <MX_I2C1_Init+0x74>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	@ (8000798 <MX_I2C1_Init+0x78>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00505B89;
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <MX_I2C1_Init+0x74>)
 800072c:	4a1b      	ldr	r2, [pc, #108]	@ (800079c <MX_I2C1_Init+0x7c>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_I2C1_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <MX_I2C1_Init+0x74>)
 8000738:	2201      	movs	r2, #1
 800073a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <MX_I2C1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_I2C1_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_I2C1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_I2C1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_I2C1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800075a:	480e      	ldr	r0, [pc, #56]	@ (8000794 <MX_I2C1_Init+0x74>)
 800075c:	f000 ff96 	bl	800168c <HAL_I2C_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000766:	f000 f93f 	bl	80009e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800076a:	2100      	movs	r1, #0
 800076c:	4809      	ldr	r0, [pc, #36]	@ (8000794 <MX_I2C1_Init+0x74>)
 800076e:	f001 fcdd 	bl	800212c <HAL_I2CEx_ConfigAnalogFilter>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000778:	f000 f936 	bl	80009e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800077c:	2100      	movs	r1, #0
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_I2C1_Init+0x74>)
 8000780:	f001 fd1f 	bl	80021c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800078a:	f000 f92d 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000078 	.word	0x20000078
 8000798:	40005400 	.word	0x40005400
 800079c:	00505b89 	.word	0x00505b89

080007a0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007a4:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <MX_LPUART1_UART_Init+0x50>)
 80007a6:	4a13      	ldr	r2, [pc, #76]	@ (80007f4 <MX_LPUART1_UART_Init+0x54>)
 80007a8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80007aa:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <MX_LPUART1_UART_Init+0x50>)
 80007ac:	4a12      	ldr	r2, [pc, #72]	@ (80007f8 <MX_LPUART1_UART_Init+0x58>)
 80007ae:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_LPUART1_UART_Init+0x50>)
 80007b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007b6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0d      	ldr	r3, [pc, #52]	@ (80007f0 <MX_LPUART1_UART_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_LPUART1_UART_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	@ (80007f0 <MX_LPUART1_UART_Init+0x50>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_LPUART1_UART_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d0:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <MX_LPUART1_UART_Init+0x50>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d6:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_LPUART1_UART_Init+0x50>)
 80007d8:	2200      	movs	r2, #0
 80007da:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	@ (80007f0 <MX_LPUART1_UART_Init+0x50>)
 80007de:	f003 fa1b 	bl	8003c18 <HAL_UART_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80007e8:	f000 f8fe 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200000cc 	.word	0x200000cc
 80007f4:	40008000 	.word	0x40008000
 80007f8:	00033324 	.word	0x00033324

080007fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000800:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <MX_USART3_UART_Init+0x58>)
 8000802:	4a15      	ldr	r2, [pc, #84]	@ (8000858 <MX_USART3_UART_Init+0x5c>)
 8000804:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000806:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <MX_USART3_UART_Init+0x58>)
 8000808:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800080c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <MX_USART3_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <MX_USART3_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <MX_USART3_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <MX_USART3_UART_Init+0x58>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <MX_USART3_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800082c:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_USART3_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000832:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <MX_USART3_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_USART3_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	@ (8000854 <MX_USART3_UART_Init+0x58>)
 8000840:	f003 f9ea 	bl	8003c18 <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800084a:	f000 f8cd 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000154 	.word	0x20000154
 8000858:	40004800 	.word	0x40004800

0800085c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000860:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000862:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000866:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086a:	2206      	movs	r2, #6
 800086c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000870:	2202      	movs	r2, #2
 8000872:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000874:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000876:	2202      	movs	r2, #2
 8000878:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087c:	2201      	movs	r2, #1
 800087e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000880:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800088c:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088e:	2201      	movs	r2, #1
 8000890:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000892:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089a:	2201      	movs	r2, #1
 800089c:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a0:	f001 fcdb 	bl	800225a <HAL_PCD_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008aa:	f000 f89d 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200001dc 	.word	0x200001dc

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	@ 0x28
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	4b42      	ldr	r3, [pc, #264]	@ (80009d8 <MX_GPIO_Init+0x120>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d2:	4a41      	ldr	r2, [pc, #260]	@ (80009d8 <MX_GPIO_Init+0x120>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008da:	4b3f      	ldr	r3, [pc, #252]	@ (80009d8 <MX_GPIO_Init+0x120>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e6:	4b3c      	ldr	r3, [pc, #240]	@ (80009d8 <MX_GPIO_Init+0x120>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ea:	4a3b      	ldr	r2, [pc, #236]	@ (80009d8 <MX_GPIO_Init+0x120>)
 80008ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f2:	4b39      	ldr	r3, [pc, #228]	@ (80009d8 <MX_GPIO_Init+0x120>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	4b36      	ldr	r3, [pc, #216]	@ (80009d8 <MX_GPIO_Init+0x120>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	4a35      	ldr	r2, [pc, #212]	@ (80009d8 <MX_GPIO_Init+0x120>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090a:	4b33      	ldr	r3, [pc, #204]	@ (80009d8 <MX_GPIO_Init+0x120>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000916:	4b30      	ldr	r3, [pc, #192]	@ (80009d8 <MX_GPIO_Init+0x120>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	4a2f      	ldr	r2, [pc, #188]	@ (80009d8 <MX_GPIO_Init+0x120>)
 800091c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000922:	4b2d      	ldr	r3, [pc, #180]	@ (80009d8 <MX_GPIO_Init+0x120>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800092e:	f001 fe4b 	bl	80025c8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b29      	ldr	r3, [pc, #164]	@ (80009d8 <MX_GPIO_Init+0x120>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000936:	4a28      	ldr	r2, [pc, #160]	@ (80009d8 <MX_GPIO_Init+0x120>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093e:	4b26      	ldr	r3, [pc, #152]	@ (80009d8 <MX_GPIO_Init+0x120>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000950:	4822      	ldr	r0, [pc, #136]	@ (80009dc <MX_GPIO_Init+0x124>)
 8000952:	f000 fe83 	bl	800165c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2140      	movs	r1, #64	@ 0x40
 800095a:	4821      	ldr	r0, [pc, #132]	@ (80009e0 <MX_GPIO_Init+0x128>)
 800095c:	f000 fe7e 	bl	800165c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000960:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000966:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800096a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	481b      	ldr	r0, [pc, #108]	@ (80009e4 <MX_GPIO_Init+0x12c>)
 8000978:	f000 fcde 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800097c:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	4811      	ldr	r0, [pc, #68]	@ (80009dc <MX_GPIO_Init+0x124>)
 8000996:	f000 fccf 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800099a:	2320      	movs	r3, #32
 800099c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099e:	2300      	movs	r3, #0
 80009a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <MX_GPIO_Init+0x128>)
 80009ae:	f000 fcc3 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009b2:	2340      	movs	r3, #64	@ 0x40
 80009b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <MX_GPIO_Init+0x128>)
 80009ca:	f000 fcb5 	bl	8001338 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ce:	bf00      	nop
 80009d0:	3728      	adds	r7, #40	@ 0x28
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48000400 	.word	0x48000400
 80009e0:	48001800 	.word	0x48001800
 80009e4:	48000800 	.word	0x48000800

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <Error_Handler+0x8>

080009f4 <SHT31_SendCommand>:
} SHT31_INFO;

static SHT31_INFO sht31_sensor; // Static instance of the sensor structure

//Envía comando al sensor
static SHT31_Status SHT31_SendCommand(uint16_t command) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af02      	add	r7, sp, #8
 80009fa:	4603      	mov	r3, r0
 80009fc:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd[2];
    cmd[0] = (command >> 8) & 0xFF;
 80009fe:	88fb      	ldrh	r3, [r7, #6]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	733b      	strb	r3, [r7, #12]
    cmd[1] = command & 0xFF;
 8000a08:	88fb      	ldrh	r3, [r7, #6]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	737b      	strb	r3, [r7, #13]

    if (HAL_I2C_Master_Transmit(sht31_sensor.hi2c, (sht31_sensor.address << 1), cmd, 2, HAL_MAX_DELAY) != HAL_OK) {
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <SHT31_SendCommand+0x4c>)
 8000a10:	6858      	ldr	r0, [r3, #4]
 8000a12:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <SHT31_SendCommand+0x4c>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	b299      	uxth	r1, r3
 8000a1a:	f107 020c 	add.w	r2, r7, #12
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	2302      	movs	r3, #2
 8000a26:	f000 fecd 	bl	80017c4 <HAL_I2C_Master_Transmit>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SHT31_SendCommand+0x40>
        return SHT31_TRANSMIT_ERROR;
 8000a30:	2302      	movs	r3, #2
 8000a32:	e000      	b.n	8000a36 <SHT31_SendCommand+0x42>
    }
    return SHT31_OK;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200006c0 	.word	0x200006c0

08000a44 <SHT31_GetID>:

    return SHT31_OK;
}

// Function to get the sensor ID
SHT31_Status SHT31_GetID(uint8_t* sensor_id) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af02      	add	r7, sp, #8
 8000a4a:	6078      	str	r0, [r7, #4]
    uint8_t serial_number[6];

    if (SHT31_SendCommand(SHT31_READ_SERIAL_NUMBER) != SHT31_OK) {
 8000a4c:	f44f 505e 	mov.w	r0, #14208	@ 0x3780
 8000a50:	f7ff ffd0 	bl	80009f4 <SHT31_SendCommand>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SHT31_GetID+0x1a>
        return SHT31_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e019      	b.n	8000a92 <SHT31_GetID+0x4e>
    }

    HAL_Delay(10);
 8000a5e:	200a      	movs	r0, #10
 8000a60:	f000 fb60 	bl	8001124 <HAL_Delay>

    if (HAL_I2C_Master_Receive(sht31_sensor.hi2c, (sht31_sensor.address << 1), serial_number, 6, HAL_MAX_DELAY) != HAL_OK) {
 8000a64:	4b0d      	ldr	r3, [pc, #52]	@ (8000a9c <SHT31_GetID+0x58>)
 8000a66:	6858      	ldr	r0, [r3, #4]
 8000a68:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <SHT31_GetID+0x58>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	b299      	uxth	r1, r3
 8000a70:	f107 0208 	add.w	r2, r7, #8
 8000a74:	f04f 33ff 	mov.w	r3, #4294967295
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2306      	movs	r3, #6
 8000a7c:	f000 ffba 	bl	80019f4 <HAL_I2C_Master_Receive>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SHT31_GetID+0x46>
        return SHT31_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e003      	b.n	8000a92 <SHT31_GetID+0x4e>
    }

    *sensor_id = serial_number[0];  // Assuming the ID is stored in the first byte of the serial number
 8000a8a:	7a3a      	ldrb	r2, [r7, #8]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	701a      	strb	r2, [r3, #0]

    return SHT31_OK;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200006c0 	.word	0x200006c0

08000aa0 <SHT31_Init>:

// Function to initialize the sensor
SHT31_Status SHT31_Init(I2C_HandleTypeDef* hi2c, uint8_t address, uint8_t expected_id, uint16_t command, UART_HandleTypeDef* huart) {
 8000aa0:	b5b0      	push	{r4, r5, r7, lr}
 8000aa2:	b092      	sub	sp, #72	@ 0x48
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	4611      	mov	r1, r2
 8000aac:	461a      	mov	r2, r3
 8000aae:	4603      	mov	r3, r0
 8000ab0:	70fb      	strb	r3, [r7, #3]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	70bb      	strb	r3, [r7, #2]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	803b      	strh	r3, [r7, #0]
    sht31_sensor.hi2c = hi2c;
 8000aba:	4a2a      	ldr	r2, [pc, #168]	@ (8000b64 <SHT31_Init+0xc4>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6053      	str	r3, [r2, #4]
    sht31_sensor.address = address;
 8000ac0:	4a28      	ldr	r2, [pc, #160]	@ (8000b64 <SHT31_Init+0xc4>)
 8000ac2:	78fb      	ldrb	r3, [r7, #3]
 8000ac4:	7013      	strb	r3, [r2, #0]
    sht31_sensor.command = command;
 8000ac6:	4a27      	ldr	r2, [pc, #156]	@ (8000b64 <SHT31_Init+0xc4>)
 8000ac8:	883b      	ldrh	r3, [r7, #0]
 8000aca:	8113      	strh	r3, [r2, #8]

    uint8_t sensor_id;
    SHT31_Status status = SHT31_GetID(&sensor_id);
 8000acc:	f107 0346 	add.w	r3, r7, #70	@ 0x46
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ffb7 	bl	8000a44 <SHT31_GetID>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (status != SHT31_OK) {
 8000adc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d002      	beq.n	8000aea <SHT31_Init+0x4a>
        return status;
 8000ae4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000ae8:	e038      	b.n	8000b5c <SHT31_Init+0xbc>
    }

    if (sensor_id != expected_id) {
 8000aea:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000aee:	78ba      	ldrb	r2, [r7, #2]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d01a      	beq.n	8000b2a <SHT31_Init+0x8a>
        char error_msg[] = "Sensor ID mismatch!\n";
 8000af4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b68 <SHT31_Init+0xc8>)
 8000af6:	f107 040c 	add.w	r4, r7, #12
 8000afa:	461d      	mov	r5, r3
 8000afc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000afe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b04:	6020      	str	r0, [r4, #0]
 8000b06:	3404      	adds	r4, #4
 8000b08:	7021      	strb	r1, [r4, #0]
        HAL_UART_Transmit(huart, (uint8_t*)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fb6e 	bl	80001f0 <strlen>
 8000b14:	4603      	mov	r3, r0
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	f107 010c 	add.w	r1, r7, #12
 8000b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b20:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8000b22:	f003 f8c7 	bl	8003cb4 <HAL_UART_Transmit>
        return SHT31_ID_MISMATCH;
 8000b26:	2305      	movs	r3, #5
 8000b28:	e018      	b.n	8000b5c <SHT31_Init+0xbc>
    }

    char success_msg[] = "Sensor initialized successfully!\n";
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <SHT31_Init+0xcc>)
 8000b2c:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8000b30:	461d      	mov	r5, r3
 8000b32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b3a:	682b      	ldr	r3, [r5, #0]
 8000b3c:	8023      	strh	r3, [r4, #0]
    HAL_UART_Transmit(huart, (uint8_t*)success_msg, strlen(success_msg), HAL_MAX_DELAY);
 8000b3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fb54 	bl	80001f0 <strlen>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000b50:	f04f 33ff 	mov.w	r3, #4294967295
 8000b54:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8000b56:	f003 f8ad 	bl	8003cb4 <HAL_UART_Transmit>

    return SHT31_OK;
 8000b5a:	2300      	movs	r3, #0
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3748      	adds	r7, #72	@ 0x48
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bdb0      	pop	{r4, r5, r7, pc}
 8000b64:	200006c0 	.word	0x200006c0
 8000b68:	08005650 	.word	0x08005650
 8000b6c:	08005668 	.word	0x08005668

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <HAL_MspInit+0x44>)
 8000b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb4 <HAL_MspInit+0x44>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b82:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <HAL_MspInit+0x44>)
 8000b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <HAL_MspInit+0x44>)
 8000b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b92:	4a08      	ldr	r2, [pc, #32]	@ (8000bb4 <HAL_MspInit+0x44>)
 8000b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b98:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b9a:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_MspInit+0x44>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0ac      	sub	sp, #176	@ 0xb0
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	228c      	movs	r2, #140	@ 0x8c
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f004 f895 	bl	8004d08 <memset>
  if(hi2c->Instance==I2C1)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a21      	ldr	r2, [pc, #132]	@ (8000c68 <HAL_I2C_MspInit+0xb0>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d13b      	bne.n	8000c60 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000be8:	2340      	movs	r3, #64	@ 0x40
 8000bea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf0:	f107 0310 	add.w	r3, r7, #16
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f002 fb35 	bl	8003264 <HAL_RCCEx_PeriphCLKConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c00:	f7ff fef2 	bl	80009e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c04:	4b19      	ldr	r3, [pc, #100]	@ (8000c6c <HAL_I2C_MspInit+0xb4>)
 8000c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c08:	4a18      	ldr	r2, [pc, #96]	@ (8000c6c <HAL_I2C_MspInit+0xb4>)
 8000c0a:	f043 0302 	orr.w	r3, r3, #2
 8000c0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c10:	4b16      	ldr	r3, [pc, #88]	@ (8000c6c <HAL_I2C_MspInit+0xb4>)
 8000c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c1c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c24:	2312      	movs	r3, #18
 8000c26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c36:	2304      	movs	r3, #4
 8000c38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c40:	4619      	mov	r1, r3
 8000c42:	480b      	ldr	r0, [pc, #44]	@ (8000c70 <HAL_I2C_MspInit+0xb8>)
 8000c44:	f000 fb78 	bl	8001338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c48:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <HAL_I2C_MspInit+0xb4>)
 8000c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c4c:	4a07      	ldr	r2, [pc, #28]	@ (8000c6c <HAL_I2C_MspInit+0xb4>)
 8000c4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c52:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c54:	4b05      	ldr	r3, [pc, #20]	@ (8000c6c <HAL_I2C_MspInit+0xb4>)
 8000c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c60:	bf00      	nop
 8000c62:	37b0      	adds	r7, #176	@ 0xb0
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40005400 	.word	0x40005400
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	48000400 	.word	0x48000400

08000c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b0ae      	sub	sp, #184	@ 0xb8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c8c:	f107 0318 	add.w	r3, r7, #24
 8000c90:	228c      	movs	r2, #140	@ 0x8c
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f004 f837 	bl	8004d08 <memset>
  if(huart->Instance==LPUART1)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a43      	ldr	r2, [pc, #268]	@ (8000dac <HAL_UART_MspInit+0x138>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d13e      	bne.n	8000d22 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ca4:	2320      	movs	r3, #32
 8000ca6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cac:	f107 0318 	add.w	r3, r7, #24
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f002 fad7 	bl	8003264 <HAL_RCCEx_PeriphCLKConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cbc:	f7ff fe94 	bl	80009e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000cc0:	4b3b      	ldr	r3, [pc, #236]	@ (8000db0 <HAL_UART_MspInit+0x13c>)
 8000cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000cc4:	4a3a      	ldr	r2, [pc, #232]	@ (8000db0 <HAL_UART_MspInit+0x13c>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000ccc:	4b38      	ldr	r3, [pc, #224]	@ (8000db0 <HAL_UART_MspInit+0x13c>)
 8000cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cd8:	4b35      	ldr	r3, [pc, #212]	@ (8000db0 <HAL_UART_MspInit+0x13c>)
 8000cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cdc:	4a34      	ldr	r2, [pc, #208]	@ (8000db0 <HAL_UART_MspInit+0x13c>)
 8000cde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ce2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce4:	4b32      	ldr	r3, [pc, #200]	@ (8000db0 <HAL_UART_MspInit+0x13c>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000cf0:	f001 fc6a 	bl	80025c8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cf4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000cf8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d0e:	2308      	movs	r3, #8
 8000d10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d14:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4826      	ldr	r0, [pc, #152]	@ (8000db4 <HAL_UART_MspInit+0x140>)
 8000d1c:	f000 fb0c 	bl	8001338 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d20:	e03f      	b.n	8000da2 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART3)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a24      	ldr	r2, [pc, #144]	@ (8000db8 <HAL_UART_MspInit+0x144>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d13a      	bne.n	8000da2 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d34:	f107 0318 	add.w	r3, r7, #24
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f002 fa93 	bl	8003264 <HAL_RCCEx_PeriphCLKConfig>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000d44:	f7ff fe50 	bl	80009e8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d48:	4b19      	ldr	r3, [pc, #100]	@ (8000db0 <HAL_UART_MspInit+0x13c>)
 8000d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d4c:	4a18      	ldr	r2, [pc, #96]	@ (8000db0 <HAL_UART_MspInit+0x13c>)
 8000d4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d52:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d54:	4b16      	ldr	r3, [pc, #88]	@ (8000db0 <HAL_UART_MspInit+0x13c>)
 8000d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d60:	4b13      	ldr	r3, [pc, #76]	@ (8000db0 <HAL_UART_MspInit+0x13c>)
 8000d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d64:	4a12      	ldr	r2, [pc, #72]	@ (8000db0 <HAL_UART_MspInit+0x13c>)
 8000d66:	f043 0304 	orr.w	r3, r3, #4
 8000d6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6c:	4b10      	ldr	r3, [pc, #64]	@ (8000db0 <HAL_UART_MspInit+0x13c>)
 8000d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d70:	f003 0304 	and.w	r3, r3, #4
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d78:	2330      	movs	r3, #48	@ 0x30
 8000d7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d90:	2307      	movs	r3, #7
 8000d92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d96:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4807      	ldr	r0, [pc, #28]	@ (8000dbc <HAL_UART_MspInit+0x148>)
 8000d9e:	f000 facb 	bl	8001338 <HAL_GPIO_Init>
}
 8000da2:	bf00      	nop
 8000da4:	37b8      	adds	r7, #184	@ 0xb8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40008000 	.word	0x40008000
 8000db0:	40021000 	.word	0x40021000
 8000db4:	48001800 	.word	0x48001800
 8000db8:	40004800 	.word	0x40004800
 8000dbc:	48000800 	.word	0x48000800

08000dc0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b0ae      	sub	sp, #184	@ 0xb8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd8:	f107 0318 	add.w	r3, r7, #24
 8000ddc:	228c      	movs	r2, #140	@ 0x8c
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f003 ff91 	bl	8004d08 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000dee:	d17c      	bne.n	8000eea <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000df0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000df4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000df6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000dfa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e02:	2301      	movs	r3, #1
 8000e04:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000e06:	2318      	movs	r3, #24
 8000e08:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e12:	2302      	movs	r3, #2
 8000e14:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000e16:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e1a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e1c:	f107 0318 	add.w	r3, r7, #24
 8000e20:	4618      	mov	r0, r3
 8000e22:	f002 fa1f 	bl	8003264 <HAL_RCCEx_PeriphCLKConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000e2c:	f7ff fddc 	bl	80009e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e30:	4b30      	ldr	r3, [pc, #192]	@ (8000ef4 <HAL_PCD_MspInit+0x134>)
 8000e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e34:	4a2f      	ldr	r2, [pc, #188]	@ (8000ef4 <HAL_PCD_MspInit+0x134>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef4 <HAL_PCD_MspInit+0x134>)
 8000e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e48:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000e4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e62:	230a      	movs	r3, #10
 8000e64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e68:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e72:	f000 fa61 	bl	8001338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e94:	f000 fa50 	bl	8001338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e98:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <HAL_PCD_MspInit+0x134>)
 8000e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9c:	4a15      	ldr	r2, [pc, #84]	@ (8000ef4 <HAL_PCD_MspInit+0x134>)
 8000e9e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ea2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ea4:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <HAL_PCD_MspInit+0x134>)
 8000ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eb0:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <HAL_PCD_MspInit+0x134>)
 8000eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d114      	bne.n	8000ee6 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef4 <HAL_PCD_MspInit+0x134>)
 8000ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec0:	4a0c      	ldr	r2, [pc, #48]	@ (8000ef4 <HAL_PCD_MspInit+0x134>)
 8000ec2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ec6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <HAL_PCD_MspInit+0x134>)
 8000eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ecc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000ed4:	f001 fb68 	bl	80025a8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ed8:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <HAL_PCD_MspInit+0x134>)
 8000eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000edc:	4a05      	ldr	r2, [pc, #20]	@ (8000ef4 <HAL_PCD_MspInit+0x134>)
 8000ede:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000ee2:	6593      	str	r3, [r2, #88]	@ 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ee4:	e001      	b.n	8000eea <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8000ee6:	f001 fb5f 	bl	80025a8 <HAL_PWREx_EnableVddUSB>
}
 8000eea:	bf00      	nop
 8000eec:	37b8      	adds	r7, #184	@ 0xb8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <NMI_Handler+0x4>

08000f00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <MemManage_Handler+0x4>

08000f10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4e:	f000 f8c9 	bl	80010e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f60:	4a14      	ldr	r2, [pc, #80]	@ (8000fb4 <_sbrk+0x5c>)
 8000f62:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <_sbrk+0x60>)
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f6c:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d102      	bne.n	8000f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f74:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <_sbrk+0x64>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	@ (8000fc0 <_sbrk+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d207      	bcs.n	8000f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f88:	f003 fec6 	bl	8004d18 <__errno>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	220c      	movs	r2, #12
 8000f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	e009      	b.n	8000fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9e:	4b07      	ldr	r3, [pc, #28]	@ (8000fbc <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a05      	ldr	r2, [pc, #20]	@ (8000fbc <_sbrk+0x64>)
 8000fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20050000 	.word	0x20050000
 8000fb8:	00000400 	.word	0x00000400
 8000fbc:	200006d4 	.word	0x200006d4
 8000fc0:	20000828 	.word	0x20000828

08000fc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <SystemInit+0x20>)
 8000fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fce:	4a05      	ldr	r2, [pc, #20]	@ (8000fe4 <SystemInit+0x20>)
 8000fd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fe8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001020 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fec:	f7ff ffea 	bl	8000fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff0:	480c      	ldr	r0, [pc, #48]	@ (8001024 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ff2:	490d      	ldr	r1, [pc, #52]	@ (8001028 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800102c <LoopForever+0xe>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff8:	e002      	b.n	8001000 <LoopCopyDataInit>

08000ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffe:	3304      	adds	r3, #4

08001000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001004:	d3f9      	bcc.n	8000ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001006:	4a0a      	ldr	r2, [pc, #40]	@ (8001030 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001008:	4c0a      	ldr	r4, [pc, #40]	@ (8001034 <LoopForever+0x16>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800100c:	e001      	b.n	8001012 <LoopFillZerobss>

0800100e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001010:	3204      	adds	r2, #4

08001012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001014:	d3fb      	bcc.n	800100e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001016:	f003 fe85 	bl	8004d24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800101a:	f7ff fab9 	bl	8000590 <main>

0800101e <LoopForever>:

LoopForever:
    b LoopForever
 800101e:	e7fe      	b.n	800101e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001020:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001028:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800102c:	08005718 	.word	0x08005718
  ldr r2, =_sbss
 8001030:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001034:	20000824 	.word	0x20000824

08001038 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC1_2_IRQHandler>

0800103a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001044:	2003      	movs	r0, #3
 8001046:	f000 f943 	bl	80012d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800104a:	2000      	movs	r0, #0
 800104c:	f000 f80e 	bl	800106c <HAL_InitTick>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d002      	beq.n	800105c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	71fb      	strb	r3, [r7, #7]
 800105a:	e001      	b.n	8001060 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800105c:	f7ff fd88 	bl	8000b70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001060:	79fb      	ldrb	r3, [r7, #7]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001078:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <HAL_InitTick+0x6c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d023      	beq.n	80010c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001080:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <HAL_InitTick+0x70>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <HAL_InitTick+0x6c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800108e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001092:	fbb2 f3f3 	udiv	r3, r2, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f941 	bl	800131e <HAL_SYSTICK_Config>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10f      	bne.n	80010c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b0f      	cmp	r3, #15
 80010a6:	d809      	bhi.n	80010bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a8:	2200      	movs	r2, #0
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f000 f919 	bl	80012e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010b4:	4a0a      	ldr	r2, [pc, #40]	@ (80010e0 <HAL_InitTick+0x74>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	e007      	b.n	80010cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	73fb      	strb	r3, [r7, #15]
 80010c0:	e004      	b.n	80010cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	73fb      	strb	r3, [r7, #15]
 80010c6:	e001      	b.n	80010cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000008 	.word	0x20000008
 80010dc:	20000000 	.word	0x20000000
 80010e0:	20000004 	.word	0x20000004

080010e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_IncTick+0x20>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <HAL_IncTick+0x24>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a04      	ldr	r2, [pc, #16]	@ (8001108 <HAL_IncTick+0x24>)
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000008 	.word	0x20000008
 8001108:	200006d8 	.word	0x200006d8

0800110c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b03      	ldr	r3, [pc, #12]	@ (8001120 <HAL_GetTick+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	200006d8 	.word	0x200006d8

08001124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800112c:	f7ff ffee 	bl	800110c <HAL_GetTick>
 8001130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113c:	d005      	beq.n	800114a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <HAL_Delay+0x44>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800114a:	bf00      	nop
 800114c:	f7ff ffde 	bl	800110c <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	429a      	cmp	r2, r3
 800115a:	d8f7      	bhi.n	800114c <HAL_Delay+0x28>
  {
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000008 	.word	0x20000008

0800116c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800117c:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001188:	4013      	ands	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001194:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800119c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119e:	4a04      	ldr	r2, [pc, #16]	@ (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	60d3      	str	r3, [r2, #12]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b8:	4b04      	ldr	r3, [pc, #16]	@ (80011cc <__NVIC_GetPriorityGrouping+0x18>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	f003 0307 	and.w	r3, r3, #7
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	db0a      	blt.n	80011fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	490c      	ldr	r1, [pc, #48]	@ (800121c <__NVIC_SetPriority+0x4c>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	0112      	lsls	r2, r2, #4
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	440b      	add	r3, r1
 80011f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f8:	e00a      	b.n	8001210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4908      	ldr	r1, [pc, #32]	@ (8001220 <__NVIC_SetPriority+0x50>)
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	3b04      	subs	r3, #4
 8001208:	0112      	lsls	r2, r2, #4
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	440b      	add	r3, r1
 800120e:	761a      	strb	r2, [r3, #24]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000e100 	.word	0xe000e100
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	@ 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f1c3 0307 	rsb	r3, r3, #7
 800123e:	2b04      	cmp	r3, #4
 8001240:	bf28      	it	cs
 8001242:	2304      	movcs	r3, #4
 8001244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3304      	adds	r3, #4
 800124a:	2b06      	cmp	r3, #6
 800124c:	d902      	bls.n	8001254 <NVIC_EncodePriority+0x30>
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3b03      	subs	r3, #3
 8001252:	e000      	b.n	8001256 <NVIC_EncodePriority+0x32>
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	f04f 32ff 	mov.w	r2, #4294967295
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43da      	mvns	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	401a      	ands	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800126c:	f04f 31ff 	mov.w	r1, #4294967295
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	fa01 f303 	lsl.w	r3, r1, r3
 8001276:	43d9      	mvns	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	4313      	orrs	r3, r2
         );
}
 800127e:	4618      	mov	r0, r3
 8001280:	3724      	adds	r7, #36	@ 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800129c:	d301      	bcc.n	80012a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800129e:	2301      	movs	r3, #1
 80012a0:	e00f      	b.n	80012c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a2:	4a0a      	ldr	r2, [pc, #40]	@ (80012cc <SysTick_Config+0x40>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012aa:	210f      	movs	r1, #15
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295
 80012b0:	f7ff ff8e 	bl	80011d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b4:	4b05      	ldr	r3, [pc, #20]	@ (80012cc <SysTick_Config+0x40>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ba:	4b04      	ldr	r3, [pc, #16]	@ (80012cc <SysTick_Config+0x40>)
 80012bc:	2207      	movs	r2, #7
 80012be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	e000e010 	.word	0xe000e010

080012d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff ff47 	bl	800116c <__NVIC_SetPriorityGrouping>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b086      	sub	sp, #24
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4603      	mov	r3, r0
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
 80012f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012f8:	f7ff ff5c 	bl	80011b4 <__NVIC_GetPriorityGrouping>
 80012fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	68b9      	ldr	r1, [r7, #8]
 8001302:	6978      	ldr	r0, [r7, #20]
 8001304:	f7ff ff8e 	bl	8001224 <NVIC_EncodePriority>
 8001308:	4602      	mov	r2, r0
 800130a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff5d 	bl	80011d0 <__NVIC_SetPriority>
}
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ffb0 	bl	800128c <SysTick_Config>
 800132c:	4603      	mov	r3, r0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001338:	b480      	push	{r7}
 800133a:	b087      	sub	sp, #28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001346:	e166      	b.n	8001616 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	2101      	movs	r1, #1
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	fa01 f303 	lsl.w	r3, r1, r3
 8001354:	4013      	ands	r3, r2
 8001356:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 8158 	beq.w	8001610 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b01      	cmp	r3, #1
 800136a:	d005      	beq.n	8001378 <HAL_GPIO_Init+0x40>
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d130      	bne.n	80013da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	2203      	movs	r2, #3
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ae:	2201      	movs	r2, #1
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	091b      	lsrs	r3, r3, #4
 80013c4:	f003 0201 	and.w	r2, r3, #1
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	d017      	beq.n	8001416 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	2203      	movs	r2, #3
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0303 	and.w	r3, r3, #3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d123      	bne.n	800146a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	08da      	lsrs	r2, r3, #3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3208      	adds	r2, #8
 800142a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800142e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	220f      	movs	r2, #15
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	691a      	ldr	r2, [r3, #16]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	08da      	lsrs	r2, r3, #3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3208      	adds	r2, #8
 8001464:	6939      	ldr	r1, [r7, #16]
 8001466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 0203 	and.w	r2, r3, #3
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 80b2 	beq.w	8001610 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ac:	4b61      	ldr	r3, [pc, #388]	@ (8001634 <HAL_GPIO_Init+0x2fc>)
 80014ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014b0:	4a60      	ldr	r2, [pc, #384]	@ (8001634 <HAL_GPIO_Init+0x2fc>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80014b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001634 <HAL_GPIO_Init+0x2fc>)
 80014ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014c4:	4a5c      	ldr	r2, [pc, #368]	@ (8001638 <HAL_GPIO_Init+0x300>)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	089b      	lsrs	r3, r3, #2
 80014ca:	3302      	adds	r3, #2
 80014cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	220f      	movs	r2, #15
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014ee:	d02b      	beq.n	8001548 <HAL_GPIO_Init+0x210>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a52      	ldr	r2, [pc, #328]	@ (800163c <HAL_GPIO_Init+0x304>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d025      	beq.n	8001544 <HAL_GPIO_Init+0x20c>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a51      	ldr	r2, [pc, #324]	@ (8001640 <HAL_GPIO_Init+0x308>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d01f      	beq.n	8001540 <HAL_GPIO_Init+0x208>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a50      	ldr	r2, [pc, #320]	@ (8001644 <HAL_GPIO_Init+0x30c>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d019      	beq.n	800153c <HAL_GPIO_Init+0x204>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a4f      	ldr	r2, [pc, #316]	@ (8001648 <HAL_GPIO_Init+0x310>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d013      	beq.n	8001538 <HAL_GPIO_Init+0x200>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a4e      	ldr	r2, [pc, #312]	@ (800164c <HAL_GPIO_Init+0x314>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d00d      	beq.n	8001534 <HAL_GPIO_Init+0x1fc>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a4d      	ldr	r2, [pc, #308]	@ (8001650 <HAL_GPIO_Init+0x318>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d007      	beq.n	8001530 <HAL_GPIO_Init+0x1f8>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a4c      	ldr	r2, [pc, #304]	@ (8001654 <HAL_GPIO_Init+0x31c>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d101      	bne.n	800152c <HAL_GPIO_Init+0x1f4>
 8001528:	2307      	movs	r3, #7
 800152a:	e00e      	b.n	800154a <HAL_GPIO_Init+0x212>
 800152c:	2308      	movs	r3, #8
 800152e:	e00c      	b.n	800154a <HAL_GPIO_Init+0x212>
 8001530:	2306      	movs	r3, #6
 8001532:	e00a      	b.n	800154a <HAL_GPIO_Init+0x212>
 8001534:	2305      	movs	r3, #5
 8001536:	e008      	b.n	800154a <HAL_GPIO_Init+0x212>
 8001538:	2304      	movs	r3, #4
 800153a:	e006      	b.n	800154a <HAL_GPIO_Init+0x212>
 800153c:	2303      	movs	r3, #3
 800153e:	e004      	b.n	800154a <HAL_GPIO_Init+0x212>
 8001540:	2302      	movs	r3, #2
 8001542:	e002      	b.n	800154a <HAL_GPIO_Init+0x212>
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <HAL_GPIO_Init+0x212>
 8001548:	2300      	movs	r3, #0
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	f002 0203 	and.w	r2, r2, #3
 8001550:	0092      	lsls	r2, r2, #2
 8001552:	4093      	lsls	r3, r2
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800155a:	4937      	ldr	r1, [pc, #220]	@ (8001638 <HAL_GPIO_Init+0x300>)
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3302      	adds	r3, #2
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001568:	4b3b      	ldr	r3, [pc, #236]	@ (8001658 <HAL_GPIO_Init+0x320>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	43db      	mvns	r3, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800158c:	4a32      	ldr	r2, [pc, #200]	@ (8001658 <HAL_GPIO_Init+0x320>)
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001592:	4b31      	ldr	r3, [pc, #196]	@ (8001658 <HAL_GPIO_Init+0x320>)
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	43db      	mvns	r3, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015b6:	4a28      	ldr	r2, [pc, #160]	@ (8001658 <HAL_GPIO_Init+0x320>)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015bc:	4b26      	ldr	r3, [pc, #152]	@ (8001658 <HAL_GPIO_Init+0x320>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001658 <HAL_GPIO_Init+0x320>)
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001658 <HAL_GPIO_Init+0x320>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800160a:	4a13      	ldr	r2, [pc, #76]	@ (8001658 <HAL_GPIO_Init+0x320>)
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	3301      	adds	r3, #1
 8001614:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	fa22 f303 	lsr.w	r3, r2, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	f47f ae91 	bne.w	8001348 <HAL_GPIO_Init+0x10>
  }
}
 8001626:	bf00      	nop
 8001628:	bf00      	nop
 800162a:	371c      	adds	r7, #28
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	40021000 	.word	0x40021000
 8001638:	40010000 	.word	0x40010000
 800163c:	48000400 	.word	0x48000400
 8001640:	48000800 	.word	0x48000800
 8001644:	48000c00 	.word	0x48000c00
 8001648:	48001000 	.word	0x48001000
 800164c:	48001400 	.word	0x48001400
 8001650:	48001800 	.word	0x48001800
 8001654:	48001c00 	.word	0x48001c00
 8001658:	40010400 	.word	0x40010400

0800165c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	807b      	strh	r3, [r7, #2]
 8001668:	4613      	mov	r3, r2
 800166a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800166c:	787b      	ldrb	r3, [r7, #1]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001672:	887a      	ldrh	r2, [r7, #2]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001678:	e002      	b.n	8001680 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e08d      	b.n	80017ba <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d106      	bne.n	80016b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff fa80 	bl	8000bb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2224      	movs	r2, #36	@ 0x24
 80016bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0201 	bic.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d107      	bne.n	8001706 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	e006      	b.n	8001714 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001712:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d108      	bne.n	800172e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	e007      	b.n	800173e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800173c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800174c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001750:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001760:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691a      	ldr	r2, [r3, #16]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69d9      	ldr	r1, [r3, #28]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a1a      	ldr	r2, [r3, #32]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 0201 	orr.w	r2, r2, #1
 800179a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2220      	movs	r2, #32
 80017a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af02      	add	r7, sp, #8
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	461a      	mov	r2, r3
 80017d0:	460b      	mov	r3, r1
 80017d2:	817b      	strh	r3, [r7, #10]
 80017d4:	4613      	mov	r3, r2
 80017d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b20      	cmp	r3, #32
 80017e2:	f040 80fd 	bne.w	80019e0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d101      	bne.n	80017f4 <HAL_I2C_Master_Transmit+0x30>
 80017f0:	2302      	movs	r3, #2
 80017f2:	e0f6      	b.n	80019e2 <HAL_I2C_Master_Transmit+0x21e>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017fc:	f7ff fc86 	bl	800110c <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2319      	movs	r3, #25
 8001808:	2201      	movs	r2, #1
 800180a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f000 fa0a 	bl	8001c28 <I2C_WaitOnFlagUntilTimeout>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e0e1      	b.n	80019e2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2221      	movs	r2, #33	@ 0x21
 8001822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2210      	movs	r2, #16
 800182a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	893a      	ldrh	r2, [r7, #8]
 800183e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800184a:	b29b      	uxth	r3, r3
 800184c:	2bff      	cmp	r3, #255	@ 0xff
 800184e:	d906      	bls.n	800185e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	22ff      	movs	r2, #255	@ 0xff
 8001854:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001856:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	e007      	b.n	800186e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001862:	b29a      	uxth	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001868:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800186c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001872:	2b00      	cmp	r3, #0
 8001874:	d024      	beq.n	80018c0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	781a      	ldrb	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001890:	b29b      	uxth	r3, r3
 8001892:	3b01      	subs	r3, #1
 8001894:	b29a      	uxth	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800189e:	3b01      	subs	r3, #1
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	3301      	adds	r3, #1
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	8979      	ldrh	r1, [r7, #10]
 80018b2:	4b4e      	ldr	r3, [pc, #312]	@ (80019ec <HAL_I2C_Master_Transmit+0x228>)
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f000 fc05 	bl	80020c8 <I2C_TransferConfig>
 80018be:	e066      	b.n	800198e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	8979      	ldrh	r1, [r7, #10]
 80018c8:	4b48      	ldr	r3, [pc, #288]	@ (80019ec <HAL_I2C_Master_Transmit+0x228>)
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 fbfa 	bl	80020c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80018d4:	e05b      	b.n	800198e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	6a39      	ldr	r1, [r7, #32]
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 f9fd 	bl	8001cda <I2C_WaitOnTXISFlagUntilTimeout>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e07b      	b.n	80019e2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ee:	781a      	ldrb	r2, [r3, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001904:	b29b      	uxth	r3, r3
 8001906:	3b01      	subs	r3, #1
 8001908:	b29a      	uxth	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001912:	3b01      	subs	r3, #1
 8001914:	b29a      	uxth	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800191e:	b29b      	uxth	r3, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	d034      	beq.n	800198e <HAL_I2C_Master_Transmit+0x1ca>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001928:	2b00      	cmp	r3, #0
 800192a:	d130      	bne.n	800198e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	6a3b      	ldr	r3, [r7, #32]
 8001932:	2200      	movs	r2, #0
 8001934:	2180      	movs	r1, #128	@ 0x80
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 f976 	bl	8001c28 <I2C_WaitOnFlagUntilTimeout>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e04d      	b.n	80019e2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800194a:	b29b      	uxth	r3, r3
 800194c:	2bff      	cmp	r3, #255	@ 0xff
 800194e:	d90e      	bls.n	800196e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	22ff      	movs	r2, #255	@ 0xff
 8001954:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800195a:	b2da      	uxtb	r2, r3
 800195c:	8979      	ldrh	r1, [r7, #10]
 800195e:	2300      	movs	r3, #0
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f000 fbae 	bl	80020c8 <I2C_TransferConfig>
 800196c:	e00f      	b.n	800198e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001972:	b29a      	uxth	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800197c:	b2da      	uxtb	r2, r3
 800197e:	8979      	ldrh	r1, [r7, #10]
 8001980:	2300      	movs	r3, #0
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f000 fb9d 	bl	80020c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001992:	b29b      	uxth	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	d19e      	bne.n	80018d6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	6a39      	ldr	r1, [r7, #32]
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 f9e3 	bl	8001d68 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e01a      	b.n	80019e2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2220      	movs	r2, #32
 80019b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6859      	ldr	r1, [r3, #4]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <HAL_I2C_Master_Transmit+0x22c>)
 80019c0:	400b      	ands	r3, r1
 80019c2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2220      	movs	r2, #32
 80019c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	e000      	b.n	80019e2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80019e0:	2302      	movs	r3, #2
  }
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	80002000 	.word	0x80002000
 80019f0:	fe00e800 	.word	0xfe00e800

080019f4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af02      	add	r7, sp, #8
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	607a      	str	r2, [r7, #4]
 80019fe:	461a      	mov	r2, r3
 8001a00:	460b      	mov	r3, r1
 8001a02:	817b      	strh	r3, [r7, #10]
 8001a04:	4613      	mov	r3, r2
 8001a06:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b20      	cmp	r3, #32
 8001a12:	f040 80db 	bne.w	8001bcc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d101      	bne.n	8001a24 <HAL_I2C_Master_Receive+0x30>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e0d4      	b.n	8001bce <HAL_I2C_Master_Receive+0x1da>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a2c:	f7ff fb6e 	bl	800110c <HAL_GetTick>
 8001a30:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	2319      	movs	r3, #25
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f000 f8f2 	bl	8001c28 <I2C_WaitOnFlagUntilTimeout>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e0bf      	b.n	8001bce <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2222      	movs	r2, #34	@ 0x22
 8001a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2210      	movs	r2, #16
 8001a5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	893a      	ldrh	r2, [r7, #8]
 8001a6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	2bff      	cmp	r3, #255	@ 0xff
 8001a7e:	d90e      	bls.n	8001a9e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2201      	movs	r2, #1
 8001a84:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	8979      	ldrh	r1, [r7, #10]
 8001a8e:	4b52      	ldr	r3, [pc, #328]	@ (8001bd8 <HAL_I2C_Master_Receive+0x1e4>)
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 fb16 	bl	80020c8 <I2C_TransferConfig>
 8001a9c:	e06d      	b.n	8001b7a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	8979      	ldrh	r1, [r7, #10]
 8001ab0:	4b49      	ldr	r3, [pc, #292]	@ (8001bd8 <HAL_I2C_Master_Receive+0x1e4>)
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f000 fb05 	bl	80020c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001abe:	e05c      	b.n	8001b7a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	6a39      	ldr	r1, [r7, #32]
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 f993 	bl	8001df0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e07c      	b.n	8001bce <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	3b01      	subs	r3, #1
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d034      	beq.n	8001b7a <HAL_I2C_Master_Receive+0x186>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d130      	bne.n	8001b7a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2180      	movs	r1, #128	@ 0x80
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f000 f880 	bl	8001c28 <I2C_WaitOnFlagUntilTimeout>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e04d      	b.n	8001bce <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	2bff      	cmp	r3, #255	@ 0xff
 8001b3a:	d90e      	bls.n	8001b5a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	22ff      	movs	r2, #255	@ 0xff
 8001b40:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	8979      	ldrh	r1, [r7, #10]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 fab8 	bl	80020c8 <I2C_TransferConfig>
 8001b58:	e00f      	b.n	8001b7a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	8979      	ldrh	r1, [r7, #10]
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f000 faa7 	bl	80020c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d19d      	bne.n	8001ac0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	6a39      	ldr	r1, [r7, #32]
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 f8ed 	bl	8001d68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e01a      	b.n	8001bce <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6859      	ldr	r1, [r3, #4]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <HAL_I2C_Master_Receive+0x1e8>)
 8001bac:	400b      	ands	r3, r1
 8001bae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e000      	b.n	8001bce <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001bcc:	2302      	movs	r3, #2
  }
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	80002400 	.word	0x80002400
 8001bdc:	fe00e800 	.word	0xfe00e800

08001be0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d103      	bne.n	8001bfe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d007      	beq.n	8001c1c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699a      	ldr	r2, [r3, #24]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	619a      	str	r2, [r3, #24]
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	4613      	mov	r3, r2
 8001c36:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c38:	e03b      	b.n	8001cb2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	6839      	ldr	r1, [r7, #0]
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 f962 	bl	8001f08 <I2C_IsErrorOccurred>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e041      	b.n	8001cd2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c54:	d02d      	beq.n	8001cb2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c56:	f7ff fa59 	bl	800110c <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d302      	bcc.n	8001c6c <I2C_WaitOnFlagUntilTimeout+0x44>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d122      	bne.n	8001cb2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699a      	ldr	r2, [r3, #24]
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	4013      	ands	r3, r2
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	bf0c      	ite	eq
 8001c7c:	2301      	moveq	r3, #1
 8001c7e:	2300      	movne	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	461a      	mov	r2, r3
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d113      	bne.n	8001cb2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	f043 0220 	orr.w	r2, r3, #32
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2220      	movs	r2, #32
 8001c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e00f      	b.n	8001cd2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	699a      	ldr	r2, [r3, #24]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	bf0c      	ite	eq
 8001cc2:	2301      	moveq	r3, #1
 8001cc4:	2300      	movne	r3, #0
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d0b4      	beq.n	8001c3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ce6:	e033      	b.n	8001d50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	68b9      	ldr	r1, [r7, #8]
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 f90b 	bl	8001f08 <I2C_IsErrorOccurred>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e031      	b.n	8001d60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d02:	d025      	beq.n	8001d50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d04:	f7ff fa02 	bl	800110c <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d302      	bcc.n	8001d1a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d11a      	bne.n	8001d50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d013      	beq.n	8001d50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2c:	f043 0220 	orr.w	r2, r3, #32
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2220      	movs	r2, #32
 8001d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e007      	b.n	8001d60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d1c4      	bne.n	8001ce8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d74:	e02f      	b.n	8001dd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	68b9      	ldr	r1, [r7, #8]
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 f8c4 	bl	8001f08 <I2C_IsErrorOccurred>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e02d      	b.n	8001de6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d8a:	f7ff f9bf 	bl	800110c <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d302      	bcc.n	8001da0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d11a      	bne.n	8001dd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	f003 0320 	and.w	r3, r3, #32
 8001daa:	2b20      	cmp	r3, #32
 8001dac:	d013      	beq.n	8001dd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db2:	f043 0220 	orr.w	r2, r3, #32
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e007      	b.n	8001de6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f003 0320 	and.w	r3, r3, #32
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d1c8      	bne.n	8001d76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001e00:	e071      	b.n	8001ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 f87e 	bl	8001f08 <I2C_IsErrorOccurred>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	f003 0320 	and.w	r3, r3, #32
 8001e20:	2b20      	cmp	r3, #32
 8001e22:	d13b      	bne.n	8001e9c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8001e24:	7dfb      	ldrb	r3, [r7, #23]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d138      	bne.n	8001e9c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	d105      	bne.n	8001e44 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b10      	cmp	r3, #16
 8001e50:	d121      	bne.n	8001e96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2210      	movs	r2, #16
 8001e58:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2220      	movs	r2, #32
 8001e66:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6859      	ldr	r1, [r3, #4]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	4b24      	ldr	r3, [pc, #144]	@ (8001f04 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8001e74:	400b      	ands	r3, r1
 8001e76:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	75fb      	strb	r3, [r7, #23]
 8001e94:	e002      	b.n	8001e9c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001e9c:	f7ff f936 	bl	800110c <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d302      	bcc.n	8001eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d119      	bne.n	8001ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8001eb2:	7dfb      	ldrb	r3, [r7, #23]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d116      	bne.n	8001ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d00f      	beq.n	8001ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eca:	f043 0220 	orr.w	r2, r3, #32
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d002      	beq.n	8001efa <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8001ef4:	7dfb      	ldrb	r3, [r7, #23]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d083      	beq.n	8001e02 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8001efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	fe00e800 	.word	0xfe00e800

08001f08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	@ 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d068      	beq.n	8002006 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2210      	movs	r2, #16
 8001f3a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f3c:	e049      	b.n	8001fd2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f44:	d045      	beq.n	8001fd2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f46:	f7ff f8e1 	bl	800110c <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d302      	bcc.n	8001f5c <I2C_IsErrorOccurred+0x54>
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d13a      	bne.n	8001fd2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f6e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f7e:	d121      	bne.n	8001fc4 <I2C_IsErrorOccurred+0xbc>
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f86:	d01d      	beq.n	8001fc4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001f88:	7cfb      	ldrb	r3, [r7, #19]
 8001f8a:	2b20      	cmp	r3, #32
 8001f8c:	d01a      	beq.n	8001fc4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f9c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f9e:	f7ff f8b5 	bl	800110c <HAL_GetTick>
 8001fa2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fa4:	e00e      	b.n	8001fc4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001fa6:	f7ff f8b1 	bl	800110c <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b19      	cmp	r3, #25
 8001fb2:	d907      	bls.n	8001fc4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	f043 0320 	orr.w	r3, r3, #32
 8001fba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001fc2:	e006      	b.n	8001fd2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	f003 0320 	and.w	r3, r3, #32
 8001fce:	2b20      	cmp	r3, #32
 8001fd0:	d1e9      	bne.n	8001fa6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f003 0320 	and.w	r3, r3, #32
 8001fdc:	2b20      	cmp	r3, #32
 8001fde:	d003      	beq.n	8001fe8 <I2C_IsErrorOccurred+0xe0>
 8001fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0aa      	beq.n	8001f3e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d103      	bne.n	8001ff8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	f043 0304 	orr.w	r3, r3, #4
 8001ffe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00b      	beq.n	8002030 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002028:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00b      	beq.n	8002052 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	f043 0308 	orr.w	r3, r3, #8
 8002040:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800204a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00b      	beq.n	8002074 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	f043 0302 	orr.w	r3, r3, #2
 8002062:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800206c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002074:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002078:	2b00      	cmp	r3, #0
 800207a:	d01c      	beq.n	80020b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f7ff fdaf 	bl	8001be0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6859      	ldr	r1, [r3, #4]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b0d      	ldr	r3, [pc, #52]	@ (80020c4 <I2C_IsErrorOccurred+0x1bc>)
 800208e:	400b      	ands	r3, r1
 8002090:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	431a      	orrs	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2220      	movs	r2, #32
 80020a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80020b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3728      	adds	r7, #40	@ 0x28
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	fe00e800 	.word	0xfe00e800

080020c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b087      	sub	sp, #28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	460b      	mov	r3, r1
 80020d4:	817b      	strh	r3, [r7, #10]
 80020d6:	4613      	mov	r3, r2
 80020d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020da:	897b      	ldrh	r3, [r7, #10]
 80020dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020e0:	7a7b      	ldrb	r3, [r7, #9]
 80020e2:	041b      	lsls	r3, r3, #16
 80020e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	0d5b      	lsrs	r3, r3, #21
 8002102:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002106:	4b08      	ldr	r3, [pc, #32]	@ (8002128 <I2C_TransferConfig+0x60>)
 8002108:	430b      	orrs	r3, r1
 800210a:	43db      	mvns	r3, r3
 800210c:	ea02 0103 	and.w	r1, r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	430a      	orrs	r2, r1
 8002118:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800211a:	bf00      	nop
 800211c:	371c      	adds	r7, #28
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	03ff63ff 	.word	0x03ff63ff

0800212c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b20      	cmp	r3, #32
 8002140:	d138      	bne.n	80021b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800214c:	2302      	movs	r3, #2
 800214e:	e032      	b.n	80021b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2224      	movs	r2, #36	@ 0x24
 800215c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0201 	bic.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800217e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6819      	ldr	r1, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2220      	movs	r2, #32
 80021a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e000      	b.n	80021b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021b4:	2302      	movs	r3, #2
  }
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b085      	sub	sp, #20
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b20      	cmp	r3, #32
 80021d6:	d139      	bne.n	800224c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d101      	bne.n	80021e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e033      	b.n	800224e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2224      	movs	r2, #36	@ 0x24
 80021f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0201 	bic.w	r2, r2, #1
 8002204:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002214:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4313      	orrs	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	e000      	b.n	800224e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800224c:	2302      	movs	r3, #2
  }
}
 800224e:	4618      	mov	r0, r3
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b086      	sub	sp, #24
 800225e:	af02      	add	r7, sp, #8
 8002260:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e101      	b.n	8002470 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d106      	bne.n	8002286 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7fe fd9d 	bl	8000dc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2203      	movs	r2, #3
 800228a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f002 fa95 	bl	80047c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	7c1a      	ldrb	r2, [r3, #16]
 80022a6:	f88d 2000 	strb.w	r2, [sp]
 80022aa:	3304      	adds	r3, #4
 80022ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ae:	f002 fa5e 	bl	800476e <USB_CoreInit>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0d5      	b.n	8002470 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2100      	movs	r1, #0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f002 fa8d 	bl	80047ea <USB_SetCurrentMode>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d005      	beq.n	80022e2 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2202      	movs	r2, #2
 80022da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e0c6      	b.n	8002470 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022e2:	2300      	movs	r3, #0
 80022e4:	73fb      	strb	r3, [r7, #15]
 80022e6:	e04a      	b.n	800237e <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022e8:	7bfa      	ldrb	r2, [r7, #15]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	3315      	adds	r3, #21
 80022f8:	2201      	movs	r2, #1
 80022fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	3314      	adds	r3, #20
 800230c:	7bfa      	ldrb	r2, [r7, #15]
 800230e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	b298      	uxth	r0, r3
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	332e      	adds	r3, #46	@ 0x2e
 8002324:	4602      	mov	r2, r0
 8002326:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	3318      	adds	r3, #24
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4413      	add	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	331c      	adds	r3, #28
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4413      	add	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	3320      	adds	r3, #32
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002364:	7bfa      	ldrb	r2, [r7, #15]
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	4413      	add	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	3324      	adds	r3, #36	@ 0x24
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	3301      	adds	r3, #1
 800237c:	73fb      	strb	r3, [r7, #15]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	791b      	ldrb	r3, [r3, #4]
 8002382:	7bfa      	ldrb	r2, [r7, #15]
 8002384:	429a      	cmp	r2, r3
 8002386:	d3af      	bcc.n	80022e8 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002388:	2300      	movs	r3, #0
 800238a:	73fb      	strb	r3, [r7, #15]
 800238c:	e044      	b.n	8002418 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023a4:	7bfa      	ldrb	r2, [r7, #15]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023e6:	7bfa      	ldrb	r2, [r7, #15]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4413      	add	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023fc:	7bfa      	ldrb	r2, [r7, #15]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4413      	add	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	3301      	adds	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	791b      	ldrb	r3, [r3, #4]
 800241c:	7bfa      	ldrb	r2, [r7, #15]
 800241e:	429a      	cmp	r2, r3
 8002420:	d3b5      	bcc.n	800238e <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	7c1a      	ldrb	r2, [r3, #16]
 800242a:	f88d 2000 	strb.w	r2, [sp]
 800242e:	3304      	adds	r3, #4
 8002430:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002432:	f002 fa27 	bl	8004884 <USB_DevInit>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e013      	b.n	8002470 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	7b1b      	ldrb	r3, [r3, #12]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d102      	bne.n	8002464 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f80a 	bl	8002478 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f002 fbcc 	bl	8004c06 <USB_DevDisconnect>

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024aa:	f043 0303 	orr.w	r3, r3, #3
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024c4:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a04      	ldr	r2, [pc, #16]	@ (80024dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ce:	6013      	str	r3, [r2, #0]
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40007000 	.word	0x40007000

080024e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024e4:	4b04      	ldr	r3, [pc, #16]	@ (80024f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40007000 	.word	0x40007000

080024fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800250a:	d130      	bne.n	800256e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800250c:	4b23      	ldr	r3, [pc, #140]	@ (800259c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002518:	d038      	beq.n	800258c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800251a:	4b20      	ldr	r3, [pc, #128]	@ (800259c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002522:	4a1e      	ldr	r2, [pc, #120]	@ (800259c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002524:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002528:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800252a:	4b1d      	ldr	r3, [pc, #116]	@ (80025a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2232      	movs	r2, #50	@ 0x32
 8002530:	fb02 f303 	mul.w	r3, r2, r3
 8002534:	4a1b      	ldr	r2, [pc, #108]	@ (80025a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	0c9b      	lsrs	r3, r3, #18
 800253c:	3301      	adds	r3, #1
 800253e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002540:	e002      	b.n	8002548 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	3b01      	subs	r3, #1
 8002546:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002548:	4b14      	ldr	r3, [pc, #80]	@ (800259c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002554:	d102      	bne.n	800255c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f2      	bne.n	8002542 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800255c:	4b0f      	ldr	r3, [pc, #60]	@ (800259c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002564:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002568:	d110      	bne.n	800258c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e00f      	b.n	800258e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800256e:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002576:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800257a:	d007      	beq.n	800258c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800257c:	4b07      	ldr	r3, [pc, #28]	@ (800259c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002584:	4a05      	ldr	r2, [pc, #20]	@ (800259c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002586:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800258a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40007000 	.word	0x40007000
 80025a0:	20000000 	.word	0x20000000
 80025a4:	431bde83 	.word	0x431bde83

080025a8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80025ac:	4b05      	ldr	r3, [pc, #20]	@ (80025c4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	4a04      	ldr	r2, [pc, #16]	@ (80025c4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80025b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025b6:	6053      	str	r3, [r2, #4]
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40007000 	.word	0x40007000

080025c8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80025cc:	4b05      	ldr	r3, [pc, #20]	@ (80025e4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	4a04      	ldr	r2, [pc, #16]	@ (80025e4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80025d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025d6:	6053      	str	r3, [r2, #4]
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40007000 	.word	0x40007000

080025e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d102      	bne.n	80025fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	f000 bc08 	b.w	8002e0c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025fc:	4b96      	ldr	r3, [pc, #600]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 030c 	and.w	r3, r3, #12
 8002604:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002606:	4b94      	ldr	r3, [pc, #592]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0310 	and.w	r3, r3, #16
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 80e4 	beq.w	80027e6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d007      	beq.n	8002634 <HAL_RCC_OscConfig+0x4c>
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b0c      	cmp	r3, #12
 8002628:	f040 808b 	bne.w	8002742 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2b01      	cmp	r3, #1
 8002630:	f040 8087 	bne.w	8002742 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002634:	4b88      	ldr	r3, [pc, #544]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_RCC_OscConfig+0x64>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e3df      	b.n	8002e0c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1a      	ldr	r2, [r3, #32]
 8002650:	4b81      	ldr	r3, [pc, #516]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d004      	beq.n	8002666 <HAL_RCC_OscConfig+0x7e>
 800265c:	4b7e      	ldr	r3, [pc, #504]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002664:	e005      	b.n	8002672 <HAL_RCC_OscConfig+0x8a>
 8002666:	4b7c      	ldr	r3, [pc, #496]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 8002668:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800266c:	091b      	lsrs	r3, r3, #4
 800266e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002672:	4293      	cmp	r3, r2
 8002674:	d223      	bcs.n	80026be <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	4618      	mov	r0, r3
 800267c:	f000 fd92 	bl	80031a4 <RCC_SetFlashLatencyFromMSIRange>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e3c0      	b.n	8002e0c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800268a:	4b73      	ldr	r3, [pc, #460]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a72      	ldr	r2, [pc, #456]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 8002690:	f043 0308 	orr.w	r3, r3, #8
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	4b70      	ldr	r3, [pc, #448]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	496d      	ldr	r1, [pc, #436]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026a8:	4b6b      	ldr	r3, [pc, #428]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	021b      	lsls	r3, r3, #8
 80026b6:	4968      	ldr	r1, [pc, #416]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	604b      	str	r3, [r1, #4]
 80026bc:	e025      	b.n	800270a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026be:	4b66      	ldr	r3, [pc, #408]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a65      	ldr	r2, [pc, #404]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 80026c4:	f043 0308 	orr.w	r3, r3, #8
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	4b63      	ldr	r3, [pc, #396]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	4960      	ldr	r1, [pc, #384]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026dc:	4b5e      	ldr	r3, [pc, #376]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	021b      	lsls	r3, r3, #8
 80026ea:	495b      	ldr	r1, [pc, #364]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d109      	bne.n	800270a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fd52 	bl	80031a4 <RCC_SetFlashLatencyFromMSIRange>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e380      	b.n	8002e0c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800270a:	f000 fc87 	bl	800301c <HAL_RCC_GetSysClockFreq>
 800270e:	4602      	mov	r2, r0
 8002710:	4b51      	ldr	r3, [pc, #324]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	091b      	lsrs	r3, r3, #4
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	4950      	ldr	r1, [pc, #320]	@ (800285c <HAL_RCC_OscConfig+0x274>)
 800271c:	5ccb      	ldrb	r3, [r1, r3]
 800271e:	f003 031f 	and.w	r3, r3, #31
 8002722:	fa22 f303 	lsr.w	r3, r2, r3
 8002726:	4a4e      	ldr	r2, [pc, #312]	@ (8002860 <HAL_RCC_OscConfig+0x278>)
 8002728:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800272a:	4b4e      	ldr	r3, [pc, #312]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe fc9c 	bl	800106c <HAL_InitTick>
 8002734:	4603      	mov	r3, r0
 8002736:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d052      	beq.n	80027e4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	e364      	b.n	8002e0c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d032      	beq.n	80027b0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800274a:	4b43      	ldr	r3, [pc, #268]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a42      	ldr	r2, [pc, #264]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002756:	f7fe fcd9 	bl	800110c <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800275e:	f7fe fcd5 	bl	800110c <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e34d      	b.n	8002e0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002770:	4b39      	ldr	r3, [pc, #228]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f0      	beq.n	800275e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800277c:	4b36      	ldr	r3, [pc, #216]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a35      	ldr	r2, [pc, #212]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 8002782:	f043 0308 	orr.w	r3, r3, #8
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	4b33      	ldr	r3, [pc, #204]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	4930      	ldr	r1, [pc, #192]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800279a:	4b2f      	ldr	r3, [pc, #188]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	021b      	lsls	r3, r3, #8
 80027a8:	492b      	ldr	r1, [pc, #172]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	604b      	str	r3, [r1, #4]
 80027ae:	e01a      	b.n	80027e6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027b0:	4b29      	ldr	r3, [pc, #164]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a28      	ldr	r2, [pc, #160]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 80027b6:	f023 0301 	bic.w	r3, r3, #1
 80027ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027bc:	f7fe fca6 	bl	800110c <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027c4:	f7fe fca2 	bl	800110c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e31a      	b.n	8002e0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027d6:	4b20      	ldr	r3, [pc, #128]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x1dc>
 80027e2:	e000      	b.n	80027e6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d073      	beq.n	80028da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_OscConfig+0x21c>
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2b0c      	cmp	r3, #12
 80027fc:	d10e      	bne.n	800281c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2b03      	cmp	r3, #3
 8002802:	d10b      	bne.n	800281c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002804:	4b14      	ldr	r3, [pc, #80]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d063      	beq.n	80028d8 <HAL_RCC_OscConfig+0x2f0>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d15f      	bne.n	80028d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e2f7      	b.n	8002e0c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002824:	d106      	bne.n	8002834 <HAL_RCC_OscConfig+0x24c>
 8002826:	4b0c      	ldr	r3, [pc, #48]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a0b      	ldr	r2, [pc, #44]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 800282c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	e025      	b.n	8002880 <HAL_RCC_OscConfig+0x298>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800283c:	d114      	bne.n	8002868 <HAL_RCC_OscConfig+0x280>
 800283e:	4b06      	ldr	r3, [pc, #24]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a05      	ldr	r2, [pc, #20]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 8002844:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	4b03      	ldr	r3, [pc, #12]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a02      	ldr	r2, [pc, #8]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 8002850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	e013      	b.n	8002880 <HAL_RCC_OscConfig+0x298>
 8002858:	40021000 	.word	0x40021000
 800285c:	0800568c 	.word	0x0800568c
 8002860:	20000000 	.word	0x20000000
 8002864:	20000004 	.word	0x20000004
 8002868:	4ba0      	ldr	r3, [pc, #640]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a9f      	ldr	r2, [pc, #636]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 800286e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	4b9d      	ldr	r3, [pc, #628]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a9c      	ldr	r2, [pc, #624]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 800287a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800287e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d013      	beq.n	80028b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002888:	f7fe fc40 	bl	800110c <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002890:	f7fe fc3c 	bl	800110c <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	@ 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e2b4      	b.n	8002e0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028a2:	4b92      	ldr	r3, [pc, #584]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0f0      	beq.n	8002890 <HAL_RCC_OscConfig+0x2a8>
 80028ae:	e014      	b.n	80028da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b0:	f7fe fc2c 	bl	800110c <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b8:	f7fe fc28 	bl	800110c <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	@ 0x64
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e2a0      	b.n	8002e0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ca:	4b88      	ldr	r3, [pc, #544]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x2d0>
 80028d6:	e000      	b.n	80028da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d060      	beq.n	80029a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d005      	beq.n	80028f8 <HAL_RCC_OscConfig+0x310>
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	2b0c      	cmp	r3, #12
 80028f0:	d119      	bne.n	8002926 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d116      	bne.n	8002926 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028f8:	4b7c      	ldr	r3, [pc, #496]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_RCC_OscConfig+0x328>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e27d      	b.n	8002e0c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002910:	4b76      	ldr	r3, [pc, #472]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	061b      	lsls	r3, r3, #24
 800291e:	4973      	ldr	r1, [pc, #460]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 8002920:	4313      	orrs	r3, r2
 8002922:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002924:	e040      	b.n	80029a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d023      	beq.n	8002976 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800292e:	4b6f      	ldr	r3, [pc, #444]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a6e      	ldr	r2, [pc, #440]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 8002934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293a:	f7fe fbe7 	bl	800110c <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002942:	f7fe fbe3 	bl	800110c <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e25b      	b.n	8002e0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002954:	4b65      	ldr	r3, [pc, #404]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002960:	4b62      	ldr	r3, [pc, #392]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	061b      	lsls	r3, r3, #24
 800296e:	495f      	ldr	r1, [pc, #380]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]
 8002974:	e018      	b.n	80029a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002976:	4b5d      	ldr	r3, [pc, #372]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a5c      	ldr	r2, [pc, #368]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 800297c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002982:	f7fe fbc3 	bl	800110c <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800298a:	f7fe fbbf 	bl	800110c <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e237      	b.n	8002e0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800299c:	4b53      	ldr	r3, [pc, #332]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f0      	bne.n	800298a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d03c      	beq.n	8002a2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d01c      	beq.n	80029f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029bc:	4b4b      	ldr	r3, [pc, #300]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 80029be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029c2:	4a4a      	ldr	r2, [pc, #296]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029cc:	f7fe fb9e 	bl	800110c <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d4:	f7fe fb9a 	bl	800110c <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e212      	b.n	8002e0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029e6:	4b41      	ldr	r3, [pc, #260]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 80029e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0ef      	beq.n	80029d4 <HAL_RCC_OscConfig+0x3ec>
 80029f4:	e01b      	b.n	8002a2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f6:	4b3d      	ldr	r3, [pc, #244]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 80029f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029fc:	4a3b      	ldr	r2, [pc, #236]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 80029fe:	f023 0301 	bic.w	r3, r3, #1
 8002a02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a06:	f7fe fb81 	bl	800110c <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a0e:	f7fe fb7d 	bl	800110c <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e1f5      	b.n	8002e0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a20:	4b32      	ldr	r3, [pc, #200]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 8002a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1ef      	bne.n	8002a0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 80a6 	beq.w	8002b88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a40:	4b2a      	ldr	r3, [pc, #168]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 8002a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10d      	bne.n	8002a68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4c:	4b27      	ldr	r3, [pc, #156]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a50:	4a26      	ldr	r2, [pc, #152]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 8002a52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a56:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a58:	4b24      	ldr	r3, [pc, #144]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a64:	2301      	movs	r3, #1
 8002a66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a68:	4b21      	ldr	r3, [pc, #132]	@ (8002af0 <HAL_RCC_OscConfig+0x508>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d118      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a74:	4b1e      	ldr	r3, [pc, #120]	@ (8002af0 <HAL_RCC_OscConfig+0x508>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a1d      	ldr	r2, [pc, #116]	@ (8002af0 <HAL_RCC_OscConfig+0x508>)
 8002a7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a80:	f7fe fb44 	bl	800110c <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a88:	f7fe fb40 	bl	800110c <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e1b8      	b.n	8002e0c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a9a:	4b15      	ldr	r3, [pc, #84]	@ (8002af0 <HAL_RCC_OscConfig+0x508>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d108      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x4d8>
 8002aae:	4b0f      	ldr	r3, [pc, #60]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002abe:	e029      	b.n	8002b14 <HAL_RCC_OscConfig+0x52c>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b05      	cmp	r3, #5
 8002ac6:	d115      	bne.n	8002af4 <HAL_RCC_OscConfig+0x50c>
 8002ac8:	4b08      	ldr	r3, [pc, #32]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 8002aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ace:	4a07      	ldr	r2, [pc, #28]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 8002ad0:	f043 0304 	orr.w	r3, r3, #4
 8002ad4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ad8:	4b04      	ldr	r3, [pc, #16]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 8002ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ade:	4a03      	ldr	r2, [pc, #12]	@ (8002aec <HAL_RCC_OscConfig+0x504>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ae8:	e014      	b.n	8002b14 <HAL_RCC_OscConfig+0x52c>
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40007000 	.word	0x40007000
 8002af4:	4b9d      	ldr	r3, [pc, #628]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002afa:	4a9c      	ldr	r2, [pc, #624]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002afc:	f023 0301 	bic.w	r3, r3, #1
 8002b00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b04:	4b99      	ldr	r3, [pc, #612]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0a:	4a98      	ldr	r2, [pc, #608]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002b0c:	f023 0304 	bic.w	r3, r3, #4
 8002b10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d016      	beq.n	8002b4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1c:	f7fe faf6 	bl	800110c <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b22:	e00a      	b.n	8002b3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b24:	f7fe faf2 	bl	800110c <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e168      	b.n	8002e0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b3a:	4b8c      	ldr	r3, [pc, #560]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0ed      	beq.n	8002b24 <HAL_RCC_OscConfig+0x53c>
 8002b48:	e015      	b.n	8002b76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4a:	f7fe fadf 	bl	800110c <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b50:	e00a      	b.n	8002b68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b52:	f7fe fadb 	bl	800110c <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e151      	b.n	8002e0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b68:	4b80      	ldr	r3, [pc, #512]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1ed      	bne.n	8002b52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b76:	7ffb      	ldrb	r3, [r7, #31]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d105      	bne.n	8002b88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b7c:	4b7b      	ldr	r3, [pc, #492]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b80:	4a7a      	ldr	r2, [pc, #488]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002b82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b86:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0320 	and.w	r3, r3, #32
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d03c      	beq.n	8002c0e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d01c      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b9c:	4b73      	ldr	r3, [pc, #460]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002b9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ba2:	4a72      	ldr	r2, [pc, #456]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bac:	f7fe faae 	bl	800110c <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bb4:	f7fe faaa 	bl	800110c <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e122      	b.n	8002e0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bc6:	4b69      	ldr	r3, [pc, #420]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002bc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0ef      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x5cc>
 8002bd4:	e01b      	b.n	8002c0e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bd6:	4b65      	ldr	r3, [pc, #404]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002bd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bdc:	4a63      	ldr	r2, [pc, #396]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002bde:	f023 0301 	bic.w	r3, r3, #1
 8002be2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be6:	f7fe fa91 	bl	800110c <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bee:	f7fe fa8d 	bl	800110c <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e105      	b.n	8002e0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c00:	4b5a      	ldr	r3, [pc, #360]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002c02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1ef      	bne.n	8002bee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 80f9 	beq.w	8002e0a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	f040 80cf 	bne.w	8002dc0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c22:	4b52      	ldr	r3, [pc, #328]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f003 0203 	and.w	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d12c      	bne.n	8002c90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c40:	3b01      	subs	r3, #1
 8002c42:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d123      	bne.n	8002c90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c52:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d11b      	bne.n	8002c90 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c62:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d113      	bne.n	8002c90 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c72:	085b      	lsrs	r3, r3, #1
 8002c74:	3b01      	subs	r3, #1
 8002c76:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d109      	bne.n	8002c90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	085b      	lsrs	r3, r3, #1
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d071      	beq.n	8002d74 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	2b0c      	cmp	r3, #12
 8002c94:	d068      	beq.n	8002d68 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c96:	4b35      	ldr	r3, [pc, #212]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d105      	bne.n	8002cae <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ca2:	4b32      	ldr	r3, [pc, #200]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e0ac      	b.n	8002e0c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002cb2:	4b2e      	ldr	r3, [pc, #184]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a2d      	ldr	r2, [pc, #180]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002cb8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cbc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cbe:	f7fe fa25 	bl	800110c <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc6:	f7fe fa21 	bl	800110c <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e099      	b.n	8002e0c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cd8:	4b24      	ldr	r3, [pc, #144]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1f0      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ce4:	4b21      	ldr	r3, [pc, #132]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	4b21      	ldr	r3, [pc, #132]	@ (8002d70 <HAL_RCC_OscConfig+0x788>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002cf4:	3a01      	subs	r2, #1
 8002cf6:	0112      	lsls	r2, r2, #4
 8002cf8:	4311      	orrs	r1, r2
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002cfe:	0212      	lsls	r2, r2, #8
 8002d00:	4311      	orrs	r1, r2
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d06:	0852      	lsrs	r2, r2, #1
 8002d08:	3a01      	subs	r2, #1
 8002d0a:	0552      	lsls	r2, r2, #21
 8002d0c:	4311      	orrs	r1, r2
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d12:	0852      	lsrs	r2, r2, #1
 8002d14:	3a01      	subs	r2, #1
 8002d16:	0652      	lsls	r2, r2, #25
 8002d18:	4311      	orrs	r1, r2
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d1e:	06d2      	lsls	r2, r2, #27
 8002d20:	430a      	orrs	r2, r1
 8002d22:	4912      	ldr	r1, [pc, #72]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d28:	4b10      	ldr	r3, [pc, #64]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a0f      	ldr	r2, [pc, #60]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002d2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d34:	4b0d      	ldr	r3, [pc, #52]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	4a0c      	ldr	r2, [pc, #48]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002d3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d40:	f7fe f9e4 	bl	800110c <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d48:	f7fe f9e0 	bl	800110c <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e058      	b.n	8002e0c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d5a:	4b04      	ldr	r3, [pc, #16]	@ (8002d6c <HAL_RCC_OscConfig+0x784>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d66:	e050      	b.n	8002e0a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e04f      	b.n	8002e0c <HAL_RCC_OscConfig+0x824>
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d74:	4b27      	ldr	r3, [pc, #156]	@ (8002e14 <HAL_RCC_OscConfig+0x82c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d144      	bne.n	8002e0a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d80:	4b24      	ldr	r3, [pc, #144]	@ (8002e14 <HAL_RCC_OscConfig+0x82c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a23      	ldr	r2, [pc, #140]	@ (8002e14 <HAL_RCC_OscConfig+0x82c>)
 8002d86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d8c:	4b21      	ldr	r3, [pc, #132]	@ (8002e14 <HAL_RCC_OscConfig+0x82c>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	4a20      	ldr	r2, [pc, #128]	@ (8002e14 <HAL_RCC_OscConfig+0x82c>)
 8002d92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d98:	f7fe f9b8 	bl	800110c <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da0:	f7fe f9b4 	bl	800110c <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e02c      	b.n	8002e0c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db2:	4b18      	ldr	r3, [pc, #96]	@ (8002e14 <HAL_RCC_OscConfig+0x82c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0x7b8>
 8002dbe:	e024      	b.n	8002e0a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	2b0c      	cmp	r3, #12
 8002dc4:	d01f      	beq.n	8002e06 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc6:	4b13      	ldr	r3, [pc, #76]	@ (8002e14 <HAL_RCC_OscConfig+0x82c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a12      	ldr	r2, [pc, #72]	@ (8002e14 <HAL_RCC_OscConfig+0x82c>)
 8002dcc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd2:	f7fe f99b 	bl	800110c <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dda:	f7fe f997 	bl	800110c <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e00f      	b.n	8002e0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dec:	4b09      	ldr	r3, [pc, #36]	@ (8002e14 <HAL_RCC_OscConfig+0x82c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1f0      	bne.n	8002dda <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002df8:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <HAL_RCC_OscConfig+0x82c>)
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	4905      	ldr	r1, [pc, #20]	@ (8002e14 <HAL_RCC_OscConfig+0x82c>)
 8002dfe:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <HAL_RCC_OscConfig+0x830>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	60cb      	str	r3, [r1, #12]
 8002e04:	e001      	b.n	8002e0a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3720      	adds	r7, #32
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40021000 	.word	0x40021000
 8002e18:	feeefffc 	.word	0xfeeefffc

08002e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0e7      	b.n	8003000 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e30:	4b75      	ldr	r3, [pc, #468]	@ (8003008 <HAL_RCC_ClockConfig+0x1ec>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d910      	bls.n	8002e60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3e:	4b72      	ldr	r3, [pc, #456]	@ (8003008 <HAL_RCC_ClockConfig+0x1ec>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 0207 	bic.w	r2, r3, #7
 8002e46:	4970      	ldr	r1, [pc, #448]	@ (8003008 <HAL_RCC_ClockConfig+0x1ec>)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4e:	4b6e      	ldr	r3, [pc, #440]	@ (8003008 <HAL_RCC_ClockConfig+0x1ec>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d001      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0cf      	b.n	8003000 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d010      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	4b66      	ldr	r3, [pc, #408]	@ (800300c <HAL_RCC_ClockConfig+0x1f0>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d908      	bls.n	8002e8e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e7c:	4b63      	ldr	r3, [pc, #396]	@ (800300c <HAL_RCC_ClockConfig+0x1f0>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4960      	ldr	r1, [pc, #384]	@ (800300c <HAL_RCC_ClockConfig+0x1f0>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d04c      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d107      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ea2:	4b5a      	ldr	r3, [pc, #360]	@ (800300c <HAL_RCC_ClockConfig+0x1f0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d121      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e0a6      	b.n	8003000 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d107      	bne.n	8002eca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eba:	4b54      	ldr	r3, [pc, #336]	@ (800300c <HAL_RCC_ClockConfig+0x1f0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d115      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e09a      	b.n	8003000 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d107      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ed2:	4b4e      	ldr	r3, [pc, #312]	@ (800300c <HAL_RCC_ClockConfig+0x1f0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d109      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e08e      	b.n	8003000 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ee2:	4b4a      	ldr	r3, [pc, #296]	@ (800300c <HAL_RCC_ClockConfig+0x1f0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e086      	b.n	8003000 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ef2:	4b46      	ldr	r3, [pc, #280]	@ (800300c <HAL_RCC_ClockConfig+0x1f0>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f023 0203 	bic.w	r2, r3, #3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	4943      	ldr	r1, [pc, #268]	@ (800300c <HAL_RCC_ClockConfig+0x1f0>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f04:	f7fe f902 	bl	800110c <HAL_GetTick>
 8002f08:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0a:	e00a      	b.n	8002f22 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f0c:	f7fe f8fe 	bl	800110c <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e06e      	b.n	8003000 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f22:	4b3a      	ldr	r3, [pc, #232]	@ (800300c <HAL_RCC_ClockConfig+0x1f0>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 020c 	and.w	r2, r3, #12
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d1eb      	bne.n	8002f0c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d010      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	4b31      	ldr	r3, [pc, #196]	@ (800300c <HAL_RCC_ClockConfig+0x1f0>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d208      	bcs.n	8002f62 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f50:	4b2e      	ldr	r3, [pc, #184]	@ (800300c <HAL_RCC_ClockConfig+0x1f0>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	492b      	ldr	r1, [pc, #172]	@ (800300c <HAL_RCC_ClockConfig+0x1f0>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f62:	4b29      	ldr	r3, [pc, #164]	@ (8003008 <HAL_RCC_ClockConfig+0x1ec>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d210      	bcs.n	8002f92 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f70:	4b25      	ldr	r3, [pc, #148]	@ (8003008 <HAL_RCC_ClockConfig+0x1ec>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f023 0207 	bic.w	r2, r3, #7
 8002f78:	4923      	ldr	r1, [pc, #140]	@ (8003008 <HAL_RCC_ClockConfig+0x1ec>)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f80:	4b21      	ldr	r3, [pc, #132]	@ (8003008 <HAL_RCC_ClockConfig+0x1ec>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d001      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e036      	b.n	8003000 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0304 	and.w	r3, r3, #4
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d008      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800300c <HAL_RCC_ClockConfig+0x1f0>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	4918      	ldr	r1, [pc, #96]	@ (800300c <HAL_RCC_ClockConfig+0x1f0>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d009      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fbc:	4b13      	ldr	r3, [pc, #76]	@ (800300c <HAL_RCC_ClockConfig+0x1f0>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4910      	ldr	r1, [pc, #64]	@ (800300c <HAL_RCC_ClockConfig+0x1f0>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fd0:	f000 f824 	bl	800301c <HAL_RCC_GetSysClockFreq>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800300c <HAL_RCC_ClockConfig+0x1f0>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	091b      	lsrs	r3, r3, #4
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	490b      	ldr	r1, [pc, #44]	@ (8003010 <HAL_RCC_ClockConfig+0x1f4>)
 8002fe2:	5ccb      	ldrb	r3, [r1, r3]
 8002fe4:	f003 031f 	and.w	r3, r3, #31
 8002fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fec:	4a09      	ldr	r2, [pc, #36]	@ (8003014 <HAL_RCC_ClockConfig+0x1f8>)
 8002fee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ff0:	4b09      	ldr	r3, [pc, #36]	@ (8003018 <HAL_RCC_ClockConfig+0x1fc>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fe f839 	bl	800106c <HAL_InitTick>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ffe:	7afb      	ldrb	r3, [r7, #11]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40022000 	.word	0x40022000
 800300c:	40021000 	.word	0x40021000
 8003010:	0800568c 	.word	0x0800568c
 8003014:	20000000 	.word	0x20000000
 8003018:	20000004 	.word	0x20000004

0800301c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800301c:	b480      	push	{r7}
 800301e:	b089      	sub	sp, #36	@ 0x24
 8003020:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
 8003026:	2300      	movs	r3, #0
 8003028:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800302a:	4b3e      	ldr	r3, [pc, #248]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x108>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003034:	4b3b      	ldr	r3, [pc, #236]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x108>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_RCC_GetSysClockFreq+0x34>
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	2b0c      	cmp	r3, #12
 8003048:	d121      	bne.n	800308e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d11e      	bne.n	800308e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003050:	4b34      	ldr	r3, [pc, #208]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x108>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b00      	cmp	r3, #0
 800305a:	d107      	bne.n	800306c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800305c:	4b31      	ldr	r3, [pc, #196]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x108>)
 800305e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003062:	0a1b      	lsrs	r3, r3, #8
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	61fb      	str	r3, [r7, #28]
 800306a:	e005      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800306c:	4b2d      	ldr	r3, [pc, #180]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x108>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003078:	4a2b      	ldr	r2, [pc, #172]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x10c>)
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003080:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10d      	bne.n	80030a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800308c:	e00a      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b04      	cmp	r3, #4
 8003092:	d102      	bne.n	800309a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003094:	4b25      	ldr	r3, [pc, #148]	@ (800312c <HAL_RCC_GetSysClockFreq+0x110>)
 8003096:	61bb      	str	r3, [r7, #24]
 8003098:	e004      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	2b08      	cmp	r3, #8
 800309e:	d101      	bne.n	80030a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030a0:	4b23      	ldr	r3, [pc, #140]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x114>)
 80030a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	2b0c      	cmp	r3, #12
 80030a8:	d134      	bne.n	8003114 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d003      	beq.n	80030c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d003      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0xac>
 80030c0:	e005      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030c2:	4b1a      	ldr	r3, [pc, #104]	@ (800312c <HAL_RCC_GetSysClockFreq+0x110>)
 80030c4:	617b      	str	r3, [r7, #20]
      break;
 80030c6:	e005      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030c8:	4b19      	ldr	r3, [pc, #100]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x114>)
 80030ca:	617b      	str	r3, [r7, #20]
      break;
 80030cc:	e002      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	617b      	str	r3, [r7, #20]
      break;
 80030d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030d4:	4b13      	ldr	r3, [pc, #76]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x108>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	3301      	adds	r3, #1
 80030e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030e2:	4b10      	ldr	r3, [pc, #64]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x108>)
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	0a1b      	lsrs	r3, r3, #8
 80030e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	fb03 f202 	mul.w	r2, r3, r2
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x108>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	0e5b      	lsrs	r3, r3, #25
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	3301      	adds	r3, #1
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003112:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003114:	69bb      	ldr	r3, [r7, #24]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3724      	adds	r7, #36	@ 0x24
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	40021000 	.word	0x40021000
 8003128:	080056a4 	.word	0x080056a4
 800312c:	00f42400 	.word	0x00f42400
 8003130:	007a1200 	.word	0x007a1200

08003134 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003138:	4b03      	ldr	r3, [pc, #12]	@ (8003148 <HAL_RCC_GetHCLKFreq+0x14>)
 800313a:	681b      	ldr	r3, [r3, #0]
}
 800313c:	4618      	mov	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	20000000 	.word	0x20000000

0800314c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003150:	f7ff fff0 	bl	8003134 <HAL_RCC_GetHCLKFreq>
 8003154:	4602      	mov	r2, r0
 8003156:	4b06      	ldr	r3, [pc, #24]	@ (8003170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	0a1b      	lsrs	r3, r3, #8
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	4904      	ldr	r1, [pc, #16]	@ (8003174 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003162:	5ccb      	ldrb	r3, [r1, r3]
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800316c:	4618      	mov	r0, r3
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40021000 	.word	0x40021000
 8003174:	0800569c 	.word	0x0800569c

08003178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800317c:	f7ff ffda 	bl	8003134 <HAL_RCC_GetHCLKFreq>
 8003180:	4602      	mov	r2, r0
 8003182:	4b06      	ldr	r3, [pc, #24]	@ (800319c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	0adb      	lsrs	r3, r3, #11
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	4904      	ldr	r1, [pc, #16]	@ (80031a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800318e:	5ccb      	ldrb	r3, [r1, r3]
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003198:	4618      	mov	r0, r3
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40021000 	.word	0x40021000
 80031a0:	0800569c 	.word	0x0800569c

080031a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031ac:	2300      	movs	r3, #0
 80031ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031b0:	4b2a      	ldr	r3, [pc, #168]	@ (800325c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031bc:	f7ff f990 	bl	80024e0 <HAL_PWREx_GetVoltageRange>
 80031c0:	6178      	str	r0, [r7, #20]
 80031c2:	e014      	b.n	80031ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031c4:	4b25      	ldr	r3, [pc, #148]	@ (800325c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c8:	4a24      	ldr	r2, [pc, #144]	@ (800325c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80031d0:	4b22      	ldr	r3, [pc, #136]	@ (800325c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031dc:	f7ff f980 	bl	80024e0 <HAL_PWREx_GetVoltageRange>
 80031e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031e2:	4b1e      	ldr	r3, [pc, #120]	@ (800325c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e6:	4a1d      	ldr	r2, [pc, #116]	@ (800325c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031f4:	d10b      	bne.n	800320e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b80      	cmp	r3, #128	@ 0x80
 80031fa:	d919      	bls.n	8003230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2ba0      	cmp	r3, #160	@ 0xa0
 8003200:	d902      	bls.n	8003208 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003202:	2302      	movs	r3, #2
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	e013      	b.n	8003230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003208:	2301      	movs	r3, #1
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	e010      	b.n	8003230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b80      	cmp	r3, #128	@ 0x80
 8003212:	d902      	bls.n	800321a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003214:	2303      	movs	r3, #3
 8003216:	613b      	str	r3, [r7, #16]
 8003218:	e00a      	b.n	8003230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b80      	cmp	r3, #128	@ 0x80
 800321e:	d102      	bne.n	8003226 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003220:	2302      	movs	r3, #2
 8003222:	613b      	str	r3, [r7, #16]
 8003224:	e004      	b.n	8003230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b70      	cmp	r3, #112	@ 0x70
 800322a:	d101      	bne.n	8003230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800322c:	2301      	movs	r3, #1
 800322e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003230:	4b0b      	ldr	r3, [pc, #44]	@ (8003260 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f023 0207 	bic.w	r2, r3, #7
 8003238:	4909      	ldr	r1, [pc, #36]	@ (8003260 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003240:	4b07      	ldr	r3, [pc, #28]	@ (8003260 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	429a      	cmp	r2, r3
 800324c:	d001      	beq.n	8003252 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40021000 	.word	0x40021000
 8003260:	40022000 	.word	0x40022000

08003264 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800326c:	2300      	movs	r3, #0
 800326e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003270:	2300      	movs	r3, #0
 8003272:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800327c:	2b00      	cmp	r3, #0
 800327e:	d041      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003284:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003288:	d02a      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800328a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800328e:	d824      	bhi.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003290:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003294:	d008      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003296:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800329a:	d81e      	bhi.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00a      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80032a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032a4:	d010      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032a6:	e018      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032a8:	4b86      	ldr	r3, [pc, #536]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4a85      	ldr	r2, [pc, #532]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032b4:	e015      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	3304      	adds	r3, #4
 80032ba:	2100      	movs	r1, #0
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 fadd 	bl	800387c <RCCEx_PLLSAI1_Config>
 80032c2:	4603      	mov	r3, r0
 80032c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032c6:	e00c      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3320      	adds	r3, #32
 80032cc:	2100      	movs	r1, #0
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 fbc6 	bl	8003a60 <RCCEx_PLLSAI2_Config>
 80032d4:	4603      	mov	r3, r0
 80032d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032d8:	e003      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	74fb      	strb	r3, [r7, #19]
      break;
 80032de:	e000      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80032e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032e2:	7cfb      	ldrb	r3, [r7, #19]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10b      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032e8:	4b76      	ldr	r3, [pc, #472]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032f6:	4973      	ldr	r1, [pc, #460]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80032fe:	e001      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003300:	7cfb      	ldrb	r3, [r7, #19]
 8003302:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d041      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003314:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003318:	d02a      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800331a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800331e:	d824      	bhi.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003320:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003324:	d008      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003326:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800332a:	d81e      	bhi.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003330:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003334:	d010      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003336:	e018      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003338:	4b62      	ldr	r3, [pc, #392]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4a61      	ldr	r2, [pc, #388]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003342:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003344:	e015      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3304      	adds	r3, #4
 800334a:	2100      	movs	r1, #0
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fa95 	bl	800387c <RCCEx_PLLSAI1_Config>
 8003352:	4603      	mov	r3, r0
 8003354:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003356:	e00c      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3320      	adds	r3, #32
 800335c:	2100      	movs	r1, #0
 800335e:	4618      	mov	r0, r3
 8003360:	f000 fb7e 	bl	8003a60 <RCCEx_PLLSAI2_Config>
 8003364:	4603      	mov	r3, r0
 8003366:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003368:	e003      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	74fb      	strb	r3, [r7, #19]
      break;
 800336e:	e000      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003370:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003372:	7cfb      	ldrb	r3, [r7, #19]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10b      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003378:	4b52      	ldr	r3, [pc, #328]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800337a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800337e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003386:	494f      	ldr	r1, [pc, #316]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800338e:	e001      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003390:	7cfb      	ldrb	r3, [r7, #19]
 8003392:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80a0 	beq.w	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a2:	2300      	movs	r3, #0
 80033a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033a6:	4b47      	ldr	r3, [pc, #284]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80033b6:	2300      	movs	r3, #0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00d      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033bc:	4b41      	ldr	r3, [pc, #260]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c0:	4a40      	ldr	r2, [pc, #256]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80033c8:	4b3e      	ldr	r3, [pc, #248]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d0:	60bb      	str	r3, [r7, #8]
 80033d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d4:	2301      	movs	r3, #1
 80033d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033d8:	4b3b      	ldr	r3, [pc, #236]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a3a      	ldr	r2, [pc, #232]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033e4:	f7fd fe92 	bl	800110c <HAL_GetTick>
 80033e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033ea:	e009      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ec:	f7fd fe8e 	bl	800110c <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d902      	bls.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	74fb      	strb	r3, [r7, #19]
        break;
 80033fe:	e005      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003400:	4b31      	ldr	r3, [pc, #196]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0ef      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800340c:	7cfb      	ldrb	r3, [r7, #19]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d15c      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003412:	4b2c      	ldr	r3, [pc, #176]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003418:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800341c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d01f      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	429a      	cmp	r2, r3
 800342e:	d019      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003430:	4b24      	ldr	r3, [pc, #144]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003436:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800343a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800343c:	4b21      	ldr	r3, [pc, #132]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003442:	4a20      	ldr	r2, [pc, #128]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003448:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800344c:	4b1d      	ldr	r3, [pc, #116]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003452:	4a1c      	ldr	r2, [pc, #112]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003454:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003458:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800345c:	4a19      	ldr	r2, [pc, #100]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d016      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346e:	f7fd fe4d 	bl	800110c <HAL_GetTick>
 8003472:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003474:	e00b      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003476:	f7fd fe49 	bl	800110c <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003484:	4293      	cmp	r3, r2
 8003486:	d902      	bls.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	74fb      	strb	r3, [r7, #19]
            break;
 800348c:	e006      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800348e:	4b0d      	ldr	r3, [pc, #52]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0ec      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800349c:	7cfb      	ldrb	r3, [r7, #19]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10c      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034a2:	4b08      	ldr	r3, [pc, #32]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b2:	4904      	ldr	r1, [pc, #16]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80034ba:	e009      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034bc:	7cfb      	ldrb	r3, [r7, #19]
 80034be:	74bb      	strb	r3, [r7, #18]
 80034c0:	e006      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80034c2:	bf00      	nop
 80034c4:	40021000 	.word	0x40021000
 80034c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034cc:	7cfb      	ldrb	r3, [r7, #19]
 80034ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034d0:	7c7b      	ldrb	r3, [r7, #17]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d105      	bne.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d6:	4ba6      	ldr	r3, [pc, #664]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034da:	4aa5      	ldr	r2, [pc, #660]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034ee:	4ba0      	ldr	r3, [pc, #640]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f4:	f023 0203 	bic.w	r2, r3, #3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fc:	499c      	ldr	r1, [pc, #624]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00a      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003510:	4b97      	ldr	r3, [pc, #604]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003516:	f023 020c 	bic.w	r2, r3, #12
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351e:	4994      	ldr	r1, [pc, #592]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003532:	4b8f      	ldr	r3, [pc, #572]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003538:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003540:	498b      	ldr	r1, [pc, #556]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003554:	4b86      	ldr	r3, [pc, #536]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800355a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003562:	4983      	ldr	r1, [pc, #524]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0310 	and.w	r3, r3, #16
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003576:	4b7e      	ldr	r3, [pc, #504]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800357c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003584:	497a      	ldr	r1, [pc, #488]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0320 	and.w	r3, r3, #32
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003598:	4b75      	ldr	r3, [pc, #468]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800359a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800359e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035a6:	4972      	ldr	r1, [pc, #456]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035c8:	4969      	ldr	r1, [pc, #420]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035dc:	4b64      	ldr	r3, [pc, #400]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035ea:	4961      	ldr	r1, [pc, #388]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035fe:	4b5c      	ldr	r3, [pc, #368]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003604:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800360c:	4958      	ldr	r1, [pc, #352]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003620:	4b53      	ldr	r3, [pc, #332]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003626:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800362e:	4950      	ldr	r1, [pc, #320]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003642:	4b4b      	ldr	r3, [pc, #300]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003648:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003650:	4947      	ldr	r1, [pc, #284]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003664:	4b42      	ldr	r3, [pc, #264]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003666:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800366a:	f023 0203 	bic.w	r2, r3, #3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003672:	493f      	ldr	r1, [pc, #252]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003674:	4313      	orrs	r3, r2
 8003676:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d028      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003686:	4b3a      	ldr	r3, [pc, #232]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003694:	4936      	ldr	r1, [pc, #216]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036a4:	d106      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036a6:	4b32      	ldr	r3, [pc, #200]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	4a31      	ldr	r2, [pc, #196]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036b0:	60d3      	str	r3, [r2, #12]
 80036b2:	e011      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036bc:	d10c      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3304      	adds	r3, #4
 80036c2:	2101      	movs	r1, #1
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 f8d9 	bl	800387c <RCCEx_PLLSAI1_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036ce:	7cfb      	ldrb	r3, [r7, #19]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80036d4:	7cfb      	ldrb	r3, [r7, #19]
 80036d6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d028      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036e4:	4b22      	ldr	r3, [pc, #136]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036f2:	491f      	ldr	r1, [pc, #124]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003702:	d106      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003704:	4b1a      	ldr	r3, [pc, #104]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4a19      	ldr	r2, [pc, #100]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800370a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800370e:	60d3      	str	r3, [r2, #12]
 8003710:	e011      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003716:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800371a:	d10c      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3304      	adds	r3, #4
 8003720:	2101      	movs	r1, #1
 8003722:	4618      	mov	r0, r3
 8003724:	f000 f8aa 	bl	800387c <RCCEx_PLLSAI1_Config>
 8003728:	4603      	mov	r3, r0
 800372a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800372c:	7cfb      	ldrb	r3, [r7, #19]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003732:	7cfb      	ldrb	r3, [r7, #19]
 8003734:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d02a      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003742:	4b0b      	ldr	r3, [pc, #44]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003748:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003750:	4907      	ldr	r1, [pc, #28]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800375c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003760:	d108      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003762:	4b03      	ldr	r3, [pc, #12]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	4a02      	ldr	r2, [pc, #8]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003768:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800376c:	60d3      	str	r3, [r2, #12]
 800376e:	e013      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003770:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003778:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800377c:	d10c      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3304      	adds	r3, #4
 8003782:	2101      	movs	r1, #1
 8003784:	4618      	mov	r0, r3
 8003786:	f000 f879 	bl	800387c <RCCEx_PLLSAI1_Config>
 800378a:	4603      	mov	r3, r0
 800378c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800378e:	7cfb      	ldrb	r3, [r7, #19]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003794:	7cfb      	ldrb	r3, [r7, #19]
 8003796:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d02f      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037a4:	4b2c      	ldr	r3, [pc, #176]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037b2:	4929      	ldr	r1, [pc, #164]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037c2:	d10d      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3304      	adds	r3, #4
 80037c8:	2102      	movs	r1, #2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 f856 	bl	800387c <RCCEx_PLLSAI1_Config>
 80037d0:	4603      	mov	r3, r0
 80037d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037d4:	7cfb      	ldrb	r3, [r7, #19]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d014      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80037da:	7cfb      	ldrb	r3, [r7, #19]
 80037dc:	74bb      	strb	r3, [r7, #18]
 80037de:	e011      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037e8:	d10c      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3320      	adds	r3, #32
 80037ee:	2102      	movs	r1, #2
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 f935 	bl	8003a60 <RCCEx_PLLSAI2_Config>
 80037f6:	4603      	mov	r3, r0
 80037f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037fa:	7cfb      	ldrb	r3, [r7, #19]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003800:	7cfb      	ldrb	r3, [r7, #19]
 8003802:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00b      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003810:	4b11      	ldr	r3, [pc, #68]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003816:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003820:	490d      	ldr	r1, [pc, #52]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003822:	4313      	orrs	r3, r2
 8003824:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00b      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003834:	4b08      	ldr	r3, [pc, #32]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800383a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003844:	4904      	ldr	r1, [pc, #16]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800384c:	7cbb      	ldrb	r3, [r7, #18]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40021000 	.word	0x40021000

0800385c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003860:	4b05      	ldr	r3, [pc, #20]	@ (8003878 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a04      	ldr	r2, [pc, #16]	@ (8003878 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003866:	f043 0304 	orr.w	r3, r3, #4
 800386a:	6013      	str	r3, [r2, #0]
}
 800386c:	bf00      	nop
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40021000 	.word	0x40021000

0800387c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800388a:	4b74      	ldr	r3, [pc, #464]	@ (8003a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d018      	beq.n	80038c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003896:	4b71      	ldr	r3, [pc, #452]	@ (8003a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f003 0203 	and.w	r2, r3, #3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d10d      	bne.n	80038c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
       ||
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d009      	beq.n	80038c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038ae:	4b6b      	ldr	r3, [pc, #428]	@ (8003a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	091b      	lsrs	r3, r3, #4
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
       ||
 80038be:	429a      	cmp	r2, r3
 80038c0:	d047      	beq.n	8003952 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	73fb      	strb	r3, [r7, #15]
 80038c6:	e044      	b.n	8003952 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d018      	beq.n	8003902 <RCCEx_PLLSAI1_Config+0x86>
 80038d0:	2b03      	cmp	r3, #3
 80038d2:	d825      	bhi.n	8003920 <RCCEx_PLLSAI1_Config+0xa4>
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d002      	beq.n	80038de <RCCEx_PLLSAI1_Config+0x62>
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d009      	beq.n	80038f0 <RCCEx_PLLSAI1_Config+0x74>
 80038dc:	e020      	b.n	8003920 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038de:	4b5f      	ldr	r3, [pc, #380]	@ (8003a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d11d      	bne.n	8003926 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ee:	e01a      	b.n	8003926 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038f0:	4b5a      	ldr	r3, [pc, #360]	@ (8003a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d116      	bne.n	800392a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003900:	e013      	b.n	800392a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003902:	4b56      	ldr	r3, [pc, #344]	@ (8003a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10f      	bne.n	800392e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800390e:	4b53      	ldr	r3, [pc, #332]	@ (8003a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800391e:	e006      	b.n	800392e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	73fb      	strb	r3, [r7, #15]
      break;
 8003924:	e004      	b.n	8003930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003926:	bf00      	nop
 8003928:	e002      	b.n	8003930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800392a:	bf00      	nop
 800392c:	e000      	b.n	8003930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800392e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10d      	bne.n	8003952 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003936:	4b49      	ldr	r3, [pc, #292]	@ (8003a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6819      	ldr	r1, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	3b01      	subs	r3, #1
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	430b      	orrs	r3, r1
 800394c:	4943      	ldr	r1, [pc, #268]	@ (8003a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 800394e:	4313      	orrs	r3, r2
 8003950:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d17c      	bne.n	8003a52 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003958:	4b40      	ldr	r3, [pc, #256]	@ (8003a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a3f      	ldr	r2, [pc, #252]	@ (8003a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 800395e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003962:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003964:	f7fd fbd2 	bl	800110c <HAL_GetTick>
 8003968:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800396a:	e009      	b.n	8003980 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800396c:	f7fd fbce 	bl	800110c <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d902      	bls.n	8003980 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	73fb      	strb	r3, [r7, #15]
        break;
 800397e:	e005      	b.n	800398c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003980:	4b36      	ldr	r3, [pc, #216]	@ (8003a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1ef      	bne.n	800396c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d15f      	bne.n	8003a52 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d110      	bne.n	80039ba <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003998:	4b30      	ldr	r3, [pc, #192]	@ (8003a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80039a0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6892      	ldr	r2, [r2, #8]
 80039a8:	0211      	lsls	r1, r2, #8
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	68d2      	ldr	r2, [r2, #12]
 80039ae:	06d2      	lsls	r2, r2, #27
 80039b0:	430a      	orrs	r2, r1
 80039b2:	492a      	ldr	r1, [pc, #168]	@ (8003a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	610b      	str	r3, [r1, #16]
 80039b8:	e027      	b.n	8003a0a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d112      	bne.n	80039e6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039c0:	4b26      	ldr	r3, [pc, #152]	@ (8003a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80039c8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6892      	ldr	r2, [r2, #8]
 80039d0:	0211      	lsls	r1, r2, #8
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6912      	ldr	r2, [r2, #16]
 80039d6:	0852      	lsrs	r2, r2, #1
 80039d8:	3a01      	subs	r2, #1
 80039da:	0552      	lsls	r2, r2, #21
 80039dc:	430a      	orrs	r2, r1
 80039de:	491f      	ldr	r1, [pc, #124]	@ (8003a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	610b      	str	r3, [r1, #16]
 80039e4:	e011      	b.n	8003a0a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039e6:	4b1d      	ldr	r3, [pc, #116]	@ (8003a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80039ee:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6892      	ldr	r2, [r2, #8]
 80039f6:	0211      	lsls	r1, r2, #8
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6952      	ldr	r2, [r2, #20]
 80039fc:	0852      	lsrs	r2, r2, #1
 80039fe:	3a01      	subs	r2, #1
 8003a00:	0652      	lsls	r2, r2, #25
 8003a02:	430a      	orrs	r2, r1
 8003a04:	4915      	ldr	r1, [pc, #84]	@ (8003a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a0a:	4b14      	ldr	r3, [pc, #80]	@ (8003a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a13      	ldr	r2, [pc, #76]	@ (8003a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a10:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a14:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a16:	f7fd fb79 	bl	800110c <HAL_GetTick>
 8003a1a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a1c:	e009      	b.n	8003a32 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a1e:	f7fd fb75 	bl	800110c <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d902      	bls.n	8003a32 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	73fb      	strb	r3, [r7, #15]
          break;
 8003a30:	e005      	b.n	8003a3e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a32:	4b0a      	ldr	r3, [pc, #40]	@ (8003a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0ef      	beq.n	8003a1e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d106      	bne.n	8003a52 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a44:	4b05      	ldr	r3, [pc, #20]	@ (8003a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	4903      	ldr	r1, [pc, #12]	@ (8003a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40021000 	.word	0x40021000

08003a60 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a6e:	4b69      	ldr	r3, [pc, #420]	@ (8003c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d018      	beq.n	8003aac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a7a:	4b66      	ldr	r3, [pc, #408]	@ (8003c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0203 	and.w	r2, r3, #3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d10d      	bne.n	8003aa6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
       ||
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d009      	beq.n	8003aa6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a92:	4b60      	ldr	r3, [pc, #384]	@ (8003c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	091b      	lsrs	r3, r3, #4
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
       ||
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d047      	beq.n	8003b36 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	73fb      	strb	r3, [r7, #15]
 8003aaa:	e044      	b.n	8003b36 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d018      	beq.n	8003ae6 <RCCEx_PLLSAI2_Config+0x86>
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d825      	bhi.n	8003b04 <RCCEx_PLLSAI2_Config+0xa4>
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d002      	beq.n	8003ac2 <RCCEx_PLLSAI2_Config+0x62>
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d009      	beq.n	8003ad4 <RCCEx_PLLSAI2_Config+0x74>
 8003ac0:	e020      	b.n	8003b04 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ac2:	4b54      	ldr	r3, [pc, #336]	@ (8003c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d11d      	bne.n	8003b0a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ad2:	e01a      	b.n	8003b0a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ad4:	4b4f      	ldr	r3, [pc, #316]	@ (8003c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d116      	bne.n	8003b0e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae4:	e013      	b.n	8003b0e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ae6:	4b4b      	ldr	r3, [pc, #300]	@ (8003c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10f      	bne.n	8003b12 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003af2:	4b48      	ldr	r3, [pc, #288]	@ (8003c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d109      	bne.n	8003b12 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b02:	e006      	b.n	8003b12 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	73fb      	strb	r3, [r7, #15]
      break;
 8003b08:	e004      	b.n	8003b14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b0a:	bf00      	nop
 8003b0c:	e002      	b.n	8003b14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b0e:	bf00      	nop
 8003b10:	e000      	b.n	8003b14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b12:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10d      	bne.n	8003b36 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b1a:	4b3e      	ldr	r3, [pc, #248]	@ (8003c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6819      	ldr	r1, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	430b      	orrs	r3, r1
 8003b30:	4938      	ldr	r1, [pc, #224]	@ (8003c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d166      	bne.n	8003c0a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b3c:	4b35      	ldr	r3, [pc, #212]	@ (8003c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a34      	ldr	r2, [pc, #208]	@ (8003c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b48:	f7fd fae0 	bl	800110c <HAL_GetTick>
 8003b4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b4e:	e009      	b.n	8003b64 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b50:	f7fd fadc 	bl	800110c <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d902      	bls.n	8003b64 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	73fb      	strb	r3, [r7, #15]
        break;
 8003b62:	e005      	b.n	8003b70 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b64:	4b2b      	ldr	r3, [pc, #172]	@ (8003c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1ef      	bne.n	8003b50 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d149      	bne.n	8003c0a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d110      	bne.n	8003b9e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b7c:	4b25      	ldr	r3, [pc, #148]	@ (8003c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003b84:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6892      	ldr	r2, [r2, #8]
 8003b8c:	0211      	lsls	r1, r2, #8
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68d2      	ldr	r2, [r2, #12]
 8003b92:	06d2      	lsls	r2, r2, #27
 8003b94:	430a      	orrs	r2, r1
 8003b96:	491f      	ldr	r1, [pc, #124]	@ (8003c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	614b      	str	r3, [r1, #20]
 8003b9c:	e011      	b.n	8003bc2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003ba6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6892      	ldr	r2, [r2, #8]
 8003bae:	0211      	lsls	r1, r2, #8
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6912      	ldr	r2, [r2, #16]
 8003bb4:	0852      	lsrs	r2, r2, #1
 8003bb6:	3a01      	subs	r2, #1
 8003bb8:	0652      	lsls	r2, r2, #25
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	4915      	ldr	r1, [pc, #84]	@ (8003c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003bc2:	4b14      	ldr	r3, [pc, #80]	@ (8003c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a13      	ldr	r2, [pc, #76]	@ (8003c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bcc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bce:	f7fd fa9d 	bl	800110c <HAL_GetTick>
 8003bd2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bd4:	e009      	b.n	8003bea <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bd6:	f7fd fa99 	bl	800110c <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d902      	bls.n	8003bea <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	73fb      	strb	r3, [r7, #15]
          break;
 8003be8:	e005      	b.n	8003bf6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bea:	4b0a      	ldr	r3, [pc, #40]	@ (8003c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0ef      	beq.n	8003bd6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d106      	bne.n	8003c0a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003bfc:	4b05      	ldr	r3, [pc, #20]	@ (8003c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003bfe:	695a      	ldr	r2, [r3, #20]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	4903      	ldr	r1, [pc, #12]	@ (8003c14 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40021000 	.word	0x40021000

08003c18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e040      	b.n	8003cac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd f81a 	bl	8000c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2224      	movs	r2, #36	@ 0x24
 8003c44:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0201 	bic.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d002      	beq.n	8003c64 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 fb6a 	bl	8004338 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f8af 	bl	8003dc8 <UART_SetConfig>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e01b      	b.n	8003cac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 fbe9 	bl	800447c <UART_CheckIdleState>
 8003caa:	4603      	mov	r3, r0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08a      	sub	sp, #40	@ 0x28
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d177      	bne.n	8003dbc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <HAL_UART_Transmit+0x24>
 8003cd2:	88fb      	ldrh	r3, [r7, #6]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e070      	b.n	8003dbe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2221      	movs	r2, #33	@ 0x21
 8003ce8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cea:	f7fd fa0f 	bl	800110c <HAL_GetTick>
 8003cee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	88fa      	ldrh	r2, [r7, #6]
 8003cf4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	88fa      	ldrh	r2, [r7, #6]
 8003cfc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d08:	d108      	bne.n	8003d1c <HAL_UART_Transmit+0x68>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d104      	bne.n	8003d1c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	e003      	b.n	8003d24 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d24:	e02f      	b.n	8003d86 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2180      	movs	r1, #128	@ 0x80
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 fc4b 	bl	80045cc <UART_WaitOnFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d004      	beq.n	8003d46 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e03b      	b.n	8003dbe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10b      	bne.n	8003d64 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	881a      	ldrh	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d58:	b292      	uxth	r2, r2
 8003d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	3302      	adds	r3, #2
 8003d60:	61bb      	str	r3, [r7, #24]
 8003d62:	e007      	b.n	8003d74 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	781a      	ldrb	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	3301      	adds	r3, #1
 8003d72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1c9      	bne.n	8003d26 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	2140      	movs	r1, #64	@ 0x40
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 fc15 	bl	80045cc <UART_WaitOnFlagUntilTimeout>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d004      	beq.n	8003db2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2220      	movs	r2, #32
 8003dac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e005      	b.n	8003dbe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2220      	movs	r2, #32
 8003db6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e000      	b.n	8003dbe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
  }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3720      	adds	r7, #32
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dcc:	b08a      	sub	sp, #40	@ 0x28
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	431a      	orrs	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	4ba4      	ldr	r3, [pc, #656]	@ (8004088 <UART_SetConfig+0x2c0>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	6812      	ldr	r2, [r2, #0]
 8003dfe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e00:	430b      	orrs	r3, r1
 8003e02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a99      	ldr	r2, [pc, #612]	@ (800408c <UART_SetConfig+0x2c4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d004      	beq.n	8003e34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e30:	4313      	orrs	r3, r2
 8003e32:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e44:	430a      	orrs	r2, r1
 8003e46:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a90      	ldr	r2, [pc, #576]	@ (8004090 <UART_SetConfig+0x2c8>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d126      	bne.n	8003ea0 <UART_SetConfig+0xd8>
 8003e52:	4b90      	ldr	r3, [pc, #576]	@ (8004094 <UART_SetConfig+0x2cc>)
 8003e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	2b03      	cmp	r3, #3
 8003e5e:	d81b      	bhi.n	8003e98 <UART_SetConfig+0xd0>
 8003e60:	a201      	add	r2, pc, #4	@ (adr r2, 8003e68 <UART_SetConfig+0xa0>)
 8003e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e66:	bf00      	nop
 8003e68:	08003e79 	.word	0x08003e79
 8003e6c:	08003e89 	.word	0x08003e89
 8003e70:	08003e81 	.word	0x08003e81
 8003e74:	08003e91 	.word	0x08003e91
 8003e78:	2301      	movs	r3, #1
 8003e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e7e:	e116      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003e80:	2302      	movs	r3, #2
 8003e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e86:	e112      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003e88:	2304      	movs	r3, #4
 8003e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e8e:	e10e      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003e90:	2308      	movs	r3, #8
 8003e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e96:	e10a      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003e98:	2310      	movs	r3, #16
 8003e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e9e:	e106      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a7c      	ldr	r2, [pc, #496]	@ (8004098 <UART_SetConfig+0x2d0>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d138      	bne.n	8003f1c <UART_SetConfig+0x154>
 8003eaa:	4b7a      	ldr	r3, [pc, #488]	@ (8004094 <UART_SetConfig+0x2cc>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb0:	f003 030c 	and.w	r3, r3, #12
 8003eb4:	2b0c      	cmp	r3, #12
 8003eb6:	d82d      	bhi.n	8003f14 <UART_SetConfig+0x14c>
 8003eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec0 <UART_SetConfig+0xf8>)
 8003eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebe:	bf00      	nop
 8003ec0:	08003ef5 	.word	0x08003ef5
 8003ec4:	08003f15 	.word	0x08003f15
 8003ec8:	08003f15 	.word	0x08003f15
 8003ecc:	08003f15 	.word	0x08003f15
 8003ed0:	08003f05 	.word	0x08003f05
 8003ed4:	08003f15 	.word	0x08003f15
 8003ed8:	08003f15 	.word	0x08003f15
 8003edc:	08003f15 	.word	0x08003f15
 8003ee0:	08003efd 	.word	0x08003efd
 8003ee4:	08003f15 	.word	0x08003f15
 8003ee8:	08003f15 	.word	0x08003f15
 8003eec:	08003f15 	.word	0x08003f15
 8003ef0:	08003f0d 	.word	0x08003f0d
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003efa:	e0d8      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003efc:	2302      	movs	r3, #2
 8003efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f02:	e0d4      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003f04:	2304      	movs	r3, #4
 8003f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f0a:	e0d0      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003f0c:	2308      	movs	r3, #8
 8003f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f12:	e0cc      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003f14:	2310      	movs	r3, #16
 8003f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f1a:	e0c8      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a5e      	ldr	r2, [pc, #376]	@ (800409c <UART_SetConfig+0x2d4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d125      	bne.n	8003f72 <UART_SetConfig+0x1aa>
 8003f26:	4b5b      	ldr	r3, [pc, #364]	@ (8004094 <UART_SetConfig+0x2cc>)
 8003f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003f30:	2b30      	cmp	r3, #48	@ 0x30
 8003f32:	d016      	beq.n	8003f62 <UART_SetConfig+0x19a>
 8003f34:	2b30      	cmp	r3, #48	@ 0x30
 8003f36:	d818      	bhi.n	8003f6a <UART_SetConfig+0x1a2>
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d00a      	beq.n	8003f52 <UART_SetConfig+0x18a>
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d814      	bhi.n	8003f6a <UART_SetConfig+0x1a2>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d002      	beq.n	8003f4a <UART_SetConfig+0x182>
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d008      	beq.n	8003f5a <UART_SetConfig+0x192>
 8003f48:	e00f      	b.n	8003f6a <UART_SetConfig+0x1a2>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f50:	e0ad      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003f52:	2302      	movs	r3, #2
 8003f54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f58:	e0a9      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003f5a:	2304      	movs	r3, #4
 8003f5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f60:	e0a5      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003f62:	2308      	movs	r3, #8
 8003f64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f68:	e0a1      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003f6a:	2310      	movs	r3, #16
 8003f6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f70:	e09d      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a4a      	ldr	r2, [pc, #296]	@ (80040a0 <UART_SetConfig+0x2d8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d125      	bne.n	8003fc8 <UART_SetConfig+0x200>
 8003f7c:	4b45      	ldr	r3, [pc, #276]	@ (8004094 <UART_SetConfig+0x2cc>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003f86:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f88:	d016      	beq.n	8003fb8 <UART_SetConfig+0x1f0>
 8003f8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f8c:	d818      	bhi.n	8003fc0 <UART_SetConfig+0x1f8>
 8003f8e:	2b80      	cmp	r3, #128	@ 0x80
 8003f90:	d00a      	beq.n	8003fa8 <UART_SetConfig+0x1e0>
 8003f92:	2b80      	cmp	r3, #128	@ 0x80
 8003f94:	d814      	bhi.n	8003fc0 <UART_SetConfig+0x1f8>
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <UART_SetConfig+0x1d8>
 8003f9a:	2b40      	cmp	r3, #64	@ 0x40
 8003f9c:	d008      	beq.n	8003fb0 <UART_SetConfig+0x1e8>
 8003f9e:	e00f      	b.n	8003fc0 <UART_SetConfig+0x1f8>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fa6:	e082      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fae:	e07e      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003fb0:	2304      	movs	r3, #4
 8003fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fb6:	e07a      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003fb8:	2308      	movs	r3, #8
 8003fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fbe:	e076      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003fc0:	2310      	movs	r3, #16
 8003fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fc6:	e072      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a35      	ldr	r2, [pc, #212]	@ (80040a4 <UART_SetConfig+0x2dc>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d12a      	bne.n	8004028 <UART_SetConfig+0x260>
 8003fd2:	4b30      	ldr	r3, [pc, #192]	@ (8004094 <UART_SetConfig+0x2cc>)
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fe0:	d01a      	beq.n	8004018 <UART_SetConfig+0x250>
 8003fe2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fe6:	d81b      	bhi.n	8004020 <UART_SetConfig+0x258>
 8003fe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fec:	d00c      	beq.n	8004008 <UART_SetConfig+0x240>
 8003fee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ff2:	d815      	bhi.n	8004020 <UART_SetConfig+0x258>
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <UART_SetConfig+0x238>
 8003ff8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ffc:	d008      	beq.n	8004010 <UART_SetConfig+0x248>
 8003ffe:	e00f      	b.n	8004020 <UART_SetConfig+0x258>
 8004000:	2300      	movs	r3, #0
 8004002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004006:	e052      	b.n	80040ae <UART_SetConfig+0x2e6>
 8004008:	2302      	movs	r3, #2
 800400a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800400e:	e04e      	b.n	80040ae <UART_SetConfig+0x2e6>
 8004010:	2304      	movs	r3, #4
 8004012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004016:	e04a      	b.n	80040ae <UART_SetConfig+0x2e6>
 8004018:	2308      	movs	r3, #8
 800401a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800401e:	e046      	b.n	80040ae <UART_SetConfig+0x2e6>
 8004020:	2310      	movs	r3, #16
 8004022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004026:	e042      	b.n	80040ae <UART_SetConfig+0x2e6>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a17      	ldr	r2, [pc, #92]	@ (800408c <UART_SetConfig+0x2c4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d13a      	bne.n	80040a8 <UART_SetConfig+0x2e0>
 8004032:	4b18      	ldr	r3, [pc, #96]	@ (8004094 <UART_SetConfig+0x2cc>)
 8004034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004038:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800403c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004040:	d01a      	beq.n	8004078 <UART_SetConfig+0x2b0>
 8004042:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004046:	d81b      	bhi.n	8004080 <UART_SetConfig+0x2b8>
 8004048:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800404c:	d00c      	beq.n	8004068 <UART_SetConfig+0x2a0>
 800404e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004052:	d815      	bhi.n	8004080 <UART_SetConfig+0x2b8>
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <UART_SetConfig+0x298>
 8004058:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800405c:	d008      	beq.n	8004070 <UART_SetConfig+0x2a8>
 800405e:	e00f      	b.n	8004080 <UART_SetConfig+0x2b8>
 8004060:	2300      	movs	r3, #0
 8004062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004066:	e022      	b.n	80040ae <UART_SetConfig+0x2e6>
 8004068:	2302      	movs	r3, #2
 800406a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800406e:	e01e      	b.n	80040ae <UART_SetConfig+0x2e6>
 8004070:	2304      	movs	r3, #4
 8004072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004076:	e01a      	b.n	80040ae <UART_SetConfig+0x2e6>
 8004078:	2308      	movs	r3, #8
 800407a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800407e:	e016      	b.n	80040ae <UART_SetConfig+0x2e6>
 8004080:	2310      	movs	r3, #16
 8004082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004086:	e012      	b.n	80040ae <UART_SetConfig+0x2e6>
 8004088:	efff69f3 	.word	0xefff69f3
 800408c:	40008000 	.word	0x40008000
 8004090:	40013800 	.word	0x40013800
 8004094:	40021000 	.word	0x40021000
 8004098:	40004400 	.word	0x40004400
 800409c:	40004800 	.word	0x40004800
 80040a0:	40004c00 	.word	0x40004c00
 80040a4:	40005000 	.word	0x40005000
 80040a8:	2310      	movs	r3, #16
 80040aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a9f      	ldr	r2, [pc, #636]	@ (8004330 <UART_SetConfig+0x568>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d17a      	bne.n	80041ae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d824      	bhi.n	800410a <UART_SetConfig+0x342>
 80040c0:	a201      	add	r2, pc, #4	@ (adr r2, 80040c8 <UART_SetConfig+0x300>)
 80040c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c6:	bf00      	nop
 80040c8:	080040ed 	.word	0x080040ed
 80040cc:	0800410b 	.word	0x0800410b
 80040d0:	080040f5 	.word	0x080040f5
 80040d4:	0800410b 	.word	0x0800410b
 80040d8:	080040fb 	.word	0x080040fb
 80040dc:	0800410b 	.word	0x0800410b
 80040e0:	0800410b 	.word	0x0800410b
 80040e4:	0800410b 	.word	0x0800410b
 80040e8:	08004103 	.word	0x08004103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040ec:	f7ff f82e 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 80040f0:	61f8      	str	r0, [r7, #28]
        break;
 80040f2:	e010      	b.n	8004116 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040f4:	4b8f      	ldr	r3, [pc, #572]	@ (8004334 <UART_SetConfig+0x56c>)
 80040f6:	61fb      	str	r3, [r7, #28]
        break;
 80040f8:	e00d      	b.n	8004116 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040fa:	f7fe ff8f 	bl	800301c <HAL_RCC_GetSysClockFreq>
 80040fe:	61f8      	str	r0, [r7, #28]
        break;
 8004100:	e009      	b.n	8004116 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004102:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004106:	61fb      	str	r3, [r7, #28]
        break;
 8004108:	e005      	b.n	8004116 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800410a:	2300      	movs	r3, #0
 800410c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004114:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80fb 	beq.w	8004314 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	4413      	add	r3, r2
 8004128:	69fa      	ldr	r2, [r7, #28]
 800412a:	429a      	cmp	r2, r3
 800412c:	d305      	bcc.n	800413a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004134:	69fa      	ldr	r2, [r7, #28]
 8004136:	429a      	cmp	r2, r3
 8004138:	d903      	bls.n	8004142 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004140:	e0e8      	b.n	8004314 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	2200      	movs	r2, #0
 8004146:	461c      	mov	r4, r3
 8004148:	4615      	mov	r5, r2
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	022b      	lsls	r3, r5, #8
 8004154:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004158:	0222      	lsls	r2, r4, #8
 800415a:	68f9      	ldr	r1, [r7, #12]
 800415c:	6849      	ldr	r1, [r1, #4]
 800415e:	0849      	lsrs	r1, r1, #1
 8004160:	2000      	movs	r0, #0
 8004162:	4688      	mov	r8, r1
 8004164:	4681      	mov	r9, r0
 8004166:	eb12 0a08 	adds.w	sl, r2, r8
 800416a:	eb43 0b09 	adc.w	fp, r3, r9
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	603b      	str	r3, [r7, #0]
 8004176:	607a      	str	r2, [r7, #4]
 8004178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800417c:	4650      	mov	r0, sl
 800417e:	4659      	mov	r1, fp
 8004180:	f7fc f88e 	bl	80002a0 <__aeabi_uldivmod>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	4613      	mov	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004192:	d308      	bcc.n	80041a6 <UART_SetConfig+0x3de>
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800419a:	d204      	bcs.n	80041a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	60da      	str	r2, [r3, #12]
 80041a4:	e0b6      	b.n	8004314 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80041ac:	e0b2      	b.n	8004314 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041b6:	d15e      	bne.n	8004276 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80041b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d828      	bhi.n	8004212 <UART_SetConfig+0x44a>
 80041c0:	a201      	add	r2, pc, #4	@ (adr r2, 80041c8 <UART_SetConfig+0x400>)
 80041c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c6:	bf00      	nop
 80041c8:	080041ed 	.word	0x080041ed
 80041cc:	080041f5 	.word	0x080041f5
 80041d0:	080041fd 	.word	0x080041fd
 80041d4:	08004213 	.word	0x08004213
 80041d8:	08004203 	.word	0x08004203
 80041dc:	08004213 	.word	0x08004213
 80041e0:	08004213 	.word	0x08004213
 80041e4:	08004213 	.word	0x08004213
 80041e8:	0800420b 	.word	0x0800420b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041ec:	f7fe ffae 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 80041f0:	61f8      	str	r0, [r7, #28]
        break;
 80041f2:	e014      	b.n	800421e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041f4:	f7fe ffc0 	bl	8003178 <HAL_RCC_GetPCLK2Freq>
 80041f8:	61f8      	str	r0, [r7, #28]
        break;
 80041fa:	e010      	b.n	800421e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041fc:	4b4d      	ldr	r3, [pc, #308]	@ (8004334 <UART_SetConfig+0x56c>)
 80041fe:	61fb      	str	r3, [r7, #28]
        break;
 8004200:	e00d      	b.n	800421e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004202:	f7fe ff0b 	bl	800301c <HAL_RCC_GetSysClockFreq>
 8004206:	61f8      	str	r0, [r7, #28]
        break;
 8004208:	e009      	b.n	800421e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800420a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800420e:	61fb      	str	r3, [r7, #28]
        break;
 8004210:	e005      	b.n	800421e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800421c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d077      	beq.n	8004314 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	005a      	lsls	r2, r3, #1
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	085b      	lsrs	r3, r3, #1
 800422e:	441a      	add	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	fbb2 f3f3 	udiv	r3, r2, r3
 8004238:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	2b0f      	cmp	r3, #15
 800423e:	d916      	bls.n	800426e <UART_SetConfig+0x4a6>
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004246:	d212      	bcs.n	800426e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	b29b      	uxth	r3, r3
 800424c:	f023 030f 	bic.w	r3, r3, #15
 8004250:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	085b      	lsrs	r3, r3, #1
 8004256:	b29b      	uxth	r3, r3
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	b29a      	uxth	r2, r3
 800425e:	8afb      	ldrh	r3, [r7, #22]
 8004260:	4313      	orrs	r3, r2
 8004262:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	8afa      	ldrh	r2, [r7, #22]
 800426a:	60da      	str	r2, [r3, #12]
 800426c:	e052      	b.n	8004314 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004274:	e04e      	b.n	8004314 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004276:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800427a:	2b08      	cmp	r3, #8
 800427c:	d827      	bhi.n	80042ce <UART_SetConfig+0x506>
 800427e:	a201      	add	r2, pc, #4	@ (adr r2, 8004284 <UART_SetConfig+0x4bc>)
 8004280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004284:	080042a9 	.word	0x080042a9
 8004288:	080042b1 	.word	0x080042b1
 800428c:	080042b9 	.word	0x080042b9
 8004290:	080042cf 	.word	0x080042cf
 8004294:	080042bf 	.word	0x080042bf
 8004298:	080042cf 	.word	0x080042cf
 800429c:	080042cf 	.word	0x080042cf
 80042a0:	080042cf 	.word	0x080042cf
 80042a4:	080042c7 	.word	0x080042c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042a8:	f7fe ff50 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 80042ac:	61f8      	str	r0, [r7, #28]
        break;
 80042ae:	e014      	b.n	80042da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042b0:	f7fe ff62 	bl	8003178 <HAL_RCC_GetPCLK2Freq>
 80042b4:	61f8      	str	r0, [r7, #28]
        break;
 80042b6:	e010      	b.n	80042da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004334 <UART_SetConfig+0x56c>)
 80042ba:	61fb      	str	r3, [r7, #28]
        break;
 80042bc:	e00d      	b.n	80042da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042be:	f7fe fead 	bl	800301c <HAL_RCC_GetSysClockFreq>
 80042c2:	61f8      	str	r0, [r7, #28]
        break;
 80042c4:	e009      	b.n	80042da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042ca:	61fb      	str	r3, [r7, #28]
        break;
 80042cc:	e005      	b.n	80042da <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80042d8:	bf00      	nop
    }

    if (pclk != 0U)
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d019      	beq.n	8004314 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	085a      	lsrs	r2, r3, #1
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	441a      	add	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	2b0f      	cmp	r3, #15
 80042f8:	d909      	bls.n	800430e <UART_SetConfig+0x546>
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004300:	d205      	bcs.n	800430e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	60da      	str	r2, [r3, #12]
 800430c:	e002      	b.n	8004314 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004320:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004324:	4618      	mov	r0, r3
 8004326:	3728      	adds	r7, #40	@ 0x28
 8004328:	46bd      	mov	sp, r7
 800432a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800432e:	bf00      	nop
 8004330:	40008000 	.word	0x40008000
 8004334:	00f42400 	.word	0x00f42400

08004338 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00a      	beq.n	8004362 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00a      	beq.n	80043a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043cc:	f003 0310 	and.w	r3, r3, #16
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ee:	f003 0320 	and.w	r3, r3, #32
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004414:	2b00      	cmp	r3, #0
 8004416:	d01a      	beq.n	800444e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004432:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004436:	d10a      	bne.n	800444e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	605a      	str	r2, [r3, #4]
  }
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b098      	sub	sp, #96	@ 0x60
 8004480:	af02      	add	r7, sp, #8
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800448c:	f7fc fe3e 	bl	800110c <HAL_GetTick>
 8004490:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b08      	cmp	r3, #8
 800449e:	d12e      	bne.n	80044fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044a8:	2200      	movs	r2, #0
 80044aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f88c 	bl	80045cc <UART_WaitOnFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d021      	beq.n	80044fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80044da:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e6      	bne.n	80044ba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2220      	movs	r2, #32
 80044f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e062      	b.n	80045c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b04      	cmp	r3, #4
 800450a:	d149      	bne.n	80045a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800450c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004514:	2200      	movs	r2, #0
 8004516:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f856 	bl	80045cc <UART_WaitOnFlagUntilTimeout>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d03c      	beq.n	80045a0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452e:	e853 3f00 	ldrex	r3, [r3]
 8004532:	623b      	str	r3, [r7, #32]
   return(result);
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800453a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004544:	633b      	str	r3, [r7, #48]	@ 0x30
 8004546:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004548:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800454a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800454c:	e841 2300 	strex	r3, r2, [r1]
 8004550:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e6      	bne.n	8004526 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3308      	adds	r3, #8
 800455e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	e853 3f00 	ldrex	r3, [r3]
 8004566:	60fb      	str	r3, [r7, #12]
   return(result);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0301 	bic.w	r3, r3, #1
 800456e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3308      	adds	r3, #8
 8004576:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004578:	61fa      	str	r2, [r7, #28]
 800457a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457c:	69b9      	ldr	r1, [r7, #24]
 800457e:	69fa      	ldr	r2, [r7, #28]
 8004580:	e841 2300 	strex	r3, r2, [r1]
 8004584:	617b      	str	r3, [r7, #20]
   return(result);
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e5      	bne.n	8004558 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2220      	movs	r2, #32
 8004590:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e011      	b.n	80045c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2220      	movs	r2, #32
 80045a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2220      	movs	r2, #32
 80045aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3758      	adds	r7, #88	@ 0x58
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	4613      	mov	r3, r2
 80045da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045dc:	e04f      	b.n	800467e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e4:	d04b      	beq.n	800467e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e6:	f7fc fd91 	bl	800110c <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d302      	bcc.n	80045fc <UART_WaitOnFlagUntilTimeout+0x30>
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e04e      	b.n	800469e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b00      	cmp	r3, #0
 800460c:	d037      	beq.n	800467e <UART_WaitOnFlagUntilTimeout+0xb2>
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b80      	cmp	r3, #128	@ 0x80
 8004612:	d034      	beq.n	800467e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b40      	cmp	r3, #64	@ 0x40
 8004618:	d031      	beq.n	800467e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b08      	cmp	r3, #8
 8004626:	d110      	bne.n	800464a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2208      	movs	r2, #8
 800462e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 f838 	bl	80046a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2208      	movs	r2, #8
 800463a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e029      	b.n	800469e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004654:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004658:	d111      	bne.n	800467e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004662:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 f81e 	bl	80046a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2220      	movs	r2, #32
 800466e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e00f      	b.n	800469e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69da      	ldr	r2, [r3, #28]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4013      	ands	r3, r2
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	429a      	cmp	r2, r3
 800468c:	bf0c      	ite	eq
 800468e:	2301      	moveq	r3, #1
 8004690:	2300      	movne	r3, #0
 8004692:	b2db      	uxtb	r3, r3
 8004694:	461a      	mov	r2, r3
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	429a      	cmp	r2, r3
 800469a:	d0a0      	beq.n	80045de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b095      	sub	sp, #84	@ 0x54
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046b6:	e853 3f00 	ldrex	r3, [r3]
 80046ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	461a      	mov	r2, r3
 80046ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80046ce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046d4:	e841 2300 	strex	r3, r2, [r1]
 80046d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1e6      	bne.n	80046ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3308      	adds	r3, #8
 80046e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	e853 3f00 	ldrex	r3, [r3]
 80046ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	f023 0301 	bic.w	r3, r3, #1
 80046f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3308      	adds	r3, #8
 80046fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004700:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004702:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004704:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004706:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004708:	e841 2300 	strex	r3, r2, [r1]
 800470c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800470e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1e5      	bne.n	80046e0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004718:	2b01      	cmp	r3, #1
 800471a:	d118      	bne.n	800474e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	e853 3f00 	ldrex	r3, [r3]
 8004728:	60bb      	str	r3, [r7, #8]
   return(result);
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f023 0310 	bic.w	r3, r3, #16
 8004730:	647b      	str	r3, [r7, #68]	@ 0x44
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800473a:	61bb      	str	r3, [r7, #24]
 800473c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473e:	6979      	ldr	r1, [r7, #20]
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	e841 2300 	strex	r3, r2, [r1]
 8004746:	613b      	str	r3, [r7, #16]
   return(result);
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1e6      	bne.n	800471c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2220      	movs	r2, #32
 8004752:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004762:	bf00      	nop
 8004764:	3754      	adds	r7, #84	@ 0x54
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800476e:	b084      	sub	sp, #16
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	f107 001c 	add.w	r0, r7, #28
 800477c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 fa69 	bl	8004c64 <USB_CoreReset>
 8004792:	4603      	mov	r3, r0
 8004794:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004796:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80047aa:	e005      	b.n	80047b8 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047c4:	b004      	add	sp, #16
 80047c6:	4770      	bx	lr

080047c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f023 0201 	bic.w	r2, r3, #1
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b084      	sub	sp, #16
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
 80047f2:	460b      	mov	r3, r1
 80047f4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004806:	78fb      	ldrb	r3, [r7, #3]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d115      	bne.n	8004838 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004818:	200a      	movs	r0, #10
 800481a:	f7fc fc83 	bl	8001124 <HAL_Delay>
      ms += 10U;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	330a      	adds	r3, #10
 8004822:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 fa0f 	bl	8004c48 <USB_GetMode>
 800482a:	4603      	mov	r3, r0
 800482c:	2b01      	cmp	r3, #1
 800482e:	d01e      	beq.n	800486e <USB_SetCurrentMode+0x84>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2bc7      	cmp	r3, #199	@ 0xc7
 8004834:	d9f0      	bls.n	8004818 <USB_SetCurrentMode+0x2e>
 8004836:	e01a      	b.n	800486e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d115      	bne.n	800486a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800484a:	200a      	movs	r0, #10
 800484c:	f7fc fc6a 	bl	8001124 <HAL_Delay>
      ms += 10U;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	330a      	adds	r3, #10
 8004854:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f9f6 	bl	8004c48 <USB_GetMode>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d005      	beq.n	800486e <USB_SetCurrentMode+0x84>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2bc7      	cmp	r3, #199	@ 0xc7
 8004866:	d9f0      	bls.n	800484a <USB_SetCurrentMode+0x60>
 8004868:	e001      	b.n	800486e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e005      	b.n	800487a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2bc8      	cmp	r3, #200	@ 0xc8
 8004872:	d101      	bne.n	8004878 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e000      	b.n	800487a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
	...

08004884 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004884:	b084      	sub	sp, #16
 8004886:	b580      	push	{r7, lr}
 8004888:	b086      	sub	sp, #24
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
 800488e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004892:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800489e:	2300      	movs	r3, #0
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	e009      	b.n	80048b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	3340      	adds	r3, #64	@ 0x40
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	2200      	movs	r2, #0
 80048b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	3301      	adds	r3, #1
 80048b6:	613b      	str	r3, [r7, #16]
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	2b0e      	cmp	r3, #14
 80048bc:	d9f2      	bls.n	80048a4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80048be:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d11c      	bne.n	8004900 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048d4:	f043 0302 	orr.w	r3, r3, #2
 80048d8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048de:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	e005      	b.n	800490c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004904:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004912:	461a      	mov	r2, r3
 8004914:	2300      	movs	r3, #0
 8004916:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004918:	2103      	movs	r1, #3
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f95a 	bl	8004bd4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004920:	2110      	movs	r1, #16
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f8f6 	bl	8004b14 <USB_FlushTxFifo>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f920 	bl	8004b78 <USB_FlushRxFifo>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004948:	461a      	mov	r2, r3
 800494a:	2300      	movs	r3, #0
 800494c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004954:	461a      	mov	r2, r3
 8004956:	2300      	movs	r3, #0
 8004958:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004960:	461a      	mov	r2, r3
 8004962:	2300      	movs	r3, #0
 8004964:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004966:	2300      	movs	r3, #0
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	e043      	b.n	80049f4 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4413      	add	r3, r2
 8004974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800497e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004982:	d118      	bne.n	80049b6 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10a      	bne.n	80049a0 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004996:	461a      	mov	r2, r3
 8004998:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	e013      	b.n	80049c8 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049ac:	461a      	mov	r2, r3
 80049ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	e008      	b.n	80049c8 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049c2:	461a      	mov	r2, r3
 80049c4:	2300      	movs	r3, #0
 80049c6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049d4:	461a      	mov	r2, r3
 80049d6:	2300      	movs	r3, #0
 80049d8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049e6:	461a      	mov	r2, r3
 80049e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80049ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	3301      	adds	r3, #1
 80049f2:	613b      	str	r3, [r7, #16]
 80049f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80049f8:	461a      	mov	r2, r3
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d3b5      	bcc.n	800496c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a00:	2300      	movs	r3, #0
 8004a02:	613b      	str	r3, [r7, #16]
 8004a04:	e043      	b.n	8004a8e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a1c:	d118      	bne.n	8004a50 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10a      	bne.n	8004a3a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a30:	461a      	mov	r2, r3
 8004a32:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004a36:	6013      	str	r3, [r2, #0]
 8004a38:	e013      	b.n	8004a62 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a46:	461a      	mov	r2, r3
 8004a48:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	e008      	b.n	8004a62 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	2300      	movs	r3, #0
 8004a60:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a6e:	461a      	mov	r2, r3
 8004a70:	2300      	movs	r3, #0
 8004a72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a80:	461a      	mov	r2, r3
 8004a82:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004a86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004a92:	461a      	mov	r2, r3
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d3b5      	bcc.n	8004a06 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004aa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004aac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004aba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	f043 0210 	orr.w	r2, r3, #16
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	699a      	ldr	r2, [r3, #24]
 8004acc:	4b10      	ldr	r3, [pc, #64]	@ (8004b10 <USB_DevInit+0x28c>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ad4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d005      	beq.n	8004ae8 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	f043 0208 	orr.w	r2, r3, #8
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ae8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d107      	bne.n	8004b00 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004af8:	f043 0304 	orr.w	r3, r3, #4
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3718      	adds	r7, #24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b0c:	b004      	add	sp, #16
 8004b0e:	4770      	bx	lr
 8004b10:	803c3800 	.word	0x803c3800

08004b14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	3301      	adds	r3, #1
 8004b26:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b2e:	d901      	bls.n	8004b34 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e01b      	b.n	8004b6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	daf2      	bge.n	8004b22 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	019b      	lsls	r3, r3, #6
 8004b44:	f043 0220 	orr.w	r2, r3, #32
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b58:	d901      	bls.n	8004b5e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e006      	b.n	8004b6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b20      	cmp	r3, #32
 8004b68:	d0f0      	beq.n	8004b4c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	3301      	adds	r3, #1
 8004b88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b90:	d901      	bls.n	8004b96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e018      	b.n	8004bc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	daf2      	bge.n	8004b84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2210      	movs	r2, #16
 8004ba6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3301      	adds	r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004bb4:	d901      	bls.n	8004bba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e006      	b.n	8004bc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	f003 0310 	and.w	r3, r3, #16
 8004bc2:	2b10      	cmp	r3, #16
 8004bc4:	d0f0      	beq.n	8004ba8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	78fb      	ldrb	r3, [r7, #3]
 8004bee:	68f9      	ldr	r1, [r7, #12]
 8004bf0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b085      	sub	sp, #20
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004c20:	f023 0303 	bic.w	r3, r3, #3
 8004c24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c34:	f043 0302 	orr.w	r3, r3, #2
 8004c38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	f003 0301 	and.w	r3, r3, #1
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	3301      	adds	r3, #1
 8004c74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c7c:	d901      	bls.n	8004c82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e01b      	b.n	8004cba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	daf2      	bge.n	8004c70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f043 0201 	orr.w	r2, r3, #1
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ca6:	d901      	bls.n	8004cac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e006      	b.n	8004cba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d0f0      	beq.n	8004c9a <USB_CoreReset+0x36>

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
	...

08004cc8 <siprintf>:
 8004cc8:	b40e      	push	{r1, r2, r3}
 8004cca:	b500      	push	{lr}
 8004ccc:	b09c      	sub	sp, #112	@ 0x70
 8004cce:	ab1d      	add	r3, sp, #116	@ 0x74
 8004cd0:	9002      	str	r0, [sp, #8]
 8004cd2:	9006      	str	r0, [sp, #24]
 8004cd4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004cd8:	4809      	ldr	r0, [pc, #36]	@ (8004d00 <siprintf+0x38>)
 8004cda:	9107      	str	r1, [sp, #28]
 8004cdc:	9104      	str	r1, [sp, #16]
 8004cde:	4909      	ldr	r1, [pc, #36]	@ (8004d04 <siprintf+0x3c>)
 8004ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ce4:	9105      	str	r1, [sp, #20]
 8004ce6:	6800      	ldr	r0, [r0, #0]
 8004ce8:	9301      	str	r3, [sp, #4]
 8004cea:	a902      	add	r1, sp, #8
 8004cec:	f000 f994 	bl	8005018 <_svfiprintf_r>
 8004cf0:	9b02      	ldr	r3, [sp, #8]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	701a      	strb	r2, [r3, #0]
 8004cf6:	b01c      	add	sp, #112	@ 0x70
 8004cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cfc:	b003      	add	sp, #12
 8004cfe:	4770      	bx	lr
 8004d00:	2000000c 	.word	0x2000000c
 8004d04:	ffff0208 	.word	0xffff0208

08004d08 <memset>:
 8004d08:	4402      	add	r2, r0
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d100      	bne.n	8004d12 <memset+0xa>
 8004d10:	4770      	bx	lr
 8004d12:	f803 1b01 	strb.w	r1, [r3], #1
 8004d16:	e7f9      	b.n	8004d0c <memset+0x4>

08004d18 <__errno>:
 8004d18:	4b01      	ldr	r3, [pc, #4]	@ (8004d20 <__errno+0x8>)
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	2000000c 	.word	0x2000000c

08004d24 <__libc_init_array>:
 8004d24:	b570      	push	{r4, r5, r6, lr}
 8004d26:	4d0d      	ldr	r5, [pc, #52]	@ (8004d5c <__libc_init_array+0x38>)
 8004d28:	4c0d      	ldr	r4, [pc, #52]	@ (8004d60 <__libc_init_array+0x3c>)
 8004d2a:	1b64      	subs	r4, r4, r5
 8004d2c:	10a4      	asrs	r4, r4, #2
 8004d2e:	2600      	movs	r6, #0
 8004d30:	42a6      	cmp	r6, r4
 8004d32:	d109      	bne.n	8004d48 <__libc_init_array+0x24>
 8004d34:	4d0b      	ldr	r5, [pc, #44]	@ (8004d64 <__libc_init_array+0x40>)
 8004d36:	4c0c      	ldr	r4, [pc, #48]	@ (8004d68 <__libc_init_array+0x44>)
 8004d38:	f000 fc66 	bl	8005608 <_init>
 8004d3c:	1b64      	subs	r4, r4, r5
 8004d3e:	10a4      	asrs	r4, r4, #2
 8004d40:	2600      	movs	r6, #0
 8004d42:	42a6      	cmp	r6, r4
 8004d44:	d105      	bne.n	8004d52 <__libc_init_array+0x2e>
 8004d46:	bd70      	pop	{r4, r5, r6, pc}
 8004d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d4c:	4798      	blx	r3
 8004d4e:	3601      	adds	r6, #1
 8004d50:	e7ee      	b.n	8004d30 <__libc_init_array+0xc>
 8004d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d56:	4798      	blx	r3
 8004d58:	3601      	adds	r6, #1
 8004d5a:	e7f2      	b.n	8004d42 <__libc_init_array+0x1e>
 8004d5c:	08005710 	.word	0x08005710
 8004d60:	08005710 	.word	0x08005710
 8004d64:	08005710 	.word	0x08005710
 8004d68:	08005714 	.word	0x08005714

08004d6c <__retarget_lock_acquire_recursive>:
 8004d6c:	4770      	bx	lr

08004d6e <__retarget_lock_release_recursive>:
 8004d6e:	4770      	bx	lr

08004d70 <_free_r>:
 8004d70:	b538      	push	{r3, r4, r5, lr}
 8004d72:	4605      	mov	r5, r0
 8004d74:	2900      	cmp	r1, #0
 8004d76:	d041      	beq.n	8004dfc <_free_r+0x8c>
 8004d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d7c:	1f0c      	subs	r4, r1, #4
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	bfb8      	it	lt
 8004d82:	18e4      	addlt	r4, r4, r3
 8004d84:	f000 f8e0 	bl	8004f48 <__malloc_lock>
 8004d88:	4a1d      	ldr	r2, [pc, #116]	@ (8004e00 <_free_r+0x90>)
 8004d8a:	6813      	ldr	r3, [r2, #0]
 8004d8c:	b933      	cbnz	r3, 8004d9c <_free_r+0x2c>
 8004d8e:	6063      	str	r3, [r4, #4]
 8004d90:	6014      	str	r4, [r2, #0]
 8004d92:	4628      	mov	r0, r5
 8004d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d98:	f000 b8dc 	b.w	8004f54 <__malloc_unlock>
 8004d9c:	42a3      	cmp	r3, r4
 8004d9e:	d908      	bls.n	8004db2 <_free_r+0x42>
 8004da0:	6820      	ldr	r0, [r4, #0]
 8004da2:	1821      	adds	r1, r4, r0
 8004da4:	428b      	cmp	r3, r1
 8004da6:	bf01      	itttt	eq
 8004da8:	6819      	ldreq	r1, [r3, #0]
 8004daa:	685b      	ldreq	r3, [r3, #4]
 8004dac:	1809      	addeq	r1, r1, r0
 8004dae:	6021      	streq	r1, [r4, #0]
 8004db0:	e7ed      	b.n	8004d8e <_free_r+0x1e>
 8004db2:	461a      	mov	r2, r3
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	b10b      	cbz	r3, 8004dbc <_free_r+0x4c>
 8004db8:	42a3      	cmp	r3, r4
 8004dba:	d9fa      	bls.n	8004db2 <_free_r+0x42>
 8004dbc:	6811      	ldr	r1, [r2, #0]
 8004dbe:	1850      	adds	r0, r2, r1
 8004dc0:	42a0      	cmp	r0, r4
 8004dc2:	d10b      	bne.n	8004ddc <_free_r+0x6c>
 8004dc4:	6820      	ldr	r0, [r4, #0]
 8004dc6:	4401      	add	r1, r0
 8004dc8:	1850      	adds	r0, r2, r1
 8004dca:	4283      	cmp	r3, r0
 8004dcc:	6011      	str	r1, [r2, #0]
 8004dce:	d1e0      	bne.n	8004d92 <_free_r+0x22>
 8004dd0:	6818      	ldr	r0, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	6053      	str	r3, [r2, #4]
 8004dd6:	4408      	add	r0, r1
 8004dd8:	6010      	str	r0, [r2, #0]
 8004dda:	e7da      	b.n	8004d92 <_free_r+0x22>
 8004ddc:	d902      	bls.n	8004de4 <_free_r+0x74>
 8004dde:	230c      	movs	r3, #12
 8004de0:	602b      	str	r3, [r5, #0]
 8004de2:	e7d6      	b.n	8004d92 <_free_r+0x22>
 8004de4:	6820      	ldr	r0, [r4, #0]
 8004de6:	1821      	adds	r1, r4, r0
 8004de8:	428b      	cmp	r3, r1
 8004dea:	bf04      	itt	eq
 8004dec:	6819      	ldreq	r1, [r3, #0]
 8004dee:	685b      	ldreq	r3, [r3, #4]
 8004df0:	6063      	str	r3, [r4, #4]
 8004df2:	bf04      	itt	eq
 8004df4:	1809      	addeq	r1, r1, r0
 8004df6:	6021      	streq	r1, [r4, #0]
 8004df8:	6054      	str	r4, [r2, #4]
 8004dfa:	e7ca      	b.n	8004d92 <_free_r+0x22>
 8004dfc:	bd38      	pop	{r3, r4, r5, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000820 	.word	0x20000820

08004e04 <sbrk_aligned>:
 8004e04:	b570      	push	{r4, r5, r6, lr}
 8004e06:	4e0f      	ldr	r6, [pc, #60]	@ (8004e44 <sbrk_aligned+0x40>)
 8004e08:	460c      	mov	r4, r1
 8004e0a:	6831      	ldr	r1, [r6, #0]
 8004e0c:	4605      	mov	r5, r0
 8004e0e:	b911      	cbnz	r1, 8004e16 <sbrk_aligned+0x12>
 8004e10:	f000 fba6 	bl	8005560 <_sbrk_r>
 8004e14:	6030      	str	r0, [r6, #0]
 8004e16:	4621      	mov	r1, r4
 8004e18:	4628      	mov	r0, r5
 8004e1a:	f000 fba1 	bl	8005560 <_sbrk_r>
 8004e1e:	1c43      	adds	r3, r0, #1
 8004e20:	d103      	bne.n	8004e2a <sbrk_aligned+0x26>
 8004e22:	f04f 34ff 	mov.w	r4, #4294967295
 8004e26:	4620      	mov	r0, r4
 8004e28:	bd70      	pop	{r4, r5, r6, pc}
 8004e2a:	1cc4      	adds	r4, r0, #3
 8004e2c:	f024 0403 	bic.w	r4, r4, #3
 8004e30:	42a0      	cmp	r0, r4
 8004e32:	d0f8      	beq.n	8004e26 <sbrk_aligned+0x22>
 8004e34:	1a21      	subs	r1, r4, r0
 8004e36:	4628      	mov	r0, r5
 8004e38:	f000 fb92 	bl	8005560 <_sbrk_r>
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	d1f2      	bne.n	8004e26 <sbrk_aligned+0x22>
 8004e40:	e7ef      	b.n	8004e22 <sbrk_aligned+0x1e>
 8004e42:	bf00      	nop
 8004e44:	2000081c 	.word	0x2000081c

08004e48 <_malloc_r>:
 8004e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e4c:	1ccd      	adds	r5, r1, #3
 8004e4e:	f025 0503 	bic.w	r5, r5, #3
 8004e52:	3508      	adds	r5, #8
 8004e54:	2d0c      	cmp	r5, #12
 8004e56:	bf38      	it	cc
 8004e58:	250c      	movcc	r5, #12
 8004e5a:	2d00      	cmp	r5, #0
 8004e5c:	4606      	mov	r6, r0
 8004e5e:	db01      	blt.n	8004e64 <_malloc_r+0x1c>
 8004e60:	42a9      	cmp	r1, r5
 8004e62:	d904      	bls.n	8004e6e <_malloc_r+0x26>
 8004e64:	230c      	movs	r3, #12
 8004e66:	6033      	str	r3, [r6, #0]
 8004e68:	2000      	movs	r0, #0
 8004e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f44 <_malloc_r+0xfc>
 8004e72:	f000 f869 	bl	8004f48 <__malloc_lock>
 8004e76:	f8d8 3000 	ldr.w	r3, [r8]
 8004e7a:	461c      	mov	r4, r3
 8004e7c:	bb44      	cbnz	r4, 8004ed0 <_malloc_r+0x88>
 8004e7e:	4629      	mov	r1, r5
 8004e80:	4630      	mov	r0, r6
 8004e82:	f7ff ffbf 	bl	8004e04 <sbrk_aligned>
 8004e86:	1c43      	adds	r3, r0, #1
 8004e88:	4604      	mov	r4, r0
 8004e8a:	d158      	bne.n	8004f3e <_malloc_r+0xf6>
 8004e8c:	f8d8 4000 	ldr.w	r4, [r8]
 8004e90:	4627      	mov	r7, r4
 8004e92:	2f00      	cmp	r7, #0
 8004e94:	d143      	bne.n	8004f1e <_malloc_r+0xd6>
 8004e96:	2c00      	cmp	r4, #0
 8004e98:	d04b      	beq.n	8004f32 <_malloc_r+0xea>
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	4639      	mov	r1, r7
 8004e9e:	4630      	mov	r0, r6
 8004ea0:	eb04 0903 	add.w	r9, r4, r3
 8004ea4:	f000 fb5c 	bl	8005560 <_sbrk_r>
 8004ea8:	4581      	cmp	r9, r0
 8004eaa:	d142      	bne.n	8004f32 <_malloc_r+0xea>
 8004eac:	6821      	ldr	r1, [r4, #0]
 8004eae:	1a6d      	subs	r5, r5, r1
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	f7ff ffa6 	bl	8004e04 <sbrk_aligned>
 8004eb8:	3001      	adds	r0, #1
 8004eba:	d03a      	beq.n	8004f32 <_malloc_r+0xea>
 8004ebc:	6823      	ldr	r3, [r4, #0]
 8004ebe:	442b      	add	r3, r5
 8004ec0:	6023      	str	r3, [r4, #0]
 8004ec2:	f8d8 3000 	ldr.w	r3, [r8]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	bb62      	cbnz	r2, 8004f24 <_malloc_r+0xdc>
 8004eca:	f8c8 7000 	str.w	r7, [r8]
 8004ece:	e00f      	b.n	8004ef0 <_malloc_r+0xa8>
 8004ed0:	6822      	ldr	r2, [r4, #0]
 8004ed2:	1b52      	subs	r2, r2, r5
 8004ed4:	d420      	bmi.n	8004f18 <_malloc_r+0xd0>
 8004ed6:	2a0b      	cmp	r2, #11
 8004ed8:	d917      	bls.n	8004f0a <_malloc_r+0xc2>
 8004eda:	1961      	adds	r1, r4, r5
 8004edc:	42a3      	cmp	r3, r4
 8004ede:	6025      	str	r5, [r4, #0]
 8004ee0:	bf18      	it	ne
 8004ee2:	6059      	strne	r1, [r3, #4]
 8004ee4:	6863      	ldr	r3, [r4, #4]
 8004ee6:	bf08      	it	eq
 8004ee8:	f8c8 1000 	streq.w	r1, [r8]
 8004eec:	5162      	str	r2, [r4, r5]
 8004eee:	604b      	str	r3, [r1, #4]
 8004ef0:	4630      	mov	r0, r6
 8004ef2:	f000 f82f 	bl	8004f54 <__malloc_unlock>
 8004ef6:	f104 000b 	add.w	r0, r4, #11
 8004efa:	1d23      	adds	r3, r4, #4
 8004efc:	f020 0007 	bic.w	r0, r0, #7
 8004f00:	1ac2      	subs	r2, r0, r3
 8004f02:	bf1c      	itt	ne
 8004f04:	1a1b      	subne	r3, r3, r0
 8004f06:	50a3      	strne	r3, [r4, r2]
 8004f08:	e7af      	b.n	8004e6a <_malloc_r+0x22>
 8004f0a:	6862      	ldr	r2, [r4, #4]
 8004f0c:	42a3      	cmp	r3, r4
 8004f0e:	bf0c      	ite	eq
 8004f10:	f8c8 2000 	streq.w	r2, [r8]
 8004f14:	605a      	strne	r2, [r3, #4]
 8004f16:	e7eb      	b.n	8004ef0 <_malloc_r+0xa8>
 8004f18:	4623      	mov	r3, r4
 8004f1a:	6864      	ldr	r4, [r4, #4]
 8004f1c:	e7ae      	b.n	8004e7c <_malloc_r+0x34>
 8004f1e:	463c      	mov	r4, r7
 8004f20:	687f      	ldr	r7, [r7, #4]
 8004f22:	e7b6      	b.n	8004e92 <_malloc_r+0x4a>
 8004f24:	461a      	mov	r2, r3
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	42a3      	cmp	r3, r4
 8004f2a:	d1fb      	bne.n	8004f24 <_malloc_r+0xdc>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	6053      	str	r3, [r2, #4]
 8004f30:	e7de      	b.n	8004ef0 <_malloc_r+0xa8>
 8004f32:	230c      	movs	r3, #12
 8004f34:	6033      	str	r3, [r6, #0]
 8004f36:	4630      	mov	r0, r6
 8004f38:	f000 f80c 	bl	8004f54 <__malloc_unlock>
 8004f3c:	e794      	b.n	8004e68 <_malloc_r+0x20>
 8004f3e:	6005      	str	r5, [r0, #0]
 8004f40:	e7d6      	b.n	8004ef0 <_malloc_r+0xa8>
 8004f42:	bf00      	nop
 8004f44:	20000820 	.word	0x20000820

08004f48 <__malloc_lock>:
 8004f48:	4801      	ldr	r0, [pc, #4]	@ (8004f50 <__malloc_lock+0x8>)
 8004f4a:	f7ff bf0f 	b.w	8004d6c <__retarget_lock_acquire_recursive>
 8004f4e:	bf00      	nop
 8004f50:	20000818 	.word	0x20000818

08004f54 <__malloc_unlock>:
 8004f54:	4801      	ldr	r0, [pc, #4]	@ (8004f5c <__malloc_unlock+0x8>)
 8004f56:	f7ff bf0a 	b.w	8004d6e <__retarget_lock_release_recursive>
 8004f5a:	bf00      	nop
 8004f5c:	20000818 	.word	0x20000818

08004f60 <__ssputs_r>:
 8004f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f64:	688e      	ldr	r6, [r1, #8]
 8004f66:	461f      	mov	r7, r3
 8004f68:	42be      	cmp	r6, r7
 8004f6a:	680b      	ldr	r3, [r1, #0]
 8004f6c:	4682      	mov	sl, r0
 8004f6e:	460c      	mov	r4, r1
 8004f70:	4690      	mov	r8, r2
 8004f72:	d82d      	bhi.n	8004fd0 <__ssputs_r+0x70>
 8004f74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004f7c:	d026      	beq.n	8004fcc <__ssputs_r+0x6c>
 8004f7e:	6965      	ldr	r5, [r4, #20]
 8004f80:	6909      	ldr	r1, [r1, #16]
 8004f82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f86:	eba3 0901 	sub.w	r9, r3, r1
 8004f8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f8e:	1c7b      	adds	r3, r7, #1
 8004f90:	444b      	add	r3, r9
 8004f92:	106d      	asrs	r5, r5, #1
 8004f94:	429d      	cmp	r5, r3
 8004f96:	bf38      	it	cc
 8004f98:	461d      	movcc	r5, r3
 8004f9a:	0553      	lsls	r3, r2, #21
 8004f9c:	d527      	bpl.n	8004fee <__ssputs_r+0x8e>
 8004f9e:	4629      	mov	r1, r5
 8004fa0:	f7ff ff52 	bl	8004e48 <_malloc_r>
 8004fa4:	4606      	mov	r6, r0
 8004fa6:	b360      	cbz	r0, 8005002 <__ssputs_r+0xa2>
 8004fa8:	6921      	ldr	r1, [r4, #16]
 8004faa:	464a      	mov	r2, r9
 8004fac:	f000 fae8 	bl	8005580 <memcpy>
 8004fb0:	89a3      	ldrh	r3, [r4, #12]
 8004fb2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004fb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fba:	81a3      	strh	r3, [r4, #12]
 8004fbc:	6126      	str	r6, [r4, #16]
 8004fbe:	6165      	str	r5, [r4, #20]
 8004fc0:	444e      	add	r6, r9
 8004fc2:	eba5 0509 	sub.w	r5, r5, r9
 8004fc6:	6026      	str	r6, [r4, #0]
 8004fc8:	60a5      	str	r5, [r4, #8]
 8004fca:	463e      	mov	r6, r7
 8004fcc:	42be      	cmp	r6, r7
 8004fce:	d900      	bls.n	8004fd2 <__ssputs_r+0x72>
 8004fd0:	463e      	mov	r6, r7
 8004fd2:	6820      	ldr	r0, [r4, #0]
 8004fd4:	4632      	mov	r2, r6
 8004fd6:	4641      	mov	r1, r8
 8004fd8:	f000 faa8 	bl	800552c <memmove>
 8004fdc:	68a3      	ldr	r3, [r4, #8]
 8004fde:	1b9b      	subs	r3, r3, r6
 8004fe0:	60a3      	str	r3, [r4, #8]
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	4433      	add	r3, r6
 8004fe6:	6023      	str	r3, [r4, #0]
 8004fe8:	2000      	movs	r0, #0
 8004fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fee:	462a      	mov	r2, r5
 8004ff0:	f000 fad4 	bl	800559c <_realloc_r>
 8004ff4:	4606      	mov	r6, r0
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	d1e0      	bne.n	8004fbc <__ssputs_r+0x5c>
 8004ffa:	6921      	ldr	r1, [r4, #16]
 8004ffc:	4650      	mov	r0, sl
 8004ffe:	f7ff feb7 	bl	8004d70 <_free_r>
 8005002:	230c      	movs	r3, #12
 8005004:	f8ca 3000 	str.w	r3, [sl]
 8005008:	89a3      	ldrh	r3, [r4, #12]
 800500a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800500e:	81a3      	strh	r3, [r4, #12]
 8005010:	f04f 30ff 	mov.w	r0, #4294967295
 8005014:	e7e9      	b.n	8004fea <__ssputs_r+0x8a>
	...

08005018 <_svfiprintf_r>:
 8005018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501c:	4698      	mov	r8, r3
 800501e:	898b      	ldrh	r3, [r1, #12]
 8005020:	061b      	lsls	r3, r3, #24
 8005022:	b09d      	sub	sp, #116	@ 0x74
 8005024:	4607      	mov	r7, r0
 8005026:	460d      	mov	r5, r1
 8005028:	4614      	mov	r4, r2
 800502a:	d510      	bpl.n	800504e <_svfiprintf_r+0x36>
 800502c:	690b      	ldr	r3, [r1, #16]
 800502e:	b973      	cbnz	r3, 800504e <_svfiprintf_r+0x36>
 8005030:	2140      	movs	r1, #64	@ 0x40
 8005032:	f7ff ff09 	bl	8004e48 <_malloc_r>
 8005036:	6028      	str	r0, [r5, #0]
 8005038:	6128      	str	r0, [r5, #16]
 800503a:	b930      	cbnz	r0, 800504a <_svfiprintf_r+0x32>
 800503c:	230c      	movs	r3, #12
 800503e:	603b      	str	r3, [r7, #0]
 8005040:	f04f 30ff 	mov.w	r0, #4294967295
 8005044:	b01d      	add	sp, #116	@ 0x74
 8005046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800504a:	2340      	movs	r3, #64	@ 0x40
 800504c:	616b      	str	r3, [r5, #20]
 800504e:	2300      	movs	r3, #0
 8005050:	9309      	str	r3, [sp, #36]	@ 0x24
 8005052:	2320      	movs	r3, #32
 8005054:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005058:	f8cd 800c 	str.w	r8, [sp, #12]
 800505c:	2330      	movs	r3, #48	@ 0x30
 800505e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80051fc <_svfiprintf_r+0x1e4>
 8005062:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005066:	f04f 0901 	mov.w	r9, #1
 800506a:	4623      	mov	r3, r4
 800506c:	469a      	mov	sl, r3
 800506e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005072:	b10a      	cbz	r2, 8005078 <_svfiprintf_r+0x60>
 8005074:	2a25      	cmp	r2, #37	@ 0x25
 8005076:	d1f9      	bne.n	800506c <_svfiprintf_r+0x54>
 8005078:	ebba 0b04 	subs.w	fp, sl, r4
 800507c:	d00b      	beq.n	8005096 <_svfiprintf_r+0x7e>
 800507e:	465b      	mov	r3, fp
 8005080:	4622      	mov	r2, r4
 8005082:	4629      	mov	r1, r5
 8005084:	4638      	mov	r0, r7
 8005086:	f7ff ff6b 	bl	8004f60 <__ssputs_r>
 800508a:	3001      	adds	r0, #1
 800508c:	f000 80a7 	beq.w	80051de <_svfiprintf_r+0x1c6>
 8005090:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005092:	445a      	add	r2, fp
 8005094:	9209      	str	r2, [sp, #36]	@ 0x24
 8005096:	f89a 3000 	ldrb.w	r3, [sl]
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 809f 	beq.w	80051de <_svfiprintf_r+0x1c6>
 80050a0:	2300      	movs	r3, #0
 80050a2:	f04f 32ff 	mov.w	r2, #4294967295
 80050a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050aa:	f10a 0a01 	add.w	sl, sl, #1
 80050ae:	9304      	str	r3, [sp, #16]
 80050b0:	9307      	str	r3, [sp, #28]
 80050b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80050b8:	4654      	mov	r4, sl
 80050ba:	2205      	movs	r2, #5
 80050bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050c0:	484e      	ldr	r0, [pc, #312]	@ (80051fc <_svfiprintf_r+0x1e4>)
 80050c2:	f7fb f89d 	bl	8000200 <memchr>
 80050c6:	9a04      	ldr	r2, [sp, #16]
 80050c8:	b9d8      	cbnz	r0, 8005102 <_svfiprintf_r+0xea>
 80050ca:	06d0      	lsls	r0, r2, #27
 80050cc:	bf44      	itt	mi
 80050ce:	2320      	movmi	r3, #32
 80050d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050d4:	0711      	lsls	r1, r2, #28
 80050d6:	bf44      	itt	mi
 80050d8:	232b      	movmi	r3, #43	@ 0x2b
 80050da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050de:	f89a 3000 	ldrb.w	r3, [sl]
 80050e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80050e4:	d015      	beq.n	8005112 <_svfiprintf_r+0xfa>
 80050e6:	9a07      	ldr	r2, [sp, #28]
 80050e8:	4654      	mov	r4, sl
 80050ea:	2000      	movs	r0, #0
 80050ec:	f04f 0c0a 	mov.w	ip, #10
 80050f0:	4621      	mov	r1, r4
 80050f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050f6:	3b30      	subs	r3, #48	@ 0x30
 80050f8:	2b09      	cmp	r3, #9
 80050fa:	d94b      	bls.n	8005194 <_svfiprintf_r+0x17c>
 80050fc:	b1b0      	cbz	r0, 800512c <_svfiprintf_r+0x114>
 80050fe:	9207      	str	r2, [sp, #28]
 8005100:	e014      	b.n	800512c <_svfiprintf_r+0x114>
 8005102:	eba0 0308 	sub.w	r3, r0, r8
 8005106:	fa09 f303 	lsl.w	r3, r9, r3
 800510a:	4313      	orrs	r3, r2
 800510c:	9304      	str	r3, [sp, #16]
 800510e:	46a2      	mov	sl, r4
 8005110:	e7d2      	b.n	80050b8 <_svfiprintf_r+0xa0>
 8005112:	9b03      	ldr	r3, [sp, #12]
 8005114:	1d19      	adds	r1, r3, #4
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	9103      	str	r1, [sp, #12]
 800511a:	2b00      	cmp	r3, #0
 800511c:	bfbb      	ittet	lt
 800511e:	425b      	neglt	r3, r3
 8005120:	f042 0202 	orrlt.w	r2, r2, #2
 8005124:	9307      	strge	r3, [sp, #28]
 8005126:	9307      	strlt	r3, [sp, #28]
 8005128:	bfb8      	it	lt
 800512a:	9204      	strlt	r2, [sp, #16]
 800512c:	7823      	ldrb	r3, [r4, #0]
 800512e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005130:	d10a      	bne.n	8005148 <_svfiprintf_r+0x130>
 8005132:	7863      	ldrb	r3, [r4, #1]
 8005134:	2b2a      	cmp	r3, #42	@ 0x2a
 8005136:	d132      	bne.n	800519e <_svfiprintf_r+0x186>
 8005138:	9b03      	ldr	r3, [sp, #12]
 800513a:	1d1a      	adds	r2, r3, #4
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	9203      	str	r2, [sp, #12]
 8005140:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005144:	3402      	adds	r4, #2
 8005146:	9305      	str	r3, [sp, #20]
 8005148:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800520c <_svfiprintf_r+0x1f4>
 800514c:	7821      	ldrb	r1, [r4, #0]
 800514e:	2203      	movs	r2, #3
 8005150:	4650      	mov	r0, sl
 8005152:	f7fb f855 	bl	8000200 <memchr>
 8005156:	b138      	cbz	r0, 8005168 <_svfiprintf_r+0x150>
 8005158:	9b04      	ldr	r3, [sp, #16]
 800515a:	eba0 000a 	sub.w	r0, r0, sl
 800515e:	2240      	movs	r2, #64	@ 0x40
 8005160:	4082      	lsls	r2, r0
 8005162:	4313      	orrs	r3, r2
 8005164:	3401      	adds	r4, #1
 8005166:	9304      	str	r3, [sp, #16]
 8005168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800516c:	4824      	ldr	r0, [pc, #144]	@ (8005200 <_svfiprintf_r+0x1e8>)
 800516e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005172:	2206      	movs	r2, #6
 8005174:	f7fb f844 	bl	8000200 <memchr>
 8005178:	2800      	cmp	r0, #0
 800517a:	d036      	beq.n	80051ea <_svfiprintf_r+0x1d2>
 800517c:	4b21      	ldr	r3, [pc, #132]	@ (8005204 <_svfiprintf_r+0x1ec>)
 800517e:	bb1b      	cbnz	r3, 80051c8 <_svfiprintf_r+0x1b0>
 8005180:	9b03      	ldr	r3, [sp, #12]
 8005182:	3307      	adds	r3, #7
 8005184:	f023 0307 	bic.w	r3, r3, #7
 8005188:	3308      	adds	r3, #8
 800518a:	9303      	str	r3, [sp, #12]
 800518c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800518e:	4433      	add	r3, r6
 8005190:	9309      	str	r3, [sp, #36]	@ 0x24
 8005192:	e76a      	b.n	800506a <_svfiprintf_r+0x52>
 8005194:	fb0c 3202 	mla	r2, ip, r2, r3
 8005198:	460c      	mov	r4, r1
 800519a:	2001      	movs	r0, #1
 800519c:	e7a8      	b.n	80050f0 <_svfiprintf_r+0xd8>
 800519e:	2300      	movs	r3, #0
 80051a0:	3401      	adds	r4, #1
 80051a2:	9305      	str	r3, [sp, #20]
 80051a4:	4619      	mov	r1, r3
 80051a6:	f04f 0c0a 	mov.w	ip, #10
 80051aa:	4620      	mov	r0, r4
 80051ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051b0:	3a30      	subs	r2, #48	@ 0x30
 80051b2:	2a09      	cmp	r2, #9
 80051b4:	d903      	bls.n	80051be <_svfiprintf_r+0x1a6>
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0c6      	beq.n	8005148 <_svfiprintf_r+0x130>
 80051ba:	9105      	str	r1, [sp, #20]
 80051bc:	e7c4      	b.n	8005148 <_svfiprintf_r+0x130>
 80051be:	fb0c 2101 	mla	r1, ip, r1, r2
 80051c2:	4604      	mov	r4, r0
 80051c4:	2301      	movs	r3, #1
 80051c6:	e7f0      	b.n	80051aa <_svfiprintf_r+0x192>
 80051c8:	ab03      	add	r3, sp, #12
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	462a      	mov	r2, r5
 80051ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005208 <_svfiprintf_r+0x1f0>)
 80051d0:	a904      	add	r1, sp, #16
 80051d2:	4638      	mov	r0, r7
 80051d4:	f3af 8000 	nop.w
 80051d8:	1c42      	adds	r2, r0, #1
 80051da:	4606      	mov	r6, r0
 80051dc:	d1d6      	bne.n	800518c <_svfiprintf_r+0x174>
 80051de:	89ab      	ldrh	r3, [r5, #12]
 80051e0:	065b      	lsls	r3, r3, #25
 80051e2:	f53f af2d 	bmi.w	8005040 <_svfiprintf_r+0x28>
 80051e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051e8:	e72c      	b.n	8005044 <_svfiprintf_r+0x2c>
 80051ea:	ab03      	add	r3, sp, #12
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	462a      	mov	r2, r5
 80051f0:	4b05      	ldr	r3, [pc, #20]	@ (8005208 <_svfiprintf_r+0x1f0>)
 80051f2:	a904      	add	r1, sp, #16
 80051f4:	4638      	mov	r0, r7
 80051f6:	f000 f879 	bl	80052ec <_printf_i>
 80051fa:	e7ed      	b.n	80051d8 <_svfiprintf_r+0x1c0>
 80051fc:	080056d4 	.word	0x080056d4
 8005200:	080056de 	.word	0x080056de
 8005204:	00000000 	.word	0x00000000
 8005208:	08004f61 	.word	0x08004f61
 800520c:	080056da 	.word	0x080056da

08005210 <_printf_common>:
 8005210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005214:	4616      	mov	r6, r2
 8005216:	4698      	mov	r8, r3
 8005218:	688a      	ldr	r2, [r1, #8]
 800521a:	690b      	ldr	r3, [r1, #16]
 800521c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005220:	4293      	cmp	r3, r2
 8005222:	bfb8      	it	lt
 8005224:	4613      	movlt	r3, r2
 8005226:	6033      	str	r3, [r6, #0]
 8005228:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800522c:	4607      	mov	r7, r0
 800522e:	460c      	mov	r4, r1
 8005230:	b10a      	cbz	r2, 8005236 <_printf_common+0x26>
 8005232:	3301      	adds	r3, #1
 8005234:	6033      	str	r3, [r6, #0]
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	0699      	lsls	r1, r3, #26
 800523a:	bf42      	ittt	mi
 800523c:	6833      	ldrmi	r3, [r6, #0]
 800523e:	3302      	addmi	r3, #2
 8005240:	6033      	strmi	r3, [r6, #0]
 8005242:	6825      	ldr	r5, [r4, #0]
 8005244:	f015 0506 	ands.w	r5, r5, #6
 8005248:	d106      	bne.n	8005258 <_printf_common+0x48>
 800524a:	f104 0a19 	add.w	sl, r4, #25
 800524e:	68e3      	ldr	r3, [r4, #12]
 8005250:	6832      	ldr	r2, [r6, #0]
 8005252:	1a9b      	subs	r3, r3, r2
 8005254:	42ab      	cmp	r3, r5
 8005256:	dc26      	bgt.n	80052a6 <_printf_common+0x96>
 8005258:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800525c:	6822      	ldr	r2, [r4, #0]
 800525e:	3b00      	subs	r3, #0
 8005260:	bf18      	it	ne
 8005262:	2301      	movne	r3, #1
 8005264:	0692      	lsls	r2, r2, #26
 8005266:	d42b      	bmi.n	80052c0 <_printf_common+0xb0>
 8005268:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800526c:	4641      	mov	r1, r8
 800526e:	4638      	mov	r0, r7
 8005270:	47c8      	blx	r9
 8005272:	3001      	adds	r0, #1
 8005274:	d01e      	beq.n	80052b4 <_printf_common+0xa4>
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	6922      	ldr	r2, [r4, #16]
 800527a:	f003 0306 	and.w	r3, r3, #6
 800527e:	2b04      	cmp	r3, #4
 8005280:	bf02      	ittt	eq
 8005282:	68e5      	ldreq	r5, [r4, #12]
 8005284:	6833      	ldreq	r3, [r6, #0]
 8005286:	1aed      	subeq	r5, r5, r3
 8005288:	68a3      	ldr	r3, [r4, #8]
 800528a:	bf0c      	ite	eq
 800528c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005290:	2500      	movne	r5, #0
 8005292:	4293      	cmp	r3, r2
 8005294:	bfc4      	itt	gt
 8005296:	1a9b      	subgt	r3, r3, r2
 8005298:	18ed      	addgt	r5, r5, r3
 800529a:	2600      	movs	r6, #0
 800529c:	341a      	adds	r4, #26
 800529e:	42b5      	cmp	r5, r6
 80052a0:	d11a      	bne.n	80052d8 <_printf_common+0xc8>
 80052a2:	2000      	movs	r0, #0
 80052a4:	e008      	b.n	80052b8 <_printf_common+0xa8>
 80052a6:	2301      	movs	r3, #1
 80052a8:	4652      	mov	r2, sl
 80052aa:	4641      	mov	r1, r8
 80052ac:	4638      	mov	r0, r7
 80052ae:	47c8      	blx	r9
 80052b0:	3001      	adds	r0, #1
 80052b2:	d103      	bne.n	80052bc <_printf_common+0xac>
 80052b4:	f04f 30ff 	mov.w	r0, #4294967295
 80052b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052bc:	3501      	adds	r5, #1
 80052be:	e7c6      	b.n	800524e <_printf_common+0x3e>
 80052c0:	18e1      	adds	r1, r4, r3
 80052c2:	1c5a      	adds	r2, r3, #1
 80052c4:	2030      	movs	r0, #48	@ 0x30
 80052c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052ca:	4422      	add	r2, r4
 80052cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80052d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052d4:	3302      	adds	r3, #2
 80052d6:	e7c7      	b.n	8005268 <_printf_common+0x58>
 80052d8:	2301      	movs	r3, #1
 80052da:	4622      	mov	r2, r4
 80052dc:	4641      	mov	r1, r8
 80052de:	4638      	mov	r0, r7
 80052e0:	47c8      	blx	r9
 80052e2:	3001      	adds	r0, #1
 80052e4:	d0e6      	beq.n	80052b4 <_printf_common+0xa4>
 80052e6:	3601      	adds	r6, #1
 80052e8:	e7d9      	b.n	800529e <_printf_common+0x8e>
	...

080052ec <_printf_i>:
 80052ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052f0:	7e0f      	ldrb	r7, [r1, #24]
 80052f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052f4:	2f78      	cmp	r7, #120	@ 0x78
 80052f6:	4691      	mov	r9, r2
 80052f8:	4680      	mov	r8, r0
 80052fa:	460c      	mov	r4, r1
 80052fc:	469a      	mov	sl, r3
 80052fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005302:	d807      	bhi.n	8005314 <_printf_i+0x28>
 8005304:	2f62      	cmp	r7, #98	@ 0x62
 8005306:	d80a      	bhi.n	800531e <_printf_i+0x32>
 8005308:	2f00      	cmp	r7, #0
 800530a:	f000 80d2 	beq.w	80054b2 <_printf_i+0x1c6>
 800530e:	2f58      	cmp	r7, #88	@ 0x58
 8005310:	f000 80b9 	beq.w	8005486 <_printf_i+0x19a>
 8005314:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005318:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800531c:	e03a      	b.n	8005394 <_printf_i+0xa8>
 800531e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005322:	2b15      	cmp	r3, #21
 8005324:	d8f6      	bhi.n	8005314 <_printf_i+0x28>
 8005326:	a101      	add	r1, pc, #4	@ (adr r1, 800532c <_printf_i+0x40>)
 8005328:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800532c:	08005385 	.word	0x08005385
 8005330:	08005399 	.word	0x08005399
 8005334:	08005315 	.word	0x08005315
 8005338:	08005315 	.word	0x08005315
 800533c:	08005315 	.word	0x08005315
 8005340:	08005315 	.word	0x08005315
 8005344:	08005399 	.word	0x08005399
 8005348:	08005315 	.word	0x08005315
 800534c:	08005315 	.word	0x08005315
 8005350:	08005315 	.word	0x08005315
 8005354:	08005315 	.word	0x08005315
 8005358:	08005499 	.word	0x08005499
 800535c:	080053c3 	.word	0x080053c3
 8005360:	08005453 	.word	0x08005453
 8005364:	08005315 	.word	0x08005315
 8005368:	08005315 	.word	0x08005315
 800536c:	080054bb 	.word	0x080054bb
 8005370:	08005315 	.word	0x08005315
 8005374:	080053c3 	.word	0x080053c3
 8005378:	08005315 	.word	0x08005315
 800537c:	08005315 	.word	0x08005315
 8005380:	0800545b 	.word	0x0800545b
 8005384:	6833      	ldr	r3, [r6, #0]
 8005386:	1d1a      	adds	r2, r3, #4
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6032      	str	r2, [r6, #0]
 800538c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005390:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005394:	2301      	movs	r3, #1
 8005396:	e09d      	b.n	80054d4 <_printf_i+0x1e8>
 8005398:	6833      	ldr	r3, [r6, #0]
 800539a:	6820      	ldr	r0, [r4, #0]
 800539c:	1d19      	adds	r1, r3, #4
 800539e:	6031      	str	r1, [r6, #0]
 80053a0:	0606      	lsls	r6, r0, #24
 80053a2:	d501      	bpl.n	80053a8 <_printf_i+0xbc>
 80053a4:	681d      	ldr	r5, [r3, #0]
 80053a6:	e003      	b.n	80053b0 <_printf_i+0xc4>
 80053a8:	0645      	lsls	r5, r0, #25
 80053aa:	d5fb      	bpl.n	80053a4 <_printf_i+0xb8>
 80053ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053b0:	2d00      	cmp	r5, #0
 80053b2:	da03      	bge.n	80053bc <_printf_i+0xd0>
 80053b4:	232d      	movs	r3, #45	@ 0x2d
 80053b6:	426d      	negs	r5, r5
 80053b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053bc:	4859      	ldr	r0, [pc, #356]	@ (8005524 <_printf_i+0x238>)
 80053be:	230a      	movs	r3, #10
 80053c0:	e011      	b.n	80053e6 <_printf_i+0xfa>
 80053c2:	6821      	ldr	r1, [r4, #0]
 80053c4:	6833      	ldr	r3, [r6, #0]
 80053c6:	0608      	lsls	r0, r1, #24
 80053c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80053cc:	d402      	bmi.n	80053d4 <_printf_i+0xe8>
 80053ce:	0649      	lsls	r1, r1, #25
 80053d0:	bf48      	it	mi
 80053d2:	b2ad      	uxthmi	r5, r5
 80053d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80053d6:	4853      	ldr	r0, [pc, #332]	@ (8005524 <_printf_i+0x238>)
 80053d8:	6033      	str	r3, [r6, #0]
 80053da:	bf14      	ite	ne
 80053dc:	230a      	movne	r3, #10
 80053de:	2308      	moveq	r3, #8
 80053e0:	2100      	movs	r1, #0
 80053e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053e6:	6866      	ldr	r6, [r4, #4]
 80053e8:	60a6      	str	r6, [r4, #8]
 80053ea:	2e00      	cmp	r6, #0
 80053ec:	bfa2      	ittt	ge
 80053ee:	6821      	ldrge	r1, [r4, #0]
 80053f0:	f021 0104 	bicge.w	r1, r1, #4
 80053f4:	6021      	strge	r1, [r4, #0]
 80053f6:	b90d      	cbnz	r5, 80053fc <_printf_i+0x110>
 80053f8:	2e00      	cmp	r6, #0
 80053fa:	d04b      	beq.n	8005494 <_printf_i+0x1a8>
 80053fc:	4616      	mov	r6, r2
 80053fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8005402:	fb03 5711 	mls	r7, r3, r1, r5
 8005406:	5dc7      	ldrb	r7, [r0, r7]
 8005408:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800540c:	462f      	mov	r7, r5
 800540e:	42bb      	cmp	r3, r7
 8005410:	460d      	mov	r5, r1
 8005412:	d9f4      	bls.n	80053fe <_printf_i+0x112>
 8005414:	2b08      	cmp	r3, #8
 8005416:	d10b      	bne.n	8005430 <_printf_i+0x144>
 8005418:	6823      	ldr	r3, [r4, #0]
 800541a:	07df      	lsls	r7, r3, #31
 800541c:	d508      	bpl.n	8005430 <_printf_i+0x144>
 800541e:	6923      	ldr	r3, [r4, #16]
 8005420:	6861      	ldr	r1, [r4, #4]
 8005422:	4299      	cmp	r1, r3
 8005424:	bfde      	ittt	le
 8005426:	2330      	movle	r3, #48	@ 0x30
 8005428:	f806 3c01 	strble.w	r3, [r6, #-1]
 800542c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005430:	1b92      	subs	r2, r2, r6
 8005432:	6122      	str	r2, [r4, #16]
 8005434:	f8cd a000 	str.w	sl, [sp]
 8005438:	464b      	mov	r3, r9
 800543a:	aa03      	add	r2, sp, #12
 800543c:	4621      	mov	r1, r4
 800543e:	4640      	mov	r0, r8
 8005440:	f7ff fee6 	bl	8005210 <_printf_common>
 8005444:	3001      	adds	r0, #1
 8005446:	d14a      	bne.n	80054de <_printf_i+0x1f2>
 8005448:	f04f 30ff 	mov.w	r0, #4294967295
 800544c:	b004      	add	sp, #16
 800544e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	f043 0320 	orr.w	r3, r3, #32
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	4833      	ldr	r0, [pc, #204]	@ (8005528 <_printf_i+0x23c>)
 800545c:	2778      	movs	r7, #120	@ 0x78
 800545e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	6831      	ldr	r1, [r6, #0]
 8005466:	061f      	lsls	r7, r3, #24
 8005468:	f851 5b04 	ldr.w	r5, [r1], #4
 800546c:	d402      	bmi.n	8005474 <_printf_i+0x188>
 800546e:	065f      	lsls	r7, r3, #25
 8005470:	bf48      	it	mi
 8005472:	b2ad      	uxthmi	r5, r5
 8005474:	6031      	str	r1, [r6, #0]
 8005476:	07d9      	lsls	r1, r3, #31
 8005478:	bf44      	itt	mi
 800547a:	f043 0320 	orrmi.w	r3, r3, #32
 800547e:	6023      	strmi	r3, [r4, #0]
 8005480:	b11d      	cbz	r5, 800548a <_printf_i+0x19e>
 8005482:	2310      	movs	r3, #16
 8005484:	e7ac      	b.n	80053e0 <_printf_i+0xf4>
 8005486:	4827      	ldr	r0, [pc, #156]	@ (8005524 <_printf_i+0x238>)
 8005488:	e7e9      	b.n	800545e <_printf_i+0x172>
 800548a:	6823      	ldr	r3, [r4, #0]
 800548c:	f023 0320 	bic.w	r3, r3, #32
 8005490:	6023      	str	r3, [r4, #0]
 8005492:	e7f6      	b.n	8005482 <_printf_i+0x196>
 8005494:	4616      	mov	r6, r2
 8005496:	e7bd      	b.n	8005414 <_printf_i+0x128>
 8005498:	6833      	ldr	r3, [r6, #0]
 800549a:	6825      	ldr	r5, [r4, #0]
 800549c:	6961      	ldr	r1, [r4, #20]
 800549e:	1d18      	adds	r0, r3, #4
 80054a0:	6030      	str	r0, [r6, #0]
 80054a2:	062e      	lsls	r6, r5, #24
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	d501      	bpl.n	80054ac <_printf_i+0x1c0>
 80054a8:	6019      	str	r1, [r3, #0]
 80054aa:	e002      	b.n	80054b2 <_printf_i+0x1c6>
 80054ac:	0668      	lsls	r0, r5, #25
 80054ae:	d5fb      	bpl.n	80054a8 <_printf_i+0x1bc>
 80054b0:	8019      	strh	r1, [r3, #0]
 80054b2:	2300      	movs	r3, #0
 80054b4:	6123      	str	r3, [r4, #16]
 80054b6:	4616      	mov	r6, r2
 80054b8:	e7bc      	b.n	8005434 <_printf_i+0x148>
 80054ba:	6833      	ldr	r3, [r6, #0]
 80054bc:	1d1a      	adds	r2, r3, #4
 80054be:	6032      	str	r2, [r6, #0]
 80054c0:	681e      	ldr	r6, [r3, #0]
 80054c2:	6862      	ldr	r2, [r4, #4]
 80054c4:	2100      	movs	r1, #0
 80054c6:	4630      	mov	r0, r6
 80054c8:	f7fa fe9a 	bl	8000200 <memchr>
 80054cc:	b108      	cbz	r0, 80054d2 <_printf_i+0x1e6>
 80054ce:	1b80      	subs	r0, r0, r6
 80054d0:	6060      	str	r0, [r4, #4]
 80054d2:	6863      	ldr	r3, [r4, #4]
 80054d4:	6123      	str	r3, [r4, #16]
 80054d6:	2300      	movs	r3, #0
 80054d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054dc:	e7aa      	b.n	8005434 <_printf_i+0x148>
 80054de:	6923      	ldr	r3, [r4, #16]
 80054e0:	4632      	mov	r2, r6
 80054e2:	4649      	mov	r1, r9
 80054e4:	4640      	mov	r0, r8
 80054e6:	47d0      	blx	sl
 80054e8:	3001      	adds	r0, #1
 80054ea:	d0ad      	beq.n	8005448 <_printf_i+0x15c>
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	079b      	lsls	r3, r3, #30
 80054f0:	d413      	bmi.n	800551a <_printf_i+0x22e>
 80054f2:	68e0      	ldr	r0, [r4, #12]
 80054f4:	9b03      	ldr	r3, [sp, #12]
 80054f6:	4298      	cmp	r0, r3
 80054f8:	bfb8      	it	lt
 80054fa:	4618      	movlt	r0, r3
 80054fc:	e7a6      	b.n	800544c <_printf_i+0x160>
 80054fe:	2301      	movs	r3, #1
 8005500:	4632      	mov	r2, r6
 8005502:	4649      	mov	r1, r9
 8005504:	4640      	mov	r0, r8
 8005506:	47d0      	blx	sl
 8005508:	3001      	adds	r0, #1
 800550a:	d09d      	beq.n	8005448 <_printf_i+0x15c>
 800550c:	3501      	adds	r5, #1
 800550e:	68e3      	ldr	r3, [r4, #12]
 8005510:	9903      	ldr	r1, [sp, #12]
 8005512:	1a5b      	subs	r3, r3, r1
 8005514:	42ab      	cmp	r3, r5
 8005516:	dcf2      	bgt.n	80054fe <_printf_i+0x212>
 8005518:	e7eb      	b.n	80054f2 <_printf_i+0x206>
 800551a:	2500      	movs	r5, #0
 800551c:	f104 0619 	add.w	r6, r4, #25
 8005520:	e7f5      	b.n	800550e <_printf_i+0x222>
 8005522:	bf00      	nop
 8005524:	080056e5 	.word	0x080056e5
 8005528:	080056f6 	.word	0x080056f6

0800552c <memmove>:
 800552c:	4288      	cmp	r0, r1
 800552e:	b510      	push	{r4, lr}
 8005530:	eb01 0402 	add.w	r4, r1, r2
 8005534:	d902      	bls.n	800553c <memmove+0x10>
 8005536:	4284      	cmp	r4, r0
 8005538:	4623      	mov	r3, r4
 800553a:	d807      	bhi.n	800554c <memmove+0x20>
 800553c:	1e43      	subs	r3, r0, #1
 800553e:	42a1      	cmp	r1, r4
 8005540:	d008      	beq.n	8005554 <memmove+0x28>
 8005542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005546:	f803 2f01 	strb.w	r2, [r3, #1]!
 800554a:	e7f8      	b.n	800553e <memmove+0x12>
 800554c:	4402      	add	r2, r0
 800554e:	4601      	mov	r1, r0
 8005550:	428a      	cmp	r2, r1
 8005552:	d100      	bne.n	8005556 <memmove+0x2a>
 8005554:	bd10      	pop	{r4, pc}
 8005556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800555a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800555e:	e7f7      	b.n	8005550 <memmove+0x24>

08005560 <_sbrk_r>:
 8005560:	b538      	push	{r3, r4, r5, lr}
 8005562:	4d06      	ldr	r5, [pc, #24]	@ (800557c <_sbrk_r+0x1c>)
 8005564:	2300      	movs	r3, #0
 8005566:	4604      	mov	r4, r0
 8005568:	4608      	mov	r0, r1
 800556a:	602b      	str	r3, [r5, #0]
 800556c:	f7fb fcf4 	bl	8000f58 <_sbrk>
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	d102      	bne.n	800557a <_sbrk_r+0x1a>
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	b103      	cbz	r3, 800557a <_sbrk_r+0x1a>
 8005578:	6023      	str	r3, [r4, #0]
 800557a:	bd38      	pop	{r3, r4, r5, pc}
 800557c:	20000814 	.word	0x20000814

08005580 <memcpy>:
 8005580:	440a      	add	r2, r1
 8005582:	4291      	cmp	r1, r2
 8005584:	f100 33ff 	add.w	r3, r0, #4294967295
 8005588:	d100      	bne.n	800558c <memcpy+0xc>
 800558a:	4770      	bx	lr
 800558c:	b510      	push	{r4, lr}
 800558e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005592:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005596:	4291      	cmp	r1, r2
 8005598:	d1f9      	bne.n	800558e <memcpy+0xe>
 800559a:	bd10      	pop	{r4, pc}

0800559c <_realloc_r>:
 800559c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055a0:	4680      	mov	r8, r0
 80055a2:	4615      	mov	r5, r2
 80055a4:	460c      	mov	r4, r1
 80055a6:	b921      	cbnz	r1, 80055b2 <_realloc_r+0x16>
 80055a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055ac:	4611      	mov	r1, r2
 80055ae:	f7ff bc4b 	b.w	8004e48 <_malloc_r>
 80055b2:	b92a      	cbnz	r2, 80055c0 <_realloc_r+0x24>
 80055b4:	f7ff fbdc 	bl	8004d70 <_free_r>
 80055b8:	2400      	movs	r4, #0
 80055ba:	4620      	mov	r0, r4
 80055bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055c0:	f000 f81a 	bl	80055f8 <_malloc_usable_size_r>
 80055c4:	4285      	cmp	r5, r0
 80055c6:	4606      	mov	r6, r0
 80055c8:	d802      	bhi.n	80055d0 <_realloc_r+0x34>
 80055ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80055ce:	d8f4      	bhi.n	80055ba <_realloc_r+0x1e>
 80055d0:	4629      	mov	r1, r5
 80055d2:	4640      	mov	r0, r8
 80055d4:	f7ff fc38 	bl	8004e48 <_malloc_r>
 80055d8:	4607      	mov	r7, r0
 80055da:	2800      	cmp	r0, #0
 80055dc:	d0ec      	beq.n	80055b8 <_realloc_r+0x1c>
 80055de:	42b5      	cmp	r5, r6
 80055e0:	462a      	mov	r2, r5
 80055e2:	4621      	mov	r1, r4
 80055e4:	bf28      	it	cs
 80055e6:	4632      	movcs	r2, r6
 80055e8:	f7ff ffca 	bl	8005580 <memcpy>
 80055ec:	4621      	mov	r1, r4
 80055ee:	4640      	mov	r0, r8
 80055f0:	f7ff fbbe 	bl	8004d70 <_free_r>
 80055f4:	463c      	mov	r4, r7
 80055f6:	e7e0      	b.n	80055ba <_realloc_r+0x1e>

080055f8 <_malloc_usable_size_r>:
 80055f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055fc:	1f18      	subs	r0, r3, #4
 80055fe:	2b00      	cmp	r3, #0
 8005600:	bfbc      	itt	lt
 8005602:	580b      	ldrlt	r3, [r1, r0]
 8005604:	18c0      	addlt	r0, r0, r3
 8005606:	4770      	bx	lr

08005608 <_init>:
 8005608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560a:	bf00      	nop
 800560c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800560e:	bc08      	pop	{r3}
 8005610:	469e      	mov	lr, r3
 8005612:	4770      	bx	lr

08005614 <_fini>:
 8005614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005616:	bf00      	nop
 8005618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561a:	bc08      	pop	{r3}
 800561c:	469e      	mov	lr, r3
 800561e:	4770      	bx	lr
